syntax = "proto2";

import public "common_client.proto";
import public "niuniu_server.proto";

package ddproto;

enum niuniu_enum_protoid {
    ////////////////////////////////////
    NIU_PID_HEARTBEAT = 0; //心跳协议
    NIU_PID_QUICK_CONN = 1; //
    NIU_PID_QUICK_CONN_ACK = 2; //
    NIU_PID_GAME_LOGIN = 3; //登录游戏
    NIU_PID_GAME_LOGIN_ACK = 4; //

    NIU_PID_CREATE_DESK_REQ = 5; //创建房间

    NIU_PID_ENTER_DESK_REQ = 6; //进入房间req
    NIU_PID_ENTER_DESK_ACK = 7; //进入房间ack
    NIU_PID_ENTER_DESK_BC = 8; //进入房间bc

    NIU_PID_READY_REQ = 9; //  准备
    NIU_PID_READY_BC = 10; //  准备广播

    NIU_PID_QIANGZHUANG_OT = 11; //抢庄
    NIU_PID_QIANGZHUANG_REQ = 12; //抢庄
    NIU_PID_QIANGZHUANG_BC = 13; //抢庄

    NIU_PID_JIABEI_OT = 14; //加倍
    NIU_PID_JIABEI_REQ = 15; //加倍
    NIU_PID_JIABEI_BC = 16; //加倍

    NIU_PID_BIPAI_RESULT_BC = 17;  //比牌结果

    NIU_PID_GAME_END_BC = 18;  //游戏结束，统计数据

}

//==============================创建房间===============================
message niu_create_desk_req {
    optional ProtoHeader header = 1;    // header 中传 userId
    optional niuniu_srv_desk_option option = 2;  //房间选项
}

//==============================进入房间===============================
message niu_enter_desk_req {
    optional ProtoHeader header = 1;    // header 中传 userId
    optional string deskNumber = 2;  //房间号
}

message niu_enter_desk_ack {
    optional ProtoHeader header = 1; //错误码及错误信息
    optional niuniu_client_desk deskState = 2;  //房间状态
}

message niu_enter_desk_bc {
    optional ProtoHeader header = 1;
    optional niuniu_client_user user = 2; //新增的用户
}

//=============================准备===================================
message niu_switch_ready_req {
    optional ProtoHeader header = 1;
    optional bool isReady = 2;  //准备状态：true准备 false取消准备
}

message niu_switch_ready_bc {
    optional ProtoHeader header = 1;
    optional uint32 user = 2;  //切换状态的用户
    optional bool isReady = 3;  //准备状态
}

//=============================抢庄(发牌)===================================
message niu_qiangzhuang_ot {
    optional ProtoHeader header = 1;
    optional niuniu_srv_poker pokers = 2; //发的牌
    optional int32 currCircle = 3;  //当前是第几圈
}

message niu_qiangzhuang_req {
    optional ProtoHeader header = 1;
    optional int32 score = 2;  //抢庄分数 1 2 3倍
}

message niu_qiangzhuang_res_item {
    optional uint32 user = 1;  //抢庄用户
    optional int32 score = 2;  //抢庄分数 默认为1
    optional bool isBanker = 3;  //是否成为庄家
}
//抢庄结果广播
message niu_qiangzhuang_res_bc {
    optional ProtoHeader header = 1;
    repeated niu_qiangzhuang_res_item result = 2;  //抢庄结果
}

//=============================加倍（发牌）===================================
message niu_jiabei_ot {
    optional ProtoHeader header = 1;
    optional int32 cuurBanker = 2;  //如果是抢庄模式，则加倍这一步才知道谁是庄家
    optional niuniu_srv_poker pokers = 3; //发的牌
}

message niu_jiabei_req {
    optional ProtoHeader header = 1;
    optional int32 score = 2;  //加倍分数 1 2 3倍
    optional int32 currCircle = 3;  //当前是第几圈
    optional int32 cuurBanker = 4;  //当前的庄家
}

message niu_jiabei_bc {
    optional ProtoHeader header = 1;
    optional int32 score = 2;  //加倍分数 1 2 3倍
}

//==============================跟庄家比牌结果============================
message niu_bipai_result_item {
    optional niuniu_srv_poker poker = 1;  //牌型
    optional int32 score = 2;  //得分 -2分
}

message niu_bipai_result_bc {
    repeated niu_bipai_result_item userState = 1;  //比牌结果
}

//============================10局结束统计================================

message niu_game_end {
    optional ProtoHeader header = 1;
    repeated niuniu_user_bill data = 2;  //统计数据
}

