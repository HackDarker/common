package ddproto;
// ProtoHeader 需要在每个 Message 中作为第一个字段
message ProtoHeader {
    optional string version = 1; // 版本号
    optional uint32 userId = 2; // 用户 id
    optional int32 code = 3; // result code
    optional string error = 4; // result error description
}

//这里都是通用过的一些协议
message Heartbeat {
    optional ProtoHeader header = 1;
}

//服务器信息
message ServerInfo {
    optional string ip = 1;
    optional int32 port = 2;
    optional int32 releaseTag = 3; //发布版本标志
    optional int32 currVersion = 4; //服务器的当前最新版本号
    optional int32 isUpdate = 5; //0=无需升级 1=可选升级 2=强制升级
    optional string downloadUrl = 6; //下载地址
    optional string versionInfo = 7; //版本升级描述信息
    optional int32 isMaintain = 8; //是否停服维护 1=停服维护中
    optional string maintainMsg = 9; //维护提示消息
    optional int32 status = 10; //0开启 1关闭
}

// 接入服务器
message QuickConn {
    optional ProtoHeader header = 1;
    optional string channelId = 2; //渠道号
    optional int32 gameId = 3; //游戏ID: 1德州、2麻将、3斗地主
    optional int32 currVersion = 4; //当前版本号
    optional int32 languageId = 5;
    optional uint32 userId = 6; //用户Id
}

message AckQuickConn {
    optional ProtoHeader header = 1;
    repeated ServerInfo gameServer = 2; //游戏服务器
    optional int32 serverListVersion = 3; //游戏服务器的列表是否需要更新
}

// 微信信息
message WeixinInfo {
    optional string openId = 1; // 微信授权用户唯一id
    optional string nickName = 2; // 微信昵称
    optional string headUrl = 3; // 微信头像
    optional int32 sex = 4; // 性别: 1=男  2=女
    optional string city = 5; // 城市
    optional string unionId = 6; // unionId
}

//登录的结构
message common_req_gameLogin {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
    optional int32 protoVersion = 3; // 客户端 proto version
    optional WeixinInfo wxInfo = 4; //微信登录信息
}

// 游戏登录回复
message common_ack_gameLogin {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //用户id
    optional string nickName = 3; //昵称
    optional string roomPassword = 4; // 朋友桌房间密码
    optional int64 costCreateRoom = 5; // 建房消耗钻石数
    optional int64 costRebuy = 6; // Rebuy消耗钻石数(锦标赛)
    optional bool championship = 7; // 是否是锦标赛
    optional int64 chip = 8; // 用户钻石余额
    optional int32 mailCount = 9; // 用户邮件数量:>=0 (DdzAckNotice中type=3对应的信息)
    optional string notice = 10; // 滚动公告的内容
    optional int32 gameStatus = 11; // 0：未游戏  1：正在朋友桌  2：正在锦标赛
}
//客户端请求
message common_req_logout {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
}

//服务器推
message common_ack_logout {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
}

// 反馈信息的协议
message common_req_feedback {
    optional ProtoHeader header = 1;
    optional string message = 2; //用户提交的反馈内容
}

//-------------------------------------------扑克牌相关的------------------------------------
// 房间类型枚举
//扑克花色
enum common_enum_pokerColor {
    HONGTAO = 1; //  方块
    FANGKUAI = 2; // 梅花
    HEITAO = 3; //  红桃
    MEIHUA = 4; //黑桃
    REDJOKER = 5; //大王
    BLACKBIGJOKER = 6; //小王
}

message client_base_poker {
    optional common_enum_pokerColor suit = 1; //花色: 1=黑桃 2=红桃 3=梅花 4=方块
    optional int32 num = 2; //牌值: 2-10，J、Q、K、A、小王、大王
    optional int32 id = 3; //54张牌：1-54; 0=牌背
}

//--------------------------------------------聊天的协议---------------------------------------
//聊天的内容
message common_req_message {
    optional ProtoHeader header = 1;
    optional int32 msgType = 2; //消息的类型,1,快捷,2,表情,3,自定义
    optional int32 id = 3; //只有快捷和表情的时候有用
    optional string msg = 4; //自定义的时候使用
    optional uint32 userId = 5; //发消息的人是谁
    optional int32 deskId = 6; //desk的id
    optional uint32 toUserId = 7; //收消息的人 道具时使用
}

//消息广播
message common_bc_message {
    optional ProtoHeader header = 1;
    optional int32 msgType = 2; //消息的类型,1,快捷,2,表情,3,自定义
    optional int32 id = 3; //只有快捷和表情的时候有用
    optional string msg = 4; //自定义的时候使用
    optional uint32 userId = 5; //发消息的人是谁
    optional uint32 toUserId = 6; //收消息的人 道具时使用
}

//--------------------------------------------公告的协议---------------------------------------
//请求公告
message common_req_notice {
    optional ProtoHeader header = 1;
    optional int32 noticeType = 2; //公告的类型
}

// 返回公告的内容
message common_ack_notice {
    optional ProtoHeader header = 1;
    optional int32 noticeType = 2; //公告的类型:1,滚动信息,2,充值信息,3,公告信息
    optional string noticeTitle = 3; //公告的标题
    optional string noticeContent = 4; //公告的内容
    optional string noticeMemo = 5; //公告的备注
    optional int32 id = 6; //公告的id
    repeated string fileds = 7; //公告的字段,目前子还是给充值的协议使用
}
