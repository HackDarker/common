import public "common_enum.proto";
package ddproto;
// ProtoHeader 需要在每个 Message 中作为第一个字段
message ProtoHeader {
    optional string version = 1; // 版本号
    optional uint32 userId = 2; // 用户 id
    optional int32 code = 3; // result code
    optional string error = 4; // result error description
}

//这里都是通用过的一些协议
message Heartbeat {
    optional ProtoHeader header = 1;
}

//服务器信息
message ServerInfo {
    optional string ip = 1;
    optional int32 port = 2;
    optional int32 releaseTag = 3; //发布版本标志
    optional int32 currVersion = 4; //服务器的当前最新版本号
    optional int32 isUpdate = 5; //0=无需升级 1=可选升级 2=强制升级
    optional string downloadUrl = 6; //下载地址
    optional string versionInfo = 7; //版本升级描述信息
    optional int32 isMaintain = 8; //是否停服维护 1=停服维护中
    optional string maintainMsg = 9; //维护提示消息
    optional int32 status = 10; //0开启 1关闭
    optional int32 gameId = 11; //0开启 1关闭
}

// 接入服务器
message QuickConn {
    optional ProtoHeader header = 1;
    optional string channelId = 2; //渠道号
    optional int32 gameId = 3; //游戏ID: 1德州、2麻将、3斗地主
    optional int32 currVersion = 4; //当前版本号
    optional int32 languageId = 5;
    optional uint32 userId = 6; //用户Id
}

message AckQuickConn {
    optional ProtoHeader header = 1;
    repeated ServerInfo gameServer = 2; //游戏服务器
    optional int32 serverListVersion = 3; //游戏服务器的列表是否需要更新
}

// 微信信息
message WeixinInfo {
    optional string openId = 1; // 微信授权用户唯一id
    optional string nickName = 2; // 微信昵称
    optional string headUrl = 3; // 微信头像
    optional int32 sex = 4; // 性别: 1=男  2=女
    optional string city = 5; // 城市
    optional string unionId = 6; // unionId
}

//注册类型
enum common_enum_reg {
    RET_TYPE_TOURIST = 1;
    RET_TYPE_WEIXIN = 2;
}

//客户端系统类型
enum common_enum_os_type {
    OS_IOS = 1;
    OS_ANDROID = 2;
    OS_WEB = 3;
}

//请求
message common_req_reg {
    optional ProtoHeader header = 1;
    optional int32 regType = 2; //注册类型:1,游客2,微信
    optional WeixinInfo wxInfo = 3; //微信登录信息，如果是游客注册，则不需要填写此信息
    optional int32 clientOSType = 4; //1=iOS 2=Android 3=web
    optional string channelId = 5; //渠道
}

//请求注册 通过输入的用户名密码
message common_req_reg_via_input {
    optional ProtoHeader header = 1;
    optional string userName = 2; //用户名称
    optional string password = 3; //用户密码
    optional int32 clientOSType = 4; //1=iOS 2=Android 3=web
    optional string channelId = 5; //渠道
}

//回复
message common_ack_reg {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //注册成功之后的用户id
}

//登录的结构
message common_req_gameLogin {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
    optional int32 protoVersion = 3; // 客户端 proto version
    optional WeixinInfo wxInfo = 4; //微信登录信息
    optional int32 clientOSType = 5; //1=iOS 2=Android 3=web
}

//登录的结构 通过输入的用户名密码
message common_req_gameLogin_via_input {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
    optional string userName = 3; //用户名
    optional string password = 4; //密码
    optional int32 protoVersion = 5; // 客户端 proto version
    optional int32 clientOSType = 6; //1=iOS 2=Android 3=web
}

// 游戏登录回复
message common_ack_gameLogin {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //用户id
    optional string nickName = 3; //昵称
    optional int64 chip = 4; // 用户钻石余额
    optional int64 coin = 5; // 用户金币剩余
    optional int64 roomCard = 6; // 用户房卡的数量
    optional bool newUserAward = 7; //新用户的奖励
}


// 获取二维码链接req
message common_req_qrLogin {
    optional ProtoHeader header = 1;
}

// 获取二维码链接ack
message common_ack_qrLogin {
    optional string code = 1;
    optional string url = 2;
}

// 获取二维码登陆结果req
message common_req_qrWxInfo {
    optional string code = 1;
}

// 获取二维码登陆结果ack
message common_ack_qrWxInfo {
    optional ProtoHeader header = 1;
    optional WeixinInfo wxinfo = 2;
}

//断线重连
message common_ack_reconnect {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //用户id
}

//重连回复
message common_req_reconnect {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //用户id
}

//请求游戏状态
message common_req_gameState {
    optional ProtoHeader header = 1;
    optional int32 roomType = 2; // 1，朋友桌，2金币场
}

//回复游戏状态(目前是朋友桌才会请求)
message common_ack_gameState {
    optional int32 gameStatus = 1; // 1，未游戏，2，游戏中
    optional string roomPassword = 2; // 朋友桌房间密码
    optional int32 roomType = 3; //类型,表示是
    optional int32 gameId = 4; //类型,表示是
    optional int32 roomLevel = 5; //房间等级
}

//客户端请求
message common_req_logout {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
}

//服务器推
message common_ack_logout {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; // 用户id
}

// 反馈信息的协议
message common_req_feedback {
    optional ProtoHeader header = 1;
    optional string message = 2; //用户提交的反馈内容
}

//-------------------------------------------扑克牌相关的------------------------------------
// 房间类型枚举
//扑克花色
enum common_enum_pokerColor {
    HONGTAO = 1; //  方块
    FANGKUAI = 2; // 梅花
    HEITAO = 3; //  红桃
    MEIHUA = 4; //黑桃
    REDJOKER = 5; //大王
    BLACKBIGJOKER = 6; //小王
}

message client_base_poker {
    optional common_enum_pokerColor suit = 1; //花色: 1=黑桃 2=红桃 3=梅花 4=方块
    optional int32 num = 2; //牌值: 2-10，J、Q、K、A、小王、大王
    optional int32 id = 3; //54张牌：1-54; 0=牌背
}

//--------------------------------------------聊天的协议---------------------------------------
//聊天的内容
message common_req_message {
    optional ProtoHeader header = 1;
    optional int32 msgType = 2; //消息的类型,1,快捷,2,表情,3,自定义
    optional int32 id = 3; //只有快捷和表情的时候有用
    optional string msg = 4; //自定义的时候使用
    optional uint32 userId = 5; //发消息的人是谁
    optional int32 deskId = 6; //desk的id
    optional uint32 toUserId = 7; //收消息的人 道具时使用
}

//消息广播
message common_bc_message {
    optional ProtoHeader header = 1;
    optional int32 msgType = 2; //消息的类型,1,快捷,2,表情,3,自定义
    optional int32 id = 3; //只有快捷和表情的时候有用
    optional string msg = 4; //自定义的时候使用
    optional uint32 userId = 5; //发消息的人是谁
    optional uint32 toUserId = 6; //收消息的人 道具时使用
}

//--------------------------------------------公告的协议---------------------------------------
//请求公告
message common_req_notice {
    optional ProtoHeader header = 1;
    optional int32 noticeType = 2; //公告的类型
    optional string channelId = 3; //渠道号
}

// 返回公告的内容
message common_ack_notice {
    optional ProtoHeader header = 1;
    optional int32 noticeType = 2; //公告的类型:1,滚动信息,2,充值信息,3,公告信息
    optional string noticeTitle = 3; //公告的标题
    optional string noticeContent = 4; //公告的内容
    optional string noticeMemo = 5; //公告的备注
    optional int32 id = 6; //公告的id
    repeated string fileds = 7; //公告的字段,目前子还是给充值的协议使用
}

//--------------------------------------------请求托管的协议---------------------------------------
// 进入托管模式
message common_req_enterAgentMode {
    optional ProtoHeader header = 1; //
    optional uint32 userId = 2; //操作人
}

// 进入托管模式 回复
message common_ack_enterAgentMode {
    optional ProtoHeader header = 1; //
    optional uint32 userId = 2; //操作人
}

// 退出托管模式
message common_req_quitAgentMode {
    optional ProtoHeader header = 1; //
    optional uint32 userId = 2; //操作人
}

// 退出托管模式 回复
message common_ack_quitAgentMode {
    optional ProtoHeader header = 1; //
    optional uint32 userId = 2; //操作人
}

//--------------------------------------------请求离开的协议---------------------------------------
// 离开房间
message common_req_leaveDesk {
    optional ProtoHeader header = 1;
    optional bool isExchange = 2; //是否请求换桌离开
}

//离开房间的回复
message common_ack_leaveDesk {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //离开的玩家
    optional bool isExchange = 3; //是否是换桌离开
}

//--------------------------------------------踢人的广播---------------------------------------
//踢人的广播
message common_bc_kickout {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2; //踢掉的玩家
    optional COMMON_ENUM_KICKOUT type = 3; //踢出的类型
    optional string msg = 4; //踢出的消息
}

//--------------------------------------------请求补助的协议---------------------------------------
// 请求补助
message common_req_allowance {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
}

// 回复补助
message common_ack_allowance {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional bool isSuccessed = 3; //是否领取成功
    optional int32 times2Get = 4; //成功required 第几次领取  一天两次
    optional int64 allowanceCoin = 5; //成功required 补助金额 1000
    optional int64 userTotalCoin = 6; //成功required 用户总的金币数
}

//---------------------------------------------请求解散房间---------------------------------------------
message common_req_applyDissolve {
    //申请解散房间，只有朋友桌才有
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
}

message common_bc_applyDissolve {
    //申请解散房间，只有朋友桌才有
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional bool result = 3; //申请结果

}

//回复 申请解散房间，用户同意还是拒绝
message common_req_applyDissolveBack {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional bool agree = 3; //同意还是拒绝
}


message common_ack_applyDissolveBack {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
    optional bool agree = 3; //同意还是拒绝
}

//给超时玩家的单播 告知玩家已超时
message common_ack_timeout {
    optional ProtoHeader header = 1;
}

//玩家掉线的广播
message common_bc_userBreak {
    optional ProtoHeader header = 1;
    optional uint32 userId = 2;
}

//---------------------------------------------常用统计信息---------------------------------------------
message common_req_clickStatistic {
    optional ProtoHeader header = 1;
    optional BTN_TYPE BtnId = 2; //按钮点击统计
}