// Code generated by protoc-gen-go.
// source: mahjong_desk.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type MjEnumProtoId int32

const (
	MjEnumProtoId_PID_QUICK_CONN               MjEnumProtoId = 1
	MjEnumProtoId_PID_QUICK_CONN_ACK           MjEnumProtoId = 2
	MjEnumProtoId_PID_GAME_LOGIN               MjEnumProtoId = 3
	MjEnumProtoId_PID_GAME_LOGIN_ACK           MjEnumProtoId = 4
	MjEnumProtoId_PID_CREATEROOM               MjEnumProtoId = 5
	MjEnumProtoId_PID_CREATEROOM_ACK           MjEnumProtoId = 6
	MjEnumProtoId_PID_ENTER_ROOM               MjEnumProtoId = 7
	MjEnumProtoId_PID_ENTER_ROOM_ACK           MjEnumProtoId = 8
	MjEnumProtoId_PID_SEND_GAMEINFO            MjEnumProtoId = 9
	MjEnumProtoId_PID_READY                    MjEnumProtoId = 10
	MjEnumProtoId_PID_READY_ACK                MjEnumProtoId = 11
	MjEnumProtoId_PID_EXCHANGECARDS            MjEnumProtoId = 12
	MjEnumProtoId_PID_EXCHANGECARDS_ACK        MjEnumProtoId = 13
	MjEnumProtoId_PID_DINGQUE                  MjEnumProtoId = 14
	MjEnumProtoId_PID_OPENING                  MjEnumProtoId = 15
	MjEnumProtoId_PID_DEAL_CARDS               MjEnumProtoId = 16
	MjEnumProtoId_PID_GET_IN_CARD              MjEnumProtoId = 17
	MjEnumProtoId_PID_SEND_OUT_CARD            MjEnumProtoId = 18
	MjEnumProtoId_PID_SEND_OUT_CARD_ACK        MjEnumProtoId = 19
	MjEnumProtoId_PID_PENG_CARD                MjEnumProtoId = 20
	MjEnumProtoId_PID_PENG_CARD_ACK            MjEnumProtoId = 21
	MjEnumProtoId_PID_GANG_CARD                MjEnumProtoId = 22
	MjEnumProtoId_PID_GANG_CARD_ACK            MjEnumProtoId = 23
	MjEnumProtoId_PID_GUO_CARD                 MjEnumProtoId = 24
	MjEnumProtoId_PID_GUO_CARD_ACK             MjEnumProtoId = 25
	MjEnumProtoId_PID_HU_CARD                  MjEnumProtoId = 26
	MjEnumProtoId_PID_HU_CARD_ACK              MjEnumProtoId = 27
	MjEnumProtoId_PID_BROADCAST_BEGIN_DINGQUE  MjEnumProtoId = 28
	MjEnumProtoId_PID_BROADCAST_BEGIN_EXCHANGE MjEnumProtoId = 29
	MjEnumProtoId_PID_OVERTURN                 MjEnumProtoId = 30
	MjEnumProtoId_PID_CURRENTRESULT            MjEnumProtoId = 31
	MjEnumProtoId_PID_SENDENDLOTTERY           MjEnumProtoId = 32
	MjEnumProtoId_PID_DISSOLVE_DESK            MjEnumProtoId = 33
	MjEnumProtoId_PID_DISSOLVE_DESK_ACK        MjEnumProtoId = 34
	MjEnumProtoId_PID_LEAVE_DESK               MjEnumProtoId = 35
	MjEnumProtoId_PID_LEAVE_DESK_ACK           MjEnumProtoId = 36
	MjEnumProtoId_PID_MESSAGE                  MjEnumProtoId = 37
	MjEnumProtoId_PID_SEND_MESSAGE             MjEnumProtoId = 38
	MjEnumProtoId_PID_GAME_DINGQUEEND          MjEnumProtoId = 39
	MjEnumProtoId_PID_GAME_GAMERECORD          MjEnumProtoId = 40
	MjEnumProtoId_PID_GAME_ACKGAMERECORD       MjEnumProtoId = 41
	MjEnumProtoId_PID_GAME_ACKGAMERECORDEDN    MjEnumProtoId = 42
	MjEnumProtoId_PID_GAME_NOTICE              MjEnumProtoId = 43
	MjEnumProtoId_PID_GAME_ACKNOTICE           MjEnumProtoId = 44
)

var MjEnumProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_EXCHANGECARDS",
	13: "PID_EXCHANGECARDS_ACK",
	14: "PID_DINGQUE",
	15: "PID_OPENING",
	16: "PID_DEAL_CARDS",
	17: "PID_GET_IN_CARD",
	18: "PID_SEND_OUT_CARD",
	19: "PID_SEND_OUT_CARD_ACK",
	20: "PID_PENG_CARD",
	21: "PID_PENG_CARD_ACK",
	22: "PID_GANG_CARD",
	23: "PID_GANG_CARD_ACK",
	24: "PID_GUO_CARD",
	25: "PID_GUO_CARD_ACK",
	26: "PID_HU_CARD",
	27: "PID_HU_CARD_ACK",
	28: "PID_BROADCAST_BEGIN_DINGQUE",
	29: "PID_BROADCAST_BEGIN_EXCHANGE",
	30: "PID_OVERTURN",
	31: "PID_CURRENTRESULT",
	32: "PID_SENDENDLOTTERY",
	33: "PID_DISSOLVE_DESK",
	34: "PID_DISSOLVE_DESK_ACK",
	35: "PID_LEAVE_DESK",
	36: "PID_LEAVE_DESK_ACK",
	37: "PID_MESSAGE",
	38: "PID_SEND_MESSAGE",
	39: "PID_GAME_DINGQUEEND",
	40: "PID_GAME_GAMERECORD",
	41: "PID_GAME_ACKGAMERECORD",
	42: "PID_GAME_ACKGAMERECORDEDN",
	43: "PID_GAME_NOTICE",
	44: "PID_GAME_ACKNOTICE",
}
var MjEnumProtoId_value = map[string]int32{
	"PID_QUICK_CONN":               1,
	"PID_QUICK_CONN_ACK":           2,
	"PID_GAME_LOGIN":               3,
	"PID_GAME_LOGIN_ACK":           4,
	"PID_CREATEROOM":               5,
	"PID_CREATEROOM_ACK":           6,
	"PID_ENTER_ROOM":               7,
	"PID_ENTER_ROOM_ACK":           8,
	"PID_SEND_GAMEINFO":            9,
	"PID_READY":                    10,
	"PID_READY_ACK":                11,
	"PID_EXCHANGECARDS":            12,
	"PID_EXCHANGECARDS_ACK":        13,
	"PID_DINGQUE":                  14,
	"PID_OPENING":                  15,
	"PID_DEAL_CARDS":               16,
	"PID_GET_IN_CARD":              17,
	"PID_SEND_OUT_CARD":            18,
	"PID_SEND_OUT_CARD_ACK":        19,
	"PID_PENG_CARD":                20,
	"PID_PENG_CARD_ACK":            21,
	"PID_GANG_CARD":                22,
	"PID_GANG_CARD_ACK":            23,
	"PID_GUO_CARD":                 24,
	"PID_GUO_CARD_ACK":             25,
	"PID_HU_CARD":                  26,
	"PID_HU_CARD_ACK":              27,
	"PID_BROADCAST_BEGIN_DINGQUE":  28,
	"PID_BROADCAST_BEGIN_EXCHANGE": 29,
	"PID_OVERTURN":                 30,
	"PID_CURRENTRESULT":            31,
	"PID_SENDENDLOTTERY":           32,
	"PID_DISSOLVE_DESK":            33,
	"PID_DISSOLVE_DESK_ACK":        34,
	"PID_LEAVE_DESK":               35,
	"PID_LEAVE_DESK_ACK":           36,
	"PID_MESSAGE":                  37,
	"PID_SEND_MESSAGE":             38,
	"PID_GAME_DINGQUEEND":          39,
	"PID_GAME_GAMERECORD":          40,
	"PID_GAME_ACKGAMERECORD":       41,
	"PID_GAME_ACKGAMERECORDEDN":    42,
	"PID_GAME_NOTICE":              43,
	"PID_GAME_ACKNOTICE":           44,
}

func (x MjEnumProtoId) Enum() *MjEnumProtoId {
	p := new(MjEnumProtoId)
	*p = x
	return p
}
func (x MjEnumProtoId) String() string {
	return proto.EnumName(MjEnumProtoId_name, int32(x))
}
func (x *MjEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumProtoId_value, data, "MjEnumProtoId")
	if err != nil {
		return err
	}
	*x = MjEnumProtoId(value)
	return nil
}
func (MjEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type MjEnumErrorCode int32

const (
	MjEnumErrorCode_EC_MJ_SUCCESS MjEnumErrorCode = 0
	// -101   -200	游戏异常
	MjEnumErrorCode_EC_MJ_CREATE_DESK_DIAMOND_NOTENOUGH MjEnumErrorCode = -101
	MjEnumErrorCode_EC_MJ_CREATE_DESK_USER_NOTFOUND     MjEnumErrorCode = -102
	MjEnumErrorCode_EC_MJ_INTO_DESK_NOTFOUND            MjEnumErrorCode = -103
	MjEnumErrorCode_EC_MJ_GAME_READY_REPEAT             MjEnumErrorCode = -110
	MjEnumErrorCode_EC_MJ_GAME_READY_CHIP_NOT_ENOUGH    MjEnumErrorCode = -111
)

var MjEnumErrorCode_name = map[int32]string{
	0:    "EC_MJ_SUCCESS",
	-101: "EC_MJ_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_MJ_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_MJ_INTO_DESK_NOTFOUND",
	-110: "EC_MJ_GAME_READY_REPEAT",
	-111: "EC_MJ_GAME_READY_CHIP_NOT_ENOUGH",
}
var MjEnumErrorCode_value = map[string]int32{
	"EC_MJ_SUCCESS":                       0,
	"EC_MJ_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_MJ_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_MJ_INTO_DESK_NOTFOUND":            -103,
	"EC_MJ_GAME_READY_REPEAT":             -110,
	"EC_MJ_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x MjEnumErrorCode) Enum() *MjEnumErrorCode {
	p := new(MjEnumErrorCode)
	*p = x
	return p
}
func (x MjEnumErrorCode) String() string {
	return proto.EnumName(MjEnumErrorCode_name, int32(x))
}
func (x *MjEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumErrorCode_value, data, "MjEnumErrorCode")
	if err != nil {
		return err
	}
	*x = MjEnumErrorCode(value)
	return nil
}
func (MjEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type MjEnumPlayOption int32

const (
	MjEnumPlayOption_EXCHANGE_CARDS       MjEnumPlayOption = 1
	MjEnumPlayOption_ZIMO_JIA_DI          MjEnumPlayOption = 2
	MjEnumPlayOption_ZIMO_JIA_FAN         MjEnumPlayOption = 3
	MjEnumPlayOption_DIANGANG_HUA_DIANPAO MjEnumPlayOption = 4
	MjEnumPlayOption_DIANGANG_HUA_ZIMO    MjEnumPlayOption = 5
	MjEnumPlayOption_YAOJIU_JIANGDUI      MjEnumPlayOption = 6
	MjEnumPlayOption_MENQING_MID_CARD     MjEnumPlayOption = 7
	MjEnumPlayOption_TIAN_DI_HU           MjEnumPlayOption = 8
	MjEnumPlayOption_KA_ER_TIAO           MjEnumPlayOption = 9
	// 三人两房牌
	MjEnumPlayOption_DIANPAO_CAN_HU MjEnumPlayOption = 10
	MjEnumPlayOption_DUIDUIHU_2_FAN MjEnumPlayOption = 11
	MjEnumPlayOption_JIA_XIN_WU     MjEnumPlayOption = 12
	// 倒倒胡
	MjEnumPlayOption_DDH_QIDUI_HU   MjEnumPlayOption = 13
	MjEnumPlayOption_DDH_ZIMO_HU    MjEnumPlayOption = 14
	MjEnumPlayOption_DDH_DIANPAO_HU MjEnumPlayOption = 15
)

var MjEnumPlayOption_name = map[int32]string{
	1:  "EXCHANGE_CARDS",
	2:  "ZIMO_JIA_DI",
	3:  "ZIMO_JIA_FAN",
	4:  "DIANGANG_HUA_DIANPAO",
	5:  "DIANGANG_HUA_ZIMO",
	6:  "YAOJIU_JIANGDUI",
	7:  "MENQING_MID_CARD",
	8:  "TIAN_DI_HU",
	9:  "KA_ER_TIAO",
	10: "DIANPAO_CAN_HU",
	11: "DUIDUIHU_2_FAN",
	12: "JIA_XIN_WU",
	13: "DDH_QIDUI_HU",
	14: "DDH_ZIMO_HU",
	15: "DDH_DIANPAO_HU",
}
var MjEnumPlayOption_value = map[string]int32{
	"EXCHANGE_CARDS":       1,
	"ZIMO_JIA_DI":          2,
	"ZIMO_JIA_FAN":         3,
	"DIANGANG_HUA_DIANPAO": 4,
	"DIANGANG_HUA_ZIMO":    5,
	"YAOJIU_JIANGDUI":      6,
	"MENQING_MID_CARD":     7,
	"TIAN_DI_HU":           8,
	"KA_ER_TIAO":           9,
	"DIANPAO_CAN_HU":       10,
	"DUIDUIHU_2_FAN":       11,
	"JIA_XIN_WU":           12,
	"DDH_QIDUI_HU":         13,
	"DDH_ZIMO_HU":          14,
	"DDH_DIANPAO_HU":       15,
}

func (x MjEnumPlayOption) Enum() *MjEnumPlayOption {
	p := new(MjEnumPlayOption)
	*p = x
	return p
}
func (x MjEnumPlayOption) String() string {
	return proto.EnumName(MjEnumPlayOption_name, int32(x))
}
func (x *MjEnumPlayOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumPlayOption_value, data, "MjEnumPlayOption")
	if err != nil {
		return err
	}
	*x = MjEnumPlayOption(value)
	return nil
}
func (MjEnumPlayOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type MjEnumRoomType int32

const (
	MjEnumRoomType_roomType_xueZhanDaoDi      MjEnumRoomType = 0
	MjEnumRoomType_roomType_sanRenLiangFang   MjEnumRoomType = 1
	MjEnumRoomType_roomType_siRenLiangFang    MjEnumRoomType = 2
	MjEnumRoomType_roomType_deYangMaJiang     MjEnumRoomType = 3
	MjEnumRoomType_roomType_daoDaoHu          MjEnumRoomType = 4
	MjEnumRoomType_roomType_xueLiuChengHe     MjEnumRoomType = 5
	MjEnumRoomType_roomType_liangRenLiangFang MjEnumRoomType = 6
	MjEnumRoomType_roomType_liangRenSanFang   MjEnumRoomType = 7
	MjEnumRoomType_roomType_sanRenSanFang     MjEnumRoomType = 8
)

var MjEnumRoomType_name = map[int32]string{
	0: "roomType_xueZhanDaoDi",
	1: "roomType_sanRenLiangFang",
	2: "roomType_siRenLiangFang",
	3: "roomType_deYangMaJiang",
	4: "roomType_daoDaoHu",
	5: "roomType_xueLiuChengHe",
	6: "roomType_liangRenLiangFang",
	7: "roomType_liangRenSanFang",
	8: "roomType_sanRenSanFang",
}
var MjEnumRoomType_value = map[string]int32{
	"roomType_xueZhanDaoDi":      0,
	"roomType_sanRenLiangFang":   1,
	"roomType_siRenLiangFang":    2,
	"roomType_deYangMaJiang":     3,
	"roomType_daoDaoHu":          4,
	"roomType_xueLiuChengHe":     5,
	"roomType_liangRenLiangFang": 6,
	"roomType_liangRenSanFang":   7,
	"roomType_sanRenSanFang":     8,
}

func (x MjEnumRoomType) Enum() *MjEnumRoomType {
	p := new(MjEnumRoomType)
	*p = x
	return p
}
func (x MjEnumRoomType) String() string {
	return proto.EnumName(MjEnumRoomType_name, int32(x))
}
func (x *MjEnumRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumRoomType_value, data, "MjEnumRoomType")
	if err != nil {
		return err
	}
	*x = MjEnumRoomType(value)
	return nil
}
func (MjEnumRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

// 麻将花色
type MjEnumColor int32

const (
	MjEnumColor_WAN  MjEnumColor = 1
	MjEnumColor_TIAO MjEnumColor = 2
	MjEnumColor_TONG MjEnumColor = 3
)

var MjEnumColor_name = map[int32]string{
	1: "WAN",
	2: "TIAO",
	3: "TONG",
}
var MjEnumColor_value = map[string]int32{
	"WAN":  1,
	"TIAO": 2,
	"TONG": 3,
}

func (x MjEnumColor) Enum() *MjEnumColor {
	p := new(MjEnumColor)
	*p = x
	return p
}
func (x MjEnumColor) String() string {
	return proto.EnumName(MjEnumColor_name, int32(x))
}
func (x *MjEnumColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumColor_value, data, "MjEnumColor")
	if err != nil {
		return err
	}
	*x = MjEnumColor(value)
	return nil
}
func (MjEnumColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

// 杠的类型
type MjEnumGangType int32

const (
	MjEnumGangType_G_MINGGANG MjEnumGangType = 1
	MjEnumGangType_G_BAGANG   MjEnumGangType = 2
	MjEnumGangType_G_ANGANG   MjEnumGangType = 3
)

var MjEnumGangType_name = map[int32]string{
	1: "G_MINGGANG",
	2: "G_BAGANG",
	3: "G_ANGANG",
}
var MjEnumGangType_value = map[string]int32{
	"G_MINGGANG": 1,
	"G_BAGANG":   2,
	"G_ANGANG":   3,
}

func (x MjEnumGangType) Enum() *MjEnumGangType {
	p := new(MjEnumGangType)
	*p = x
	return p
}
func (x MjEnumGangType) String() string {
	return proto.EnumName(MjEnumGangType_name, int32(x))
}
func (x *MjEnumGangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumGangType_value, data, "MjEnumGangType")
	if err != nil {
		return err
	}
	*x = MjEnumGangType(value)
	return nil
}
func (MjEnumGangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

// 碰杠类型(客户端显示用)
type MjEnumComposeCardType int32

const (
	MjEnumComposeCardType_C_MINGGANG MjEnumComposeCardType = 1
	MjEnumComposeCardType_C_BAGANG   MjEnumComposeCardType = 2
	MjEnumComposeCardType_C_ANGANG   MjEnumComposeCardType = 3
	MjEnumComposeCardType_C_PENG     MjEnumComposeCardType = 4
)

var MjEnumComposeCardType_name = map[int32]string{
	1: "C_MINGGANG",
	2: "C_BAGANG",
	3: "C_ANGANG",
	4: "C_PENG",
}
var MjEnumComposeCardType_value = map[string]int32{
	"C_MINGGANG": 1,
	"C_BAGANG":   2,
	"C_ANGANG":   3,
	"C_PENG":     4,
}

func (x MjEnumComposeCardType) Enum() *MjEnumComposeCardType {
	p := new(MjEnumComposeCardType)
	*p = x
	return p
}
func (x MjEnumComposeCardType) String() string {
	return proto.EnumName(MjEnumComposeCardType_name, int32(x))
}
func (x *MjEnumComposeCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumComposeCardType_value, data, "MjEnumComposeCardType")
	if err != nil {
		return err
	}
	*x = MjEnumComposeCardType(value)
	return nil
}
func (MjEnumComposeCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

// 胡牌的类型
type MjEnumHuType int32

const (
	// 附加番数(特定操作)
	MjEnumHuType_H_TianHu            MjEnumHuType = 1
	MjEnumHuType_H_DiHu              MjEnumHuType = 2
	MjEnumHuType_H_GangShangHua      MjEnumHuType = 3
	MjEnumHuType_H_GangShangPao      MjEnumHuType = 4
	MjEnumHuType_H_QiangGang         MjEnumHuType = 5
	MjEnumHuType_H_HaiDiLao          MjEnumHuType = 6
	MjEnumHuType_H_HaiDiPao          MjEnumHuType = 7
	MjEnumHuType_H_HaidiGangShangHua MjEnumHuType = 8
	MjEnumHuType_H_HaidiGangShangPao MjEnumHuType = 9
	//
	MjEnumHuType_H_JinGouDiao MjEnumHuType = 10
	// 可选附加玩法
	MjEnumHuType_H_ZiMoJiaFan MjEnumHuType = 11
	MjEnumHuType_H_ZiMoJiaDi  MjEnumHuType = 12
)

var MjEnumHuType_name = map[int32]string{
	1:  "H_TianHu",
	2:  "H_DiHu",
	3:  "H_GangShangHua",
	4:  "H_GangShangPao",
	5:  "H_QiangGang",
	6:  "H_HaiDiLao",
	7:  "H_HaiDiPao",
	8:  "H_HaidiGangShangHua",
	9:  "H_HaidiGangShangPao",
	10: "H_JinGouDiao",
	11: "H_ZiMoJiaFan",
	12: "H_ZiMoJiaDi",
}
var MjEnumHuType_value = map[string]int32{
	"H_TianHu":            1,
	"H_DiHu":              2,
	"H_GangShangHua":      3,
	"H_GangShangPao":      4,
	"H_QiangGang":         5,
	"H_HaiDiLao":          6,
	"H_HaiDiPao":          7,
	"H_HaidiGangShangHua": 8,
	"H_HaidiGangShangPao": 9,
	"H_JinGouDiao":        10,
	"H_ZiMoJiaFan":        11,
	"H_ZiMoJiaDi":         12,
}

func (x MjEnumHuType) Enum() *MjEnumHuType {
	p := new(MjEnumHuType)
	*p = x
	return p
}
func (x MjEnumHuType) String() string {
	return proto.EnumName(MjEnumHuType_name, int32(x))
}
func (x *MjEnumHuType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumHuType_value, data, "MjEnumHuType")
	if err != nil {
		return err
	}
	*x = MjEnumHuType(value)
	return nil
}
func (MjEnumHuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

type MjEnumPaiType int32

const (
	MjEnumPaiType_H_DuiDuiHu   MjEnumPaiType = 1
	MjEnumPaiType_H_QingYiSe   MjEnumPaiType = 2
	MjEnumPaiType_H_QiDui      MjEnumPaiType = 3
	MjEnumPaiType_H_DaiYaoJiu  MjEnumPaiType = 4
	MjEnumPaiType_H_LongQiDui  MjEnumPaiType = 5
	MjEnumPaiType_H_JiangDui   MjEnumPaiType = 6
	MjEnumPaiType_H_MenQing    MjEnumPaiType = 7
	MjEnumPaiType_H_ZhongZhang MjEnumPaiType = 8
	// (内江麻将)
	MjEnumPaiType_H_KaErTiao MjEnumPaiType = 9
	// (德阳麻将)
	MjEnumPaiType_H_JiaXin5       MjEnumPaiType = 10
	MjEnumPaiType_H_QingLongQiDui MjEnumPaiType = 11
	MjEnumPaiType_H_QingQiDui     MjEnumPaiType = 12
	MjEnumPaiType_H_PingHu        MjEnumPaiType = 13
)

var MjEnumPaiType_name = map[int32]string{
	1:  "H_DuiDuiHu",
	2:  "H_QingYiSe",
	3:  "H_QiDui",
	4:  "H_DaiYaoJiu",
	5:  "H_LongQiDui",
	6:  "H_JiangDui",
	7:  "H_MenQing",
	8:  "H_ZhongZhang",
	9:  "H_KaErTiao",
	10: "H_JiaXin5",
	11: "H_QingLongQiDui",
	12: "H_QingQiDui",
	13: "H_PingHu",
}
var MjEnumPaiType_value = map[string]int32{
	"H_DuiDuiHu":      1,
	"H_QingYiSe":      2,
	"H_QiDui":         3,
	"H_DaiYaoJiu":     4,
	"H_LongQiDui":     5,
	"H_JiangDui":      6,
	"H_MenQing":       7,
	"H_ZhongZhang":    8,
	"H_KaErTiao":      9,
	"H_JiaXin5":       10,
	"H_QingLongQiDui": 11,
	"H_QingQiDui":     12,
	"H_PingHu":        13,
}

func (x MjEnumPaiType) Enum() *MjEnumPaiType {
	p := new(MjEnumPaiType)
	*p = x
	return p
}
func (x MjEnumPaiType) String() string {
	return proto.EnumName(MjEnumPaiType_name, int32(x))
}
func (x *MjEnumPaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumPaiType_value, data, "MjEnumPaiType")
	if err != nil {
		return err
	}
	*x = MjEnumPaiType(value)
	return nil
}
func (MjEnumPaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

type MjEnumUserGameStatus int32

const (
	MjEnumUserGameStatus_MJ_U_INIT     MjEnumUserGameStatus = 0
	MjEnumUserGameStatus_MJ_U_DINGQUE  MjEnumUserGameStatus = 1
	MjEnumUserGameStatus_MJ_U_EXCHANGE MjEnumUserGameStatus = 2
	MjEnumUserGameStatus_MJ_U_PLAYING  MjEnumUserGameStatus = 3
	MjEnumUserGameStatus_MJ_U_FINISH   MjEnumUserGameStatus = 4
)

var MjEnumUserGameStatus_name = map[int32]string{
	0: "MJ_U_INIT",
	1: "MJ_U_DINGQUE",
	2: "MJ_U_EXCHANGE",
	3: "MJ_U_PLAYING",
	4: "MJ_U_FINISH",
}
var MjEnumUserGameStatus_value = map[string]int32{
	"MJ_U_INIT":     0,
	"MJ_U_DINGQUE":  1,
	"MJ_U_EXCHANGE": 2,
	"MJ_U_PLAYING":  3,
	"MJ_U_FINISH":   4,
}

func (x MjEnumUserGameStatus) Enum() *MjEnumUserGameStatus {
	p := new(MjEnumUserGameStatus)
	*p = x
	return p
}
func (x MjEnumUserGameStatus) String() string {
	return proto.EnumName(MjEnumUserGameStatus_name, int32(x))
}
func (x *MjEnumUserGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumUserGameStatus_value, data, "MjEnumUserGameStatus")
	if err != nil {
		return err
	}
	*x = MjEnumUserGameStatus(value)
	return nil
}
func (MjEnumUserGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

type MjEnumDeskGameStatus int32

const (
	MjEnumDeskGameStatus_MJ_INIT     MjEnumDeskGameStatus = 0
	MjEnumDeskGameStatus_MJ_FAPAI    MjEnumDeskGameStatus = 1
	MjEnumDeskGameStatus_MJ_EXCHANGE MjEnumDeskGameStatus = 2
	MjEnumDeskGameStatus_MJ_DINGQUE  MjEnumDeskGameStatus = 3
	MjEnumDeskGameStatus_MJ_PLAYING  MjEnumDeskGameStatus = 4
	MjEnumDeskGameStatus_MJ_FINISH   MjEnumDeskGameStatus = 5
)

var MjEnumDeskGameStatus_name = map[int32]string{
	0: "MJ_INIT",
	1: "MJ_FAPAI",
	2: "MJ_EXCHANGE",
	3: "MJ_DINGQUE",
	4: "MJ_PLAYING",
	5: "MJ_FINISH",
}
var MjEnumDeskGameStatus_value = map[string]int32{
	"MJ_INIT":     0,
	"MJ_FAPAI":    1,
	"MJ_EXCHANGE": 2,
	"MJ_DINGQUE":  3,
	"MJ_PLAYING":  4,
	"MJ_FINISH":   5,
}

func (x MjEnumDeskGameStatus) Enum() *MjEnumDeskGameStatus {
	p := new(MjEnumDeskGameStatus)
	*p = x
	return p
}
func (x MjEnumDeskGameStatus) String() string {
	return proto.EnumName(MjEnumDeskGameStatus_name, int32(x))
}
func (x *MjEnumDeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumDeskGameStatus_value, data, "MjEnumDeskGameStatus")
	if err != nil {
		return err
	}
	*x = MjEnumDeskGameStatus(value)
	return nil
}
func (MjEnumDeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

// 玩法：包括自摸、点炮、以及可多选的玩法
type MjBasePlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MjBasePlayOptions) Reset()                    { *m = MjBasePlayOptions{} }
func (m *MjBasePlayOptions) String() string            { return proto.CompactTextString(m) }
func (*MjBasePlayOptions) ProtoMessage()               {}
func (*MjBasePlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *MjBasePlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *MjBasePlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *MjBasePlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *MjBasePlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

// 麻将牌
type MjBaseCardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MjBaseCardInfo) Reset()                    { *m = MjBaseCardInfo{} }
func (m *MjBaseCardInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBaseCardInfo) ProtoMessage()               {}
func (*MjBaseCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *MjBaseCardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MjBaseCardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *MjBaseCardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type MjBaseRoomTypeInfo struct {
	MjRoomType       *MjEnumRoomType    `protobuf:"varint,1,opt,name=mjRoomType,enum=ddproto.MjEnumRoomType" json:"mjRoomType,omitempty"`
	BoardsCout       *int32             `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax           *int64             `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions      *MjBasePlayOptions `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum         *int32             `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement       *int32             `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue        *int64             `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MjBaseRoomTypeInfo) Reset()                    { *m = MjBaseRoomTypeInfo{} }
func (m *MjBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBaseRoomTypeInfo) ProtoMessage()               {}
func (*MjBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *MjBaseRoomTypeInfo) GetMjRoomType() MjEnumRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MjEnumRoomType_roomType_xueZhanDaoDi
}

func (m *MjBaseRoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetPlayOptions() *MjBasePlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *MjBaseRoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

type MjBaseComposeCard struct {
	Value            *int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MjBaseComposeCard) Reset()                    { *m = MjBaseComposeCard{} }
func (m *MjBaseComposeCard) String() string            { return proto.CompactTextString(m) }
func (*MjBaseComposeCard) ProtoMessage()               {}
func (*MjBaseComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *MjBaseComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *MjBaseComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type MjBasePlayerCard struct {
	HandCard         []*MjBaseCardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*MjBaseComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []*MjBaseCardInfo    `protobuf:"bytes,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           []*MjBaseCardInfo    `protobuf:"bytes,4,rep,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32              `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *MjBasePlayerCard) Reset()                    { *m = MjBasePlayerCard{} }
func (m *MjBasePlayerCard) String() string            { return proto.CompactTextString(m) }
func (*MjBasePlayerCard) ProtoMessage()               {}
func (*MjBasePlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *MjBasePlayerCard) GetHandCard() []*MjBaseCardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetComposeCard() []*MjBaseComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetOutCard() []*MjBaseCardInfo {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetHuCard() []*MjBaseCardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type MjBasePlayerInfo struct {
	IsBanker         *bool             `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *MjBasePlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64            `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string           `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32            `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32           `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool             `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32            `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32            `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32            `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32            `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32            `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo       `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32            `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MjBasePlayerInfo) Reset()                    { *m = MjBasePlayerInfo{} }
func (m *MjBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBasePlayerInfo) ProtoMessage()               {}
func (*MjBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *MjBasePlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *MjBasePlayerInfo) GetPlayerCard() *MjBasePlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *MjBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MjBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *MjBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *MjBasePlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MjBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *MjBasePlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *MjBasePlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *MjBasePlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *MjBasePlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *MjBasePlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *MjBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *MjBasePlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

type MjBaseDeskGameInfo struct {
	GameStatus       *int32              `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *MjBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32              `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32             `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32              `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32              `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32              `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32              `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64              `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32              `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32              `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string             `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32              `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32             `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *MjBaseDeskGameInfo) Reset()                    { *m = MjBaseDeskGameInfo{} }
func (m *MjBaseDeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBaseDeskGameInfo) ProtoMessage()               {}
func (*MjBaseDeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *MjBaseDeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetRoomTypeInfo() *MjBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *MjBaseDeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *MjBaseDeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

// 房主解散房间(未开局)
type MjReqDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MjReqDissolveDesk) Reset()                    { *m = MjReqDissolveDesk{} }
func (m *MjReqDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*MjReqDissolveDesk) ProtoMessage()               {}
func (*MjReqDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *MjReqDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MjReqDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 解散房间回复
type MjAckDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	DeskId           *int32       `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	PassWord         *string      `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MjAckDissolveDesk) Reset()                    { *m = MjAckDissolveDesk{} }
func (m *MjAckDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*MjAckDissolveDesk) ProtoMessage()               {}
func (*MjAckDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *MjAckDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MjAckDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MjAckDissolveDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *MjAckDissolveDesk) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func init() {
	proto.RegisterType((*MjBasePlayOptions)(nil), "ddproto.mj_base_playOptions")
	proto.RegisterType((*MjBaseCardInfo)(nil), "ddproto.mj_base_cardInfo")
	proto.RegisterType((*MjBaseRoomTypeInfo)(nil), "ddproto.mj_base_roomTypeInfo")
	proto.RegisterType((*MjBaseComposeCard)(nil), "ddproto.mj_base_composeCard")
	proto.RegisterType((*MjBasePlayerCard)(nil), "ddproto.mj_base_playerCard")
	proto.RegisterType((*MjBasePlayerInfo)(nil), "ddproto.mj_base_playerInfo")
	proto.RegisterType((*MjBaseDeskGameInfo)(nil), "ddproto.mj_base_deskGameInfo")
	proto.RegisterType((*MjReqDissolveDesk)(nil), "ddproto.mj_req_dissolveDesk")
	proto.RegisterType((*MjAckDissolveDesk)(nil), "ddproto.mj_ack_dissolveDesk")
	proto.RegisterEnum("ddproto.MjEnumProtoId", MjEnumProtoId_name, MjEnumProtoId_value)
	proto.RegisterEnum("ddproto.MjEnumErrorCode", MjEnumErrorCode_name, MjEnumErrorCode_value)
	proto.RegisterEnum("ddproto.MjEnumPlayOption", MjEnumPlayOption_name, MjEnumPlayOption_value)
	proto.RegisterEnum("ddproto.MjEnumRoomType", MjEnumRoomType_name, MjEnumRoomType_value)
	proto.RegisterEnum("ddproto.MjEnumColor", MjEnumColor_name, MjEnumColor_value)
	proto.RegisterEnum("ddproto.MjEnumGangType", MjEnumGangType_name, MjEnumGangType_value)
	proto.RegisterEnum("ddproto.MjEnumComposeCardType", MjEnumComposeCardType_name, MjEnumComposeCardType_value)
	proto.RegisterEnum("ddproto.MjEnumHuType", MjEnumHuType_name, MjEnumHuType_value)
	proto.RegisterEnum("ddproto.MjEnumPaiType", MjEnumPaiType_name, MjEnumPaiType_value)
	proto.RegisterEnum("ddproto.MjEnumUserGameStatus", MjEnumUserGameStatus_name, MjEnumUserGameStatus_value)
	proto.RegisterEnum("ddproto.MjEnumDeskGameStatus", MjEnumDeskGameStatus_name, MjEnumDeskGameStatus_value)
}

var fileDescriptor8 = []byte{
	// 2018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0xdb, 0xd8,
	0x15, 0x1e, 0x49, 0xb6, 0x25, 0x5f, 0xc9, 0x36, 0x43, 0x3b, 0xb1, 0x9c, 0x9f, 0x89, 0xeb, 0x64,
	0xda, 0x19, 0x4d, 0x26, 0x6d, 0x5d, 0x74, 0x55, 0xa0, 0x00, 0x4d, 0xd2, 0x22, 0x6d, 0x89, 0x94,
	0x25, 0x31, 0x89, 0xb3, 0x21, 0x68, 0x89, 0xb5, 0x18, 0x5b, 0xa4, 0x47, 0x14, 0x33, 0x4e, 0x97,
	0x7d, 0x83, 0xe9, 0xae, 0xed, 0x6b, 0x14, 0x7d, 0x93, 0xae, 0x0a, 0x74, 0xd5, 0x55, 0x17, 0x7d,
	0x85, 0xf6, 0xbb, 0x87, 0xbc, 0xa4, 0x34, 0x36, 0x30, 0x9b, 0x06, 0x8a, 0xc1, 0x7b, 0xee, 0x77,
	0xfe, 0xbe, 0x73, 0xce, 0xe5, 0x25, 0x93, 0xa7, 0xde, 0xe4, 0x43, 0x14, 0x5e, 0xba, 0x63, 0x3f,
	0xbe, 0x7a, 0x7d, 0x33, 0x8b, 0xe6, 0x91, 0x5c, 0x1d, 0x8f, 0xe9, 0xe1, 0xf1, 0xf6, 0x28, 0x9a,
	0x4e, 0xa3, 0xd0, 0x1d, 0x5d, 0x07, 0x7e, 0x38, 0x4f, 0x77, 0x0f, 0xae, 0xd8, 0xf6, 0xf4, 0x83,
	0x7b, 0xe1, 0xc5, 0xbe, 0x7b, 0x73, 0xed, 0x7d, 0xb2, 0x6f, 0xe6, 0x41, 0x14, 0xc6, 0xf2, 0x03,
	0xb6, 0xfe, 0xfb, 0xa0, 0x1b, 0xf5, 0xbd, 0x71, 0x10, 0x35, 0x4b, 0xfb, 0xa5, 0x2f, 0x57, 0xe5,
	0x26, 0x93, 0xc6, 0x81, 0x17, 0xb6, 0xbd, 0xf0, 0xd2, 0x48, 0xbc, 0x74, 0xa7, 0x4c, 0x3b, 0x8f,
	0xd8, 0x66, 0x34, 0x9f, 0xf8, 0xb3, 0x58, 0x9d, 0xf8, 0xa3, 0xab, 0xa3, 0xe8, 0xb6, 0x59, 0xd9,
	0xaf, 0x40, 0xbe, 0xc5, 0xaa, 0x93, 0x24, 0x05, 0xae, 0x70, 0xe0, 0xc1, 0x6f, 0x98, 0x24, 0x9c,
	0x8d, 0xbc, 0xd9, 0xd8, 0x0c, 0x7f, 0x17, 0xc9, 0x0d, 0xb6, 0x32, 0xff, 0x74, 0xe3, 0x67, 0x4e,
	0x36, 0xd8, 0xea, 0x47, 0xef, 0x3a, 0xf1, 0x33, 0xcb, 0x8c, 0x95, 0x83, 0x31, 0xac, 0x71, 0xe5,
	0xbf, 0x97, 0xd8, 0x8e, 0xd0, 0x9e, 0x45, 0xd1, 0x74, 0x08, 0x2d, 0xb2, 0xf0, 0x0d, 0x63, 0xd3,
	0x0f, 0xfd, 0x4c, 0x42, 0x76, 0x36, 0x0f, 0xf7, 0x5e, 0x67, 0x59, 0xbf, 0x86, 0x8a, 0x1f, 0x26,
	0xd3, 0x5c, 0x45, 0x86, 0xd1, 0x8b, 0x08, 0xde, 0x63, 0x35, 0x4a, 0xe6, 0x99, 0x9f, 0x4d, 0xb6,
	0x36, 0xf2, 0x6e, 0xba, 0xde, 0x2d, 0xf9, 0xaa, 0xc8, 0xbf, 0x64, 0xf5, 0x05, 0x36, 0x28, 0xfa,
	0xfa, 0xe1, 0xd3, 0x45, 0x9b, 0x77, 0x18, 0x93, 0x58, 0x8d, 0xe7, 0x14, 0x5b, 0xc9, 0xb4, 0xb9,
	0x4a, 0x46, 0xe1, 0x28, 0xf6, 0xe7, 0xf3, 0x6b, 0x7f, 0x0a, 0xba, 0x9b, 0x6b, 0x24, 0x03, 0xaf,
	0x5c, 0xf3, 0x0d, 0xe5, 0x58, 0xe5, 0xbe, 0x0e, 0x0e, 0x8b, 0x0a, 0xa0, 0x40, 0x37, 0x51, 0xec,
	0xab, 0xb0, 0x53, 0x30, 0x91, 0x12, 0x23, 0x68, 0xa2, 0x78, 0x0f, 0xfe, 0x51, 0x42, 0xa9, 0x17,
	0x82, 0xf0, 0x67, 0xa4, 0xf3, 0x35, 0xab, 0x4d, 0xbc, 0x70, 0xcc, 0x9f, 0xa1, 0x56, 0x41, 0xcc,
	0x7b, 0x77, 0x62, 0xce, 0x89, 0x47, 0x8e, 0x0b, 0xfe, 0x60, 0xb8, 0x72, 0x6f, 0x8e, 0x8b, 0x31,
	0xb5, 0x58, 0x15, 0x9c, 0x11, 0xbc, 0xf2, 0x63, 0xe6, 0xbf, 0x62, 0x6b, 0x93, 0x84, 0xa0, 0x2b,
	0x3f, 0x06, 0x05, 0xfb, 0x4e, 0xec, 0xcf, 0xcc, 0x31, 0x11, 0xb7, 0x71, 0xf0, 0xd7, 0xf2, 0x0f,
	0xb3, 0x23, 0x18, 0x18, 0x0e, 0xe2, 0x23, 0x2f, 0xbc, 0xf2, 0x67, 0x44, 0x4a, 0x4d, 0xfe, 0x39,
	0x63, 0x45, 0xf6, 0x44, 0x4d, 0xfd, 0xf0, 0xc9, 0xbd, 0x55, 0xca, 0x08, 0x02, 0x8b, 0xa3, 0x28,
	0x08, 0xb3, 0x2a, 0xc3, 0x60, 0x18, 0x8c, 0xae, 0x2c, 0x6f, 0xea, 0x53, 0x89, 0xd7, 0xe5, 0x3a,
	0xab, 0xc4, 0xfe, 0x6d, 0x56, 0x3f, 0x84, 0x95, 0xa4, 0x61, 0xf1, 0xda, 0x6d, 0xf0, 0x76, 0x0e,
	0x62, 0xfb, 0xbb, 0x10, 0xee, 0xab, 0xe4, 0x1e, 0x80, 0x8b, 0xbe, 0xef, 0x8d, 0x3f, 0x35, 0x6b,
	0xa4, 0x00, 0x7b, 0x17, 0x5a, 0x10, 0x5e, 0x9e, 0xa1, 0x6a, 0xeb, 0xa2, 0x05, 0x2e, 0xf4, 0xdb,
	0x11, 0x8a, 0x72, 0xe9, 0x8f, 0x9b, 0x4c, 0x98, 0x0d, 0x8d, 0xa4, 0xe7, 0x05, 0xcd, 0xba, 0x58,
	0x7f, 0x9b, 0xf8, 0x7c, 0xdd, 0xa0, 0xf5, 0x0b, 0xb6, 0xf6, 0xdd, 0x2d, 0x4f, 0xb8, 0xb9, 0x41,
	0x09, 0x6d, 0xe7, 0x09, 0xbd, 0xf5, 0x83, 0xdb, 0x20, 0x24, 0x2e, 0x60, 0xb8, 0x8d, 0xb0, 0x07,
	0x73, 0x6f, 0x9e, 0xc4, 0xcd, 0x4d, 0x6a, 0x8a, 0x7f, 0x96, 0x8b, 0x01, 0xe1, 0xf3, 0xcf, 0x01,
	0xf7, 0x80, 0xd3, 0x7e, 0xfa, 0x15, 0x6b, 0x2c, 0x0e, 0x51, 0x46, 0xde, 0xb3, 0x3b, 0xe4, 0x2d,
	0x4d, 0x1a, 0xba, 0x37, 0x25, 0x93, 0x37, 0x39, 0x4d, 0xa5, 0xbc, 0xc3, 0x1a, 0xde, 0x68, 0x1e,
	0x7c, 0xf4, 0xb3, 0x0a, 0xae, 0x10, 0x55, 0xf0, 0xc8, 0xa5, 0x51, 0x38, 0x0c, 0xc0, 0xed, 0xaa,
	0x68, 0xfd, 0xb1, 0x0f, 0x6d, 0x12, 0xa5, 0xd3, 0xb0, 0xcb, 0xb6, 0x90, 0x4e, 0x30, 0x57, 0x0a,
	0x6c, 0x55, 0x9c, 0x28, 0xb4, 0xa1, 0xe5, 0x0a, 0x35, 0xe1, 0x2d, 0x80, 0x98, 0x0f, 0xbb, 0xca,
	0xeb, 0xb8, 0x4e, 0x75, 0x7c, 0xc8, 0x36, 0x46, 0xc9, 0x6c, 0xd6, 0x03, 0x16, 0x33, 0x8d, 0x59,
	0x63, 0xc2, 0xc8, 0x3c, 0x9a, 0x7b, 0xd7, 0x85, 0xbc, 0x2e, 0x8a, 0xc2, 0xb3, 0x42, 0x0e, 0x17,
	0x28, 0x65, 0x83, 0x0a, 0xbf, 0xcd, 0xea, 0x33, 0x7f, 0xea, 0x05, 0x21, 0x6f, 0x93, 0x98, 0x98,
	0xa7, 0xca, 0x64, 0xed, 0xb6, 0x49, 0x7d, 0x79, 0x4a, 0x93, 0x3a, 0xf3, 0xbf, 0x75, 0xc7, 0x41,
	0x1c, 0x47, 0xd7, 0x1f, 0x7d, 0x0d, 0x34, 0xcb, 0x2f, 0xd1, 0xe9, 0xe8, 0x82, 0xac, 0x2b, 0xeb,
	0x87, 0x3b, 0x39, 0x89, 0x3d, 0xfe, 0xd7, 0xa0, 0xbd, 0x85, 0x6e, 0x2a, 0x93, 0xb1, 0x29, 0x19,
	0xf3, 0x46, 0x57, 0xff, 0x07, 0x63, 0x7c, 0xcd, 0x2b, 0x6e, 0x66, 0x67, 0x25, 0xef, 0xc4, 0x1b,
	0x2f, 0x8e, 0xdf, 0x46, 0xb3, 0xb4, 0x22, 0xeb, 0xad, 0xff, 0x54, 0xd9, 0x96, 0x38, 0x0a, 0xc9,
	0x9e, 0x39, 0x06, 0x11, 0x9b, 0x3d, 0x53, 0x73, 0xcf, 0x1c, 0x53, 0x3d, 0x75, 0x55, 0xdb, 0xb2,
	0xa4, 0x12, 0x48, 0x93, 0x97, 0x65, 0xae, 0xa2, 0x9e, 0x4a, 0x65, 0x81, 0x6d, 0x2b, 0x5d, 0xdd,
	0xed, 0xd8, 0x6d, 0xd3, 0x92, 0x2a, 0x02, 0x5b, 0xc8, 0x08, 0xbb, 0x22, 0xb0, 0x6a, 0x5f, 0x57,
	0x86, 0x7a, 0xdf, 0xb6, 0xbb, 0xd2, 0xaa, 0xc0, 0x16, 0x32, 0xc2, 0xae, 0x09, 0xac, 0x6e, 0x41,
	0xea, 0x12, 0xb6, 0x2a, 0xb0, 0x85, 0x8c, 0xb0, 0x35, 0xd4, 0xf9, 0x01, 0x97, 0x0f, 0x74, 0x2b,
	0x75, 0x6a, 0x5a, 0xc7, 0xb6, 0xb4, 0x8e, 0x93, 0x72, 0x9d, 0x8b, 0x61, 0x59, 0x3b, 0x97, 0x18,
	0xfa, 0x6c, 0x23, 0x5f, 0x92, 0x62, 0x5d, 0x28, 0xea, 0xef, 0x54, 0x43, 0xb1, 0xda, 0xba, 0xaa,
	0xf4, 0xb5, 0x81, 0xd4, 0x90, 0xf7, 0xd8, 0xc3, 0x3b, 0x62, 0xd2, 0xe0, 0xb3, 0x5e, 0xe7, 0x5b,
	0x9a, 0x69, 0xb5, 0xcf, 0x1c, 0x5d, 0xda, 0x14, 0x02, 0xbb, 0xa7, 0x5b, 0x90, 0x49, 0x5b, 0x22,
	0x70, 0x4d, 0x57, 0x3a, 0x6e, 0x6a, 0x50, 0x42, 0x17, 0x6d, 0x11, 0x21, 0xfa, 0xd0, 0x05, 0x19,
	0x5c, 0x2a, 0x3d, 0x58, 0x8a, 0xda, 0x76, 0x86, 0xa9, 0x58, 0x16, 0xce, 0x97, 0xc4, 0xe4, 0x7c,
	0x5b, 0x64, 0x00, 0x57, 0xed, 0x14, 0xbd, 0x23, 0x8c, 0xe4, 0x22, 0x42, 0x3e, 0x14, 0xc8, 0xb6,
	0x22, 0x90, 0x8f, 0x04, 0x32, 0x17, 0x11, 0x72, 0x17, 0x1d, 0xd1, 0x20, 0xb1, 0x63, 0xa7, 0xc0,
	0x26, 0x66, 0x49, 0x5a, 0x94, 0x10, 0x6e, 0x4f, 0xe4, 0x69, 0x38, 0x29, 0xec, 0xb1, 0xc8, 0x29,
	0x13, 0x10, 0xea, 0x89, 0xfc, 0x9c, 0x3d, 0xe1, 0xc2, 0xa3, 0xbe, 0xad, 0x68, 0xaa, 0x32, 0x18,
	0xba, 0x47, 0x3a, 0x2f, 0xbf, 0xa0, 0xeb, 0xa9, 0xbc, 0xcf, 0x9e, 0xde, 0x07, 0x10, 0x54, 0x4b,
	0xcf, 0x44, 0x40, 0xf6, 0x1b, 0xbd, 0x3f, 0x74, 0xfa, 0x96, 0xf4, 0xb9, 0x88, 0x5c, 0x75, 0xfa,
	0x7d, 0x94, 0xbe, 0xaf, 0x0f, 0x9c, 0xce, 0x50, 0x7a, 0x2e, 0xba, 0x81, 0x13, 0x85, 0x5f, 0xc7,
	0x1e, 0xa2, 0x2b, 0xce, 0xa5, 0x7d, 0x01, 0xd7, 0xcc, 0xc1, 0xc0, 0xee, 0xbc, 0xd1, 0x51, 0x89,
	0xc1, 0xa9, 0xf4, 0x13, 0xc1, 0xeb, 0x92, 0x98, 0xa2, 0x3e, 0x10, 0x25, 0xeb, 0xe8, 0x8a, 0x80,
	0xbf, 0x10, 0xd6, 0x0b, 0x19, 0x61, 0x5f, 0x0a, 0x1e, 0xba, 0xfa, 0x60, 0xa0, 0x20, 0xde, 0x2f,
	0x04, 0x5d, 0x54, 0x2f, 0x21, 0xfd, 0x29, 0x4e, 0xb0, 0xed, 0x7c, 0x04, 0xb2, 0xec, 0x01, 0x90,
	0x7e, 0xb6, 0xb4, 0xc1, 0xff, 0xf4, 0x75, 0xd5, 0x06, 0x9f, 0x5f, 0xca, 0x8f, 0xd9, 0xa3, 0x7c,
	0x03, 0xae, 0x16, 0xf6, 0xbe, 0x92, 0x9f, 0xb1, 0xbd, 0xfb, 0xf7, 0x74, 0xcd, 0x92, 0x5a, 0x79,
	0x7b, 0xf1, 0x6d, 0xcb, 0x1e, 0x9a, 0xaa, 0x2e, 0x7d, 0xbd, 0x34, 0x84, 0xd0, 0xc9, 0xe4, 0xaf,
	0x5a, 0x7f, 0x28, 0xb3, 0x07, 0x62, 0xe0, 0xfd, 0xd9, 0x2c, 0x9a, 0xa9, 0xd1, 0xd8, 0xe7, 0x0d,
	0xa3, 0xab, 0x6e, 0xf7, 0xc4, 0x1d, 0x38, 0xaa, 0x8a, 0x2c, 0xa4, 0xcf, 0xe4, 0x5f, 0xb0, 0x17,
	0xa9, 0x28, 0x9d, 0xcd, 0x94, 0x04, 0xcd, 0x54, 0xba, 0x36, 0x32, 0x85, 0x39, 0xdd, 0xb2, 0x9d,
	0xb6, 0x21, 0xfd, 0xe5, 0xbf, 0xd9, 0xbf, 0x92, 0xfc, 0x8a, 0x3d, 0xbf, 0xab, 0xe1, 0x0c, 0x30,
	0xac, 0x80, 0x1f, 0xdb, 0x0e, 0x08, 0xf8, 0x73, 0x81, 0xfe, 0x82, 0x35, 0x53, 0xb4, 0x69, 0x0d,
	0xed, 0x14, 0x9b, 0xc3, 0xfe, 0x54, 0xc0, 0x5e, 0xb2, 0xdd, 0x14, 0x46, 0x99, 0xa4, 0xd3, 0xdb,
	0xd7, 0x7b, 0x70, 0x20, 0xfd, 0xb1, 0x40, 0x7d, 0xc3, 0xf6, 0xef, 0xa0, 0x54, 0xc3, 0xec, 0x71,
	0x93, 0x6e, 0x16, 0xe9, 0xf7, 0x39, 0xbc, 0xf5, 0xb7, 0xf4, 0x26, 0x91, 0x9e, 0x7a, 0xf9, 0x65,
	0x8d, 0x37, 0x82, 0xe8, 0xc4, 0x6c, 0x76, 0x4b, 0xbc, 0xe0, 0xef, 0xcd, 0xae, 0xed, 0x9e, 0x98,
	0x0a, 0xb2, 0xc7, 0x89, 0x87, 0x06, 0xcd, 0x05, 0xc7, 0x0a, 0x3f, 0xef, 0x9a, 0x6c, 0x07, 0xbc,
	0x58, 0x34, 0x5a, 0x86, 0xc3, 0x61, 0x8a, 0xd5, 0x53, 0x6c, 0x9c, 0x78, 0xe8, 0xc5, 0xa5, 0x1d,
	0xae, 0x88, 0x43, 0x0f, 0x05, 0x3b, 0x57, 0xec, 0x13, 0xd3, 0xe1, 0x46, 0xac, 0xb6, 0xe6, 0x98,
	0x38, 0xf1, 0xd0, 0x48, 0x5d, 0xdd, 0x3a, 0x43, 0xb3, 0xb8, 0x5d, 0xde, 0xee, 0x7c, 0xcc, 0xaa,
	0x38, 0xc1, 0xd9, 0x10, 0x18, 0xd8, 0x84, 0x01, 0x89, 0xdf, 0x2d, 0xd8, 0xa9, 0xe2, 0x82, 0x52,
	0x48, 0xf9, 0x21, 0x87, 0x90, 0x33, 0x77, 0xd0, 0xb0, 0x38, 0x86, 0x91, 0xcc, 0x31, 0xf1, 0xc3,
	0x70, 0x1e, 0x52, 0x8c, 0x75, 0xae, 0xc7, 0x03, 0x7e, 0x87, 0x61, 0x7b, 0xeb, 0xe0, 0x8c, 0x43,
	0x16, 0x9a, 0x66, 0xb8, 0x67, 0x1c, 0xc6, 0xb5, 0xe8, 0x68, 0xe3, 0x12, 0xca, 0x0d, 0x82, 0x4d,
	0x32, 0x03, 0x81, 0x30, 0x0f, 0xd9, 0x56, 0xeb, 0xfb, 0x32, 0x5d, 0xd5, 0x97, 0x6f, 0xce, 0x18,
	0x2d, 0xf1, 0xec, 0xde, 0x26, 0xfe, 0x7b, 0x5c, 0x6b, 0x34, 0x2f, 0xd2, 0x02, 0x34, 0xd1, 0x53,
	0xd6, 0xcc, 0xb7, 0x62, 0x2f, 0xec, 0xfb, 0x61, 0x07, 0xdf, 0x0a, 0x97, 0xc7, 0xf8, 0x0f, 0x6e,
	0x9f, 0xb0, 0xdd, 0x62, 0x37, 0x58, 0xda, 0x2c, 0xf3, 0x81, 0xc8, 0x37, 0xc7, 0xfe, 0x39, 0x84,
	0x5d, 0xef, 0x84, 0xef, 0x4b, 0xfc, 0xcd, 0xfe, 0xa0, 0xd8, 0x83, 0x2b, 0x2f, 0x32, 0x12, 0xd0,
	0xbd, 0xa8, 0x82, 0x40, 0x3a, 0x41, 0x82, 0x2f, 0x0f, 0x7c, 0x96, 0xf8, 0xe0, 0xfc, 0x73, 0xf6,
	0x38, 0xdf, 0xbb, 0xe6, 0x66, 0x96, 0xdc, 0xad, 0x2d, 0x45, 0x2a, 0xf6, 0x07, 0x5e, 0x48, 0xbb,
	0xd5, 0x25, 0xcb, 0x69, 0x1e, 0x62, 0xaf, 0xd6, 0x7a, 0xc5, 0x36, 0x04, 0x25, 0xa3, 0xe8, 0x3a,
	0x9a, 0xc9, 0x55, 0x56, 0x79, 0xab, 0xf0, 0x97, 0x66, 0x8d, 0xad, 0x50, 0x99, 0xca, 0xf4, 0x64,
	0xe3, 0xfd, 0x50, 0x69, 0xfd, 0xb6, 0x20, 0xf0, 0x12, 0xfa, 0x44, 0x20, 0x8a, 0xc3, 0x8b, 0x6e,
	0xb5, 0x79, 0xa3, 0x40, 0xaf, 0xc1, 0x6a, 0x6d, 0xf7, 0x48, 0xa1, 0x55, 0x39, 0x5d, 0xa5, 0x4d,
	0x04, 0xfd, 0x33, 0xb6, 0x5b, 0x78, 0xcb, 0xaf, 0xe0, 0xc2, 0x8c, 0xfa, 0x03, 0x33, 0xea, 0x92,
	0x19, 0x35, 0x37, 0x83, 0xbb, 0xce, 0x9a, 0x4a, 0xaf, 0x0d, 0x69, 0xa5, 0xf5, 0xef, 0x12, 0xdb,
	0x14, 0x36, 0x27, 0x09, 0x99, 0x02, 0xd8, 0x70, 0x87, 0xa0, 0x01, 0xbc, 0x96, 0x38, 0x18, 0x7d,
	0x10, 0xe0, 0x99, 0x5e, 0xf8, 0x86, 0xcb, 0x3f, 0xf6, 0x06, 0x93, 0xf4, 0x8b, 0x0f, 0xc6, 0x96,
	0x65, 0x3d, 0x2f, 0x42, 0x2d, 0xd0, 0x4e, 0x68, 0x2f, 0x4e, 0x24, 0xdf, 0x90, 0xf8, 0xad, 0x89,
	0x19, 0xae, 0xe1, 0x05, 0x5a, 0xd0, 0x01, 0x60, 0x6d, 0x61, 0xcd, 0x15, 0xaa, 0xfc, 0x64, 0xa4,
	0xf5, 0x38, 0x58, 0xb2, 0x5e, 0xbb, 0x6f, 0x83, 0x6b, 0xac, 0xf3, 0x1e, 0x36, 0xdc, 0x93, 0x20,
	0x6c, 0x47, 0x89, 0x16, 0x40, 0xc2, 0x52, 0xc9, 0x7b, 0x7c, 0xa0, 0xa2, 0x51, 0x50, 0x1d, 0xf4,
	0x3d, 0x85, 0x91, 0x49, 0xd0, 0x91, 0x8d, 0xd6, 0xbf, 0x4a, 0x0b, 0x17, 0x1e, 0x2f, 0x10, 0xc4,
	0x21, 0xbf, 0x24, 0xc0, 0x8f, 0xf2, 0xa5, 0xf5, 0x19, 0x6e, 0xec, 0xe7, 0xc1, 0xc0, 0x47, 0xce,
	0x75, 0x56, 0xe5, 0x6b, 0x6c, 0x23, 0x59, 0xb2, 0xa8, 0x79, 0xc1, 0xb9, 0x07, 0x9b, 0x89, 0xc8,
	0xb4, 0x83, 0xaf, 0xeb, 0x14, 0x91, 0x65, 0x4a, 0xad, 0xca, 0xd7, 0x6b, 0xfc, 0x22, 0x62, 0xb8,
	0x5d, 0x3f, 0xe4, 0x16, 0x91, 0x68, 0x1a, 0xe4, 0x04, 0x0a, 0x7c, 0x52, 0x2e, 0xd3, 0xa1, 0x36,
	0xdc, 0x53, 0x4f, 0x9f, 0x0d, 0x03, 0x4a, 0x8c, 0x14, 0x60, 0xe0, 0x5d, 0x10, 0xfe, 0x1a, 0x59,
	0xe1, 0xb8, 0x48, 0xc3, 0x29, 0x9c, 0xd4, 0x05, 0xbf, 0x42, 0xd0, 0x48, 0x4b, 0xd6, 0x0b, 0x38,
	0x6b, 0xd2, 0x46, 0x2b, 0x62, 0x8f, 0x44, 0x96, 0xfc, 0x46, 0x58, 0xdc, 0xf3, 0xb9, 0x71, 0x9c,
	0x93, 0x0e, 0x8e, 0x5d, 0x73, 0x88, 0x09, 0x45, 0x34, 0xb4, 0x14, 0xef, 0xe8, 0x12, 0x7f, 0x17,
	0x90, 0x24, 0x7f, 0x29, 0x97, 0x73, 0x50, 0xaf, 0xa3, 0x9c, 0x9b, 0xd4, 0x3f, 0x70, 0x4f, 0x92,
	0x63, 0x98, 0x19, 0x18, 0x68, 0xa2, 0xb8, 0x70, 0x28, 0x3e, 0x32, 0x32, 0x87, 0x60, 0x8f, 0x4e,
	0x79, 0x72, 0x87, 0x28, 0xb1, 0x38, 0x56, 0x7a, 0x8a, 0x99, 0x1e, 0xae, 0x58, 0x2d, 0x38, 0x02,
	0x13, 0x10, 0x88, 0x58, 0x2a, 0xd9, 0x5a, 0xb8, 0x5d, 0xc9, 0x82, 0xcf, 0x9c, 0xae, 0x1e, 0x95,
	0x8d, 0x4a, 0xef, 0xb3, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xb6, 0x45, 0x95, 0xde, 0x10,
	0x00, 0x00,
}
