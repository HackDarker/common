// Code generated by protoc-gen-go. DO NOT EDIT.
// source: niuniu_base.proto

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_req_kickout from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_req_upload_location from common_client.proto

// Ignoring public import of common_bc_leaveTimeout from common_client.proto

// Ignoring public import of common_desk_by_agent from common_client.proto

// Ignoring public import of common_req_list_coin_desk from common_client.proto

// Ignoring public import of common_ack_list_coin_desk from common_client.proto

// Ignoring public import of CommonCoinDeskInfo from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type NiuniuEnumProtoid int32

const (
	// //////////////////////////////////
	NiuniuEnumProtoid_NIU_PID_HEARTBEAT          NiuniuEnumProtoid = 0
	NiuniuEnumProtoid_NIU_PID_QUICK_CONN         NiuniuEnumProtoid = 1
	NiuniuEnumProtoid_NIU_PID_QUICK_CONN_ACK     NiuniuEnumProtoid = 2
	NiuniuEnumProtoid_NIU_PID_GAME_LOGIN         NiuniuEnumProtoid = 3
	NiuniuEnumProtoid_NIU_PID_GAME_LOGIN_ACK     NiuniuEnumProtoid = 4
	NiuniuEnumProtoid_NIU_PID_CREATE_DESK_REQ    NiuniuEnumProtoid = 5
	NiuniuEnumProtoid_NIU_PID_ENTER_DESK_REQ     NiuniuEnumProtoid = 6
	NiuniuEnumProtoid_NIU_PID_ENTER_DESK_ACK     NiuniuEnumProtoid = 7
	NiuniuEnumProtoid_NIU_PID_ENTER_DESK_BC      NiuniuEnumProtoid = 8
	NiuniuEnumProtoid_NIU_PID_READY_REQ          NiuniuEnumProtoid = 9
	NiuniuEnumProtoid_NIU_PID_READY_ACK          NiuniuEnumProtoid = 10
	NiuniuEnumProtoid_NIU_PID_READY_BC           NiuniuEnumProtoid = 11
	NiuniuEnumProtoid_NIU_PID_START_GAME_OT      NiuniuEnumProtoid = 12
	NiuniuEnumProtoid_NIU_PID_QIANGZHUANG_OT     NiuniuEnumProtoid = 13
	NiuniuEnumProtoid_NIU_PID_QIANGZHUANG_REQ    NiuniuEnumProtoid = 14
	NiuniuEnumProtoid_NIU_PID_QIANGZHUANG_ACK    NiuniuEnumProtoid = 15
	NiuniuEnumProtoid_NIU_PID_QIANGZHUANG_BC     NiuniuEnumProtoid = 16
	NiuniuEnumProtoid_NIU_PID_JIABEI_OT          NiuniuEnumProtoid = 17
	NiuniuEnumProtoid_NIU_PID_JIABEI_REQ         NiuniuEnumProtoid = 18
	NiuniuEnumProtoid_NIU_PID_JIABEI_ACK         NiuniuEnumProtoid = 19
	NiuniuEnumProtoid_NIU_PID_JIABEI_BC          NiuniuEnumProtoid = 20
	NiuniuEnumProtoid_NIU_PID_BIPAI_RESULT_BC    NiuniuEnumProtoid = 21
	NiuniuEnumProtoid_NIU_PID_GAME_END_BC        NiuniuEnumProtoid = 22
	NiuniuEnumProtoid_NIU_PID_APPLY_DISSOLVE_REQ NiuniuEnumProtoid = 23
	NiuniuEnumProtoid_NIU_PID_APPLY_DISSOLVE_ACK NiuniuEnumProtoid = 24
	NiuniuEnumProtoid_NIU_PID_DISSOLVE_BACK_REQ  NiuniuEnumProtoid = 25
	NiuniuEnumProtoid_NIU_PID_DISSOLVE_BACK_ACK  NiuniuEnumProtoid = 26
	NiuniuEnumProtoid_NIU_PID_DISSOLVE_DONE_BC   NiuniuEnumProtoid = 27
	NiuniuEnumProtoid_NIU_PID_SEND_MESSAGE_REQ   NiuniuEnumProtoid = 28
	NiuniuEnumProtoid_NIU_PID_MESSAGE_BC         NiuniuEnumProtoid = 29
	NiuniuEnumProtoid_NIU_PID_LEAVE_DESK_REQ     NiuniuEnumProtoid = 30
	NiuniuEnumProtoid_NIU_PID_LEAVE_DESK_ACK     NiuniuEnumProtoid = 31
	NiuniuEnumProtoid_NIU_PID_OWNER_DISSOLVE_REQ NiuniuEnumProtoid = 32
	NiuniuEnumProtoid_NIU_PID_OWNER_DISSOLVE_ACK NiuniuEnumProtoid = 33
	NiuniuEnumProtoid_NIU_OFFLINE_BC             NiuniuEnumProtoid = 34
	NiuniuEnumProtoid_NIU_COIN_ROOM_LIST_REQ     NiuniuEnumProtoid = 35
	NiuniuEnumProtoid_NIU_COIN_ROOM_LIST_ACK     NiuniuEnumProtoid = 36
)

var NiuniuEnumProtoid_name = map[int32]string{
	0:  "NIU_PID_HEARTBEAT",
	1:  "NIU_PID_QUICK_CONN",
	2:  "NIU_PID_QUICK_CONN_ACK",
	3:  "NIU_PID_GAME_LOGIN",
	4:  "NIU_PID_GAME_LOGIN_ACK",
	5:  "NIU_PID_CREATE_DESK_REQ",
	6:  "NIU_PID_ENTER_DESK_REQ",
	7:  "NIU_PID_ENTER_DESK_ACK",
	8:  "NIU_PID_ENTER_DESK_BC",
	9:  "NIU_PID_READY_REQ",
	10: "NIU_PID_READY_ACK",
	11: "NIU_PID_READY_BC",
	12: "NIU_PID_START_GAME_OT",
	13: "NIU_PID_QIANGZHUANG_OT",
	14: "NIU_PID_QIANGZHUANG_REQ",
	15: "NIU_PID_QIANGZHUANG_ACK",
	16: "NIU_PID_QIANGZHUANG_BC",
	17: "NIU_PID_JIABEI_OT",
	18: "NIU_PID_JIABEI_REQ",
	19: "NIU_PID_JIABEI_ACK",
	20: "NIU_PID_JIABEI_BC",
	21: "NIU_PID_BIPAI_RESULT_BC",
	22: "NIU_PID_GAME_END_BC",
	23: "NIU_PID_APPLY_DISSOLVE_REQ",
	24: "NIU_PID_APPLY_DISSOLVE_ACK",
	25: "NIU_PID_DISSOLVE_BACK_REQ",
	26: "NIU_PID_DISSOLVE_BACK_ACK",
	27: "NIU_PID_DISSOLVE_DONE_BC",
	28: "NIU_PID_SEND_MESSAGE_REQ",
	29: "NIU_PID_MESSAGE_BC",
	30: "NIU_PID_LEAVE_DESK_REQ",
	31: "NIU_PID_LEAVE_DESK_ACK",
	32: "NIU_PID_OWNER_DISSOLVE_REQ",
	33: "NIU_PID_OWNER_DISSOLVE_ACK",
	34: "NIU_OFFLINE_BC",
	35: "NIU_COIN_ROOM_LIST_REQ",
	36: "NIU_COIN_ROOM_LIST_ACK",
}
var NiuniuEnumProtoid_value = map[string]int32{
	"NIU_PID_HEARTBEAT":          0,
	"NIU_PID_QUICK_CONN":         1,
	"NIU_PID_QUICK_CONN_ACK":     2,
	"NIU_PID_GAME_LOGIN":         3,
	"NIU_PID_GAME_LOGIN_ACK":     4,
	"NIU_PID_CREATE_DESK_REQ":    5,
	"NIU_PID_ENTER_DESK_REQ":     6,
	"NIU_PID_ENTER_DESK_ACK":     7,
	"NIU_PID_ENTER_DESK_BC":      8,
	"NIU_PID_READY_REQ":          9,
	"NIU_PID_READY_ACK":          10,
	"NIU_PID_READY_BC":           11,
	"NIU_PID_START_GAME_OT":      12,
	"NIU_PID_QIANGZHUANG_OT":     13,
	"NIU_PID_QIANGZHUANG_REQ":    14,
	"NIU_PID_QIANGZHUANG_ACK":    15,
	"NIU_PID_QIANGZHUANG_BC":     16,
	"NIU_PID_JIABEI_OT":          17,
	"NIU_PID_JIABEI_REQ":         18,
	"NIU_PID_JIABEI_ACK":         19,
	"NIU_PID_JIABEI_BC":          20,
	"NIU_PID_BIPAI_RESULT_BC":    21,
	"NIU_PID_GAME_END_BC":        22,
	"NIU_PID_APPLY_DISSOLVE_REQ": 23,
	"NIU_PID_APPLY_DISSOLVE_ACK": 24,
	"NIU_PID_DISSOLVE_BACK_REQ":  25,
	"NIU_PID_DISSOLVE_BACK_ACK":  26,
	"NIU_PID_DISSOLVE_DONE_BC":   27,
	"NIU_PID_SEND_MESSAGE_REQ":   28,
	"NIU_PID_MESSAGE_BC":         29,
	"NIU_PID_LEAVE_DESK_REQ":     30,
	"NIU_PID_LEAVE_DESK_ACK":     31,
	"NIU_PID_OWNER_DISSOLVE_REQ": 32,
	"NIU_PID_OWNER_DISSOLVE_ACK": 33,
	"NIU_OFFLINE_BC":             34,
	"NIU_COIN_ROOM_LIST_REQ":     35,
	"NIU_COIN_ROOM_LIST_ACK":     36,
}

func (x NiuniuEnumProtoid) Enum() *NiuniuEnumProtoid {
	p := new(NiuniuEnumProtoid)
	*p = x
	return p
}
func (x NiuniuEnumProtoid) String() string {
	return proto.EnumName(NiuniuEnumProtoid_name, int32(x))
}
func (x *NiuniuEnumProtoid) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnumProtoid_value, data, "NiuniuEnumProtoid")
	if err != nil {
		return err
	}
	*x = NiuniuEnumProtoid(value)
	return nil
}
func (NiuniuEnumProtoid) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{0} }

// =================================公共================================
// 牛牛牌的类型
type NiuniuEnum_PokerType int32

const (
	NiuniuEnum_PokerType_NO_NIU           NiuniuEnum_PokerType = 1
	NiuniuEnum_PokerType_NIU_1            NiuniuEnum_PokerType = 2
	NiuniuEnum_PokerType_NIU_2            NiuniuEnum_PokerType = 3
	NiuniuEnum_PokerType_NIU_3            NiuniuEnum_PokerType = 4
	NiuniuEnum_PokerType_NIU_4            NiuniuEnum_PokerType = 5
	NiuniuEnum_PokerType_NIU_5            NiuniuEnum_PokerType = 6
	NiuniuEnum_PokerType_NIU_6            NiuniuEnum_PokerType = 7
	NiuniuEnum_PokerType_NIU_7            NiuniuEnum_PokerType = 8
	NiuniuEnum_PokerType_NIU_8            NiuniuEnum_PokerType = 9
	NiuniuEnum_PokerType_NIU_9            NiuniuEnum_PokerType = 10
	NiuniuEnum_PokerType_NIU_NIU          NiuniuEnum_PokerType = 11
	NiuniuEnum_PokerType_NIU_YI_TIAO_LONG NiuniuEnum_PokerType = 12
	//    JIN_NIU = 13; //金牛
	NiuniuEnum_PokerType_YIN_NIU NiuniuEnum_PokerType = 14
	//    WU_XIAO_NIU = 15; //五小牛
	NiuniuEnum_PokerType_NIU_TONGHUA_NIU   NiuniuEnum_PokerType = 16
	NiuniuEnum_PokerType_NIU_HULU_NIU      NiuniuEnum_PokerType = 17
	NiuniuEnum_PokerType_NIU_ZHA_DAN       NiuniuEnum_PokerType = 18
	NiuniuEnum_PokerType_NIU_XIAOSHUAI_NIU NiuniuEnum_PokerType = 19
)

var NiuniuEnum_PokerType_name = map[int32]string{
	1:  "NO_NIU",
	2:  "NIU_1",
	3:  "NIU_2",
	4:  "NIU_3",
	5:  "NIU_4",
	6:  "NIU_5",
	7:  "NIU_6",
	8:  "NIU_7",
	9:  "NIU_8",
	10: "NIU_9",
	11: "NIU_NIU",
	12: "NIU_YI_TIAO_LONG",
	14: "YIN_NIU",
	16: "NIU_TONGHUA_NIU",
	17: "NIU_HULU_NIU",
	18: "NIU_ZHA_DAN",
	19: "NIU_XIAOSHUAI_NIU",
}
var NiuniuEnum_PokerType_value = map[string]int32{
	"NO_NIU":            1,
	"NIU_1":             2,
	"NIU_2":             3,
	"NIU_3":             4,
	"NIU_4":             5,
	"NIU_5":             6,
	"NIU_6":             7,
	"NIU_7":             8,
	"NIU_8":             9,
	"NIU_9":             10,
	"NIU_NIU":           11,
	"NIU_YI_TIAO_LONG":  12,
	"YIN_NIU":           14,
	"NIU_TONGHUA_NIU":   16,
	"NIU_HULU_NIU":      17,
	"NIU_ZHA_DAN":       18,
	"NIU_XIAOSHUAI_NIU": 19,
}

func (x NiuniuEnum_PokerType) Enum() *NiuniuEnum_PokerType {
	p := new(NiuniuEnum_PokerType)
	*p = x
	return p
}
func (x NiuniuEnum_PokerType) String() string {
	return proto.EnumName(NiuniuEnum_PokerType_name, int32(x))
}
func (x *NiuniuEnum_PokerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnum_PokerType_value, data, "NiuniuEnum_PokerType")
	if err != nil {
		return err
	}
	*x = NiuniuEnum_PokerType(value)
	return nil
}
func (NiuniuEnum_PokerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{1} }

// 房间状态
type NiuniuEnumDeskState int32

const (
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_ENTER       NiuniuEnumDeskState = 1
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_READY       NiuniuEnumDeskState = 2
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_START       NiuniuEnumDeskState = 3
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_QIANGZHUANG NiuniuEnumDeskState = 4
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_JIABEI      NiuniuEnumDeskState = 5
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_BIPAI       NiuniuEnumDeskState = 6
	NiuniuEnumDeskState_NIU_DESK_STATUS_WAIT_RESULT      NiuniuEnumDeskState = 7
)

var NiuniuEnumDeskState_name = map[int32]string{
	1: "NIU_DESK_STATUS_WAIT_ENTER",
	2: "NIU_DESK_STATUS_WAIT_READY",
	3: "NIU_DESK_STATUS_WAIT_START",
	4: "NIU_DESK_STATUS_WAIT_QIANGZHUANG",
	5: "NIU_DESK_STATUS_WAIT_JIABEI",
	6: "NIU_DESK_STATUS_WAIT_BIPAI",
	7: "NIU_DESK_STATUS_WAIT_RESULT",
}
var NiuniuEnumDeskState_value = map[string]int32{
	"NIU_DESK_STATUS_WAIT_ENTER":       1,
	"NIU_DESK_STATUS_WAIT_READY":       2,
	"NIU_DESK_STATUS_WAIT_START":       3,
	"NIU_DESK_STATUS_WAIT_QIANGZHUANG": 4,
	"NIU_DESK_STATUS_WAIT_JIABEI":      5,
	"NIU_DESK_STATUS_WAIT_BIPAI":       6,
	"NIU_DESK_STATUS_WAIT_RESULT":      7,
}

func (x NiuniuEnumDeskState) Enum() *NiuniuEnumDeskState {
	p := new(NiuniuEnumDeskState)
	*p = x
	return p
}
func (x NiuniuEnumDeskState) String() string {
	return proto.EnumName(NiuniuEnumDeskState_name, int32(x))
}
func (x *NiuniuEnumDeskState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnumDeskState_value, data, "NiuniuEnumDeskState")
	if err != nil {
		return err
	}
	*x = NiuniuEnumDeskState(value)
	return nil
}
func (NiuniuEnumDeskState) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{2} }

// 坐庄规则
type NiuniuEnumBankerRule int32

const (
	NiuniuEnumBankerRule_DING_ZHUANG        NiuniuEnumBankerRule = 1
	NiuniuEnumBankerRule_SUI_JI_ZUO_ZHUANG  NiuniuEnumBankerRule = 2
	NiuniuEnumBankerRule_QIANG_ZHUANG       NiuniuEnumBankerRule = 3
	NiuniuEnumBankerRule_FANGZHU_DINGZHUANG NiuniuEnumBankerRule = 4
)

var NiuniuEnumBankerRule_name = map[int32]string{
	1: "DING_ZHUANG",
	2: "SUI_JI_ZUO_ZHUANG",
	3: "QIANG_ZHUANG",
	4: "FANGZHU_DINGZHUANG",
}
var NiuniuEnumBankerRule_value = map[string]int32{
	"DING_ZHUANG":        1,
	"SUI_JI_ZUO_ZHUANG":  2,
	"QIANG_ZHUANG":       3,
	"FANGZHU_DINGZHUANG": 4,
}

func (x NiuniuEnumBankerRule) Enum() *NiuniuEnumBankerRule {
	p := new(NiuniuEnumBankerRule)
	*p = x
	return p
}
func (x NiuniuEnumBankerRule) String() string {
	return proto.EnumName(NiuniuEnumBankerRule_name, int32(x))
}
func (x *NiuniuEnumBankerRule) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnumBankerRule_value, data, "NiuniuEnumBankerRule")
	if err != nil {
		return err
	}
	*x = NiuniuEnumBankerRule(value)
	return nil
}
func (NiuniuEnumBankerRule) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{3} }

// 翻倍规则
type NiuniuEnumFanbeiRule int32

const (
	NiuniuEnumFanbeiRule_FANBEI_RULE_1 NiuniuEnumFanbeiRule = 1
	NiuniuEnumFanbeiRule_FANBEI_RULE_2 NiuniuEnumFanbeiRule = 2
)

var NiuniuEnumFanbeiRule_name = map[int32]string{
	1: "FANBEI_RULE_1",
	2: "FANBEI_RULE_2",
}
var NiuniuEnumFanbeiRule_value = map[string]int32{
	"FANBEI_RULE_1": 1,
	"FANBEI_RULE_2": 2,
}

func (x NiuniuEnumFanbeiRule) Enum() *NiuniuEnumFanbeiRule {
	p := new(NiuniuEnumFanbeiRule)
	*p = x
	return p
}
func (x NiuniuEnumFanbeiRule) String() string {
	return proto.EnumName(NiuniuEnumFanbeiRule_name, int32(x))
}
func (x *NiuniuEnumFanbeiRule) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnumFanbeiRule_value, data, "NiuniuEnumFanbeiRule")
	if err != nil {
		return err
	}
	*x = NiuniuEnumFanbeiRule(value)
	return nil
}
func (NiuniuEnumFanbeiRule) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{4} }

// 打出去的牌
type NiuniuClientPoker struct {
	Pais []*ClientBasePoker    `protobuf:"bytes,2,rep,name=pais" json:"pais,omitempty"`
	Type *NiuniuEnum_PokerType `protobuf:"varint,3,opt,name=type,enum=ddproto.NiuniuEnum_PokerType" json:"type,omitempty"`
	// 金币场
	SelectedId       []int32 `protobuf:"varint,4,rep,name=selectedId" json:"selectedId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NiuniuClientPoker) Reset()                    { *m = NiuniuClientPoker{} }
func (m *NiuniuClientPoker) String() string            { return proto.CompactTextString(m) }
func (*NiuniuClientPoker) ProtoMessage()               {}
func (*NiuniuClientPoker) Descriptor() ([]byte, []int) { return fileDescriptor33, []int{0} }

func (m *NiuniuClientPoker) GetPais() []*ClientBasePoker {
	if m != nil {
		return m.Pais
	}
	return nil
}

func (m *NiuniuClientPoker) GetType() NiuniuEnum_PokerType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NiuniuEnum_PokerType_NO_NIU
}

func (m *NiuniuClientPoker) GetSelectedId() []int32 {
	if m != nil {
		return m.SelectedId
	}
	return nil
}

// 对局账单信息
type NiuniuUserBill struct {
	Score            *int64  `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	CountHasNiu      *int32  `protobuf:"varint,2,opt,name=count_has_niu,json=countHasNiu" json:"count_has_niu,omitempty"`
	CountNoNiu       *int32  `protobuf:"varint,3,opt,name=count_no_niu,json=countNoNiu" json:"count_no_niu,omitempty"`
	CountWin         *int32  `protobuf:"varint,4,opt,name=count_win,json=countWin" json:"count_win,omitempty"`
	CountLost        *int32  `protobuf:"varint,5,opt,name=count_lost,json=countLost" json:"count_lost,omitempty"`
	UserId           *uint32 `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NiuniuUserBill) Reset()                    { *m = NiuniuUserBill{} }
func (m *NiuniuUserBill) String() string            { return proto.CompactTextString(m) }
func (*NiuniuUserBill) ProtoMessage()               {}
func (*NiuniuUserBill) Descriptor() ([]byte, []int) { return fileDescriptor33, []int{1} }

func (m *NiuniuUserBill) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *NiuniuUserBill) GetCountHasNiu() int32 {
	if m != nil && m.CountHasNiu != nil {
		return *m.CountHasNiu
	}
	return 0
}

func (m *NiuniuUserBill) GetCountNoNiu() int32 {
	if m != nil && m.CountNoNiu != nil {
		return *m.CountNoNiu
	}
	return 0
}

func (m *NiuniuUserBill) GetCountWin() int32 {
	if m != nil && m.CountWin != nil {
		return *m.CountWin
	}
	return 0
}

func (m *NiuniuUserBill) GetCountLost() int32 {
	if m != nil && m.CountLost != nil {
		return *m.CountLost
	}
	return 0
}

func (m *NiuniuUserBill) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// desk 配置选项
type NiuniuDeskOption struct {
	MinUser         *int32                `protobuf:"varint,1,opt,name=minUser" json:"minUser,omitempty"`
	MaxUser         *int32                `protobuf:"varint,2,opt,name=maxUser" json:"maxUser,omitempty"`
	MaxCircle       *int32                `protobuf:"varint,3,opt,name=maxCircle" json:"maxCircle,omitempty"`
	HasFlower       *bool                 `protobuf:"varint,4,opt,name=hasFlower" json:"hasFlower,omitempty"`
	BankRule        *NiuniuEnumBankerRule `protobuf:"varint,5,opt,name=bankRule,enum=ddproto.NiuniuEnumBankerRule" json:"bankRule,omitempty"`
	IsFlowerPlay    *bool                 `protobuf:"varint,6,opt,name=isFlowerPlay" json:"isFlowerPlay,omitempty"`
	IsJiaoFenJiaBei *bool                 `protobuf:"varint,7,opt,name=isJiaoFenJiaBei" json:"isJiaoFenJiaBei,omitempty"`
	HasAnimation    *bool                 `protobuf:"varint,8,opt,name=hasAnimation" json:"hasAnimation,omitempty"`
	// 金币场
	IsCoinRoom       *bool                           `protobuf:"varint,9,opt,name=isCoinRoom" json:"isCoinRoom,omitempty"`
	BaseScore        *int64                          `protobuf:"varint,10,opt,name=baseScore" json:"baseScore,omitempty"`
	NeedPwd          *bool                           `protobuf:"varint,11,opt,name=needPwd" json:"needPwd,omitempty"`
	MinEnterScore    *int64                          `protobuf:"varint,12,opt,name=minEnterScore" json:"minEnterScore,omitempty"`
	CoinFee          *int64                          `protobuf:"varint,15,opt,name=coinFee" json:"coinFee,omitempty"`
	MaxQzScore       *int64                          `protobuf:"varint,13,opt,name=maxQzScore" json:"maxQzScore,omitempty"`
	DenyHalfJoin     *bool                           `protobuf:"varint,14,opt,name=denyHalfJoin" json:"denyHalfJoin,omitempty"`
	ChanelId         *int32                          `protobuf:"varint,16,opt,name=chanelId" json:"chanelId,omitempty"`
	RoomCardBillType *COMMON_ENUM_ROOMCARD_BILL_TYPE `protobuf:"varint,17,opt,name=roomCardBillType,enum=ddproto.COMMON_ENUM_ROOMCARD_BILL_TYPE" json:"roomCardBillType,omitempty"`
	// --------------------牛小帅-------------------
	FanbeiRule     *NiuniuEnumFanbeiRule `protobuf:"varint,18,opt,name=fanbeiRule,enum=ddproto.NiuniuEnumFanbeiRule" json:"fanbeiRule,omitempty"`
	HasShunziNiu   *bool                 `protobuf:"varint,19,opt,name=has_shunzi_niu,json=hasShunziNiu" json:"has_shunzi_niu,omitempty"`
	HasWuhuaNiu    *bool                 `protobuf:"varint,20,opt,name=has_wuhua_niu,json=hasWuhuaNiu" json:"has_wuhua_niu,omitempty"`
	HasTonghuaNiu  *bool                 `protobuf:"varint,21,opt,name=has_tonghua_niu,json=hasTonghuaNiu" json:"has_tonghua_niu,omitempty"`
	HasHuluNiu     *bool                 `protobuf:"varint,22,opt,name=has_hulu_niu,json=hasHuluNiu" json:"has_hulu_niu,omitempty"`
	HasZhadanNiu   *bool                 `protobuf:"varint,23,opt,name=has_zhadan_niu,json=hasZhadanNiu" json:"has_zhadan_niu,omitempty"`
	HasXiaohuaiNiu *bool                 `protobuf:"varint,24,opt,name=has_xiaohuai_niu,json=hasXiaohuaiNiu" json:"has_xiaohuai_niu,omitempty"`
	// 推注倍数：为0则无推注 为5则推注5倍
	TuizhuScore      *int32 `protobuf:"varint,25,opt,name=tuizhu_score,json=tuizhuScore" json:"tuizhu_score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NiuniuDeskOption) Reset()                    { *m = NiuniuDeskOption{} }
func (m *NiuniuDeskOption) String() string            { return proto.CompactTextString(m) }
func (*NiuniuDeskOption) ProtoMessage()               {}
func (*NiuniuDeskOption) Descriptor() ([]byte, []int) { return fileDescriptor33, []int{2} }

func (m *NiuniuDeskOption) GetMinUser() int32 {
	if m != nil && m.MinUser != nil {
		return *m.MinUser
	}
	return 0
}

func (m *NiuniuDeskOption) GetMaxUser() int32 {
	if m != nil && m.MaxUser != nil {
		return *m.MaxUser
	}
	return 0
}

func (m *NiuniuDeskOption) GetMaxCircle() int32 {
	if m != nil && m.MaxCircle != nil {
		return *m.MaxCircle
	}
	return 0
}

func (m *NiuniuDeskOption) GetHasFlower() bool {
	if m != nil && m.HasFlower != nil {
		return *m.HasFlower
	}
	return false
}

func (m *NiuniuDeskOption) GetBankRule() NiuniuEnumBankerRule {
	if m != nil && m.BankRule != nil {
		return *m.BankRule
	}
	return NiuniuEnumBankerRule_DING_ZHUANG
}

func (m *NiuniuDeskOption) GetIsFlowerPlay() bool {
	if m != nil && m.IsFlowerPlay != nil {
		return *m.IsFlowerPlay
	}
	return false
}

func (m *NiuniuDeskOption) GetIsJiaoFenJiaBei() bool {
	if m != nil && m.IsJiaoFenJiaBei != nil {
		return *m.IsJiaoFenJiaBei
	}
	return false
}

func (m *NiuniuDeskOption) GetHasAnimation() bool {
	if m != nil && m.HasAnimation != nil {
		return *m.HasAnimation
	}
	return false
}

func (m *NiuniuDeskOption) GetIsCoinRoom() bool {
	if m != nil && m.IsCoinRoom != nil {
		return *m.IsCoinRoom
	}
	return false
}

func (m *NiuniuDeskOption) GetBaseScore() int64 {
	if m != nil && m.BaseScore != nil {
		return *m.BaseScore
	}
	return 0
}

func (m *NiuniuDeskOption) GetNeedPwd() bool {
	if m != nil && m.NeedPwd != nil {
		return *m.NeedPwd
	}
	return false
}

func (m *NiuniuDeskOption) GetMinEnterScore() int64 {
	if m != nil && m.MinEnterScore != nil {
		return *m.MinEnterScore
	}
	return 0
}

func (m *NiuniuDeskOption) GetCoinFee() int64 {
	if m != nil && m.CoinFee != nil {
		return *m.CoinFee
	}
	return 0
}

func (m *NiuniuDeskOption) GetMaxQzScore() int64 {
	if m != nil && m.MaxQzScore != nil {
		return *m.MaxQzScore
	}
	return 0
}

func (m *NiuniuDeskOption) GetDenyHalfJoin() bool {
	if m != nil && m.DenyHalfJoin != nil {
		return *m.DenyHalfJoin
	}
	return false
}

func (m *NiuniuDeskOption) GetChanelId() int32 {
	if m != nil && m.ChanelId != nil {
		return *m.ChanelId
	}
	return 0
}

func (m *NiuniuDeskOption) GetRoomCardBillType() COMMON_ENUM_ROOMCARD_BILL_TYPE {
	if m != nil && m.RoomCardBillType != nil {
		return *m.RoomCardBillType
	}
	return COMMON_ENUM_ROOMCARD_BILL_TYPE_OWNER_PAY
}

func (m *NiuniuDeskOption) GetFanbeiRule() NiuniuEnumFanbeiRule {
	if m != nil && m.FanbeiRule != nil {
		return *m.FanbeiRule
	}
	return NiuniuEnumFanbeiRule_FANBEI_RULE_1
}

func (m *NiuniuDeskOption) GetHasShunziNiu() bool {
	if m != nil && m.HasShunziNiu != nil {
		return *m.HasShunziNiu
	}
	return false
}

func (m *NiuniuDeskOption) GetHasWuhuaNiu() bool {
	if m != nil && m.HasWuhuaNiu != nil {
		return *m.HasWuhuaNiu
	}
	return false
}

func (m *NiuniuDeskOption) GetHasTonghuaNiu() bool {
	if m != nil && m.HasTonghuaNiu != nil {
		return *m.HasTonghuaNiu
	}
	return false
}

func (m *NiuniuDeskOption) GetHasHuluNiu() bool {
	if m != nil && m.HasHuluNiu != nil {
		return *m.HasHuluNiu
	}
	return false
}

func (m *NiuniuDeskOption) GetHasZhadanNiu() bool {
	if m != nil && m.HasZhadanNiu != nil {
		return *m.HasZhadanNiu
	}
	return false
}

func (m *NiuniuDeskOption) GetHasXiaohuaiNiu() bool {
	if m != nil && m.HasXiaohuaiNiu != nil {
		return *m.HasXiaohuaiNiu
	}
	return false
}

func (m *NiuniuDeskOption) GetTuizhuScore() int32 {
	if m != nil && m.TuizhuScore != nil {
		return *m.TuizhuScore
	}
	return 0
}

// room 的信息
type NiuniuSrvRoom struct {
	RoomId           *int32                `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
	RoomType         *int32                `protobuf:"varint,2,opt,name=roomType" json:"roomType,omitempty"`
	RoomLevel        *int32                `protobuf:"varint,3,opt,name=roomLevel" json:"roomLevel,omitempty"`
	RoomTitle        *string               `protobuf:"bytes,4,opt,name=roomTitle" json:"roomTitle,omitempty"`
	BaseChip         *int64                `protobuf:"varint,5,opt,name=baseChip" json:"baseChip,omitempty"`
	EnterCoin        *int64                `protobuf:"varint,6,opt,name=enterCoin" json:"enterCoin,omitempty"`
	BankRule         *NiuniuEnumBankerRule `protobuf:"varint,7,opt,name=bankRule,enum=ddproto.NiuniuEnumBankerRule" json:"bankRule,omitempty"`
	MaxDeskGammer    *int32                `protobuf:"varint,8,opt,name=maxDeskGammer" json:"maxDeskGammer,omitempty"`
	CoinFee          *int64                `protobuf:"varint,9,opt,name=coinFee" json:"coinFee,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *NiuniuSrvRoom) Reset()                    { *m = NiuniuSrvRoom{} }
func (m *NiuniuSrvRoom) String() string            { return proto.CompactTextString(m) }
func (*NiuniuSrvRoom) ProtoMessage()               {}
func (*NiuniuSrvRoom) Descriptor() ([]byte, []int) { return fileDescriptor33, []int{3} }

func (m *NiuniuSrvRoom) GetRoomId() int32 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *NiuniuSrvRoom) GetRoomType() int32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *NiuniuSrvRoom) GetRoomLevel() int32 {
	if m != nil && m.RoomLevel != nil {
		return *m.RoomLevel
	}
	return 0
}

func (m *NiuniuSrvRoom) GetRoomTitle() string {
	if m != nil && m.RoomTitle != nil {
		return *m.RoomTitle
	}
	return ""
}

func (m *NiuniuSrvRoom) GetBaseChip() int64 {
	if m != nil && m.BaseChip != nil {
		return *m.BaseChip
	}
	return 0
}

func (m *NiuniuSrvRoom) GetEnterCoin() int64 {
	if m != nil && m.EnterCoin != nil {
		return *m.EnterCoin
	}
	return 0
}

func (m *NiuniuSrvRoom) GetBankRule() NiuniuEnumBankerRule {
	if m != nil && m.BankRule != nil {
		return *m.BankRule
	}
	return NiuniuEnumBankerRule_DING_ZHUANG
}

func (m *NiuniuSrvRoom) GetMaxDeskGammer() int32 {
	if m != nil && m.MaxDeskGammer != nil {
		return *m.MaxDeskGammer
	}
	return 0
}

func (m *NiuniuSrvRoom) GetCoinFee() int64 {
	if m != nil && m.CoinFee != nil {
		return *m.CoinFee
	}
	return 0
}

func init() {
	proto.RegisterType((*NiuniuClientPoker)(nil), "ddproto.niuniu_client_poker")
	proto.RegisterType((*NiuniuUserBill)(nil), "ddproto.niuniu_user_bill")
	proto.RegisterType((*NiuniuDeskOption)(nil), "ddproto.niuniu_desk_option")
	proto.RegisterType((*NiuniuSrvRoom)(nil), "ddproto.niuniu_srv_room")
	proto.RegisterEnum("ddproto.NiuniuEnumProtoid", NiuniuEnumProtoid_name, NiuniuEnumProtoid_value)
	proto.RegisterEnum("ddproto.NiuniuEnum_PokerType", NiuniuEnum_PokerType_name, NiuniuEnum_PokerType_value)
	proto.RegisterEnum("ddproto.NiuniuEnumDeskState", NiuniuEnumDeskState_name, NiuniuEnumDeskState_value)
	proto.RegisterEnum("ddproto.NiuniuEnumBankerRule", NiuniuEnumBankerRule_name, NiuniuEnumBankerRule_value)
	proto.RegisterEnum("ddproto.NiuniuEnumFanbeiRule", NiuniuEnumFanbeiRule_name, NiuniuEnumFanbeiRule_value)
}

func init() { proto.RegisterFile("niuniu_base.proto", fileDescriptor33) }

var fileDescriptor33 = []byte{
	// 1503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4b, 0x73, 0xe2, 0xce,
	0x11, 0x5f, 0xc0, 0x18, 0x18, 0xfc, 0x18, 0x8f, 0x5f, 0xb2, 0xbd, 0xeb, 0x65, 0x89, 0x2b, 0xa1,
	0x7c, 0x70, 0xd5, 0x3a, 0xef, 0xaa, 0x54, 0x25, 0x42, 0xc8, 0x20, 0x2f, 0x96, 0x58, 0x49, 0xac,
	0xd7, 0xbe, 0x4c, 0xc9, 0x30, 0x1b, 0xa6, 0x2c, 0x24, 0x17, 0x42, 0xeb, 0xc7, 0x29, 0x97, 0x7c,
	0x88, 0x7c, 0x94, 0x5c, 0x73, 0xcc, 0x97, 0x4a, 0xaa, 0x67, 0x24, 0x2c, 0xd6, 0x66, 0xab, 0xfe,
	0x27, 0x66, 0x7e, 0xbf, 0x5f, 0xf7, 0x74, 0x4f, 0x77, 0x0f, 0x42, 0x1b, 0x01, 0x8f, 0x03, 0x1e,
	0xd3, 0x1b, 0x2f, 0x62, 0x27, 0x77, 0x93, 0x70, 0x1a, 0x92, 0xd2, 0x70, 0x28, 0x16, 0xfb, 0x9b,
	0x83, 0x70, 0x3c, 0x0e, 0x03, 0x3a, 0xf0, 0x39, 0x0b, 0xa6, 0x92, 0xad, 0xff, 0x2b, 0x87, 0x36,
	0x13, 0x1b, 0x89, 0xd3, 0xbb, 0xf0, 0x96, 0x4d, 0xc8, 0x09, 0x5a, 0xba, 0xf3, 0x78, 0xa4, 0xe4,
	0x6b, 0x85, 0x46, 0xf5, 0x74, 0xff, 0x24, 0x71, 0x72, 0x92, 0x88, 0xc0, 0xbf, 0x54, 0xda, 0x42,
	0x47, 0x4e, 0xd1, 0xd2, 0xf4, 0xf1, 0x8e, 0x29, 0x85, 0x5a, 0xae, 0xb1, 0x76, 0x7a, 0x38, 0xd3,
	0x27, 0xbe, 0x59, 0x10, 0x8f, 0x69, 0x0f, 0xf4, 0xee, 0xe3, 0x1d, 0xb3, 0x85, 0x96, 0x1c, 0x22,
	0x14, 0x31, 0x9f, 0x0d, 0xa6, 0x6c, 0x68, 0x0c, 0x95, 0xa5, 0x5a, 0xa1, 0x51, 0xb4, 0x33, 0x48,
	0xfd, 0x3f, 0x39, 0x84, 0x13, 0xfb, 0x38, 0x62, 0x13, 0x7a, 0xc3, 0x7d, 0x9f, 0x6c, 0xa1, 0x62,
	0x34, 0x08, 0x27, 0x4c, 0xc9, 0xd5, 0x72, 0x8d, 0x82, 0x2d, 0x37, 0xa4, 0x8e, 0x56, 0x07, 0x61,
	0x1c, 0x4c, 0xe9, 0xc8, 0x8b, 0x68, 0xc0, 0x63, 0x25, 0x5f, 0xcb, 0x35, 0x8a, 0x76, 0x55, 0x80,
	0x1d, 0x2f, 0x32, 0x79, 0x4c, 0x6a, 0x68, 0x45, 0x6a, 0x82, 0x50, 0x48, 0x0a, 0x42, 0x82, 0x04,
	0x66, 0x86, 0xa0, 0x38, 0x40, 0x15, 0xa9, 0xb8, 0xe7, 0x81, 0xb2, 0x24, 0xe8, 0xb2, 0x00, 0x2e,
	0x79, 0x40, 0xde, 0x21, 0x29, 0xa5, 0x7e, 0x18, 0x4d, 0x95, 0xa2, 0x60, 0xa5, 0xbc, 0x1b, 0x46,
	0x53, 0xb2, 0x83, 0x96, 0x21, 0x48, 0x63, 0xa8, 0x2c, 0xd7, 0x72, 0x8d, 0x55, 0x3b, 0xd9, 0xd5,
	0xff, 0x5b, 0x42, 0x24, 0x49, 0x62, 0xc8, 0xa2, 0x5b, 0x1a, 0xde, 0x4d, 0x79, 0x18, 0x10, 0x05,
	0x95, 0xc6, 0x3c, 0xe8, 0x47, 0x6c, 0x22, 0x12, 0x29, 0xda, 0xe9, 0x56, 0x30, 0xde, 0x83, 0x60,
	0xf2, 0x09, 0x23, 0xb7, 0xe4, 0x2d, 0xaa, 0x8c, 0xbd, 0x07, 0x8d, 0x4f, 0x06, 0x3e, 0x4b, 0xa2,
	0x7f, 0x06, 0x80, 0x1d, 0x79, 0xd1, 0x99, 0x1f, 0xde, 0xb3, 0x89, 0x08, 0xbe, 0x6c, 0x3f, 0x03,
	0xe4, 0x2f, 0xa8, 0x7c, 0xe3, 0x05, 0xb7, 0x76, 0xec, 0x33, 0x11, 0xfb, 0xda, 0x69, 0xed, 0xd5,
	0x1a, 0x81, 0x88, 0x4d, 0xe8, 0x24, 0xf6, 0x99, 0x3d, 0xb3, 0x20, 0x75, 0xb4, 0xc2, 0x13, 0x4f,
	0x3d, 0xdf, 0x7b, 0x14, 0x29, 0x96, 0xed, 0x39, 0x8c, 0x34, 0xd0, 0x3a, 0x8f, 0xce, 0xb9, 0x17,
	0x9e, 0xb1, 0xe0, 0x9c, 0x7b, 0x4d, 0xc6, 0x95, 0x92, 0x90, 0xfd, 0x08, 0x83, 0xb7, 0x91, 0x17,
	0xa9, 0x01, 0x1f, 0x7b, 0x70, 0x17, 0x4a, 0x59, 0x7a, 0xcb, 0x62, 0xd0, 0x1b, 0x3c, 0xd2, 0x42,
	0x1e, 0xd8, 0x61, 0x38, 0x56, 0x2a, 0x42, 0x91, 0x41, 0x20, 0x5b, 0xe8, 0x41, 0x47, 0xb4, 0x02,
	0x12, 0xad, 0xf0, 0x0c, 0xc0, 0x1d, 0x06, 0x8c, 0x0d, 0x7b, 0xf7, 0x43, 0xa5, 0x2a, 0x4c, 0xd3,
	0x2d, 0x39, 0x42, 0xab, 0x63, 0x1e, 0xe8, 0xc1, 0x94, 0x4d, 0xa4, 0xed, 0x8a, 0xb0, 0x9d, 0x07,
	0xc1, 0x7e, 0x10, 0xf2, 0xe0, 0x8c, 0x31, 0x65, 0x5d, 0xf0, 0xe9, 0x16, 0xe2, 0x1a, 0x7b, 0x0f,
	0x9f, 0x9f, 0xa4, 0xf1, 0xaa, 0x20, 0x33, 0x08, 0xe4, 0x36, 0x64, 0xc1, 0x63, 0xc7, 0xf3, 0xbf,
	0x9d, 0x87, 0x3c, 0x50, 0xd6, 0x64, 0x6e, 0x59, 0x8c, 0xec, 0xa3, 0xf2, 0x60, 0xe4, 0x05, 0xcc,
	0x37, 0x86, 0x0a, 0x4e, 0xba, 0x2c, 0xd9, 0x13, 0x07, 0xe1, 0x49, 0x18, 0x8e, 0x35, 0x6f, 0x32,
	0x6c, 0x72, 0xdf, 0x87, 0x69, 0x51, 0x36, 0x44, 0xbd, 0x7e, 0x33, 0xab, 0x97, 0x66, 0x5d, 0x5c,
	0x58, 0x26, 0xd5, 0xcd, 0xfe, 0x05, 0xb5, 0x2d, 0xeb, 0x42, 0x53, 0xed, 0x16, 0x6d, 0x1a, 0xdd,
	0x2e, 0x75, 0xaf, 0x7a, 0xba, 0xfd, 0xc2, 0x01, 0xf9, 0x1b, 0x42, 0xdf, 0xbc, 0xe0, 0x86, 0x71,
	0x51, 0x7e, 0xf2, 0x93, 0xf2, 0x4b, 0x99, 0x2c, 0x7f, 0xc6, 0x86, 0x1c, 0xa1, 0x35, 0x98, 0xac,
	0x68, 0x14, 0x07, 0x4f, 0x5c, 0x4c, 0xcf, 0xe6, 0xac, 0x68, 0x8e, 0x00, 0x61, 0x7e, 0xea, 0x68,
	0x15, 0x54, 0xf7, 0xf1, 0x28, 0xf6, 0x84, 0x68, 0x4b, 0x88, 0xaa, 0x23, 0x2f, 0xba, 0x04, 0x0c,
	0x34, 0xbf, 0x46, 0xeb, 0xa0, 0x99, 0x86, 0xc1, 0xdf, 0x53, 0xd5, 0xb6, 0x50, 0x81, 0xa9, 0x2b,
	0xd1, 0x64, 0x5a, 0x41, 0x37, 0x8a, 0xfd, 0x58, 0x88, 0x76, 0x64, 0x0b, 0x8c, 0xbc, 0xa8, 0x13,
	0xfb, 0x31, 0x28, 0x92, 0x98, 0x9e, 0x46, 0xde, 0xd0, 0x0b, 0x84, 0x66, 0x77, 0x16, 0xd3, 0xb5,
	0x00, 0x41, 0xd5, 0x40, 0x18, 0x54, 0x0f, 0xdc, 0x0b, 0x47, 0xb1, 0x27, 0x63, 0x57, 0x84, 0x0e,
	0xac, 0xbf, 0x26, 0x30, 0x28, 0x3f, 0xa0, 0x95, 0x69, 0xcc, 0x9f, 0x46, 0x31, 0x95, 0x0f, 0xcc,
	0x9e, 0x7c, 0x42, 0x24, 0x26, 0xaa, 0x5b, 0xff, 0x77, 0x1e, 0xad, 0x27, 0xd7, 0x15, 0x4d, 0xbe,
	0x53, 0xb8, 0x68, 0x18, 0x7c, 0xf8, 0x35, 0x86, 0xc9, 0x20, 0x27, 0x3b, 0xa8, 0x32, 0xac, 0x44,
	0x05, 0xe5, 0x20, 0xcf, 0xf6, 0xd0, 0xbd, 0xb0, 0xee, 0xb2, 0xef, 0xcc, 0x4f, 0x27, 0x79, 0x06,
	0xa4, 0xac, 0xcb, 0xa7, 0x3e, 0x13, 0x93, 0x5c, 0xb1, 0x9f, 0x01, 0xf0, 0x0b, 0x8d, 0xae, 0x8d,
	0xf8, 0x9d, 0x98, 0xe4, 0x82, 0x3d, 0xdb, 0x83, 0x25, 0x83, 0x2e, 0x86, 0x31, 0x11, 0x43, 0x5a,
	0xb0, 0x9f, 0x81, 0xb9, 0x37, 0xa0, 0xf4, 0x8b, 0xdf, 0x00, 0x98, 0x1c, 0xef, 0xa1, 0xc5, 0xa2,
	0xdb, 0xb6, 0x37, 0x1e, 0xb3, 0x89, 0x18, 0xdb, 0xa2, 0x3d, 0x0f, 0x66, 0x27, 0xa7, 0x32, 0x37,
	0x39, 0xc7, 0xff, 0x2b, 0xcd, 0xfe, 0x69, 0xc4, 0x29, 0xe2, 0x5c, 0x3e, 0x24, 0xdb, 0x68, 0xc3,
	0x34, 0xfa, 0xb4, 0x67, 0xb4, 0x68, 0x47, 0x57, 0x6d, 0xb7, 0xa9, 0xab, 0x2e, 0x7e, 0x43, 0x76,
	0x10, 0x49, 0xe1, 0xcf, 0x7d, 0x43, 0xfb, 0x44, 0x35, 0xcb, 0x34, 0x71, 0x8e, 0xec, 0xa3, 0x9d,
	0x97, 0x38, 0x55, 0xb5, 0x4f, 0x38, 0x9f, 0xb5, 0x69, 0xab, 0x17, 0x3a, 0xed, 0x5a, 0x6d, 0xc3,
	0xc4, 0x85, 0xac, 0xcd, 0x33, 0x2e, 0x6c, 0x96, 0xc8, 0x01, 0xda, 0x4d, 0x39, 0xcd, 0xd6, 0x55,
	0x57, 0xa7, 0x2d, 0xdd, 0xf9, 0x44, 0x6d, 0xfd, 0x33, 0x2e, 0x66, 0x0d, 0x75, 0xd3, 0xd5, 0xed,
	0x67, 0x6e, 0x79, 0x01, 0x07, 0x4e, 0x4b, 0x64, 0x0f, 0x6d, 0xbf, 0xc2, 0x35, 0x35, 0x5c, 0xce,
	0xa6, 0x6b, 0xeb, 0x6a, 0xeb, 0x4a, 0x78, 0xab, 0xbc, 0x84, 0xc1, 0x11, 0x22, 0x5b, 0x08, 0xcf,
	0xc3, 0x4d, 0x0d, 0x57, 0xb3, 0xee, 0x1d, 0x57, 0xb5, 0x5d, 0x99, 0x95, 0xe5, 0xe2, 0x95, 0xb9,
	0xeb, 0x31, 0x54, 0xb3, 0x7d, 0xdd, 0xe9, 0xab, 0x66, 0x1b, 0xb8, 0xd5, 0x6c, 0xaa, 0x59, 0x0e,
	0x02, 0x58, 0x5b, 0x44, 0x42, 0x18, 0xeb, 0x8b, 0xbc, 0x36, 0x35, 0x8c, 0xb3, 0x91, 0x9f, 0x1b,
	0x6a, 0x53, 0x37, 0xe0, 0xb0, 0x8d, 0x6c, 0x2d, 0x12, 0x18, 0xce, 0x21, 0xaf, 0xe0, 0x70, 0xc4,
	0xe6, 0x2b, 0x6e, 0x9a, 0x1a, 0xde, 0xca, 0x86, 0xd5, 0x34, 0x7a, 0x2a, 0x78, 0x71, 0xfa, 0x5d,
	0x17, 0xc8, 0x6d, 0xb2, 0x8b, 0x36, 0xe7, 0xea, 0xaa, 0x9b, 0x2d, 0x20, 0x76, 0xc8, 0x21, 0xda,
	0x4f, 0x09, 0xb5, 0xd7, 0xeb, 0x5e, 0xd1, 0x96, 0xe1, 0x38, 0x56, 0xf7, 0x8b, 0x2e, 0x82, 0xd8,
	0xfd, 0x09, 0x0f, 0xc1, 0x28, 0xe4, 0x1d, 0xda, 0x4b, 0xf9, 0x19, 0xd3, 0x54, 0x35, 0x59, 0xfa,
	0xbd, 0xc5, 0x34, 0x58, 0xef, 0x93, 0xb7, 0x48, 0x79, 0x41, 0xb7, 0x2c, 0x53, 0x87, 0xd8, 0x0e,
	0xb2, 0xac, 0x03, 0x01, 0x5f, 0xe8, 0x8e, 0xa3, 0xb6, 0x65, 0x64, 0x6f, 0xb3, 0xd7, 0x93, 0x12,
	0x4d, 0x0d, 0xbf, 0xcb, 0x56, 0xa0, 0xab, 0xab, 0x5f, 0x32, 0x5d, 0x7a, 0xb8, 0x80, 0x83, 0x58,
	0xde, 0x67, 0x33, 0xb5, 0x2e, 0x4d, 0xe8, 0xc4, 0xec, 0x4d, 0xd4, 0x7e, 0xc2, 0x83, 0xfd, 0x07,
	0x42, 0xd0, 0x1a, 0xf0, 0xd6, 0xd9, 0x59, 0xd7, 0x90, 0x19, 0xd4, 0xd3, 0xf3, 0x34, 0xcb, 0x30,
	0xc5, 0xff, 0x0f, 0xed, 0x1a, 0x8e, 0x2b, 0xfc, 0xfd, 0x6a, 0x01, 0x07, 0xbe, 0x8e, 0x8e, 0xff,
	0x99, 0x47, 0xdb, 0xaf, 0x7e, 0x0f, 0x12, 0x84, 0x96, 0x4d, 0x8b, 0x9a, 0x46, 0x1f, 0xe7, 0x48,
	0x05, 0x15, 0xc1, 0xc3, 0x47, 0x9c, 0x4f, 0x97, 0xa7, 0xb8, 0x90, 0x2e, 0x7f, 0x8b, 0x97, 0xd2,
	0xe5, 0xef, 0x70, 0x31, 0x5d, 0xfe, 0x1e, 0x2f, 0xa7, 0xcb, 0x3f, 0xe0, 0x52, 0xba, 0xfc, 0x23,
	0x2e, 0xa7, 0xcb, 0x3f, 0xe1, 0x4a, 0xba, 0xfc, 0x33, 0x46, 0xa4, 0x8a, 0x4a, 0xb0, 0x84, 0xf3,
	0xaa, 0xe9, 0x88, 0x5d, 0x19, 0xd4, 0x35, 0x54, 0x8b, 0x76, 0x2d, 0xb3, 0x8d, 0x57, 0x40, 0x72,
	0x65, 0x98, 0x42, 0xb2, 0x46, 0x36, 0xd1, 0x3a, 0x48, 0x5c, 0xcb, 0x6c, 0x77, 0xfa, 0xaa, 0x00,
	0x31, 0xc1, 0x68, 0x05, 0xc0, 0x4e, 0xbf, 0x2b, 0x3d, 0x6d, 0x90, 0x75, 0x54, 0x05, 0xe4, 0xba,
	0xa3, 0xd2, 0x96, 0x6a, 0x62, 0x92, 0xf6, 0xf4, 0x57, 0x43, 0xb5, 0x9c, 0x4e, 0x5f, 0x35, 0x84,
	0x6e, 0xf3, 0xf8, 0x1f, 0x79, 0xb4, 0x93, 0xbd, 0x07, 0xf1, 0x5d, 0x18, 0x4d, 0xbd, 0x29, 0x4b,
	0xcb, 0x21, 0x0a, 0xe8, 0xb8, 0xaa, 0xdb, 0x77, 0xe8, 0xa5, 0x6a, 0xb8, 0xf2, 0x15, 0xc1, 0xb9,
	0x85, 0xbc, 0x78, 0x1c, 0x70, 0x7e, 0x21, 0x2f, 0x9e, 0x09, 0x5c, 0x20, 0x47, 0xa8, 0xf6, 0x2a,
	0x9f, 0x99, 0x6a, 0xbc, 0x44, 0xde, 0xa3, 0x83, 0x57, 0x55, 0x72, 0x30, 0x71, 0x71, 0xe1, 0x31,
	0x62, 0x44, 0xf1, 0xf2, 0x42, 0x07, 0x72, 0x78, 0x71, 0xe9, 0xf8, 0x16, 0xed, 0x2e, 0xf8, 0xc7,
	0x81, 0x5b, 0x6c, 0x19, 0x66, 0x9b, 0x26, 0xd1, 0xe4, 0xe0, 0x16, 0x9d, 0xbe, 0x41, 0xcf, 0x0d,
	0x7a, 0xdd, 0xb7, 0x52, 0x38, 0x0f, 0xf7, 0x2f, 0xa2, 0x4e, 0x91, 0x02, 0xcc, 0xce, 0x99, 0x4c,
	0x83, 0x82, 0x87, 0x34, 0x9d, 0xe3, 0xbf, 0xce, 0x1f, 0x96, 0xf9, 0xc6, 0x21, 0x1b, 0x68, 0xf5,
	0x4c, 0x35, 0xc5, 0xeb, 0xd4, 0xef, 0xea, 0xf4, 0x23, 0xce, 0xfd, 0x08, 0x9d, 0xe2, 0x7c, 0xef,
	0xcd, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x23, 0x44, 0x35, 0x58, 0x0d, 0x00, 0x00,
}
