// Code generated by protoc-gen-go.
// source: phz_play.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_req_kickout from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_req_upload_location from common_client.proto

// Ignoring public import of common_bc_leaveTimeout from common_client.proto

// Ignoring public import of common_desk_by_agent from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

// Ignoring public import of phz_base_createOption from phz_base.proto

// Ignoring public import of phz_base_roomInfo from phz_base.proto

// Ignoring public import of phz_base_deskInfo from phz_base.proto

// Ignoring public import of phz_base_playerInfo from phz_base.proto

// Ignoring public import of phz_enum_protoId from phz_base.proto

// Ignoring public import of phz_enum_roomType from phz_base.proto

type PhzReq_Ready struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReq_Ready) Reset()                    { *m = PhzReq_Ready{} }
func (m *PhzReq_Ready) String() string            { return proto.CompactTextString(m) }
func (*PhzReq_Ready) ProtoMessage()               {}
func (*PhzReq_Ready) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{0} }

func (m *PhzReq_Ready) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type PhzAck_Ready struct {
	Header           *ProtoHeader           `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserReadyStatus  []*PhzPlay_ReadyStatus `protobuf:"bytes,2,rep,name=userReadyStatus" json:"userReadyStatus,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *PhzAck_Ready) Reset()                    { *m = PhzAck_Ready{} }
func (m *PhzAck_Ready) String() string            { return proto.CompactTextString(m) }
func (*PhzAck_Ready) ProtoMessage()               {}
func (*PhzAck_Ready) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{1} }

func (m *PhzAck_Ready) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAck_Ready) GetUserReadyStatus() []*PhzPlay_ReadyStatus {
	if m != nil {
		return m.UserReadyStatus
	}
	return nil
}

type PhzPlay_ReadyStatus struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	IsReady          *bool   `protobuf:"varint,2,opt,name=isReady" json:"isReady,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlay_ReadyStatus) Reset()                    { *m = PhzPlay_ReadyStatus{} }
func (m *PhzPlay_ReadyStatus) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_ReadyStatus) ProtoMessage()               {}
func (*PhzPlay_ReadyStatus) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{2} }

func (m *PhzPlay_ReadyStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlay_ReadyStatus) GetIsReady() bool {
	if m != nil && m.IsReady != nil {
		return *m.IsReady
	}
	return false
}

type PhzPlay_Opening struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CurrentRound     *int32       `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_Opening) Reset()                    { *m = PhzPlay_Opening{} }
func (m *PhzPlay_Opening) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_Opening) ProtoMessage()               {}
func (*PhzPlay_Opening) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{3} }

func (m *PhzPlay_Opening) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_Opening) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

// 给每个玩家发送手牌
type PhzPlay_SendCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiIds           []int32      `protobuf:"varint,2,rep,name=paiIds" json:"paiIds,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_SendCards) Reset()                    { *m = PhzPlay_SendCards{} }
func (m *PhzPlay_SendCards) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_SendCards) ProtoMessage()               {}
func (*PhzPlay_SendCards) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{4} }

func (m *PhzPlay_SendCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_SendCards) GetPaiIds() []int32 {
	if m != nil {
		return m.PaiIds
	}
	return nil
}

// 请求出牌的协议
type PhzReq_OutCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiId            *int32       `protobuf:"varint,2,opt,name=paiId" json:"paiId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReq_OutCards) Reset()                    { *m = PhzReq_OutCards{} }
func (m *PhzReq_OutCards) String() string            { return proto.CompactTextString(m) }
func (*PhzReq_OutCards) ProtoMessage()               {}
func (*PhzReq_OutCards) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{5} }

func (m *PhzReq_OutCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReq_OutCards) GetPaiId() int32 {
	if m != nil && m.PaiId != nil {
		return *m.PaiId
	}
	return 0
}

type PhzAck_OutCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	IsOutCardOK      *bool        `protobuf:"varint,2,opt,name=isOutCardOK" json:"isOutCardOK,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzAck_OutCards) Reset()                    { *m = PhzAck_OutCards{} }
func (m *PhzAck_OutCards) String() string            { return proto.CompactTextString(m) }
func (*PhzAck_OutCards) ProtoMessage()               {}
func (*PhzAck_OutCards) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{6} }

func (m *PhzAck_OutCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAck_OutCards) GetIsOutCardOK() bool {
	if m != nil && m.IsOutCardOK != nil {
		return *m.IsOutCardOK
	}
	return false
}

type PhzPlay_MoPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiId            *int32       `protobuf:"varint,2,opt,name=paiId" json:"paiId,omitempty"`
	IsFirst          *bool        `protobuf:"varint,3,opt,name=isFirst" json:"isFirst,omitempty"`
	OperatorUID      *uint32      `protobuf:"varint,4,opt,name=operatorUID" json:"operatorUID,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_MoPai) Reset()                    { *m = PhzPlay_MoPai{} }
func (m *PhzPlay_MoPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_MoPai) ProtoMessage()               {}
func (*PhzPlay_MoPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{7} }

func (m *PhzPlay_MoPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_MoPai) GetPaiId() int32 {
	if m != nil && m.PaiId != nil {
		return *m.PaiId
	}
	return 0
}

func (m *PhzPlay_MoPai) GetIsFirst() bool {
	if m != nil && m.IsFirst != nil {
		return *m.IsFirst
	}
	return false
}

func (m *PhzPlay_MoPai) GetOperatorUID() uint32 {
	if m != nil && m.OperatorUID != nil {
		return *m.OperatorUID
	}
	return 0
}

type PhzPlay_Overturn struct {
	Header           *ProtoHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Peng             *PhzPlay_CanPeng `protobuf:"bytes,2,opt,name=Peng" json:"Peng,omitempty"`
	Chi              *PhzPlayCanChi   `protobuf:"bytes,3,opt,name=Chi" json:"Chi,omitempty"`
	Hu               *PhzPlayCanHuPai `protobuf:"bytes,4,opt,name=Hu" json:"Hu,omitempty"`
	OperatorUID      *uint32          `protobuf:"varint,5,opt,name=operatorUID" json:"operatorUID,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PhzPlay_Overturn) Reset()                    { *m = PhzPlay_Overturn{} }
func (m *PhzPlay_Overturn) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_Overturn) ProtoMessage()               {}
func (*PhzPlay_Overturn) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{8} }

func (m *PhzPlay_Overturn) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_Overturn) GetPeng() *PhzPlay_CanPeng {
	if m != nil {
		return m.Peng
	}
	return nil
}

func (m *PhzPlay_Overturn) GetChi() *PhzPlayCanChi {
	if m != nil {
		return m.Chi
	}
	return nil
}

func (m *PhzPlay_Overturn) GetHu() *PhzPlayCanHuPai {
	if m != nil {
		return m.Hu
	}
	return nil
}

func (m *PhzPlay_Overturn) GetOperatorUID() uint32 {
	if m != nil && m.OperatorUID != nil {
		return *m.OperatorUID
	}
	return 0
}

type PhzPlay_CanPeng struct {
	CanPeng          *bool  `protobuf:"varint,1,opt,name=canPeng" json:"canPeng,omitempty"`
	CanPengPaiId     *int32 `protobuf:"varint,2,opt,name=canPengPaiId" json:"canPengPaiId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PhzPlay_CanPeng) Reset()                    { *m = PhzPlay_CanPeng{} }
func (m *PhzPlay_CanPeng) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_CanPeng) ProtoMessage()               {}
func (*PhzPlay_CanPeng) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{9} }

func (m *PhzPlay_CanPeng) GetCanPeng() bool {
	if m != nil && m.CanPeng != nil {
		return *m.CanPeng
	}
	return false
}

func (m *PhzPlay_CanPeng) GetCanPengPaiId() int32 {
	if m != nil && m.CanPengPaiId != nil {
		return *m.CanPengPaiId
	}
	return 0
}

type PhzReq_Peng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PengPaiId        *int32       `protobuf:"varint,2,opt,name=pengPaiId" json:"pengPaiId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReq_Peng) Reset()                    { *m = PhzReq_Peng{} }
func (m *PhzReq_Peng) String() string            { return proto.CompactTextString(m) }
func (*PhzReq_Peng) ProtoMessage()               {}
func (*PhzReq_Peng) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{10} }

func (m *PhzReq_Peng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReq_Peng) GetPengPaiId() int32 {
	if m != nil && m.PengPaiId != nil {
		return *m.PengPaiId
	}
	return 0
}

// 碰牌ack
type PhzAck_Peng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzAck_Peng) Reset()                    { *m = PhzAck_Peng{} }
func (m *PhzAck_Peng) String() string            { return proto.CompactTextString(m) }
func (*PhzAck_Peng) ProtoMessage()               {}
func (*PhzAck_Peng) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{11} }

func (m *PhzAck_Peng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type PhzPlay_ChiPai struct {
	PaiId            []int32 `protobuf:"varint,1,rep,name=paiId" json:"paiId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlay_ChiPai) Reset()                    { *m = PhzPlay_ChiPai{} }
func (m *PhzPlay_ChiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_ChiPai) ProtoMessage()               {}
func (*PhzPlay_ChiPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{12} }

func (m *PhzPlay_ChiPai) GetPaiId() []int32 {
	if m != nil {
		return m.PaiId
	}
	return nil
}

type PhzPlayCanChi struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CanChi           *bool             `protobuf:"varint,2,opt,name=canChi" json:"canChi,omitempty"`
	ChiPaiGroup      []*PhzPlay_ChiPai `protobuf:"bytes,3,rep,name=chiPaiGroup" json:"chiPaiGroup,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PhzPlayCanChi) Reset()                    { *m = PhzPlayCanChi{} }
func (m *PhzPlayCanChi) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCanChi) ProtoMessage()               {}
func (*PhzPlayCanChi) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{13} }

func (m *PhzPlayCanChi) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayCanChi) GetCanChi() bool {
	if m != nil && m.CanChi != nil {
		return *m.CanChi
	}
	return false
}

func (m *PhzPlayCanChi) GetChiPaiGroup() []*PhzPlay_ChiPai {
	if m != nil {
		return m.ChiPaiGroup
	}
	return nil
}

type PhzReqChiPai struct {
	Header           *ProtoHeader    `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ChiPais          *PhzPlay_ChiPai `protobuf:"bytes,2,opt,name=chiPais" json:"chiPais,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PhzReqChiPai) Reset()                    { *m = PhzReqChiPai{} }
func (m *PhzReqChiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzReqChiPai) ProtoMessage()               {}
func (*PhzReqChiPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{14} }

func (m *PhzReqChiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReqChiPai) GetChiPais() *PhzPlay_ChiPai {
	if m != nil {
		return m.ChiPais
	}
	return nil
}

type PhzAckChiPai struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	IsBiPai          *bool             `protobuf:"varint,2,opt,name=isBiPai" json:"isBiPai,omitempty"`
	ChiPais          *PhzPlay_ChiPai   `protobuf:"bytes,3,opt,name=chiPais" json:"chiPais,omitempty"`
	Pais             []*PhzPlay_ChiPai `protobuf:"bytes,4,rep,name=pais" json:"pais,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PhzAckChiPai) Reset()                    { *m = PhzAckChiPai{} }
func (m *PhzAckChiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzAckChiPai) ProtoMessage()               {}
func (*PhzAckChiPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{15} }

func (m *PhzAckChiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAckChiPai) GetIsBiPai() bool {
	if m != nil && m.IsBiPai != nil {
		return *m.IsBiPai
	}
	return false
}

func (m *PhzAckChiPai) GetChiPais() *PhzPlay_ChiPai {
	if m != nil {
		return m.ChiPais
	}
	return nil
}

func (m *PhzAckChiPai) GetPais() []*PhzPlay_ChiPai {
	if m != nil {
		return m.Pais
	}
	return nil
}

type PhzPlayTiPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	TiPais           []int32      `protobuf:"varint,2,rep,name=tiPais" json:"tiPais,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayTiPai) Reset()                    { *m = PhzPlayTiPai{} }
func (m *PhzPlayTiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayTiPai) ProtoMessage()               {}
func (*PhzPlayTiPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{16} }

func (m *PhzPlayTiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayTiPai) GetTiPais() []int32 {
	if m != nil {
		return m.TiPais
	}
	return nil
}

type PhzPlayWeiPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	WeiPais          []int32      `protobuf:"varint,2,rep,name=weiPais" json:"weiPais,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayWeiPai) Reset()                    { *m = PhzPlayWeiPai{} }
func (m *PhzPlayWeiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayWeiPai) ProtoMessage()               {}
func (*PhzPlayWeiPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{17} }

func (m *PhzPlayWeiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayWeiPai) GetWeiPais() []int32 {
	if m != nil {
		return m.WeiPais
	}
	return nil
}

type PhzPlayPaoPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaoPais          []int32      `protobuf:"varint,2,rep,name=paoPais" json:"paoPais,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayPaoPai) Reset()                    { *m = PhzPlayPaoPai{} }
func (m *PhzPlayPaoPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayPaoPai) ProtoMessage()               {}
func (*PhzPlayPaoPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{18} }

func (m *PhzPlayPaoPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayPaoPai) GetPaoPais() []int32 {
	if m != nil {
		return m.PaoPais
	}
	return nil
}

type PhzPlayCanHuPai struct {
	CanHu            *bool  `protobuf:"varint,1,opt,name=canHu" json:"canHu,omitempty"`
	HuPaiId          *int32 `protobuf:"varint,2,opt,name=huPaiId" json:"huPaiId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PhzPlayCanHuPai) Reset()                    { *m = PhzPlayCanHuPai{} }
func (m *PhzPlayCanHuPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCanHuPai) ProtoMessage()               {}
func (*PhzPlayCanHuPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{19} }

func (m *PhzPlayCanHuPai) GetCanHu() bool {
	if m != nil && m.CanHu != nil {
		return *m.CanHu
	}
	return false
}

func (m *PhzPlayCanHuPai) GetHuPaiId() int32 {
	if m != nil && m.HuPaiId != nil {
		return *m.HuPaiId
	}
	return 0
}

type PhzReqHuPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiId            *int32       `protobuf:"varint,2,opt,name=paiId" json:"paiId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReqHuPai) Reset()                    { *m = PhzReqHuPai{} }
func (m *PhzReqHuPai) String() string            { return proto.CompactTextString(m) }
func (*PhzReqHuPai) ProtoMessage()               {}
func (*PhzReqHuPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{20} }

func (m *PhzReqHuPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReqHuPai) GetPaiId() int32 {
	if m != nil && m.PaiId != nil {
		return *m.PaiId
	}
	return 0
}

type PhzAckHuPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiIds           []int32      `protobuf:"varint,2,rep,name=paiIds" json:"paiIds,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzAckHuPai) Reset()                    { *m = PhzAckHuPai{} }
func (m *PhzAckHuPai) String() string            { return proto.CompactTextString(m) }
func (*PhzAckHuPai) ProtoMessage()               {}
func (*PhzAckHuPai) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{21} }

func (m *PhzAckHuPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAckHuPai) GetPaiIds() []int32 {
	if m != nil {
		return m.PaiIds
	}
	return nil
}

// 玩家的手牌
type PhzPlayHandPokers struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	PokerIds         []int32 `protobuf:"varint,2,rep,name=pokerIds" json:"pokerIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlayHandPokers) Reset()                    { *m = PhzPlayHandPokers{} }
func (m *PhzPlayHandPokers) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayHandPokers) ProtoMessage()               {}
func (*PhzPlayHandPokers) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{22} }

func (m *PhzPlayHandPokers) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlayHandPokers) GetPokerIds() []int32 {
	if m != nil {
		return m.PokerIds
	}
	return nil
}

// 每局的账单
type PhzPlayRoundBillBean struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Score            *int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	HuXi             *int32  `protobuf:"varint,3,opt,name=huXi" json:"huXi,omitempty"`
	Coin             *int64  `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlayRoundBillBean) Reset()                    { *m = PhzPlayRoundBillBean{} }
func (m *PhzPlayRoundBillBean) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayRoundBillBean) ProtoMessage()               {}
func (*PhzPlayRoundBillBean) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{23} }

func (m *PhzPlayRoundBillBean) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlayRoundBillBean) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *PhzPlayRoundBillBean) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

func (m *PhzPlayRoundBillBean) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type PhzPlayCurrentResult struct {
	Header           *ProtoHeader            `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	HandPokers       []*PhzPlayHandPokers    `protobuf:"bytes,2,rep,name=handPokers" json:"handPokers,omitempty"`
	CurrentRound     *int32                  `protobuf:"varint,3,opt,name=currentRound" json:"currentRound,omitempty"`
	TotalRound       *int32                  `protobuf:"varint,4,opt,name=totalRound" json:"totalRound,omitempty"`
	RoundBean        []*PhzPlayRoundBillBean `protobuf:"bytes,5,rep,name=roundBean" json:"roundBean,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PhzPlayCurrentResult) Reset()                    { *m = PhzPlayCurrentResult{} }
func (m *PhzPlayCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCurrentResult) ProtoMessage()               {}
func (*PhzPlayCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{24} }

func (m *PhzPlayCurrentResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayCurrentResult) GetHandPokers() []*PhzPlayHandPokers {
	if m != nil {
		return m.HandPokers
	}
	return nil
}

func (m *PhzPlayCurrentResult) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *PhzPlayCurrentResult) GetTotalRound() int32 {
	if m != nil && m.TotalRound != nil {
		return *m.TotalRound
	}
	return 0
}

func (m *PhzPlayCurrentResult) GetRoundBean() []*PhzPlayRoundBillBean {
	if m != nil {
		return m.RoundBean
	}
	return nil
}

type PhzPlayEndResult struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	IsbigWin         *bool        `protobuf:"varint,3,opt,name=isbigWin" json:"isbigWin,omitempty"`
	IsOwner          *bool        `protobuf:"varint,4,opt,name=isOwner" json:"isOwner,omitempty"`
	WinScore         *int64       `protobuf:"varint,5,opt,name=winScore" json:"winScore,omitempty"`
	WxInfo           *WeixinInfo  `protobuf:"bytes,6,opt,name=wxInfo" json:"wxInfo,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayEndResult) Reset()                    { *m = PhzPlayEndResult{} }
func (m *PhzPlayEndResult) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayEndResult) ProtoMessage()               {}
func (*PhzPlayEndResult) Descriptor() ([]byte, []int) { return fileDescriptor49, []int{25} }

func (m *PhzPlayEndResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayEndResult) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlayEndResult) GetIsbigWin() bool {
	if m != nil && m.IsbigWin != nil {
		return *m.IsbigWin
	}
	return false
}

func (m *PhzPlayEndResult) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PhzPlayEndResult) GetWinScore() int64 {
	if m != nil && m.WinScore != nil {
		return *m.WinScore
	}
	return 0
}

func (m *PhzPlayEndResult) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*PhzReq_Ready)(nil), "ddproto.phz_req_Ready")
	proto.RegisterType((*PhzAck_Ready)(nil), "ddproto.phz_ack_Ready")
	proto.RegisterType((*PhzPlay_ReadyStatus)(nil), "ddproto.phz_play_ReadyStatus")
	proto.RegisterType((*PhzPlay_Opening)(nil), "ddproto.phz_play_Opening")
	proto.RegisterType((*PhzPlay_SendCards)(nil), "ddproto.phz_play_SendCards")
	proto.RegisterType((*PhzReq_OutCards)(nil), "ddproto.phz_req_OutCards")
	proto.RegisterType((*PhzAck_OutCards)(nil), "ddproto.phz_ack_OutCards")
	proto.RegisterType((*PhzPlay_MoPai)(nil), "ddproto.phz_play_MoPai")
	proto.RegisterType((*PhzPlay_Overturn)(nil), "ddproto.phz_play_Overturn")
	proto.RegisterType((*PhzPlay_CanPeng)(nil), "ddproto.phz_play_CanPeng")
	proto.RegisterType((*PhzReq_Peng)(nil), "ddproto.phz_req_Peng")
	proto.RegisterType((*PhzAck_Peng)(nil), "ddproto.phz_ack_Peng")
	proto.RegisterType((*PhzPlay_ChiPai)(nil), "ddproto.phz_play_ChiPai")
	proto.RegisterType((*PhzPlayCanChi)(nil), "ddproto.phz_play_canChi")
	proto.RegisterType((*PhzReqChiPai)(nil), "ddproto.phz_req_chiPai")
	proto.RegisterType((*PhzAckChiPai)(nil), "ddproto.phz_ack_chiPai")
	proto.RegisterType((*PhzPlayTiPai)(nil), "ddproto.phz_play_tiPai")
	proto.RegisterType((*PhzPlayWeiPai)(nil), "ddproto.phz_play_weiPai")
	proto.RegisterType((*PhzPlayPaoPai)(nil), "ddproto.phz_play_paoPai")
	proto.RegisterType((*PhzPlayCanHuPai)(nil), "ddproto.phz_play_canHuPai")
	proto.RegisterType((*PhzReqHuPai)(nil), "ddproto.phz_req_huPai")
	proto.RegisterType((*PhzAckHuPai)(nil), "ddproto.phz_ack_huPai")
	proto.RegisterType((*PhzPlayHandPokers)(nil), "ddproto.phz_play_handPokers")
	proto.RegisterType((*PhzPlayRoundBillBean)(nil), "ddproto.phz_play_roundBillBean")
	proto.RegisterType((*PhzPlayCurrentResult)(nil), "ddproto.phz_play_currentResult")
	proto.RegisterType((*PhzPlayEndResult)(nil), "ddproto.phz_play_endResult")
}

var fileDescriptor49 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x6f, 0xdc, 0x44,
	0x10, 0xc6, 0xe7, 0xf3, 0x25, 0x9d, 0x6b, 0x29, 0x38, 0x51, 0x64, 0xa2, 0x02, 0xd1, 0xbe, 0x10,
	0x95, 0x92, 0x87, 0x7b, 0x44, 0xed, 0x4b, 0x0e, 0xd1, 0x3b, 0x21, 0x14, 0x6b, 0xa3, 0xb6, 0xd0,
	0x97, 0xd3, 0xc6, 0x5e, 0xe2, 0x55, 0xaf, 0x6b, 0xb3, 0xb6, 0x49, 0xcb, 0x0f, 0x80, 0x57, 0x24,
	0xfe, 0x0d, 0xff, 0x84, 0xbf, 0xc0, 0xaf, 0x40, 0x3b, 0xbb, 0xb6, 0x37, 0xb9, 0x9c, 0xc0, 0x56,
	0x5e, 0x4e, 0xfb, 0xcd, 0x7d, 0x33, 0xfb, 0xcd, 0xec, 0xec, 0x78, 0xe1, 0xc3, 0x22, 0xfb, 0x75,
	0x55, 0xac, 0xd9, 0xfb, 0x93, 0x42, 0xe5, 0x55, 0x1e, 0xee, 0xa4, 0x29, 0x2e, 0x0e, 0xf7, 0x92,
	0xfc, 0xed, 0xdb, 0x5c, 0xae, 0x92, 0xb5, 0xe0, 0xb2, 0x32, 0xff, 0x1e, 0x22, 0xfb, 0x82, 0x95,
	0xdc, 0x60, 0xf2, 0x0c, 0x1e, 0x68, 0x8b, 0xe2, 0x3f, 0xaf, 0x28, 0x67, 0xe9, 0xfb, 0xf0, 0x09,
	0x4c, 0x32, 0xce, 0x52, 0xae, 0x22, 0xef, 0xc8, 0x3b, 0x9e, 0xce, 0xf6, 0x4f, 0x6c, 0xbc, 0x93,
	0x58, 0xff, 0x2e, 0xf0, 0x3f, 0x6a, 0x39, 0xe4, 0x37, 0xcf, 0xf8, 0xb3, 0xe4, 0xcd, 0x10, 0xff,
	0xf0, 0x39, 0x3c, 0xac, 0x4b, 0xae, 0xd0, 0xf5, 0xbc, 0x62, 0x55, 0x5d, 0x46, 0xa3, 0x23, 0xff,
	0x78, 0x3a, 0xfb, 0xb4, 0x75, 0x6b, 0xd2, 0x5b, 0x39, 0x24, 0x7a, 0xd3, 0x8b, 0x2c, 0x60, 0xff,
	0x36, 0x62, 0x78, 0x00, 0x13, 0x4d, 0x5d, 0xa6, 0x28, 0xe7, 0x01, 0xb5, 0x28, 0x8c, 0x60, 0x47,
	0x94, 0x48, 0x8c, 0x46, 0x47, 0xde, 0xf1, 0x2e, 0x6d, 0x20, 0x49, 0xe1, 0xa3, 0x36, 0xd2, 0x59,
	0xc1, 0xa5, 0x90, 0x97, 0x3d, 0x93, 0x22, 0x70, 0x3f, 0xa9, 0x95, 0xe2, 0xb2, 0xa2, 0x79, 0x2d,
	0x53, 0xdc, 0x20, 0xa0, 0xd7, 0x6c, 0xe4, 0x35, 0x84, 0xed, 0x2e, 0xe7, 0x5c, 0xa6, 0x73, 0xa6,
	0xd2, 0xb2, 0xe7, 0x3e, 0x07, 0x30, 0x29, 0x98, 0x58, 0xa6, 0xa6, 0x66, 0x01, 0xb5, 0x88, 0xbc,
	0x34, 0x19, 0xe8, 0x33, 0x3d, 0xab, 0xab, 0x21, 0x91, 0xf7, 0x21, 0xc0, 0x58, 0x56, 0xba, 0x01,
	0xe4, 0xc2, 0xc4, 0xd5, 0x67, 0x3d, 0x30, 0xee, 0x11, 0x4c, 0x45, 0x69, 0x7d, 0xcf, 0xbe, 0xb3,
	0x95, 0x77, 0x4d, 0xe4, 0x0f, 0xaf, 0x6b, 0xe8, 0xd5, 0xf7, 0x79, 0xcc, 0xc4, 0x5d, 0x48, 0x37,
	0xc7, 0xfd, 0xad, 0x50, 0x65, 0x15, 0xf9, 0xcd, 0x71, 0x23, 0xd4, 0x92, 0xf2, 0x82, 0x2b, 0x56,
	0xe5, 0xea, 0xc5, 0xf2, 0x9b, 0x68, 0x8c, 0x5d, 0xe2, 0x9a, 0xc8, 0x3f, 0x1e, 0x7c, 0xdc, 0x75,
	0xc4, 0x2f, 0x5c, 0x55, 0xb5, 0x92, 0x3d, 0x55, 0x7d, 0x05, 0xe3, 0x98, 0xcb, 0x4b, 0x14, 0x35,
	0x9d, 0x7d, 0xb2, 0xd9, 0xdc, 0x73, 0x26, 0x35, 0x81, 0x22, 0x2d, 0x7c, 0x0c, 0xfe, 0x3c, 0x13,
	0x28, 0x75, 0x3a, 0x8b, 0x36, 0xd9, 0x09, 0x93, 0xf3, 0x4c, 0x50, 0x4d, 0x0a, 0x1f, 0xc3, 0x68,
	0x51, 0xa3, 0xee, 0xe9, 0xec, 0xf0, 0x56, 0xea, 0xa2, 0x8e, 0x99, 0xa0, 0xa3, 0x45, 0x7d, 0x33,
	0xd9, 0x60, 0x33, 0xd9, 0xd8, 0xe9, 0x7e, 0xab, 0x49, 0x17, 0x2f, 0x31, 0x4b, 0xcc, 0x75, 0x97,
	0x36, 0x10, 0x3b, 0xdd, 0x2c, 0x63, 0xa7, 0xe6, 0xd7, 0x6c, 0xe4, 0x35, 0xdc, 0x6f, 0xba, 0x11,
	0x7d, 0xfa, 0x15, 0xee, 0x11, 0xdc, 0x2b, 0x6e, 0x84, 0xef, 0x0c, 0xe4, 0xa9, 0x89, 0xad, 0x3b,
	0xb2, 0x7f, 0x6c, 0xf2, 0x05, 0x3c, 0xec, 0x72, 0xcd, 0x84, 0xee, 0xb5, 0xb6, 0x7b, 0x3c, 0xbc,
	0x51, 0xb6, 0xf1, 0xff, 0xf4, 0x1c, 0xa6, 0xa9, 0x7d, 0xff, 0xab, 0x6a, 0xfc, 0x6c, 0xcf, 0x5b,
	0x14, 0x7e, 0x0d, 0xd3, 0x04, 0x77, 0x7e, 0xae, 0xf2, 0xba, 0x88, 0x7c, 0x9c, 0x7d, 0xb7, 0x1c,
	0xb8, 0x91, 0x47, 0x5d, 0x32, 0x51, 0xe6, 0xa6, 0xe8, 0xc2, 0x1a, 0x73, 0x4f, 0x4d, 0x33, 0xd8,
	0x31, 0x7e, 0xa5, 0x6d, 0xcb, 0xed, 0xfb, 0x36, 0x44, 0xf2, 0x97, 0xbd, 0x9e, 0xba, 0xe2, 0x83,
	0x36, 0xc5, 0x8b, 0x78, 0xaa, 0x1d, 0xbb, 0xb9, 0x8b, 0xd0, 0x95, 0xe3, 0xff, 0x4f, 0x39, 0xe1,
	0x13, 0x18, 0x17, 0xda, 0x61, 0xfc, 0x1f, 0x75, 0x43, 0x16, 0x79, 0xe9, 0x8c, 0x96, 0x6a, 0x80,
	0xf6, 0x03, 0x98, 0x54, 0x4d, 0xbd, 0x70, 0xde, 0x1a, 0x44, 0x7e, 0x74, 0xba, 0xe3, 0x8a, 0x0f,
	0x2b, 0x8a, 0xf1, 0x6b, 0x22, 0x37, 0xf0, 0x5a, 0xe8, 0x82, 0xe5, 0x83, 0x42, 0x1b, 0xbf, 0x36,
	0xb4, 0x85, 0x64, 0xee, 0x4c, 0xb5, 0x66, 0x48, 0xe8, 0xfe, 0xc7, 0xb5, 0xbd, 0xe8, 0x06, 0xe8,
	0x20, 0x59, 0xed, 0x5e, 0xc1, 0x06, 0x92, 0xf3, 0xee, 0xf9, 0x80, 0xa6, 0x3b, 0xf9, 0xce, 0xbc,
	0xe8, 0xde, 0x14, 0x43, 0x82, 0x6e, 0xfb, 0x2c, 0x2e, 0x61, 0xaf, 0x4d, 0x38, 0x63, 0x32, 0x8d,
	0xf3, 0x37, 0x5c, 0x6d, 0x7f, 0x21, 0x1c, 0xc2, 0x6e, 0xa1, 0x19, 0x5d, 0xa0, 0x16, 0x13, 0x09,
	0x07, 0x6d, 0x28, 0xa5, 0xbf, 0xe7, 0xa7, 0x62, 0xbd, 0x3e, 0xe5, 0x4c, 0x6e, 0x8d, 0xb6, 0x0f,
	0x41, 0x99, 0xe4, 0x8a, 0x63, 0xa6, 0x3e, 0x35, 0x20, 0x0c, 0x61, 0x9c, 0xd5, 0x3f, 0x98, 0x41,
	0x1f, 0x50, 0x5c, 0x6b, 0x5b, 0x92, 0x0b, 0x89, 0x13, 0xdd, 0xa7, 0xb8, 0x26, 0xbf, 0x8f, 0x9c,
	0x0d, 0x9b, 0x77, 0x04, 0x2f, 0xeb, 0x75, 0xd5, 0xb3, 0x36, 0x4f, 0x01, 0xba, 0xd4, 0xed, 0x53,
	0xeb, 0xd1, 0xe6, 0xb5, 0xe9, 0x38, 0xd4, 0xe1, 0x6f, 0x3c, 0x6c, 0xfc, 0xcd, 0x87, 0x4d, 0xf8,
	0x19, 0x40, 0x95, 0x57, 0x6c, 0x6d, 0x18, 0x63, 0x64, 0x38, 0x96, 0xf0, 0x19, 0xdc, 0x33, 0x15,
	0xe3, 0x4c, 0x46, 0x01, 0x0a, 0xf8, 0x7c, 0x53, 0xc0, 0xb5, 0xa2, 0xd2, 0xce, 0x83, 0xfc, 0xed,
	0x39, 0x0f, 0x27, 0x2e, 0xd3, 0x41, 0x55, 0xe8, 0x0e, 0x69, 0x74, 0xf3, 0xc8, 0x45, 0x79, 0x21,
	0x2e, 0x5f, 0x09, 0x69, 0x9f, 0x09, 0x2d, 0x36, 0x83, 0xeb, 0xec, 0x4a, 0x72, 0x85, 0x49, 0xe1,
	0xe0, 0x42, 0xa8, 0xbd, 0xae, 0x84, 0x3c, 0xc7, 0xd3, 0x0d, 0xf0, 0xd0, 0x5a, 0x1c, 0x7e, 0x09,
	0x93, 0xab, 0x77, 0x4b, 0xf9, 0x53, 0x1e, 0x4d, 0x50, 0xd7, 0x5e, 0xab, 0xeb, 0x15, 0x17, 0xef,
	0x84, 0xd4, 0x7f, 0x51, 0x4b, 0x89, 0x3f, 0x88, 0xbd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x65,
	0x3b, 0x82, 0xfb, 0xce, 0x0b, 0x00, 0x00,
}
