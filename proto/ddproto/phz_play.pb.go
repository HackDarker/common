// Code generated by protoc-gen-go. DO NOT EDIT.
// source: phz_play.proto

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_req_kickout from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_req_upload_location from common_client.proto

// Ignoring public import of common_bc_leaveTimeout from common_client.proto

// Ignoring public import of common_desk_by_agent from common_client.proto

// Ignoring public import of common_req_list_coin_desk from common_client.proto

// Ignoring public import of common_ack_list_coin_desk from common_client.proto

// Ignoring public import of CommonCoinDeskInfo from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

// Ignoring public import of phz_base_createOption from phz_base.proto

// Ignoring public import of phz_base_roomInfo from phz_base.proto

// Ignoring public import of phz_base_deskInfo from phz_base.proto

// Ignoring public import of phz_base_playerInfo from phz_base.proto

// Ignoring public import of phz_enum_protoId from phz_base.proto

// Ignoring public import of phz_enum_roomType from phz_base.proto

// Ignoring public import of phz_enum_tiType from phz_base.proto

// Ignoring public import of phz_enum_pengType from phz_base.proto

// Ignoring public import of phz_enum_paoType from phz_base.proto

type PhzEnumActionType int32

const (
	PhzEnumActionType_PHZ_ACTIONTYPE_MOPAI     PhzEnumActionType = 1
	PhzEnumActionType_PHZ_ACTIONTYPE_CHUPAI    PhzEnumActionType = 2
	PhzEnumActionType_PHZ_ACTIONTYPE_PAO       PhzEnumActionType = 3
	PhzEnumActionType_PHZ_ACTIONTYPE_CHIPENGHU PhzEnumActionType = 4
)

var PhzEnumActionType_name = map[int32]string{
	1: "PHZ_ACTIONTYPE_MOPAI",
	2: "PHZ_ACTIONTYPE_CHUPAI",
	3: "PHZ_ACTIONTYPE_PAO",
	4: "PHZ_ACTIONTYPE_CHIPENGHU",
}
var PhzEnumActionType_value = map[string]int32{
	"PHZ_ACTIONTYPE_MOPAI":     1,
	"PHZ_ACTIONTYPE_CHUPAI":    2,
	"PHZ_ACTIONTYPE_PAO":       3,
	"PHZ_ACTIONTYPE_CHIPENGHU": 4,
}

func (x PhzEnumActionType) Enum() *PhzEnumActionType {
	p := new(PhzEnumActionType)
	*p = x
	return p
}
func (x PhzEnumActionType) String() string {
	return proto.EnumName(PhzEnumActionType_name, int32(x))
}
func (x *PhzEnumActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PhzEnumActionType_value, data, "PhzEnumActionType")
	if err != nil {
		return err
	}
	*x = PhzEnumActionType(value)
	return nil
}
func (PhzEnumActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor47, []int{0} }

type PhzEnumHuType int32

const (
	PhzEnumHuType_PHZ_HUTYPE_YIKUAIBIAN  PhzEnumHuType = 1
	PhzEnumHuType_PHZ_HUTYPE_YIDIANHONG  PhzEnumHuType = 2
	PhzEnumHuType_PHZ_HUTYPE_SHIHONG     PhzEnumHuType = 3
	PhzEnumHuType_PHZ_HUTYPE_HONGHU      PhzEnumHuType = 4
	PhzEnumHuType_PHZ_HUTYPE_WUHU        PhzEnumHuType = 5
	PhzEnumHuType_PHZ_HUTYPE_KAHU        PhzEnumHuType = 6
	PhzEnumHuType_PHZ_HUTYPE_20HU        PhzEnumHuType = 7
	PhzEnumHuType_PHZ_HUTYPE_DUIDUIHU    PhzEnumHuType = 8
	PhzEnumHuType_PHZ_HUTYPE_HAIDIHU     PhzEnumHuType = 9
	PhzEnumHuType_PHZ_HUTYPE_TIANHU      PhzEnumHuType = 10
	PhzEnumHuType_PHZ_HUTYPE_DIHU        PhzEnumHuType = 11
	PhzEnumHuType_PHZ_HUTYPE_HUANGZHUANG PhzEnumHuType = 12
)

var PhzEnumHuType_name = map[int32]string{
	1:  "PHZ_HUTYPE_YIKUAIBIAN",
	2:  "PHZ_HUTYPE_YIDIANHONG",
	3:  "PHZ_HUTYPE_SHIHONG",
	4:  "PHZ_HUTYPE_HONGHU",
	5:  "PHZ_HUTYPE_WUHU",
	6:  "PHZ_HUTYPE_KAHU",
	7:  "PHZ_HUTYPE_20HU",
	8:  "PHZ_HUTYPE_DUIDUIHU",
	9:  "PHZ_HUTYPE_HAIDIHU",
	10: "PHZ_HUTYPE_TIANHU",
	11: "PHZ_HUTYPE_DIHU",
	12: "PHZ_HUTYPE_HUANGZHUANG",
}
var PhzEnumHuType_value = map[string]int32{
	"PHZ_HUTYPE_YIKUAIBIAN":  1,
	"PHZ_HUTYPE_YIDIANHONG":  2,
	"PHZ_HUTYPE_SHIHONG":     3,
	"PHZ_HUTYPE_HONGHU":      4,
	"PHZ_HUTYPE_WUHU":        5,
	"PHZ_HUTYPE_KAHU":        6,
	"PHZ_HUTYPE_20HU":        7,
	"PHZ_HUTYPE_DUIDUIHU":    8,
	"PHZ_HUTYPE_HAIDIHU":     9,
	"PHZ_HUTYPE_TIANHU":      10,
	"PHZ_HUTYPE_DIHU":        11,
	"PHZ_HUTYPE_HUANGZHUANG": 12,
}

func (x PhzEnumHuType) Enum() *PhzEnumHuType {
	p := new(PhzEnumHuType)
	*p = x
	return p
}
func (x PhzEnumHuType) String() string {
	return proto.EnumName(PhzEnumHuType_name, int32(x))
}
func (x *PhzEnumHuType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PhzEnumHuType_value, data, "PhzEnumHuType")
	if err != nil {
		return err
	}
	*x = PhzEnumHuType(value)
	return nil
}
func (PhzEnumHuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor47, []int{1} }

// 玩家请求i准备
type PhzReq_Ready struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReq_Ready) Reset()                    { *m = PhzReq_Ready{} }
func (m *PhzReq_Ready) String() string            { return proto.CompactTextString(m) }
func (*PhzReq_Ready) ProtoMessage()               {}
func (*PhzReq_Ready) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{0} }

func (m *PhzReq_Ready) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 玩家请求准备的回复，回复每个玩家的准备状态
type PhzAck_Ready struct {
	Header           *ProtoHeader           `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserReadyStatus  []*PhzPlay_ReadyStatus `protobuf:"bytes,2,rep,name=userReadyStatus" json:"userReadyStatus,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *PhzAck_Ready) Reset()                    { *m = PhzAck_Ready{} }
func (m *PhzAck_Ready) String() string            { return proto.CompactTextString(m) }
func (*PhzAck_Ready) ProtoMessage()               {}
func (*PhzAck_Ready) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{1} }

func (m *PhzAck_Ready) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAck_Ready) GetUserReadyStatus() []*PhzPlay_ReadyStatus {
	if m != nil {
		return m.UserReadyStatus
	}
	return nil
}

// 每个玩家的准备状态
type PhzPlay_ReadyStatus struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	IsReady          *bool   `protobuf:"varint,2,opt,name=isReady" json:"isReady,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlay_ReadyStatus) Reset()                    { *m = PhzPlay_ReadyStatus{} }
func (m *PhzPlay_ReadyStatus) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_ReadyStatus) ProtoMessage()               {}
func (*PhzPlay_ReadyStatus) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{2} }

func (m *PhzPlay_ReadyStatus) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlay_ReadyStatus) GetIsReady() bool {
	if m != nil && m.IsReady != nil {
		return *m.IsReady
	}
	return false
}

// 开局
type PhzPlay_Opening struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CurrentRound     *int32       `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_Opening) Reset()                    { *m = PhzPlay_Opening{} }
func (m *PhzPlay_Opening) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_Opening) ProtoMessage()               {}
func (*PhzPlay_Opening) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{3} }

func (m *PhzPlay_Opening) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_Opening) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

// 给每个玩家发送手牌
type PhzPlay_SendCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiIds           []int32      `protobuf:"varint,2,rep,name=paiIds" json:"paiIds,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_SendCards) Reset()                    { *m = PhzPlay_SendCards{} }
func (m *PhzPlay_SendCards) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_SendCards) ProtoMessage()               {}
func (*PhzPlay_SendCards) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{4} }

func (m *PhzPlay_SendCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_SendCards) GetPaiIds() []int32 {
	if m != nil {
		return m.PaiIds
	}
	return nil
}

// 请求出牌的协议
type PhzReq_OutCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiId            *int32       `protobuf:"varint,2,opt,name=paiId" json:"paiId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReq_OutCards) Reset()                    { *m = PhzReq_OutCards{} }
func (m *PhzReq_OutCards) String() string            { return proto.CompactTextString(m) }
func (*PhzReq_OutCards) ProtoMessage()               {}
func (*PhzReq_OutCards) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{5} }

func (m *PhzReq_OutCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReq_OutCards) GetPaiId() int32 {
	if m != nil && m.PaiId != nil {
		return *m.PaiId
	}
	return 0
}

// 出牌后的回复，失败成功都要回复
type PhzAck_OutCards struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	IsOutCardOK      *bool        `protobuf:"varint,2,opt,name=isOutCardOK" json:"isOutCardOK,omitempty"`
	PaiId            *int32       `protobuf:"varint,3,opt,name=paiId" json:"paiId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzAck_OutCards) Reset()                    { *m = PhzAck_OutCards{} }
func (m *PhzAck_OutCards) String() string            { return proto.CompactTextString(m) }
func (*PhzAck_OutCards) ProtoMessage()               {}
func (*PhzAck_OutCards) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{6} }

func (m *PhzAck_OutCards) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAck_OutCards) GetIsOutCardOK() bool {
	if m != nil && m.IsOutCardOK != nil {
		return *m.IsOutCardOK
	}
	return false
}

func (m *PhzAck_OutCards) GetPaiId() int32 {
	if m != nil && m.PaiId != nil {
		return *m.PaiId
	}
	return 0
}

// 摸牌协议
type PhzPlay_MoPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiId            *int32       `protobuf:"varint,2,opt,name=paiId" json:"paiId,omitempty"`
	IsFirst          *bool        `protobuf:"varint,3,opt,name=isFirst" json:"isFirst,omitempty"`
	OperatorUID      *uint32      `protobuf:"varint,4,opt,name=operatorUID" json:"operatorUID,omitempty"`
	RemainPokerCount *int32       `protobuf:"varint,5,opt,name=remainPokerCount" json:"remainPokerCount,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_MoPai) Reset()                    { *m = PhzPlay_MoPai{} }
func (m *PhzPlay_MoPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_MoPai) ProtoMessage()               {}
func (*PhzPlay_MoPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{7} }

func (m *PhzPlay_MoPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_MoPai) GetPaiId() int32 {
	if m != nil && m.PaiId != nil {
		return *m.PaiId
	}
	return 0
}

func (m *PhzPlay_MoPai) GetIsFirst() bool {
	if m != nil && m.IsFirst != nil {
		return *m.IsFirst
	}
	return false
}

func (m *PhzPlay_MoPai) GetOperatorUID() uint32 {
	if m != nil && m.OperatorUID != nil {
		return *m.OperatorUID
	}
	return 0
}

func (m *PhzPlay_MoPai) GetRemainPokerCount() int32 {
	if m != nil && m.RemainPokerCount != nil {
		return *m.RemainPokerCount
	}
	return 0
}

// 操作overturn
type PhzPlay_Overturn struct {
	Header           *ProtoHeader       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CanPeng          *bool              `protobuf:"varint,2,opt,name=canPeng" json:"canPeng,omitempty"`
	Chi              *PhzPlayCanChi     `protobuf:"bytes,3,opt,name=Chi" json:"Chi,omitempty"`
	CanHu            *bool              `protobuf:"varint,4,opt,name=canHu" json:"canHu,omitempty"`
	OperatorUID      *uint32            `protobuf:"varint,5,opt,name=operatorUID" json:"operatorUID,omitempty"`
	CanOutCard       *bool              `protobuf:"varint,6,opt,name=canOutCard" json:"canOutCard,omitempty"`
	ActionType       *PhzEnumActionType `protobuf:"varint,7,opt,name=actionType,enum=ddproto.PhzEnumActionType" json:"actionType,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PhzPlay_Overturn) Reset()                    { *m = PhzPlay_Overturn{} }
func (m *PhzPlay_Overturn) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_Overturn) ProtoMessage()               {}
func (*PhzPlay_Overturn) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{8} }

func (m *PhzPlay_Overturn) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_Overturn) GetCanPeng() bool {
	if m != nil && m.CanPeng != nil {
		return *m.CanPeng
	}
	return false
}

func (m *PhzPlay_Overturn) GetChi() *PhzPlayCanChi {
	if m != nil {
		return m.Chi
	}
	return nil
}

func (m *PhzPlay_Overturn) GetCanHu() bool {
	if m != nil && m.CanHu != nil {
		return *m.CanHu
	}
	return false
}

func (m *PhzPlay_Overturn) GetOperatorUID() uint32 {
	if m != nil && m.OperatorUID != nil {
		return *m.OperatorUID
	}
	return 0
}

func (m *PhzPlay_Overturn) GetCanOutCard() bool {
	if m != nil && m.CanOutCard != nil {
		return *m.CanOutCard
	}
	return false
}

func (m *PhzPlay_Overturn) GetActionType() PhzEnumActionType {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return PhzEnumActionType_PHZ_ACTIONTYPE_MOPAI
}

// 是否可以碰牌，包括是否偎牌字段，之前定的偎牌的单独的proto暂时不管,臭偎和偎牌直接根据这个message显示
type PhzPlay_CanPeng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	WeiPais          []int32      `protobuf:"varint,2,rep,name=weiPais" json:"weiPais,omitempty"`
	IsWeiPai         *bool        `protobuf:"varint,3,opt,name=isWeiPai" json:"isWeiPai,omitempty"`
	IsChouWei        *bool        `protobuf:"varint,4,opt,name=isChouWei" json:"isChouWei,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlay_CanPeng) Reset()                    { *m = PhzPlay_CanPeng{} }
func (m *PhzPlay_CanPeng) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_CanPeng) ProtoMessage()               {}
func (*PhzPlay_CanPeng) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{9} }

func (m *PhzPlay_CanPeng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlay_CanPeng) GetWeiPais() []int32 {
	if m != nil {
		return m.WeiPais
	}
	return nil
}

func (m *PhzPlay_CanPeng) GetIsWeiPai() bool {
	if m != nil && m.IsWeiPai != nil {
		return *m.IsWeiPai
	}
	return false
}

func (m *PhzPlay_CanPeng) GetIsChouWei() bool {
	if m != nil && m.IsChouWei != nil {
		return *m.IsChouWei
	}
	return false
}

// 请求碰牌，只需传userId，由服务器内部处理碰哪张牌
type PhzReq_Peng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReq_Peng) Reset()                    { *m = PhzReq_Peng{} }
func (m *PhzReq_Peng) String() string            { return proto.CompactTextString(m) }
func (*PhzReq_Peng) ProtoMessage()               {}
func (*PhzReq_Peng) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{10} }

func (m *PhzReq_Peng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 正常碰牌的回复，
type PhzAck_Peng struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	OutUser          *uint32      `protobuf:"varint,2,opt,name=outUser" json:"outUser,omitempty"`
	PengUser         *uint32      `protobuf:"varint,3,opt,name=pengUser" json:"pengUser,omitempty"`
	PengPai          []int32      `protobuf:"varint,4,rep,name=pengPai" json:"pengPai,omitempty"`
	HuXi             *int32       `protobuf:"varint,5,opt,name=huXi" json:"huXi,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzAck_Peng) Reset()                    { *m = PhzAck_Peng{} }
func (m *PhzAck_Peng) String() string            { return proto.CompactTextString(m) }
func (*PhzAck_Peng) ProtoMessage()               {}
func (*PhzAck_Peng) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{11} }

func (m *PhzAck_Peng) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAck_Peng) GetOutUser() uint32 {
	if m != nil && m.OutUser != nil {
		return *m.OutUser
	}
	return 0
}

func (m *PhzAck_Peng) GetPengUser() uint32 {
	if m != nil && m.PengUser != nil {
		return *m.PengUser
	}
	return 0
}

func (m *PhzAck_Peng) GetPengPai() []int32 {
	if m != nil {
		return m.PengPai
	}
	return nil
}

func (m *PhzAck_Peng) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

// 所有可以吃的牌的组合
type PhzPlay_ChiPai struct {
	PaiId            []int32 `protobuf:"varint,1,rep,name=paiId" json:"paiId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlay_ChiPai) Reset()                    { *m = PhzPlay_ChiPai{} }
func (m *PhzPlay_ChiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlay_ChiPai) ProtoMessage()               {}
func (*PhzPlay_ChiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{12} }

func (m *PhzPlay_ChiPai) GetPaiId() []int32 {
	if m != nil {
		return m.PaiId
	}
	return nil
}

// 是否可以吃牌
type PhzPlayCanChi struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ChiPaiGroup      []*PhzPlay_ChiPai `protobuf:"bytes,2,rep,name=chiPaiGroup" json:"chiPaiGroup,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PhzPlayCanChi) Reset()                    { *m = PhzPlayCanChi{} }
func (m *PhzPlayCanChi) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCanChi) ProtoMessage()               {}
func (*PhzPlayCanChi) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{13} }

func (m *PhzPlayCanChi) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayCanChi) GetChiPaiGroup() []*PhzPlay_ChiPai {
	if m != nil {
		return m.ChiPaiGroup
	}
	return nil
}

// 吃牌的请求
type PhzReqChiPai struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ChiPais          *PhzPlay_ChiPai   `protobuf:"bytes,2,opt,name=chiPais" json:"chiPais,omitempty"`
	BiPais           []*PhzPlay_ChiPai `protobuf:"bytes,3,rep,name=biPais" json:"biPais,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PhzReqChiPai) Reset()                    { *m = PhzReqChiPai{} }
func (m *PhzReqChiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzReqChiPai) ProtoMessage()               {}
func (*PhzReqChiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{14} }

func (m *PhzReqChiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReqChiPai) GetChiPais() *PhzPlay_ChiPai {
	if m != nil {
		return m.ChiPais
	}
	return nil
}

func (m *PhzReqChiPai) GetBiPais() []*PhzPlay_ChiPai {
	if m != nil {
		return m.BiPais
	}
	return nil
}

type PhzReqBiPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ChiPaiIds        []int32      `protobuf:"varint,2,rep,name=chiPaiIds" json:"chiPaiIds,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReqBiPai) Reset()                    { *m = PhzReqBiPai{} }
func (m *PhzReqBiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzReqBiPai) ProtoMessage()               {}
func (*PhzReqBiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{15} }

func (m *PhzReqBiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReqBiPai) GetChiPaiIds() []int32 {
	if m != nil {
		return m.ChiPaiIds
	}
	return nil
}

// 玩家选择吃牌后， 由服务器返回比牌的结果
type PhzAckBiPai struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	BiPais           []*PhzPlay_ChiPai `protobuf:"bytes,2,rep,name=biPais" json:"biPais,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PhzAckBiPai) Reset()                    { *m = PhzAckBiPai{} }
func (m *PhzAckBiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzAckBiPai) ProtoMessage()               {}
func (*PhzAckBiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{16} }

func (m *PhzAckBiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAckBiPai) GetBiPais() []*PhzPlay_ChiPai {
	if m != nil {
		return m.BiPais
	}
	return nil
}

// 玩家请求吃牌且比牌(如果要比牌的话)后的回复
type PhzAckChiPai struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	IsBiPai          *bool             `protobuf:"varint,2,opt,name=isBiPai" json:"isBiPai,omitempty"`
	ChiPais          *PhzPlay_ChiPai   `protobuf:"bytes,3,opt,name=chiPais" json:"chiPais,omitempty"`
	BiPais           []*PhzPlay_ChiPai `protobuf:"bytes,4,rep,name=biPais" json:"biPais,omitempty"`
	OutUser          *uint32           `protobuf:"varint,5,opt,name=outUser" json:"outUser,omitempty"`
	ChiUser          *uint32           `protobuf:"varint,6,opt,name=chiUser" json:"chiUser,omitempty"`
	HuXi             *int32            `protobuf:"varint,7,opt,name=huXi" json:"huXi,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PhzAckChiPai) Reset()                    { *m = PhzAckChiPai{} }
func (m *PhzAckChiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzAckChiPai) ProtoMessage()               {}
func (*PhzAckChiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{17} }

func (m *PhzAckChiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAckChiPai) GetIsBiPai() bool {
	if m != nil && m.IsBiPai != nil {
		return *m.IsBiPai
	}
	return false
}

func (m *PhzAckChiPai) GetChiPais() *PhzPlay_ChiPai {
	if m != nil {
		return m.ChiPais
	}
	return nil
}

func (m *PhzAckChiPai) GetBiPais() []*PhzPlay_ChiPai {
	if m != nil {
		return m.BiPais
	}
	return nil
}

func (m *PhzAckChiPai) GetOutUser() uint32 {
	if m != nil && m.OutUser != nil {
		return *m.OutUser
	}
	return 0
}

func (m *PhzAckChiPai) GetChiUser() uint32 {
	if m != nil && m.ChiUser != nil {
		return *m.ChiUser
	}
	return 0
}

func (m *PhzAckChiPai) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

// 暂不用
type PhzPlayTiPai struct {
	PaiId            []int32        `protobuf:"varint,1,rep,name=paiId" json:"paiId,omitempty"`
	TiType           *PhzEnumTiType `protobuf:"varint,3,opt,name=tiType,enum=ddproto.PhzEnumTiType" json:"tiType,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PhzPlayTiPai) Reset()                    { *m = PhzPlayTiPai{} }
func (m *PhzPlayTiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayTiPai) ProtoMessage()               {}
func (*PhzPlayTiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{18} }

func (m *PhzPlayTiPai) GetPaiId() []int32 {
	if m != nil {
		return m.PaiId
	}
	return nil
}

func (m *PhzPlayTiPai) GetTiType() PhzEnumTiType {
	if m != nil && m.TiType != nil {
		return *m.TiType
	}
	return PhzEnumTiType_PHZ_TITYPE_HAVE_THREE
}

// 用于玩家提牌、跑牌
type PhzPlayCanTiPai struct {
	Header           *ProtoHeader    `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	TiPais           []*PhzPlayTiPai `protobuf:"bytes,2,rep,name=tiPais" json:"tiPais,omitempty"`
	OutUser          *uint32         `protobuf:"varint,4,opt,name=outUser" json:"outUser,omitempty"`
	TiUser           *uint32         `protobuf:"varint,5,opt,name=tiUser" json:"tiUser,omitempty"`
	HuXi             *int32          `protobuf:"varint,6,opt,name=huXi" json:"huXi,omitempty"`
	IsBaKuai         *bool           `protobuf:"varint,7,opt,name=isBaKuai" json:"isBaKuai,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PhzPlayCanTiPai) Reset()                    { *m = PhzPlayCanTiPai{} }
func (m *PhzPlayCanTiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCanTiPai) ProtoMessage()               {}
func (*PhzPlayCanTiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{19} }

func (m *PhzPlayCanTiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayCanTiPai) GetTiPais() []*PhzPlayTiPai {
	if m != nil {
		return m.TiPais
	}
	return nil
}

func (m *PhzPlayCanTiPai) GetOutUser() uint32 {
	if m != nil && m.OutUser != nil {
		return *m.OutUser
	}
	return 0
}

func (m *PhzPlayCanTiPai) GetTiUser() uint32 {
	if m != nil && m.TiUser != nil {
		return *m.TiUser
	}
	return 0
}

func (m *PhzPlayCanTiPai) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

func (m *PhzPlayCanTiPai) GetIsBaKuai() bool {
	if m != nil && m.IsBaKuai != nil {
		return *m.IsBaKuai
	}
	return false
}

// 偎牌协议
type PhzPlayWeiPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	WeiPais          []int32      `protobuf:"varint,2,rep,name=weiPais" json:"weiPais,omitempty"`
	HuXi             *int32       `protobuf:"varint,3,opt,name=huXi" json:"huXi,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayWeiPai) Reset()                    { *m = PhzPlayWeiPai{} }
func (m *PhzPlayWeiPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayWeiPai) ProtoMessage()               {}
func (*PhzPlayWeiPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{20} }

func (m *PhzPlayWeiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayWeiPai) GetWeiPais() []int32 {
	if m != nil {
		return m.WeiPais
	}
	return nil
}

func (m *PhzPlayWeiPai) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

// 用于跑牌
type PhzPlayPaoPai struct {
	Header           *ProtoHeader    `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaoPais          []int32         `protobuf:"varint,2,rep,name=paoPais" json:"paoPais,omitempty"`
	PaoType          *PhzEnumPaoType `protobuf:"varint,3,opt,name=paoType,enum=ddproto.PhzEnumPaoType" json:"paoType,omitempty"`
	OutUser          *uint32         `protobuf:"varint,4,opt,name=outUser" json:"outUser,omitempty"`
	PaoUser          *uint32         `protobuf:"varint,5,opt,name=paoUser" json:"paoUser,omitempty"`
	HuXi             *int32          `protobuf:"varint,6,opt,name=huXi" json:"huXi,omitempty"`
	IsBaKuai         *bool           `protobuf:"varint,7,opt,name=isBaKuai" json:"isBaKuai,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *PhzPlayPaoPai) Reset()                    { *m = PhzPlayPaoPai{} }
func (m *PhzPlayPaoPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayPaoPai) ProtoMessage()               {}
func (*PhzPlayPaoPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{21} }

func (m *PhzPlayPaoPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayPaoPai) GetPaoPais() []int32 {
	if m != nil {
		return m.PaoPais
	}
	return nil
}

func (m *PhzPlayPaoPai) GetPaoType() PhzEnumPaoType {
	if m != nil && m.PaoType != nil {
		return *m.PaoType
	}
	return PhzEnumPaoType_PHZ_PAOTYPE_THREE_ONE
}

func (m *PhzPlayPaoPai) GetOutUser() uint32 {
	if m != nil && m.OutUser != nil {
		return *m.OutUser
	}
	return 0
}

func (m *PhzPlayPaoPai) GetPaoUser() uint32 {
	if m != nil && m.PaoUser != nil {
		return *m.PaoUser
	}
	return 0
}

func (m *PhzPlayPaoPai) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

func (m *PhzPlayPaoPai) GetIsBaKuai() bool {
	if m != nil && m.IsBaKuai != nil {
		return *m.IsBaKuai
	}
	return false
}

// 玩家是否可以胡牌
type PhzPlayCanHuPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	CanHu            *bool        `protobuf:"varint,2,opt,name=canHu" json:"canHu,omitempty"`
	HuPaiId          *int32       `protobuf:"varint,3,opt,name=huPaiId" json:"huPaiId,omitempty"`
	IsTianHu         *bool        `protobuf:"varint,4,opt,name=isTianHu" json:"isTianHu,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayCanHuPai) Reset()                    { *m = PhzPlayCanHuPai{} }
func (m *PhzPlayCanHuPai) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCanHuPai) ProtoMessage()               {}
func (*PhzPlayCanHuPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{22} }

func (m *PhzPlayCanHuPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayCanHuPai) GetCanHu() bool {
	if m != nil && m.CanHu != nil {
		return *m.CanHu
	}
	return false
}

func (m *PhzPlayCanHuPai) GetHuPaiId() int32 {
	if m != nil && m.HuPaiId != nil {
		return *m.HuPaiId
	}
	return 0
}

func (m *PhzPlayCanHuPai) GetIsTianHu() bool {
	if m != nil && m.IsTianHu != nil {
		return *m.IsTianHu
	}
	return false
}

// 胡牌请求
type PhzReqHuPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReqHuPai) Reset()                    { *m = PhzReqHuPai{} }
func (m *PhzReqHuPai) String() string            { return proto.CompactTextString(m) }
func (*PhzReqHuPai) ProtoMessage()               {}
func (*PhzReqHuPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{23} }

func (m *PhzReqHuPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 胡牌的回复
type PhzAckHuPai struct {
	Header           *ProtoHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PaiIds           []int32        `protobuf:"varint,2,rep,name=paiIds" json:"paiIds,omitempty"`
	OutUser          *uint32        `protobuf:"varint,3,opt,name=outUser" json:"outUser,omitempty"`
	HuUser           *uint32        `protobuf:"varint,4,opt,name=huUser" json:"huUser,omitempty"`
	HuXi             *int32         `protobuf:"varint,5,opt,name=huXi" json:"huXi,omitempty"`
	HuType           *PhzEnumHuType `protobuf:"varint,6,opt,name=huType,enum=ddproto.PhzEnumHuType" json:"huType,omitempty"`
	IsZiMo           *bool          `protobuf:"varint,7,opt,name=isZiMo" json:"isZiMo,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PhzAckHuPai) Reset()                    { *m = PhzAckHuPai{} }
func (m *PhzAckHuPai) String() string            { return proto.CompactTextString(m) }
func (*PhzAckHuPai) ProtoMessage()               {}
func (*PhzAckHuPai) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{24} }

func (m *PhzAckHuPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAckHuPai) GetPaiIds() []int32 {
	if m != nil {
		return m.PaiIds
	}
	return nil
}

func (m *PhzAckHuPai) GetOutUser() uint32 {
	if m != nil && m.OutUser != nil {
		return *m.OutUser
	}
	return 0
}

func (m *PhzAckHuPai) GetHuUser() uint32 {
	if m != nil && m.HuUser != nil {
		return *m.HuUser
	}
	return 0
}

func (m *PhzAckHuPai) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

func (m *PhzAckHuPai) GetHuType() PhzEnumHuType {
	if m != nil && m.HuType != nil {
		return *m.HuType
	}
	return PhzEnumHuType_PHZ_HUTYPE_YIKUAIBIAN
}

func (m *PhzAckHuPai) GetIsZiMo() bool {
	if m != nil && m.IsZiMo != nil {
		return *m.IsZiMo
	}
	return false
}

type PhzReqPass struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	IsPass           *bool        `protobuf:"varint,3,opt,name=isPass" json:"isPass,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzReqPass) Reset()                    { *m = PhzReqPass{} }
func (m *PhzReqPass) String() string            { return proto.CompactTextString(m) }
func (*PhzReqPass) ProtoMessage()               {}
func (*PhzReqPass) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{25} }

func (m *PhzReqPass) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzReqPass) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzReqPass) GetIsPass() bool {
	if m != nil && m.IsPass != nil {
		return *m.IsPass
	}
	return false
}

type PhzAckPass struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	IsPassOk         *bool        `protobuf:"varint,3,opt,name=isPassOk" json:"isPassOk,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzAckPass) Reset()                    { *m = PhzAckPass{} }
func (m *PhzAckPass) String() string            { return proto.CompactTextString(m) }
func (*PhzAckPass) ProtoMessage()               {}
func (*PhzAckPass) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{26} }

func (m *PhzAckPass) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzAckPass) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *PhzAckPass) GetIsPassOk() bool {
	if m != nil && m.IsPassOk != nil {
		return *m.IsPassOk
	}
	return false
}

// 玩家的手牌
type PhzPlayHandPokers struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	PokerIds         []int32 `protobuf:"varint,2,rep,name=pokerIds" json:"pokerIds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlayHandPokers) Reset()                    { *m = PhzPlayHandPokers{} }
func (m *PhzPlayHandPokers) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayHandPokers) ProtoMessage()               {}
func (*PhzPlayHandPokers) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{27} }

func (m *PhzPlayHandPokers) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlayHandPokers) GetPokerIds() []int32 {
	if m != nil {
		return m.PokerIds
	}
	return nil
}

// 每局的账单
type PhzPlayRoundBillBean struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Score            *int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	HuXi             *int32  `protobuf:"varint,3,opt,name=huXi" json:"huXi,omitempty"`
	Coin             *int64  `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhzPlayRoundBillBean) Reset()                    { *m = PhzPlayRoundBillBean{} }
func (m *PhzPlayRoundBillBean) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayRoundBillBean) ProtoMessage()               {}
func (*PhzPlayRoundBillBean) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{28} }

func (m *PhzPlayRoundBillBean) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlayRoundBillBean) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *PhzPlayRoundBillBean) GetHuXi() int32 {
	if m != nil && m.HuXi != nil {
		return *m.HuXi
	}
	return 0
}

func (m *PhzPlayRoundBillBean) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

type PhzPlayCurrentResult struct {
	Header           *ProtoHeader            `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	HandPokers       []*PhzPlayHandPokers    `protobuf:"bytes,2,rep,name=handPokers" json:"handPokers,omitempty"`
	CurrentRound     *int32                  `protobuf:"varint,3,opt,name=currentRound" json:"currentRound,omitempty"`
	TotalRound       *int32                  `protobuf:"varint,4,opt,name=totalRound" json:"totalRound,omitempty"`
	RoundBean        []*PhzPlayRoundBillBean `protobuf:"bytes,5,rep,name=roundBean" json:"roundBean,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PhzPlayCurrentResult) Reset()                    { *m = PhzPlayCurrentResult{} }
func (m *PhzPlayCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayCurrentResult) ProtoMessage()               {}
func (*PhzPlayCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{29} }

func (m *PhzPlayCurrentResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayCurrentResult) GetHandPokers() []*PhzPlayHandPokers {
	if m != nil {
		return m.HandPokers
	}
	return nil
}

func (m *PhzPlayCurrentResult) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *PhzPlayCurrentResult) GetTotalRound() int32 {
	if m != nil && m.TotalRound != nil {
		return *m.TotalRound
	}
	return 0
}

func (m *PhzPlayCurrentResult) GetRoundBean() []*PhzPlayRoundBillBean {
	if m != nil {
		return m.RoundBean
	}
	return nil
}

type PhzPlayEndResult struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	IsbigWin         *bool        `protobuf:"varint,3,opt,name=isbigWin" json:"isbigWin,omitempty"`
	IsOwner          *bool        `protobuf:"varint,4,opt,name=isOwner" json:"isOwner,omitempty"`
	WinScore         *int64       `protobuf:"varint,5,opt,name=winScore" json:"winScore,omitempty"`
	WxInfo           *WeixinInfo  `protobuf:"bytes,6,opt,name=wxInfo" json:"wxInfo,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PhzPlayEndResult) Reset()                    { *m = PhzPlayEndResult{} }
func (m *PhzPlayEndResult) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayEndResult) ProtoMessage()               {}
func (*PhzPlayEndResult) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{30} }

func (m *PhzPlayEndResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PhzPlayEndResult) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PhzPlayEndResult) GetIsbigWin() bool {
	if m != nil && m.IsbigWin != nil {
		return *m.IsbigWin
	}
	return false
}

func (m *PhzPlayEndResult) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PhzPlayEndResult) GetWinScore() int64 {
	if m != nil && m.WinScore != nil {
		return *m.WinScore
	}
	return 0
}

func (m *PhzPlayEndResult) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

type PhzPlayEndLottery struct {
	UserLottery      []*PhzPlayEndResult `protobuf:"bytes,1,rep,name=userLottery" json:"userLottery,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *PhzPlayEndLottery) Reset()                    { *m = PhzPlayEndLottery{} }
func (m *PhzPlayEndLottery) String() string            { return proto.CompactTextString(m) }
func (*PhzPlayEndLottery) ProtoMessage()               {}
func (*PhzPlayEndLottery) Descriptor() ([]byte, []int) { return fileDescriptor47, []int{31} }

func (m *PhzPlayEndLottery) GetUserLottery() []*PhzPlayEndResult {
	if m != nil {
		return m.UserLottery
	}
	return nil
}

func init() {
	proto.RegisterType((*PhzReq_Ready)(nil), "ddproto.phz_req_Ready")
	proto.RegisterType((*PhzAck_Ready)(nil), "ddproto.phz_ack_Ready")
	proto.RegisterType((*PhzPlay_ReadyStatus)(nil), "ddproto.phz_play_ReadyStatus")
	proto.RegisterType((*PhzPlay_Opening)(nil), "ddproto.phz_play_Opening")
	proto.RegisterType((*PhzPlay_SendCards)(nil), "ddproto.phz_play_SendCards")
	proto.RegisterType((*PhzReq_OutCards)(nil), "ddproto.phz_req_OutCards")
	proto.RegisterType((*PhzAck_OutCards)(nil), "ddproto.phz_ack_OutCards")
	proto.RegisterType((*PhzPlay_MoPai)(nil), "ddproto.phz_play_MoPai")
	proto.RegisterType((*PhzPlay_Overturn)(nil), "ddproto.phz_play_Overturn")
	proto.RegisterType((*PhzPlay_CanPeng)(nil), "ddproto.phz_play_CanPeng")
	proto.RegisterType((*PhzReq_Peng)(nil), "ddproto.phz_req_Peng")
	proto.RegisterType((*PhzAck_Peng)(nil), "ddproto.phz_ack_Peng")
	proto.RegisterType((*PhzPlay_ChiPai)(nil), "ddproto.phz_play_ChiPai")
	proto.RegisterType((*PhzPlayCanChi)(nil), "ddproto.phz_play_canChi")
	proto.RegisterType((*PhzReqChiPai)(nil), "ddproto.phz_req_chiPai")
	proto.RegisterType((*PhzReqBiPai)(nil), "ddproto.phz_req_biPai")
	proto.RegisterType((*PhzAckBiPai)(nil), "ddproto.phz_ack_biPai")
	proto.RegisterType((*PhzAckChiPai)(nil), "ddproto.phz_ack_chiPai")
	proto.RegisterType((*PhzPlayTiPai)(nil), "ddproto.phz_play_tiPai")
	proto.RegisterType((*PhzPlayCanTiPai)(nil), "ddproto.phz_play_canTiPai")
	proto.RegisterType((*PhzPlayWeiPai)(nil), "ddproto.phz_play_weiPai")
	proto.RegisterType((*PhzPlayPaoPai)(nil), "ddproto.phz_play_paoPai")
	proto.RegisterType((*PhzPlayCanHuPai)(nil), "ddproto.phz_play_canHuPai")
	proto.RegisterType((*PhzReqHuPai)(nil), "ddproto.phz_req_huPai")
	proto.RegisterType((*PhzAckHuPai)(nil), "ddproto.phz_ack_huPai")
	proto.RegisterType((*PhzReqPass)(nil), "ddproto.phz_req_pass")
	proto.RegisterType((*PhzAckPass)(nil), "ddproto.phz_ack_pass")
	proto.RegisterType((*PhzPlayHandPokers)(nil), "ddproto.phz_play_handPokers")
	proto.RegisterType((*PhzPlayRoundBillBean)(nil), "ddproto.phz_play_roundBillBean")
	proto.RegisterType((*PhzPlayCurrentResult)(nil), "ddproto.phz_play_currentResult")
	proto.RegisterType((*PhzPlayEndResult)(nil), "ddproto.phz_play_endResult")
	proto.RegisterType((*PhzPlayEndLottery)(nil), "ddproto.phz_play_endLottery")
	proto.RegisterEnum("ddproto.PhzEnumActionType", PhzEnumActionType_name, PhzEnumActionType_value)
	proto.RegisterEnum("ddproto.PhzEnumHuType", PhzEnumHuType_name, PhzEnumHuType_value)
}

func init() { proto.RegisterFile("phz_play.proto", fileDescriptor47) }

var fileDescriptor47 = []byte{
	// 1426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6e, 0xdb, 0xc6,
	0x1a, 0x3e, 0x14, 0x75, 0xb1, 0x47, 0xb9, 0x28, 0x63, 0xc7, 0x61, 0x7c, 0x7c, 0xce, 0x31, 0xb8,
	0x39, 0x86, 0x5b, 0xa4, 0x81, 0xba, 0x2b, 0x92, 0x85, 0x2c, 0xa7, 0x26, 0xe1, 0xc6, 0x22, 0x68,
	0xb1, 0x4e, 0xdc, 0x85, 0x30, 0x96, 0xa6, 0xd6, 0x20, 0xf2, 0x50, 0xe5, 0xa5, 0x8e, 0xdb, 0x4d,
	0x57, 0xe9, 0xaa, 0xbb, 0x6e, 0x0b, 0x74, 0xd1, 0x75, 0x9f, 0xa0, 0x8f, 0xd1, 0x4d, 0x1f, 0xa0,
	0x2f, 0xd0, 0x27, 0x28, 0xe6, 0x9f, 0x11, 0x39, 0x12, 0xed, 0x34, 0x22, 0xb2, 0x11, 0xf4, 0xfd,
	0xf3, 0xdf, 0x2f, 0xc3, 0x7f, 0xd0, 0x9d, 0xe9, 0xf8, 0x9b, 0xc1, 0x74, 0x42, 0xae, 0x1e, 0x4d,
	0xa3, 0x30, 0x09, 0x71, 0x63, 0x34, 0x82, 0x3f, 0x9b, 0x6b, 0xc3, 0xf0, 0xe2, 0x22, 0xe4, 0x83,
	0xe1, 0x84, 0x51, 0x9e, 0xc8, 0xd3, 0x4d, 0xe0, 0x3e, 0x23, 0x31, 0x95, 0xd8, 0x7e, 0x8a, 0x6e,
	0x0b, 0x4a, 0x44, 0xbf, 0x1a, 0xf8, 0x94, 0x8c, 0xae, 0xf0, 0x87, 0xa8, 0x3e, 0xa6, 0x64, 0x44,
	0x23, 0xcb, 0xd8, 0x36, 0x76, 0x9a, 0xed, 0xf5, 0x47, 0x4a, 0xdf, 0x23, 0x4f, 0xfc, 0x3a, 0x70,
	0xe6, 0x2b, 0x1e, 0xfb, 0x8d, 0x21, 0xe5, 0xc9, 0xf0, 0x55, 0x19, 0x79, 0x7c, 0x80, 0xee, 0xa6,
	0x31, 0x8d, 0x40, 0xf4, 0x38, 0x21, 0x49, 0x1a, 0x5b, 0x95, 0x6d, 0x73, 0xa7, 0xd9, 0xfe, 0x4f,
	0x26, 0x36, 0x0b, 0x6f, 0xa0, 0x31, 0xf9, 0x8b, 0x52, 0xb6, 0x83, 0xd6, 0xaf, 0x63, 0xc4, 0x1b,
	0xa8, 0x2e, 0x58, 0xdd, 0x11, 0xb8, 0x73, 0xdb, 0x57, 0x08, 0x5b, 0xa8, 0xc1, 0x62, 0x60, 0xb4,
	0x2a, 0xdb, 0xc6, 0xce, 0x8a, 0x3f, 0x83, 0xf6, 0x08, 0xb5, 0x32, 0x4d, 0xbd, 0x29, 0xe5, 0x8c,
	0x9f, 0x2f, 0x19, 0x94, 0x8d, 0x6e, 0x0d, 0xd3, 0x28, 0xa2, 0x3c, 0xf1, 0xc3, 0x94, 0x8f, 0xc0,
	0x40, 0xcd, 0x9f, 0xa3, 0xd9, 0xa7, 0x08, 0x67, 0x56, 0x8e, 0x29, 0x1f, 0x75, 0x49, 0x34, 0x8a,
	0x97, 0xb4, 0xb3, 0x81, 0xea, 0x53, 0xc2, 0xdc, 0x91, 0xcc, 0x59, 0xcd, 0x57, 0xc8, 0xfe, 0x5c,
	0x46, 0x20, 0x6a, 0xda, 0x4b, 0x93, 0x32, 0x9a, 0xd7, 0x51, 0x0d, 0x74, 0x29, 0xd7, 0x25, 0xb0,
	0x5f, 0x4b, 0xbd, 0xa2, 0xd6, 0x25, 0xf5, 0x6e, 0xa3, 0x26, 0x8b, 0x95, 0x6c, 0xef, 0x50, 0x65,
	0x5e, 0x27, 0xe5, 0x96, 0x4d, 0xdd, 0xf2, 0x6f, 0x46, 0xde, 0xe6, 0x83, 0xe7, 0xa1, 0x47, 0xd8,
	0xfb, 0x08, 0x48, 0x36, 0xc1, 0xa7, 0x2c, 0x8a, 0x13, 0x30, 0x07, 0x4d, 0x00, 0x50, 0x38, 0x1a,
	0x4e, 0x69, 0x44, 0x92, 0x30, 0x0a, 0xdc, 0x7d, 0xab, 0x0a, 0xbd, 0xa3, 0x93, 0xf0, 0x2e, 0x6a,
	0x45, 0xf4, 0x82, 0x30, 0xee, 0x85, 0xaf, 0x68, 0xd4, 0x0d, 0x53, 0x9e, 0x58, 0x35, 0x50, 0x5e,
	0xa0, 0xdb, 0x3f, 0x55, 0xd0, 0xbd, 0xbc, 0xa7, 0xbe, 0xa6, 0x51, 0x92, 0x46, 0x7c, 0xc9, 0x08,
	0x2c, 0xd4, 0x18, 0x12, 0xee, 0x51, 0x7e, 0x3e, 0x6b, 0x58, 0x05, 0xf1, 0x2e, 0x32, 0xbb, 0x63,
	0x06, 0x11, 0x34, 0xdb, 0x56, 0x71, 0x6e, 0x86, 0x84, 0x77, 0xc7, 0xcc, 0x17, 0x4c, 0x22, 0x0f,
	0x43, 0xc2, 0x9d, 0x14, 0x22, 0x5a, 0xf1, 0x25, 0x58, 0x8c, 0xb6, 0x56, 0x8c, 0xf6, 0xbf, 0x08,
	0x0d, 0x09, 0x57, 0x65, 0xb2, 0xea, 0x20, 0xac, 0x51, 0xf0, 0x13, 0x84, 0xc8, 0x30, 0x61, 0x21,
	0xef, 0x5f, 0x4d, 0xa9, 0xd5, 0xd8, 0x36, 0x76, 0xee, 0xb4, 0xb7, 0xe6, 0x5c, 0xa1, 0x3c, 0xbd,
	0x18, 0xe4, 0x3c, 0xbe, 0xc6, 0x6f, 0xff, 0x68, 0x68, 0x33, 0xd7, 0x55, 0x61, 0x2d, 0x9d, 0x9e,
	0x4b, 0xca, 0x3c, 0xc2, 0x66, 0xc3, 0x30, 0x83, 0x78, 0x13, 0xad, 0xb0, 0xf8, 0x04, 0x80, 0xaa,
	0x72, 0x86, 0xf1, 0x16, 0x5a, 0x65, 0x71, 0x77, 0x1c, 0xa6, 0x27, 0x94, 0xa9, 0x94, 0xe4, 0x04,
	0xfb, 0x09, 0xba, 0x35, 0x9b, 0xa3, 0xe5, 0x3d, 0xb2, 0x7f, 0x36, 0xa4, 0xb8, 0x18, 0x97, 0x72,
	0x01, 0x85, 0x69, 0x12, 0xc4, 0x34, 0x82, 0x7a, 0xdf, 0xf6, 0x67, 0x50, 0x04, 0x34, 0xa5, 0xfc,
	0x1c, 0x8e, 0x4c, 0x38, 0xca, 0xb0, 0x90, 0x12, 0xff, 0x45, 0xac, 0x55, 0x99, 0x06, 0x05, 0x31,
	0x46, 0xd5, 0x71, 0xfa, 0x82, 0xa9, 0x1e, 0x85, 0xff, 0xf6, 0xff, 0xd1, 0xdd, 0x3c, 0xed, 0x63,
	0xc8, 0x48, 0x36, 0x28, 0x06, 0x88, 0xab, 0xf9, 0xfb, 0x56, 0x63, 0x94, 0xed, 0xb4, 0x64, 0x34,
	0x9f, 0xa0, 0xe6, 0x10, 0x0c, 0x1c, 0x44, 0x61, 0x3a, 0x55, 0x77, 0xfc, 0x35, 0xbd, 0x2a, 0xbd,
	0xf0, 0x75, 0x66, 0xfb, 0x17, 0x35, 0xfc, 0xa2, 0x0e, 0x92, 0xbe, 0xa4, 0xf1, 0x36, 0x6a, 0x48,
	0xb9, 0x18, 0x52, 0xf9, 0x36, 0xc3, 0x33, 0x46, 0xfc, 0x18, 0xd5, 0xcf, 0xa4, 0x88, 0xf9, 0x0f,
	0xbe, 0x2a, 0x3e, 0xfb, 0x8b, 0xfc, 0x4b, 0x7a, 0x56, 0xc2, 0xc9, 0x2d, 0xb4, 0x2a, 0x6d, 0xe7,
	0xf7, 0x79, 0x4e, 0xb0, 0xc3, 0xfc, 0x33, 0x5b, 0x46, 0x79, 0x1e, 0x4d, 0xe5, 0x1d, 0xa3, 0x79,
	0x53, 0x91, 0x49, 0x17, 0x16, 0x4b, 0x25, 0x1d, 0xee, 0xd6, 0x3d, 0x98, 0xba, 0xec, 0x03, 0x0b,
	0x50, 0x2f, 0x87, 0xb9, 0x7c, 0x39, 0xaa, 0xef, 0x16, 0x80, 0x3e, 0x3f, 0xb5, 0xf9, 0xf9, 0xb1,
	0xc0, 0x3e, 0x9c, 0xd4, 0xe5, 0x89, 0x82, 0xd9, 0x8c, 0x34, 0xb4, 0x19, 0x79, 0xa1, 0x7d, 0x79,
	0x92, 0x9b, 0x47, 0x44, 0x78, 0x98, 0x30, 0xb8, 0xfd, 0x4c, 0xb8, 0xfd, 0xac, 0xe2, 0xed, 0x27,
	0xcf, 0x7d, 0xc5, 0x67, 0xff, 0x6e, 0x68, 0x5f, 0x85, 0x21, 0xe1, 0xfd, 0x12, 0x59, 0xfe, 0x48,
	0x58, 0xd5, 0x0a, 0xfb, 0xa0, 0x98, 0x97, 0x44, 0xa6, 0x25, 0x29, 0xa4, 0xa5, 0x3a, 0x9f, 0x96,
	0x0d, 0xa1, 0x4a, 0xcb, 0x97, 0x42, 0x59, 0x52, 0xea, 0x79, 0x52, 0xe4, 0x9d, 0xba, 0x47, 0x0e,
	0x53, 0x22, 0x93, 0x05, 0x77, 0xaa, 0xc4, 0xf6, 0x85, 0x76, 0x57, 0xc8, 0x3b, 0xf8, 0xbd, 0x5d,
	0xe5, 0x33, 0x57, 0x4c, 0xad, 0x3e, 0x7f, 0x19, 0x9a, 0xbd, 0x29, 0x09, 0x4b, 0xd9, 0x93, 0x72,
	0x99, 0x3d, 0x05, 0xf1, 0xc7, 0x70, 0xa2, 0x15, 0xf5, 0x61, 0xb1, 0xa8, 0x8a, 0xc1, 0x9f, 0x71,
	0xbe, 0x25, 0xc3, 0xd2, 0x90, 0xde, 0x92, 0x0a, 0x2e, 0x9d, 0xe3, 0x1f, 0x16, 0x5a, 0xc7, 0x49,
	0x4b, 0xad, 0x44, 0x72, 0x15, 0xa8, 0xe8, 0xab, 0x80, 0x85, 0x1a, 0xe3, 0xd4, 0xd3, 0x36, 0xb0,
	0x19, 0x94, 0xfe, 0xf4, 0x99, 0xb6, 0x3d, 0x64, 0x58, 0x7f, 0x45, 0x8c, 0x97, 0x77, 0xc5, 0xfe,
	0x53, 0x7b, 0x45, 0x94, 0x90, 0xbf, 0x69, 0x11, 0xd6, 0x4b, 0x61, 0x16, 0x9a, 0x7d, 0x9c, 0x6a,
	0x35, 0x52, 0xe8, 0xba, 0xaf, 0xa4, 0x98, 0xec, 0x71, 0x0a, 0x4d, 0x50, 0xbf, 0x69, 0xb2, 0xe5,
	0xb9, 0xaf, 0xf8, 0x84, 0x76, 0x16, 0x9f, 0xb2, 0xe7, 0xa1, 0x2a, 0x9c, 0x42, 0xf6, 0x24, 0x5f,
	0x28, 0xa6, 0x24, 0x2e, 0xb1, 0xee, 0xab, 0xa7, 0x4c, 0x65, 0xee, 0x29, 0x03, 0xd6, 0x3c, 0x12,
	0xc7, 0x6a, 0xbd, 0x51, 0xc8, 0x9e, 0xe6, 0xfb, 0x47, 0x79, 0x6b, 0x6c, 0xce, 0x1a, 0x53, 0x6d,
	0x20, 0xf4, 0xf7, 0x5e, 0xe5, 0xeb, 0x94, 0xc4, 0xb6, 0x8b, 0xd6, 0xb2, 0xae, 0x1c, 0x13, 0x3e,
	0x82, 0x15, 0xf8, 0xe6, 0x37, 0x98, 0x58, 0x64, 0x04, 0x47, 0x5e, 0xb8, 0x0c, 0xdb, 0x1c, 0x6d,
	0x64, 0xaa, 0x22, 0xf1, 0x62, 0xda, 0x63, 0x93, 0xc9, 0x1e, 0x25, 0xfc, 0x46, 0x6d, 0xeb, 0xa8,
	0x16, 0x0f, 0xc3, 0x88, 0x82, 0xbf, 0xa6, 0x2f, 0xc1, 0x75, 0x57, 0x86, 0xa0, 0x0d, 0x43, 0xc6,
	0xa1, 0xf4, 0xa6, 0x0f, 0xff, 0xed, 0xef, 0x2b, 0x9a, 0xc1, 0xd9, 0x4b, 0x8d, 0xc6, 0xe9, 0x24,
	0x59, 0x32, 0x6f, 0x4f, 0x10, 0xca, 0x43, 0x57, 0xb7, 0xf2, 0x56, 0xf1, 0x56, 0xce, 0x79, 0x7c,
	0x8d, 0xbf, 0xf0, 0x74, 0x34, 0x8b, 0x4f, 0x47, 0xb1, 0x8b, 0x27, 0x61, 0x42, 0x26, 0x92, 0xa3,
	0x0a, 0x1c, 0x1a, 0x05, 0x3f, 0x45, 0xab, 0x32, 0x63, 0x94, 0x70, 0xab, 0x06, 0x0e, 0xfc, 0xaf,
	0xe8, 0xc0, 0x5c, 0x52, 0xfd, 0x5c, 0xc2, 0xfe, 0xc3, 0xd0, 0x9e, 0xa6, 0x94, 0x8f, 0x4a, 0x65,
	0xe1, 0xa6, 0x5e, 0x85, 0xee, 0x39, 0x63, 0xe7, 0x27, 0x8c, 0xe7, 0xdd, 0x23, 0xb1, 0xdc, 0x18,
	0x7a, 0x97, 0x5c, 0x0d, 0x25, 0x6c, 0x0c, 0x00, 0x85, 0xd4, 0x25, 0xe3, 0xc7, 0x50, 0xdd, 0x1a,
	0x14, 0x2d, 0xc3, 0xf8, 0x03, 0x54, 0xbf, 0x7c, 0xed, 0xf2, 0x2f, 0x43, 0x98, 0xce, 0x66, 0x7b,
	0x2d, 0xf3, 0xeb, 0x84, 0xb2, 0xd7, 0x8c, 0x8b, 0x23, 0x5f, 0xb1, 0xd8, 0x7d, 0xad, 0x41, 0x29,
	0x1f, 0x7d, 0x16, 0x26, 0x09, 0x8d, 0xae, 0xf0, 0x53, 0xd4, 0x14, 0xfe, 0x29, 0x08, 0xdf, 0xf5,
	0x66, 0xfb, 0xdf, 0xc5, 0x9c, 0x65, 0xd9, 0xf0, 0x75, 0xfe, 0xdd, 0xef, 0x0c, 0xa9, 0x76, 0xe1,
	0x89, 0x83, 0x2d, 0xb4, 0xee, 0x39, 0xa7, 0x83, 0x4e, 0xb7, 0xef, 0xf6, 0x8e, 0xfa, 0x2f, 0xbd,
	0x67, 0x83, 0xe7, 0x3d, 0xaf, 0xe3, 0xb6, 0x0c, 0xfc, 0x10, 0xdd, 0x5f, 0x38, 0xe9, 0x3a, 0x81,
	0x38, 0xaa, 0xe0, 0x0d, 0x84, 0x17, 0x8e, 0xbc, 0x4e, 0xaf, 0x65, 0xe2, 0x2d, 0x64, 0x15, 0x44,
	0x5c, 0xef, 0xd9, 0xd1, 0x81, 0x13, 0xb4, 0xaa, 0xbb, 0xbf, 0x56, 0xe4, 0x57, 0x50, 0xbb, 0x8d,
	0x66, 0x46, 0x9c, 0x00, 0xb8, 0x5f, 0xba, 0x87, 0x41, 0xc7, 0xdd, 0x73, 0x3b, 0x47, 0xb9, 0xfd,
	0xec, 0x68, 0xdf, 0xed, 0x1c, 0x39, 0xbd, 0xa3, 0x83, 0xdc, 0xbe, 0x3a, 0x3a, 0x76, 0x5c, 0xa0,
	0x9b, 0xf8, 0x3e, 0xba, 0xa7, 0xd1, 0x05, 0x51, 0x18, 0xc6, 0x6b, 0xe8, 0xae, 0x46, 0x3e, 0x09,
	0x9c, 0xa0, 0x55, 0x5b, 0x20, 0x1e, 0x76, 0x9c, 0xa0, 0x55, 0x5f, 0x20, 0xb6, 0x1f, 0x3b, 0x41,
	0xab, 0x81, 0x1f, 0xa0, 0x35, 0x8d, 0xb8, 0x1f, 0xb8, 0xfb, 0x81, 0xeb, 0x04, 0xad, 0x95, 0x05,
	0x37, 0x9c, 0x8e, 0xbb, 0x2f, 0xe8, 0xab, 0x0b, 0x6e, 0xf4, 0x85, 0xdf, 0x41, 0x0b, 0x2d, 0x28,
	0x07, 0xde, 0x26, 0xde, 0x44, 0x1b, 0xba, 0x8e, 0xa0, 0x73, 0x74, 0x70, 0x0a, 0xbf, 0xad, 0x5b,
	0xde, 0xbf, 0x3c, 0xe3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xec, 0x75, 0xf8, 0x3a, 0x13,
	0x00, 0x00,
}
