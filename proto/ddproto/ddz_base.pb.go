// Code generated by protoc-gen-go.
// source: ddz_base.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type DdzEnumProtoId int32

const (
	// //////////////////////////////////
	//
	DdzEnumProtoId_DDZ_PID_HEARTBEAT      DdzEnumProtoId = 0
	DdzEnumProtoId_DDZ_PID_QUICK_CONN     DdzEnumProtoId = 1
	DdzEnumProtoId_DDZ_PID_QUICK_CONN_ACK DdzEnumProtoId = 2
	DdzEnumProtoId_DDZ_PID_GAME_LOGIN     DdzEnumProtoId = 3
	DdzEnumProtoId_DDZ_PID_GAME_LOGIN_ACK DdzEnumProtoId = 4
	DdzEnumProtoId_DDZ_PID_CREATEROOM     DdzEnumProtoId = 5
	DdzEnumProtoId_DDZ_PID_CREATEROOM_ACK DdzEnumProtoId = 6
	DdzEnumProtoId_DDZ_PID_ENTER_ROOM     DdzEnumProtoId = 7
	DdzEnumProtoId_DDZ_PID_ENTER_ROOM_ACK DdzEnumProtoId = 8
	DdzEnumProtoId_DDZ_PID_SEND_GAMEINFO  DdzEnumProtoId = 9
	DdzEnumProtoId_DDZ_PID_READY          DdzEnumProtoId = 10
	DdzEnumProtoId_DDZ_PID_READY_ACK      DdzEnumProtoId = 11
	DdzEnumProtoId_DDZ_PID_OPENING        DdzEnumProtoId = 12
	DdzEnumProtoId_DDZ_PID_DEAL_CARDS     DdzEnumProtoId = 13
	DdzEnumProtoId_DDZ_PID_JIAO_DIZHU     DdzEnumProtoId = 14
	DdzEnumProtoId_DDZ_PID_JIAO_DIZHU_ACK DdzEnumProtoId = 15
	// //////////////////////////////////////////
	// 欢乐斗地主
	DdzEnumProtoId_DDZ_PID_ROB_DIZHU           DdzEnumProtoId = 16
	DdzEnumProtoId_DDZ_PID_ROB_DIZHU_ACK       DdzEnumProtoId = 17
	DdzEnumProtoId_DDZ_PID_DOUBLE              DdzEnumProtoId = 18
	DdzEnumProtoId_DDZ_PID_DOUBLE_ACK          DdzEnumProtoId = 19
	DdzEnumProtoId_DDZ_PID_SHOW_HANDPOKERS     DdzEnumProtoId = 20
	DdzEnumProtoId_DDZ_PID_SHOW_HANDPOKERS_ACK DdzEnumProtoId = 21
	// //////////////////////////////////////////
	// 四川斗地主
	DdzEnumProtoId_DDZ_PID_MEN_ZHUA      DdzEnumProtoId = 22
	DdzEnumProtoId_DDZ_PID_MEN_ZHUA_ACK  DdzEnumProtoId = 23
	DdzEnumProtoId_DDZ_PID_SEE_CARDS     DdzEnumProtoId = 24
	DdzEnumProtoId_DDZ_PID_SEE_CARDS_ACK DdzEnumProtoId = 25
	DdzEnumProtoId_DDZ_PID_PULL          DdzEnumProtoId = 26
	DdzEnumProtoId_DDZ_PID_PULL_ACK      DdzEnumProtoId = 27
	// //////////////////////////////////////////
	DdzEnumProtoId_DDZ_PID_OUT_CARDS     DdzEnumProtoId = 28
	DdzEnumProtoId_DDZ_PID_OUT_CARDS_ACK DdzEnumProtoId = 29
	DdzEnumProtoId_DDZ_PID_ACT_GUO       DdzEnumProtoId = 30
	DdzEnumProtoId_DDZ_PID_ACT_GUO_ACK   DdzEnumProtoId = 31
	// //////////////////////////////////////////
	DdzEnumProtoId_DDZ_PID_START_PLAY     DdzEnumProtoId = 32
	DdzEnumProtoId_DDZ_PID_OVERTURN       DdzEnumProtoId = 33
	DdzEnumProtoId_DDZ_PID_CURRENTRESULT  DdzEnumProtoId = 34
	DdzEnumProtoId_DDZ_PID_SENDENDLOTTERY DdzEnumProtoId = 35
	// //////////////////////////////////////////
	DdzEnumProtoId_DDZ_PID_DISSOLVE_DESK           DdzEnumProtoId = 36
	DdzEnumProtoId_DDZ_PID_DISSOLVE_DESK_ACK       DdzEnumProtoId = 37
	DdzEnumProtoId_DDZ_PID_LEAVE_DESK              DdzEnumProtoId = 38
	DdzEnumProtoId_DDZ_PID_LEAVE_DESK_ACK          DdzEnumProtoId = 39
	DdzEnumProtoId_DDZ_PID_MESSAGE                 DdzEnumProtoId = 40
	DdzEnumProtoId_DDZ_PID_SEND_MESSAGE            DdzEnumProtoId = 41
	DdzEnumProtoId_DDZ_PID_GAME_GAMERECORD         DdzEnumProtoId = 42
	DdzEnumProtoId_DDZ_PID_GAME_GAMERECORD_ACK     DdzEnumProtoId = 43
	DdzEnumProtoId_DDZ_PID_GAME_ENTERAGENTMODE     DdzEnumProtoId = 44
	DdzEnumProtoId_DDZ_PID_GAME_ENTERAGENTMODE_ACK DdzEnumProtoId = 45
	DdzEnumProtoId_DDZ_PID_GAME_QUITAGENTMODE      DdzEnumProtoId = 46
	DdzEnumProtoId_DDZ_PID_GAME_QUITAGENTMODE_ACK  DdzEnumProtoId = 47
	DdzEnumProtoId_DDZ_PID_ONLINEWARD_REQ          DdzEnumProtoId = 48
	DdzEnumProtoId_DDZ_PID_ONLINEWARD_ACK          DdzEnumProtoId = 49
	DdzEnumProtoId_DDZ_PID_REDBAG_REQ              DdzEnumProtoId = 50
	DdzEnumProtoId_DDZ_PID_REDBAG_ACK              DdzEnumProtoId = 51
)

var DdzEnumProtoId_name = map[int32]string{
	0:  "DDZ_PID_HEARTBEAT",
	1:  "DDZ_PID_QUICK_CONN",
	2:  "DDZ_PID_QUICK_CONN_ACK",
	3:  "DDZ_PID_GAME_LOGIN",
	4:  "DDZ_PID_GAME_LOGIN_ACK",
	5:  "DDZ_PID_CREATEROOM",
	6:  "DDZ_PID_CREATEROOM_ACK",
	7:  "DDZ_PID_ENTER_ROOM",
	8:  "DDZ_PID_ENTER_ROOM_ACK",
	9:  "DDZ_PID_SEND_GAMEINFO",
	10: "DDZ_PID_READY",
	11: "DDZ_PID_READY_ACK",
	12: "DDZ_PID_OPENING",
	13: "DDZ_PID_DEAL_CARDS",
	14: "DDZ_PID_JIAO_DIZHU",
	15: "DDZ_PID_JIAO_DIZHU_ACK",
	16: "DDZ_PID_ROB_DIZHU",
	17: "DDZ_PID_ROB_DIZHU_ACK",
	18: "DDZ_PID_DOUBLE",
	19: "DDZ_PID_DOUBLE_ACK",
	20: "DDZ_PID_SHOW_HANDPOKERS",
	21: "DDZ_PID_SHOW_HANDPOKERS_ACK",
	22: "DDZ_PID_MEN_ZHUA",
	23: "DDZ_PID_MEN_ZHUA_ACK",
	24: "DDZ_PID_SEE_CARDS",
	25: "DDZ_PID_SEE_CARDS_ACK",
	26: "DDZ_PID_PULL",
	27: "DDZ_PID_PULL_ACK",
	28: "DDZ_PID_OUT_CARDS",
	29: "DDZ_PID_OUT_CARDS_ACK",
	30: "DDZ_PID_ACT_GUO",
	31: "DDZ_PID_ACT_GUO_ACK",
	32: "DDZ_PID_START_PLAY",
	33: "DDZ_PID_OVERTURN",
	34: "DDZ_PID_CURRENTRESULT",
	35: "DDZ_PID_SENDENDLOTTERY",
	36: "DDZ_PID_DISSOLVE_DESK",
	37: "DDZ_PID_DISSOLVE_DESK_ACK",
	38: "DDZ_PID_LEAVE_DESK",
	39: "DDZ_PID_LEAVE_DESK_ACK",
	40: "DDZ_PID_MESSAGE",
	41: "DDZ_PID_SEND_MESSAGE",
	42: "DDZ_PID_GAME_GAMERECORD",
	43: "DDZ_PID_GAME_GAMERECORD_ACK",
	44: "DDZ_PID_GAME_ENTERAGENTMODE",
	45: "DDZ_PID_GAME_ENTERAGENTMODE_ACK",
	46: "DDZ_PID_GAME_QUITAGENTMODE",
	47: "DDZ_PID_GAME_QUITAGENTMODE_ACK",
	48: "DDZ_PID_ONLINEWARD_REQ",
	49: "DDZ_PID_ONLINEWARD_ACK",
	50: "DDZ_PID_REDBAG_REQ",
	51: "DDZ_PID_REDBAG_ACK",
}
var DdzEnumProtoId_value = map[string]int32{
	"DDZ_PID_HEARTBEAT":               0,
	"DDZ_PID_QUICK_CONN":              1,
	"DDZ_PID_QUICK_CONN_ACK":          2,
	"DDZ_PID_GAME_LOGIN":              3,
	"DDZ_PID_GAME_LOGIN_ACK":          4,
	"DDZ_PID_CREATEROOM":              5,
	"DDZ_PID_CREATEROOM_ACK":          6,
	"DDZ_PID_ENTER_ROOM":              7,
	"DDZ_PID_ENTER_ROOM_ACK":          8,
	"DDZ_PID_SEND_GAMEINFO":           9,
	"DDZ_PID_READY":                   10,
	"DDZ_PID_READY_ACK":               11,
	"DDZ_PID_OPENING":                 12,
	"DDZ_PID_DEAL_CARDS":              13,
	"DDZ_PID_JIAO_DIZHU":              14,
	"DDZ_PID_JIAO_DIZHU_ACK":          15,
	"DDZ_PID_ROB_DIZHU":               16,
	"DDZ_PID_ROB_DIZHU_ACK":           17,
	"DDZ_PID_DOUBLE":                  18,
	"DDZ_PID_DOUBLE_ACK":              19,
	"DDZ_PID_SHOW_HANDPOKERS":         20,
	"DDZ_PID_SHOW_HANDPOKERS_ACK":     21,
	"DDZ_PID_MEN_ZHUA":                22,
	"DDZ_PID_MEN_ZHUA_ACK":            23,
	"DDZ_PID_SEE_CARDS":               24,
	"DDZ_PID_SEE_CARDS_ACK":           25,
	"DDZ_PID_PULL":                    26,
	"DDZ_PID_PULL_ACK":                27,
	"DDZ_PID_OUT_CARDS":               28,
	"DDZ_PID_OUT_CARDS_ACK":           29,
	"DDZ_PID_ACT_GUO":                 30,
	"DDZ_PID_ACT_GUO_ACK":             31,
	"DDZ_PID_START_PLAY":              32,
	"DDZ_PID_OVERTURN":                33,
	"DDZ_PID_CURRENTRESULT":           34,
	"DDZ_PID_SENDENDLOTTERY":          35,
	"DDZ_PID_DISSOLVE_DESK":           36,
	"DDZ_PID_DISSOLVE_DESK_ACK":       37,
	"DDZ_PID_LEAVE_DESK":              38,
	"DDZ_PID_LEAVE_DESK_ACK":          39,
	"DDZ_PID_MESSAGE":                 40,
	"DDZ_PID_SEND_MESSAGE":            41,
	"DDZ_PID_GAME_GAMERECORD":         42,
	"DDZ_PID_GAME_GAMERECORD_ACK":     43,
	"DDZ_PID_GAME_ENTERAGENTMODE":     44,
	"DDZ_PID_GAME_ENTERAGENTMODE_ACK": 45,
	"DDZ_PID_GAME_QUITAGENTMODE":      46,
	"DDZ_PID_GAME_QUITAGENTMODE_ACK":  47,
	"DDZ_PID_ONLINEWARD_REQ":          48,
	"DDZ_PID_ONLINEWARD_ACK":          49,
	"DDZ_PID_REDBAG_REQ":              50,
	"DDZ_PID_REDBAG_ACK":              51,
}

func (x DdzEnumProtoId) Enum() *DdzEnumProtoId {
	p := new(DdzEnumProtoId)
	*p = x
	return p
}
func (x DdzEnumProtoId) String() string {
	return proto.EnumName(DdzEnumProtoId_name, int32(x))
}
func (x *DdzEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumProtoId_value, data, "DdzEnumProtoId")
	if err != nil {
		return err
	}
	*x = DdzEnumProtoId(value)
	return nil
}
func (DdzEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type DdzEnumErrorCode int32

const (
	DdzEnumErrorCode_EC_SUCCESS DdzEnumErrorCode = 0
	// -101   -200	游戏异常
	DdzEnumErrorCode_EC_CREATE_DESK_DIAMOND_NOTENOUGH DdzEnumErrorCode = -101
	DdzEnumErrorCode_EC_CREATE_DESK_USER_NOTFOUND     DdzEnumErrorCode = -102
	DdzEnumErrorCode_EC_INTO_DESK_NOTFOUND            DdzEnumErrorCode = -103
	DdzEnumErrorCode_EC_INTO_DESK_ISFULL              DdzEnumErrorCode = -104
	DdzEnumErrorCode_EC_GAME_READY_REPEAT             DdzEnumErrorCode = -110
	DdzEnumErrorCode_EC_GAME_READY_CHIP_NOT_ENOUGH    DdzEnumErrorCode = -111
)

var DdzEnumErrorCode_name = map[int32]string{
	0:    "EC_SUCCESS",
	-101: "EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_INTO_DESK_NOTFOUND",
	-104: "EC_INTO_DESK_ISFULL",
	-110: "EC_GAME_READY_REPEAT",
	-111: "EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var DdzEnumErrorCode_value = map[string]int32{
	"EC_SUCCESS":                       0,
	"EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_INTO_DESK_NOTFOUND":            -103,
	"EC_INTO_DESK_ISFULL":              -104,
	"EC_GAME_READY_REPEAT":             -110,
	"EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x DdzEnumErrorCode) Enum() *DdzEnumErrorCode {
	p := new(DdzEnumErrorCode)
	*p = x
	return p
}
func (x DdzEnumErrorCode) String() string {
	return proto.EnumName(DdzEnumErrorCode_name, int32(x))
}
func (x *DdzEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumErrorCode_value, data, "DdzEnumErrorCode")
	if err != nil {
		return err
	}
	*x = DdzEnumErrorCode(value)
	return nil
}
func (DdzEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

// 牌型
type DdzEnumPaiType int32

const (
	DdzEnumPaiType_ERRORCARD          DdzEnumPaiType = 0
	DdzEnumPaiType_SINGLECARD         DdzEnumPaiType = 1
	DdzEnumPaiType_DOUBLECARD         DdzEnumPaiType = 2
	DdzEnumPaiType_THREECARD          DdzEnumPaiType = 3
	DdzEnumPaiType_BOMBCARD           DdzEnumPaiType = 4
	DdzEnumPaiType_THREEONECARD       DdzEnumPaiType = 5
	DdzEnumPaiType_THREETWOCARD       DdzEnumPaiType = 6
	DdzEnumPaiType_BOMBTWOCARD        DdzEnumPaiType = 7
	DdzEnumPaiType_BOMBTWOOOCARD      DdzEnumPaiType = 8
	DdzEnumPaiType_CONNECTCARD        DdzEnumPaiType = 9
	DdzEnumPaiType_COMPANYCARD        DdzEnumPaiType = 10
	DdzEnumPaiType_AIRCRAFTCARD       DdzEnumPaiType = 11
	DdzEnumPaiType_AIRCRAFTSINGLECARD DdzEnumPaiType = 12
	DdzEnumPaiType_AIRCRAFTDOUBLECARD DdzEnumPaiType = 13
	DdzEnumPaiType_SUPERBOMB          DdzEnumPaiType = 14
	DdzEnumPaiType_FOURWITHONEDOUBLE  DdzEnumPaiType = 15
)

var DdzEnumPaiType_name = map[int32]string{
	0:  "ERRORCARD",
	1:  "SINGLECARD",
	2:  "DOUBLECARD",
	3:  "THREECARD",
	4:  "BOMBCARD",
	5:  "THREEONECARD",
	6:  "THREETWOCARD",
	7:  "BOMBTWOCARD",
	8:  "BOMBTWOOOCARD",
	9:  "CONNECTCARD",
	10: "COMPANYCARD",
	11: "AIRCRAFTCARD",
	12: "AIRCRAFTSINGLECARD",
	13: "AIRCRAFTDOUBLECARD",
	14: "SUPERBOMB",
	15: "FOURWITHONEDOUBLE",
}
var DdzEnumPaiType_value = map[string]int32{
	"ERRORCARD":          0,
	"SINGLECARD":         1,
	"DOUBLECARD":         2,
	"THREECARD":          3,
	"BOMBCARD":           4,
	"THREEONECARD":       5,
	"THREETWOCARD":       6,
	"BOMBTWOCARD":        7,
	"BOMBTWOOOCARD":      8,
	"CONNECTCARD":        9,
	"COMPANYCARD":        10,
	"AIRCRAFTCARD":       11,
	"AIRCRAFTSINGLECARD": 12,
	"AIRCRAFTDOUBLECARD": 13,
	"SUPERBOMB":          14,
	"FOURWITHONEDOUBLE":  15,
}

func (x DdzEnumPaiType) Enum() *DdzEnumPaiType {
	p := new(DdzEnumPaiType)
	*p = x
	return p
}
func (x DdzEnumPaiType) String() string {
	return proto.EnumName(DdzEnumPaiType_name, int32(x))
}
func (x *DdzEnumPaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumPaiType_value, data, "DdzEnumPaiType")
	if err != nil {
		return err
	}
	*x = DdzEnumPaiType(value)
	return nil
}
func (DdzEnumPaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

// 轮到玩家操作时：可执行何种操作
type DdzEnumActType int32

const (
	DdzEnumActType_T_NORMAL_ACT DdzEnumActType = 1
	DdzEnumActType_T_JIAO_DIZHU DdzEnumActType = 2
	DdzEnumActType_T_ROB_DIZHU  DdzEnumActType = 3
	DdzEnumActType_T_DOUBLE     DdzEnumActType = 4
	DdzEnumActType_T_MEN_ZHUA   DdzEnumActType = 5
	DdzEnumActType_T_PULL       DdzEnumActType = 6
	DdzEnumActType_T_PUSH       DdzEnumActType = 7
)

var DdzEnumActType_name = map[int32]string{
	1: "T_NORMAL_ACT",
	2: "T_JIAO_DIZHU",
	3: "T_ROB_DIZHU",
	4: "T_DOUBLE",
	5: "T_MEN_ZHUA",
	6: "T_PULL",
	7: "T_PUSH",
}
var DdzEnumActType_value = map[string]int32{
	"T_NORMAL_ACT": 1,
	"T_JIAO_DIZHU": 2,
	"T_ROB_DIZHU":  3,
	"T_DOUBLE":     4,
	"T_MEN_ZHUA":   5,
	"T_PULL":       6,
	"T_PUSH":       7,
}

func (x DdzEnumActType) Enum() *DdzEnumActType {
	p := new(DdzEnumActType)
	*p = x
	return p
}
func (x DdzEnumActType) String() string {
	return proto.EnumName(DdzEnumActType_name, int32(x))
}
func (x *DdzEnumActType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumActType_value, data, "DdzEnumActType")
	if err != nil {
		return err
	}
	*x = DdzEnumActType(value)
	return nil
}
func (DdzEnumActType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

type DdzEnumGameStatus int32

const (
	DdzEnumGameStatus_U_INIT       DdzEnumGameStatus = 0
	DdzEnumGameStatus_U_JIAO_DIZHU DdzEnumGameStatus = 1
	DdzEnumGameStatus_U_ROB_DIZHU  DdzEnumGameStatus = 2
	DdzEnumGameStatus_U_PLAYING    DdzEnumGameStatus = 3
	DdzEnumGameStatus_U_FINISH     DdzEnumGameStatus = 4
)

var DdzEnumGameStatus_name = map[int32]string{
	0: "U_INIT",
	1: "U_JIAO_DIZHU",
	2: "U_ROB_DIZHU",
	3: "U_PLAYING",
	4: "U_FINISH",
}
var DdzEnumGameStatus_value = map[string]int32{
	"U_INIT":       0,
	"U_JIAO_DIZHU": 1,
	"U_ROB_DIZHU":  2,
	"U_PLAYING":    3,
	"U_FINISH":     4,
}

func (x DdzEnumGameStatus) Enum() *DdzEnumGameStatus {
	p := new(DdzEnumGameStatus)
	*p = x
	return p
}
func (x DdzEnumGameStatus) String() string {
	return proto.EnumName(DdzEnumGameStatus_name, int32(x))
}
func (x *DdzEnumGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumGameStatus_value, data, "DdzEnumGameStatus")
	if err != nil {
		return err
	}
	*x = DdzEnumGameStatus(value)
	return nil
}
func (DdzEnumGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

// 玩家当前状态
type DdzEnumPlayerStatus int32

const (
	DdzEnumPlayerStatus_NORMAL_DEFAULT      DdzEnumPlayerStatus = 0
	DdzEnumPlayerStatus_NORMAL_ENTERDESK    DdzEnumPlayerStatus = 1
	DdzEnumPlayerStatus_NORMAL_READY        DdzEnumPlayerStatus = 2
	DdzEnumPlayerStatus_NORMAL_DAPAI        DdzEnumPlayerStatus = 3
	DdzEnumPlayerStatus_NORMAL_LOTTERY      DdzEnumPlayerStatus = 4
	DdzEnumPlayerStatus_NORMAL_END          DdzEnumPlayerStatus = 5
	DdzEnumPlayerStatus_HLJIAO_NOACT        DdzEnumPlayerStatus = 6
	DdzEnumPlayerStatus_HLJIAO_JIAO         DdzEnumPlayerStatus = 7
	DdzEnumPlayerStatus_HLJIAO_BUJIAO       DdzEnumPlayerStatus = 8
	DdzEnumPlayerStatus_HLQIANG_NOACT       DdzEnumPlayerStatus = 9
	DdzEnumPlayerStatus_HLQIANG_QIANG       DdzEnumPlayerStatus = 10
	DdzEnumPlayerStatus_HLQIANG_BUQIANG     DdzEnumPlayerStatus = 11
	DdzEnumPlayerStatus_HLJB_NOACT          DdzEnumPlayerStatus = 12
	DdzEnumPlayerStatus_HLJB_JIA            DdzEnumPlayerStatus = 13
	DdzEnumPlayerStatus_HLJB_BUJIA          DdzEnumPlayerStatus = 14
	DdzEnumPlayerStatus_SCMZ_NOACT          DdzEnumPlayerStatus = 15
	DdzEnumPlayerStatus_SCMZ_MENZHUA        DdzEnumPlayerStatus = 16
	DdzEnumPlayerStatus_SCMZ_SEECARDS       DdzEnumPlayerStatus = 17
	DdzEnumPlayerStatus_SCZP_NOACT          DdzEnumPlayerStatus = 18
	DdzEnumPlayerStatus_SCZP_ZHUA           DdzEnumPlayerStatus = 19
	DdzEnumPlayerStatus_SCZP_BUZHUA         DdzEnumPlayerStatus = 20
	DdzEnumPlayerStatus_SCLD_NOACT          DdzEnumPlayerStatus = 21
	DdzEnumPlayerStatus_SCLD_LA             DdzEnumPlayerStatus = 22
	DdzEnumPlayerStatus_SCLD_DAO            DdzEnumPlayerStatus = 23
	DdzEnumPlayerStatus_SCLD_BULD           DdzEnumPlayerStatus = 24
	DdzEnumPlayerStatus_JDJIAO_NOACT        DdzEnumPlayerStatus = 25
	DdzEnumPlayerStatus_JDJIAO_JIAO         DdzEnumPlayerStatus = 26
	DdzEnumPlayerStatus_JDJIAO_BUJIAO       DdzEnumPlayerStatus = 27
	DdzEnumPlayerStatus_SHOWPOKER_READY     DdzEnumPlayerStatus = 28
	DdzEnumPlayerStatus_SHOWPOKER_ENTERDESK DdzEnumPlayerStatus = 29
)

var DdzEnumPlayerStatus_name = map[int32]string{
	0:  "NORMAL_DEFAULT",
	1:  "NORMAL_ENTERDESK",
	2:  "NORMAL_READY",
	3:  "NORMAL_DAPAI",
	4:  "NORMAL_LOTTERY",
	5:  "NORMAL_END",
	6:  "HLJIAO_NOACT",
	7:  "HLJIAO_JIAO",
	8:  "HLJIAO_BUJIAO",
	9:  "HLQIANG_NOACT",
	10: "HLQIANG_QIANG",
	11: "HLQIANG_BUQIANG",
	12: "HLJB_NOACT",
	13: "HLJB_JIA",
	14: "HLJB_BUJIA",
	15: "SCMZ_NOACT",
	16: "SCMZ_MENZHUA",
	17: "SCMZ_SEECARDS",
	18: "SCZP_NOACT",
	19: "SCZP_ZHUA",
	20: "SCZP_BUZHUA",
	21: "SCLD_NOACT",
	22: "SCLD_LA",
	23: "SCLD_DAO",
	24: "SCLD_BULD",
	25: "JDJIAO_NOACT",
	26: "JDJIAO_JIAO",
	27: "JDJIAO_BUJIAO",
	28: "SHOWPOKER_READY",
	29: "SHOWPOKER_ENTERDESK",
}
var DdzEnumPlayerStatus_value = map[string]int32{
	"NORMAL_DEFAULT":      0,
	"NORMAL_ENTERDESK":    1,
	"NORMAL_READY":        2,
	"NORMAL_DAPAI":        3,
	"NORMAL_LOTTERY":      4,
	"NORMAL_END":          5,
	"HLJIAO_NOACT":        6,
	"HLJIAO_JIAO":         7,
	"HLJIAO_BUJIAO":       8,
	"HLQIANG_NOACT":       9,
	"HLQIANG_QIANG":       10,
	"HLQIANG_BUQIANG":     11,
	"HLJB_NOACT":          12,
	"HLJB_JIA":            13,
	"HLJB_BUJIA":          14,
	"SCMZ_NOACT":          15,
	"SCMZ_MENZHUA":        16,
	"SCMZ_SEECARDS":       17,
	"SCZP_NOACT":          18,
	"SCZP_ZHUA":           19,
	"SCZP_BUZHUA":         20,
	"SCLD_NOACT":          21,
	"SCLD_LA":             22,
	"SCLD_DAO":            23,
	"SCLD_BULD":           24,
	"JDJIAO_NOACT":        25,
	"JDJIAO_JIAO":         26,
	"JDJIAO_BUJIAO":       27,
	"SHOWPOKER_READY":     28,
	"SHOWPOKER_ENTERDESK": 29,
}

func (x DdzEnumPlayerStatus) Enum() *DdzEnumPlayerStatus {
	p := new(DdzEnumPlayerStatus)
	*p = x
	return p
}
func (x DdzEnumPlayerStatus) String() string {
	return proto.EnumName(DdzEnumPlayerStatus_name, int32(x))
}
func (x *DdzEnumPlayerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumPlayerStatus_value, data, "DdzEnumPlayerStatus")
	if err != nil {
		return err
	}
	*x = DdzEnumPlayerStatus(value)
	return nil
}
func (DdzEnumPlayerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

type DdzEnumRoomType int32

const (
	DdzEnumRoomType_T_NORMAL_DDZ  DdzEnumRoomType = 1
	DdzEnumRoomType_T_HAPPY_DDZ   DdzEnumRoomType = 2
	DdzEnumRoomType_T_SICHUAN_DDZ DdzEnumRoomType = 3
)

var DdzEnumRoomType_name = map[int32]string{
	1: "T_NORMAL_DDZ",
	2: "T_HAPPY_DDZ",
	3: "T_SICHUAN_DDZ",
}
var DdzEnumRoomType_value = map[string]int32{
	"T_NORMAL_DDZ":  1,
	"T_HAPPY_DDZ":   2,
	"T_SICHUAN_DDZ": 3,
}

func (x DdzEnumRoomType) Enum() *DdzEnumRoomType {
	p := new(DdzEnumRoomType)
	*p = x
	return p
}
func (x DdzEnumRoomType) String() string {
	return proto.EnumName(DdzEnumRoomType_name, int32(x))
}
func (x *DdzEnumRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumRoomType_value, data, "DdzEnumRoomType")
	if err != nil {
		return err
	}
	*x = DdzEnumRoomType(value)
	return nil
}
func (DdzEnumRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

type DdzEnumEnterType int32

const (
	DdzEnumEnterType_FRIEND DdzEnumEnterType = 1
	DdzEnumEnterType_COIN   DdzEnumEnterType = 2
)

var DdzEnumEnterType_name = map[int32]string{
	1: "FRIEND",
	2: "COIN",
}
var DdzEnumEnterType_value = map[string]int32{
	"FRIEND": 1,
	"COIN":   2,
}

func (x DdzEnumEnterType) Enum() *DdzEnumEnterType {
	p := new(DdzEnumEnterType)
	*p = x
	return p
}
func (x DdzEnumEnterType) String() string {
	return proto.EnumName(DdzEnumEnterType_name, int32(x))
}
func (x *DdzEnumEnterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumEnterType_value, data, "DdzEnumEnterType")
	if err != nil {
		return err
	}
	*x = DdzEnumEnterType(value)
	return nil
}
func (DdzEnumEnterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

type DdzEnumCoinRoomLevel int32

const (
	DdzEnumCoinRoomLevel_LV1 DdzEnumCoinRoomLevel = 1
	DdzEnumCoinRoomLevel_LV2 DdzEnumCoinRoomLevel = 2
	DdzEnumCoinRoomLevel_LV3 DdzEnumCoinRoomLevel = 3
)

var DdzEnumCoinRoomLevel_name = map[int32]string{
	1: "LV1",
	2: "LV2",
	3: "LV3",
}
var DdzEnumCoinRoomLevel_value = map[string]int32{
	"LV1": 1,
	"LV2": 2,
	"LV3": 3,
}

func (x DdzEnumCoinRoomLevel) Enum() *DdzEnumCoinRoomLevel {
	p := new(DdzEnumCoinRoomLevel)
	*p = x
	return p
}
func (x DdzEnumCoinRoomLevel) String() string {
	return proto.EnumName(DdzEnumCoinRoomLevel_name, int32(x))
}
func (x *DdzEnumCoinRoomLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumCoinRoomLevel_value, data, "DdzEnumCoinRoomLevel")
	if err != nil {
		return err
	}
	*x = DdzEnumCoinRoomLevel(value)
	return nil
}
func (DdzEnumCoinRoomLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

type DdzEnumDeskGameStatus int32

const (
	DdzEnumDeskGameStatus_INIT       DdzEnumDeskGameStatus = 0
	DdzEnumDeskGameStatus_DEAL_CARDS DdzEnumDeskGameStatus = 1
	DdzEnumDeskGameStatus_JIAO_DIZHU DdzEnumDeskGameStatus = 2
	DdzEnumDeskGameStatus_PLAYING    DdzEnumDeskGameStatus = 3
	DdzEnumDeskGameStatus_FINISH     DdzEnumDeskGameStatus = 4
)

var DdzEnumDeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "DEAL_CARDS",
	2: "JIAO_DIZHU",
	3: "PLAYING",
	4: "FINISH",
}
var DdzEnumDeskGameStatus_value = map[string]int32{
	"INIT":       0,
	"DEAL_CARDS": 1,
	"JIAO_DIZHU": 2,
	"PLAYING":    3,
	"FINISH":     4,
}

func (x DdzEnumDeskGameStatus) Enum() *DdzEnumDeskGameStatus {
	p := new(DdzEnumDeskGameStatus)
	*p = x
	return p
}
func (x DdzEnumDeskGameStatus) String() string {
	return proto.EnumName(DdzEnumDeskGameStatus_name, int32(x))
}
func (x *DdzEnumDeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumDeskGameStatus_value, data, "DdzEnumDeskGameStatus")
	if err != nil {
		return err
	}
	*x = DdzEnumDeskGameStatus(value)
	return nil
}
func (DdzEnumDeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

type DdzBaseRoomTypeInfo struct {
	RoomType         *DdzEnumRoomType `protobuf:"varint,1,opt,name=roomType,enum=ddproto.DdzEnumRoomType" json:"roomType,omitempty"`
	BoardsCount      *int32           `protobuf:"varint,2,opt,name=boardsCount" json:"boardsCount,omitempty"`
	CapMax           *int64           `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	BaseValue        *int64           `protobuf:"varint,4,opt,name=baseValue" json:"baseValue,omitempty"`
	IsJiaoFen        *bool            `protobuf:"varint,5,opt,name=isJiaoFen" json:"isJiaoFen,omitempty"`
	UserMinCoin      *int64           `protobuf:"varint,6,opt,name=userMinCoin" json:"userMinCoin,omitempty"`
	UserMaxCoin      *int64           `protobuf:"varint,7,opt,name=userMaxCoin" json:"userMaxCoin,omitempty"`
	CoinTicket       *int64           `protobuf:"varint,8,opt,name=coinTicket" json:"coinTicket,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DdzBaseRoomTypeInfo) Reset()                    { *m = DdzBaseRoomTypeInfo{} }
func (m *DdzBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBaseRoomTypeInfo) ProtoMessage()               {}
func (*DdzBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *DdzBaseRoomTypeInfo) GetRoomType() DdzEnumRoomType {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return DdzEnumRoomType_T_NORMAL_DDZ
}

func (m *DdzBaseRoomTypeInfo) GetBoardsCount() int32 {
	if m != nil && m.BoardsCount != nil {
		return *m.BoardsCount
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetIsJiaoFen() bool {
	if m != nil && m.IsJiaoFen != nil {
		return *m.IsJiaoFen
	}
	return false
}

func (m *DdzBaseRoomTypeInfo) GetUserMinCoin() int64 {
	if m != nil && m.UserMinCoin != nil {
		return *m.UserMinCoin
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetUserMaxCoin() int64 {
	if m != nil && m.UserMaxCoin != nil {
		return *m.UserMaxCoin
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetCoinTicket() int64 {
	if m != nil && m.CoinTicket != nil {
		return *m.CoinTicket
	}
	return 0
}

type DdzBasePlayerInfo struct {
	IsDiZhu          *bool                  `protobuf:"varint,1,opt,name=isDiZhu" json:"isDiZhu,omitempty"`
	PlayerPokers     []*ClientBasePoker     `protobuf:"bytes,2,rep,name=playerPokers" json:"playerPokers,omitempty"`
	Coin             *int64                 `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string                `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32                 `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32                `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool                  `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32                 `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	Status           *DdzEnumPlayerStatus   `protobuf:"varint,9,opt,name=status,enum=ddproto.DdzEnumPlayerStatus" json:"status,omitempty"`
	WxInfo           *WeixinInfo            `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	OnlineStatus     *int32                 `protobuf:"varint,11,opt,name=onlineStatus" json:"onlineStatus,omitempty"`
	RemainPaiCount   *int32                 `protobuf:"varint,13,opt,name=remainPaiCount" json:"remainPaiCount,omitempty"`
	OutPais          []*ClientBasePoker     `protobuf:"bytes,14,rep,name=outPais" json:"outPais,omitempty"`
	OutPaiType       *DdzEnumPaiType        `protobuf:"varint,15,opt,name=outPaiType,enum=ddproto.DdzEnumPaiType" json:"outPaiType,omitempty"`
	JiaoScore        *int32                 `protobuf:"varint,16,opt,name=jiaoScore" json:"jiaoScore,omitempty"`
	Num2Win4OpenRB   *int32                 `protobuf:"varint,17,opt,name=num2Win4OpenRB" json:"num2Win4OpenRB,omitempty"`
	PlayerRateInfo   *DdzBasePlayerRateInfo `protobuf:"bytes,18,opt,name=playerRateInfo" json:"playerRateInfo,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DdzBasePlayerInfo) Reset()                    { *m = DdzBasePlayerInfo{} }
func (m *DdzBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBasePlayerInfo) ProtoMessage()               {}
func (*DdzBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *DdzBasePlayerInfo) GetIsDiZhu() bool {
	if m != nil && m.IsDiZhu != nil {
		return *m.IsDiZhu
	}
	return false
}

func (m *DdzBasePlayerInfo) GetPlayerPokers() []*ClientBasePoker {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

func (m *DdzBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *DdzBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *DdzBasePlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetStatus() DdzEnumPlayerStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DdzEnumPlayerStatus_NORMAL_DEFAULT
}

func (m *DdzBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *DdzBasePlayerInfo) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetRemainPaiCount() int32 {
	if m != nil && m.RemainPaiCount != nil {
		return *m.RemainPaiCount
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetOutPais() []*ClientBasePoker {
	if m != nil {
		return m.OutPais
	}
	return nil
}

func (m *DdzBasePlayerInfo) GetOutPaiType() DdzEnumPaiType {
	if m != nil && m.OutPaiType != nil {
		return *m.OutPaiType
	}
	return DdzEnumPaiType_ERRORCARD
}

func (m *DdzBasePlayerInfo) GetJiaoScore() int32 {
	if m != nil && m.JiaoScore != nil {
		return *m.JiaoScore
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetNum2Win4OpenRB() int32 {
	if m != nil && m.Num2Win4OpenRB != nil {
		return *m.Num2Win4OpenRB
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetPlayerRateInfo() *DdzBasePlayerRateInfo {
	if m != nil {
		return m.PlayerRateInfo
	}
	return nil
}

type DdzBasePlayerRateInfo struct {
	TotalRate        *int32                 `protobuf:"varint,1,opt,name=totalRate" json:"totalRate,omitempty"`
	CommonRateInfo   *DdzBaseCommonRateInfo `protobuf:"bytes,2,opt,name=commonRateInfo" json:"commonRateInfo,omitempty"`
	DizhuJBRate      *int32                 `protobuf:"varint,3,opt,name=dizhuJBRate" json:"dizhuJBRate,omitempty"`
	FamerJBRate      *int32                 `protobuf:"varint,4,opt,name=famerJBRate" json:"famerJBRate,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DdzBasePlayerRateInfo) Reset()                    { *m = DdzBasePlayerRateInfo{} }
func (m *DdzBasePlayerRateInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBasePlayerRateInfo) ProtoMessage()               {}
func (*DdzBasePlayerRateInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *DdzBasePlayerRateInfo) GetTotalRate() int32 {
	if m != nil && m.TotalRate != nil {
		return *m.TotalRate
	}
	return 0
}

func (m *DdzBasePlayerRateInfo) GetCommonRateInfo() *DdzBaseCommonRateInfo {
	if m != nil {
		return m.CommonRateInfo
	}
	return nil
}

func (m *DdzBasePlayerRateInfo) GetDizhuJBRate() int32 {
	if m != nil && m.DizhuJBRate != nil {
		return *m.DizhuJBRate
	}
	return 0
}

func (m *DdzBasePlayerRateInfo) GetFamerJBRate() int32 {
	if m != nil && m.FamerJBRate != nil {
		return *m.FamerJBRate
	}
	return 0
}

type DdzBaseCommonRateInfo struct {
	InitPlayRate     *int32 `protobuf:"varint,1,opt,name=initPlayRate" json:"initPlayRate,omitempty"`
	SeeCardsRate     *int32 `protobuf:"varint,2,opt,name=seeCardsRate" json:"seeCardsRate,omitempty"`
	JrDizhuRate      *int32 `protobuf:"varint,3,opt,name=jrDizhuRate" json:"jrDizhuRate,omitempty"`
	FootRate         *int32 `protobuf:"varint,4,opt,name=footRate" json:"footRate,omitempty"`
	BoomRate         *int32 `protobuf:"varint,5,opt,name=boomRate" json:"boomRate,omitempty"`
	SpringRate       *int32 `protobuf:"varint,6,opt,name=springRate" json:"springRate,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DdzBaseCommonRateInfo) Reset()                    { *m = DdzBaseCommonRateInfo{} }
func (m *DdzBaseCommonRateInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBaseCommonRateInfo) ProtoMessage()               {}
func (*DdzBaseCommonRateInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *DdzBaseCommonRateInfo) GetInitPlayRate() int32 {
	if m != nil && m.InitPlayRate != nil {
		return *m.InitPlayRate
	}
	return 0
}

func (m *DdzBaseCommonRateInfo) GetSeeCardsRate() int32 {
	if m != nil && m.SeeCardsRate != nil {
		return *m.SeeCardsRate
	}
	return 0
}

func (m *DdzBaseCommonRateInfo) GetJrDizhuRate() int32 {
	if m != nil && m.JrDizhuRate != nil {
		return *m.JrDizhuRate
	}
	return 0
}

func (m *DdzBaseCommonRateInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *DdzBaseCommonRateInfo) GetBoomRate() int32 {
	if m != nil && m.BoomRate != nil {
		return *m.BoomRate
	}
	return 0
}

func (m *DdzBaseCommonRateInfo) GetSpringRate() int32 {
	if m != nil && m.SpringRate != nil {
		return *m.SpringRate
	}
	return 0
}

type DdzBaseDeskInfo struct {
	GameStatus       *int32               `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *DdzBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32               `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32              `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32               `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	NInitActionTime  *int32               `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	InitRoomCoin     *int64               `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32               `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32               `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string              `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	DiZhuUserId      *uint32              `protobuf:"varint,14,opt,name=diZhuUserId" json:"diZhuUserId,omitempty"`
	FootPokers       []*ClientBasePoker   `protobuf:"bytes,15,rep,name=footPokers" json:"footPokers,omitempty"`
	FootRate         *int32               `protobuf:"varint,16,opt,name=footRate" json:"footRate,omitempty"`
	PlayRate         *int32               `protobuf:"varint,17,opt,name=playRate" json:"playRate,omitempty"`
	EnterType        *DdzEnumEnterType    `protobuf:"varint,18,opt,name=enterType,enum=ddproto.DdzEnumEnterType" json:"enterType,omitempty"`
	CoinTicket       *int64               `protobuf:"varint,19,opt,name=coinTicket" json:"coinTicket,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *DdzBaseDeskInfo) Reset()                    { *m = DdzBaseDeskInfo{} }
func (m *DdzBaseDeskInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBaseDeskInfo) ProtoMessage()               {}
func (*DdzBaseDeskInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *DdzBaseDeskInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetRoomTypeInfo() *DdzBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DdzBaseDeskInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DdzBaseDeskInfo) GetDiZhuUserId() uint32 {
	if m != nil && m.DiZhuUserId != nil {
		return *m.DiZhuUserId
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetFootPokers() []*ClientBasePoker {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *DdzBaseDeskInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetPlayRate() int32 {
	if m != nil && m.PlayRate != nil {
		return *m.PlayRate
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetEnterType() DdzEnumEnterType {
	if m != nil && m.EnterType != nil {
		return *m.EnterType
	}
	return DdzEnumEnterType_FRIEND
}

func (m *DdzBaseDeskInfo) GetCoinTicket() int64 {
	if m != nil && m.CoinTicket != nil {
		return *m.CoinTicket
	}
	return 0
}

func init() {
	proto.RegisterType((*DdzBaseRoomTypeInfo)(nil), "ddproto.ddz_base_roomTypeInfo")
	proto.RegisterType((*DdzBasePlayerInfo)(nil), "ddproto.ddz_base_playerInfo")
	proto.RegisterType((*DdzBasePlayerRateInfo)(nil), "ddproto.ddz_base_playerRateInfo")
	proto.RegisterType((*DdzBaseCommonRateInfo)(nil), "ddproto.ddz_base_commonRateInfo")
	proto.RegisterType((*DdzBaseDeskInfo)(nil), "ddproto.ddz_base_deskInfo")
	proto.RegisterEnum("ddproto.DdzEnumProtoId", DdzEnumProtoId_name, DdzEnumProtoId_value)
	proto.RegisterEnum("ddproto.DdzEnumErrorCode", DdzEnumErrorCode_name, DdzEnumErrorCode_value)
	proto.RegisterEnum("ddproto.DdzEnumPaiType", DdzEnumPaiType_name, DdzEnumPaiType_value)
	proto.RegisterEnum("ddproto.DdzEnumActType", DdzEnumActType_name, DdzEnumActType_value)
	proto.RegisterEnum("ddproto.DdzEnumGameStatus", DdzEnumGameStatus_name, DdzEnumGameStatus_value)
	proto.RegisterEnum("ddproto.DdzEnumPlayerStatus", DdzEnumPlayerStatus_name, DdzEnumPlayerStatus_value)
	proto.RegisterEnum("ddproto.DdzEnumRoomType", DdzEnumRoomType_name, DdzEnumRoomType_value)
	proto.RegisterEnum("ddproto.DdzEnumEnterType", DdzEnumEnterType_name, DdzEnumEnterType_value)
	proto.RegisterEnum("ddproto.DdzEnumCoinRoomLevel", DdzEnumCoinRoomLevel_name, DdzEnumCoinRoomLevel_value)
	proto.RegisterEnum("ddproto.DdzEnumDeskGameStatus", DdzEnumDeskGameStatus_name, DdzEnumDeskGameStatus_value)
}

var fileDescriptor8 = []byte{
	// 2129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x58, 0x5d, 0x6f, 0xdb, 0xc8,
	0xd5, 0x8e, 0x3e, 0x2c, 0xc9, 0x63, 0x59, 0x1e, 0x8f, 0xe3, 0x44, 0x71, 0x12, 0x47, 0xeb, 0xdd,
	0x77, 0x5f, 0xaf, 0xb6, 0x9b, 0x76, 0x93, 0xc5, 0x02, 0xdb, 0x8b, 0x02, 0x14, 0x39, 0x96, 0xe8,
	0x48, 0xa4, 0x32, 0x24, 0x63, 0xc4, 0x28, 0x40, 0x30, 0x16, 0xb3, 0xe1, 0xc6, 0x22, 0x0d, 0x7d,
	0xec, 0x26, 0x0b, 0xf4, 0xb6, 0xf7, 0x6d, 0x6f, 0xfa, 0xf1, 0x0b, 0x8a, 0xa2, 0x40, 0xff, 0x44,
	0x7f, 0x43, 0x2f, 0xfa, 0x63, 0x5a, 0x9c, 0x33, 0xfc, 0x18, 0xc9, 0x71, 0xd7, 0x17, 0x02, 0xcf,
	0x33, 0xcf, 0x99, 0x39, 0xe7, 0xcc, 0x99, 0x67, 0x48, 0x93, 0xd6, 0x64, 0xf2, 0xa3, 0xff, 0x2a,
	0x98, 0x87, 0x8f, 0xaf, 0x66, 0xc9, 0x22, 0x61, 0xf5, 0xc9, 0x04, 0x1f, 0x0e, 0xf6, 0x2e, 0x92,
	0xe9, 0x34, 0x89, 0xfd, 0x8b, 0xcb, 0x28, 0x8c, 0x17, 0x72, 0xf4, 0xe8, 0xaf, 0x65, 0xb2, 0x9f,
	0x39, 0xf8, 0xb3, 0x24, 0x99, 0xba, 0xef, 0xaf, 0x42, 0x33, 0x7e, 0x9d, 0xb0, 0xaf, 0x49, 0x23,
	0xb3, 0xdb, 0xa5, 0x4e, 0xe9, 0xb8, 0xf5, 0xe4, 0xe0, 0x71, 0x3a, 0xd5, 0x63, 0xf0, 0x08, 0xe3,
	0xe5, 0x34, 0xf7, 0x10, 0x39, 0x97, 0x75, 0xc8, 0xd6, 0xab, 0x24, 0x98, 0x4d, 0xe6, 0x7a, 0xb2,
	0x8c, 0x17, 0xed, 0x72, 0xa7, 0x74, 0xbc, 0x21, 0x54, 0x88, 0xdd, 0x21, 0xb5, 0x8b, 0xe0, 0x6a,
	0x14, 0xbc, 0x6b, 0x57, 0x3a, 0xa5, 0xe3, 0x8a, 0x48, 0x2d, 0xf6, 0x80, 0x6c, 0x42, 0x18, 0x2f,
	0x82, 0xcb, 0x65, 0xd8, 0xae, 0xe2, 0x50, 0x01, 0xc0, 0x68, 0x34, 0x3f, 0x8d, 0x82, 0xe4, 0x24,
	0x8c, 0xdb, 0x1b, 0x9d, 0xd2, 0x71, 0x43, 0x14, 0x00, 0xac, 0xba, 0x9c, 0x87, 0xb3, 0x51, 0x14,
	0xeb, 0x49, 0x14, 0xb7, 0x6b, 0xe8, 0xad, 0x42, 0x39, 0x23, 0x78, 0x87, 0x8c, 0xba, 0xc2, 0x90,
	0x10, 0x3b, 0x24, 0xe4, 0x22, 0x89, 0x62, 0x37, 0xba, 0x78, 0x1b, 0x2e, 0xda, 0x0d, 0x24, 0x28,
	0xc8, 0xd1, 0xdf, 0x37, 0xc8, 0x5e, 0x5e, 0xab, 0xab, 0xcb, 0xe0, 0x7d, 0x38, 0xc3, 0x4a, 0xb5,
	0x49, 0x3d, 0x9a, 0x1b, 0xd1, 0xf9, 0x9b, 0x25, 0x16, 0xaa, 0x21, 0x32, 0x93, 0xfd, 0x8a, 0x34,
	0x25, 0x6f, 0x9c, 0xbc, 0x0d, 0x67, 0xf3, 0x76, 0xb9, 0x53, 0x39, 0xde, 0x52, 0xea, 0x28, 0xb7,
	0x22, 0x9d, 0x10, 0x28, 0x62, 0x85, 0xcf, 0x18, 0xa9, 0xc2, 0xfa, 0x69, 0x9d, 0xf0, 0x99, 0x1d,
	0x90, 0x46, 0x1c, 0x5d, 0xbc, 0xb5, 0x82, 0xa9, 0x2c, 0xd2, 0xa6, 0xc8, 0x6d, 0x46, 0x49, 0x65,
	0x1e, 0xbe, 0xc3, 0xea, 0x6c, 0x08, 0x78, 0x84, 0x5a, 0x43, 0x8a, 0xe6, 0x04, 0x4b, 0xb2, 0x2d,
	0x52, 0x4b, 0xc6, 0x6c, 0xff, 0x10, 0x87, 0x33, 0xac, 0x04, 0xc6, 0x8c, 0x26, 0x78, 0xbc, 0x12,
	0x61, 0x30, 0x79, 0x8f, 0x15, 0xd8, 0x10, 0xa9, 0xc5, 0xbe, 0x26, 0xb5, 0xf9, 0x22, 0x58, 0x2c,
	0xe7, 0xed, 0x4d, 0xec, 0x86, 0xc3, 0xeb, 0xdd, 0x20, 0x63, 0x77, 0x90, 0x25, 0x52, 0x36, 0xfb,
	0x9c, 0xd4, 0x7e, 0x78, 0x07, 0x75, 0x6a, 0x93, 0x4e, 0xe9, 0x78, 0xeb, 0xc9, 0x5e, 0xee, 0x77,
	0x16, 0x46, 0xef, 0xa2, 0x18, 0x86, 0x44, 0x4a, 0x61, 0x47, 0xa4, 0x99, 0xc4, 0x97, 0x51, 0x1c,
	0xca, 0x49, 0xda, 0x5b, 0x18, 0xc2, 0x0a, 0xc6, 0x3e, 0x25, 0xad, 0x59, 0x38, 0x0d, 0xa2, 0x78,
	0x1c, 0x44, 0xb2, 0xc7, 0xb6, 0x91, 0xb5, 0x86, 0xb2, 0xaf, 0x48, 0x3d, 0x59, 0x2e, 0xc6, 0x41,
	0x34, 0x6f, 0xb7, 0x7e, 0xb2, 0xee, 0x19, 0x95, 0x7d, 0x43, 0x88, 0x7c, 0xc4, 0xc6, 0xdf, 0xc1,
	0x54, 0xef, 0x7d, 0x20, 0x55, 0x49, 0x10, 0x0a, 0x19, 0x3a, 0xf4, 0xbb, 0x28, 0x48, 0x9c, 0x8b,
	0x64, 0x16, 0xb6, 0x29, 0xc6, 0x54, 0x00, 0x10, 0x76, 0xbc, 0x9c, 0x3e, 0x39, 0x8b, 0xe2, 0xaf,
	0xec, 0xab, 0x30, 0x16, 0xbd, 0xf6, 0xae, 0x0c, 0x7b, 0x15, 0x65, 0x03, 0xd2, 0x92, 0x75, 0x14,
	0xc1, 0x02, 0x4f, 0x62, 0x9b, 0x61, 0xdd, 0x3a, 0x2b, 0x41, 0x28, 0x3d, 0x98, 0xf1, 0xc4, 0x9a,
	0xdf, 0xd1, 0x3f, 0x4b, 0xe4, 0xee, 0x0d, 0x5c, 0x88, 0x75, 0x91, 0x2c, 0x82, 0x4b, 0x00, 0xb0,
	0x6b, 0x37, 0x44, 0x01, 0x40, 0x0c, 0x52, 0x2c, 0xf2, 0x18, 0xca, 0x37, 0xc5, 0xb0, 0xca, 0x13,
	0x6b, 0x7e, 0x70, 0xea, 0x26, 0xd1, 0x8f, 0x6f, 0x96, 0xa7, 0x3d, 0x5c, 0xa9, 0x22, 0xd5, 0x40,
	0x81, 0x80, 0xf1, 0x3a, 0x98, 0x86, 0xb3, 0x94, 0x51, 0x95, 0x0c, 0x05, 0x3a, 0xfa, 0xb7, 0x9a,
	0xc7, 0xda, 0xfc, 0x47, 0xa4, 0x19, 0xc5, 0xd1, 0x62, 0x7c, 0x19, 0xbc, 0x57, 0x52, 0x59, 0xc1,
	0x80, 0x33, 0x0f, 0x43, 0x1d, 0x04, 0x08, 0x39, 0x52, 0x92, 0x56, 0x30, 0x88, 0xe2, 0xbb, 0x99,
	0x01, 0x61, 0xa9, 0x71, 0x2a, 0x10, 0x9c, 0xbb, 0xd7, 0x49, 0xb2, 0x50, 0x82, 0xcc, 0x6d, 0x18,
	0x7b, 0x95, 0x24, 0x53, 0x1c, 0x93, 0x87, 0x2f, 0xb7, 0x41, 0x55, 0xe6, 0x57, 0xb3, 0x28, 0xfe,
	0x16, 0x47, 0x6b, 0x38, 0xaa, 0x20, 0x47, 0xbf, 0xdd, 0x20, 0xbb, 0x79, 0x76, 0x93, 0x70, 0xfe,
	0x16, 0xf3, 0x3a, 0x24, 0xa4, 0x1f, 0x4c, 0xb3, 0x63, 0x20, 0xb3, 0x52, 0x10, 0xd6, 0x23, 0x4d,
	0x55, 0xad, 0xd3, 0xfd, 0x39, 0xbc, 0xbe, 0x3f, 0x2a, 0x4b, 0xac, 0xf8, 0x40, 0x0f, 0xc8, 0xae,
	0xb0, 0x96, 0xd3, 0x34, 0xe3, 0x02, 0x80, 0xaa, 0x05, 0x17, 0x8b, 0xe8, 0xfb, 0xd0, 0x93, 0xfa,
	0x51, 0x45, 0xfd, 0x58, 0xc1, 0x20, 0x4a, 0xb0, 0x93, 0xd8, 0x8d, 0xa6, 0x59, 0xe6, 0x0a, 0xc2,
	0x8e, 0xc9, 0x4e, 0x6c, 0xc6, 0xd1, 0x42, 0x2b, 0x48, 0x75, 0x24, 0xad, 0xc3, 0xd9, 0x3e, 0x8a,
	0x24, 0x99, 0xa2, 0x3c, 0x6f, 0xa2, 0xe2, 0xad, 0x60, 0xec, 0x13, 0xb2, 0x7d, 0xb1, 0x9c, 0xcd,
	0x60, 0x5f, 0xe5, 0xb9, 0x27, 0x38, 0xd7, 0x2a, 0x08, 0xe7, 0x0c, 0x1b, 0xb9, 0xa0, 0x49, 0x11,
	0x59, 0x43, 0x21, 0x76, 0xa8, 0x86, 0xb5, 0x9c, 0xbe, 0x0a, 0x67, 0xed, 0x26, 0x2a, 0xa9, 0x82,
	0xc8, 0xce, 0x3d, 0x7f, 0xb3, 0x4c, 0xd3, 0x6f, 0x61, 0xfa, 0x2a, 0xc4, 0x7e, 0x49, 0x08, 0x74,
	0x40, 0xaa, 0xed, 0x3b, 0x3f, 0xa9, 0x31, 0x0a, 0x7b, 0xa5, 0x9b, 0xe8, 0xf5, 0x6e, 0xba, 0xca,
	0xfa, 0x59, 0x6a, 0x44, 0x6e, 0xb3, 0x6f, 0xc8, 0x66, 0x18, 0x2f, 0xc2, 0x19, 0xaa, 0x13, 0x43,
	0x75, 0xba, 0x7f, 0x5d, 0x9d, 0x72, 0x8a, 0x28, 0xd8, 0x6b, 0xd7, 0xdb, 0xde, 0xfa, 0xf5, 0xd6,
	0xfd, 0x17, 0x21, 0xb4, 0xd0, 0x37, 0x98, 0xd0, 0x9c, 0xb0, 0x7d, 0xb2, 0x6b, 0x18, 0xe7, 0xfe,
	0xd8, 0x34, 0xfc, 0x01, 0xd7, 0x84, 0xdb, 0xe3, 0x9a, 0x4b, 0x6f, 0xb1, 0x3b, 0x84, 0x65, 0xf0,
	0x73, 0xcf, 0xd4, 0x9f, 0xf9, 0xba, 0x6d, 0x59, 0xb4, 0xc4, 0x0e, 0xc8, 0x9d, 0xeb, 0xb8, 0xaf,
	0xe9, 0xcf, 0x68, 0x59, 0xf5, 0xe9, 0x6b, 0x23, 0xee, 0x0f, 0xed, 0xbe, 0x69, 0xd1, 0x8a, 0xea,
	0x53, 0xe0, 0xe8, 0x53, 0x55, 0x7d, 0x74, 0xc1, 0x35, 0x97, 0x0b, 0xdb, 0x1e, 0xd1, 0x0d, 0xd5,
	0xa7, 0xc0, 0xd1, 0xa7, 0xa6, 0xfa, 0x70, 0xcb, 0xe5, 0xc2, 0x47, 0x9f, 0xba, 0xea, 0x53, 0xe0,
	0xe8, 0xd3, 0x60, 0xf7, 0xc8, 0x7e, 0x36, 0xe6, 0x70, 0x4b, 0x06, 0x62, 0x5a, 0x27, 0x36, 0xdd,
	0x64, 0xbb, 0x64, 0x3b, 0x1b, 0x12, 0x5c, 0x33, 0x5e, 0x52, 0xa2, 0x16, 0x05, 0x21, 0x9c, 0x64,
	0x8b, 0xed, 0x91, 0x9d, 0x0c, 0xb6, 0xc7, 0xdc, 0x32, 0xad, 0x3e, 0x6d, 0xaa, 0xd1, 0x18, 0x5c,
	0x1b, 0xfa, 0xba, 0x26, 0x0c, 0x87, 0x6e, 0xab, 0xf8, 0xa9, 0xa9, 0xd9, 0xbe, 0x61, 0x9e, 0x0f,
	0x3c, 0xda, 0x52, 0xa3, 0x2c, 0x70, 0x5c, 0x60, 0x67, 0x65, 0x5d, 0xbb, 0x97, 0xba, 0x50, 0x35,
	0xf8, 0x1c, 0x46, 0x8f, 0x5d, 0xc6, 0x48, 0x2b, 0x5f, 0xdd, 0xf6, 0x7a, 0x43, 0x4e, 0xd9, 0x4a,
	0x44, 0x88, 0x21, 0x77, 0x8f, 0xdd, 0x27, 0x77, 0xf3, 0x1a, 0x0c, 0xec, 0x33, 0x7f, 0xa0, 0x59,
	0xc6, 0xd8, 0x7e, 0xc6, 0x85, 0x43, 0x6f, 0xb3, 0x47, 0xe4, 0xfe, 0x0d, 0x83, 0xe8, 0xbd, 0xcf,
	0x6e, 0x13, 0x9a, 0x11, 0x46, 0xdc, 0xf2, 0xcf, 0x07, 0x9e, 0x46, 0xef, 0xb0, 0x36, 0xb9, 0xbd,
	0x8e, 0x22, 0xff, 0xae, 0x9a, 0x8b, 0xc3, 0x79, 0x5a, 0x96, 0xf6, 0xea, 0x46, 0xa4, 0x30, 0x7a,
	0xdc, 0x63, 0x94, 0x34, 0xb3, 0xa1, 0xb1, 0x37, 0x1c, 0xd2, 0x03, 0x75, 0x4d, 0x40, 0x90, 0x77,
	0x5f, 0x9d, 0xd9, 0xf6, 0xdc, 0x74, 0xe6, 0x07, 0xea, 0xcc, 0x39, 0x8c, 0x1e, 0x0f, 0xd5, 0x8d,
	0xd3, 0x74, 0xd7, 0xef, 0x7b, 0x36, 0x3d, 0x64, 0x77, 0xc9, 0xde, 0x1a, 0x88, 0xec, 0x47, 0x6a,
	0xfd, 0x1c, 0x57, 0x13, 0xae, 0x3f, 0x1e, 0x6a, 0x2f, 0x69, 0x47, 0x8d, 0xc6, 0x7e, 0xc1, 0x85,
	0xeb, 0x09, 0x8b, 0x7e, 0xa4, 0x2e, 0xab, 0x7b, 0x42, 0x70, 0xcb, 0x15, 0xdc, 0xf1, 0x86, 0x2e,
	0x3d, 0x52, 0xb7, 0x1a, 0x9a, 0x8e, 0x5b, 0xc6, 0xd0, 0x76, 0x5d, 0x2e, 0x5e, 0xd2, 0x8f, 0x55,
	0x37, 0xc3, 0x74, 0x1c, 0x7b, 0xf8, 0x82, 0xfb, 0x06, 0x77, 0x9e, 0xd1, 0x4f, 0xd8, 0x43, 0x72,
	0xef, 0x83, 0x43, 0x18, 0xde, 0xff, 0xa9, 0xe1, 0x0d, 0xb9, 0x96, 0xb9, 0x7d, 0xaa, 0xae, 0x56,
	0xe0, 0xe8, 0xf3, 0xff, 0x6a, 0x01, 0x46, 0xdc, 0x71, 0xb4, 0x3e, 0xa7, 0xc7, 0xea, 0xde, 0xe1,
	0x99, 0xc8, 0x46, 0x3e, 0x53, 0x3b, 0x05, 0x4f, 0x2c, 0xfc, 0x08, 0xae, 0xdb, 0xc2, 0xa0, 0x5d,
	0xb5, 0x53, 0xd6, 0x06, 0x71, 0xb1, 0xcf, 0xaf, 0x11, 0xf0, 0x30, 0x6a, 0x7d, 0x6e, 0xb9, 0x23,
	0xdb, 0xe0, 0xf4, 0x67, 0xec, 0x63, 0xf2, 0xe8, 0x7f, 0x10, 0x70, 0x96, 0x2f, 0xd8, 0x21, 0x39,
	0x58, 0x21, 0x3d, 0xf7, 0x4c, 0xb7, 0x98, 0xe4, 0x31, 0x3b, 0x22, 0x87, 0x37, 0x8f, 0xe3, 0x1c,
	0x3f, 0x57, 0x4b, 0x62, 0x5b, 0x43, 0xd3, 0xe2, 0x67, 0x9a, 0x80, 0x23, 0xfd, 0x9c, 0xfe, 0xe2,
	0x86, 0x31, 0xf0, 0xfb, 0x52, 0x2d, 0xb1, 0xe0, 0x46, 0x4f, 0xeb, 0xa3, 0xcf, 0x93, 0x0f, 0xe0,
	0xc0, 0x7f, 0xda, 0xfd, 0x43, 0x99, 0xb0, 0x42, 0x9b, 0x67, 0xb3, 0x64, 0xa6, 0x27, 0x93, 0x90,
	0xb5, 0x08, 0xe1, 0xba, 0xef, 0x78, 0xba, 0xce, 0x1d, 0x87, 0xde, 0x62, 0x5f, 0x90, 0x0e, 0xd7,
	0x53, 0x3d, 0x93, 0xbb, 0x63, 0x98, 0xda, 0xc8, 0xb6, 0x0c, 0xdf, 0xb2, 0x5d, 0x6e, 0xd9, 0x5e,
	0x7f, 0x40, 0xff, 0xf2, 0x9f, 0xf4, 0xaf, 0xc4, 0x3e, 0x23, 0x0f, 0xd6, 0xe8, 0x9e, 0xc3, 0x05,
	0x70, 0x4f, 0x6c, 0xcf, 0x32, 0xe8, 0x9f, 0x0b, 0xea, 0x11, 0xd9, 0xe7, 0xba, 0x6f, 0x5a, 0xae,
	0x2d, 0x89, 0x39, 0xe7, 0x4f, 0x05, 0xa7, 0x43, 0xf6, 0x56, 0x38, 0xa6, 0x73, 0x02, 0xa7, 0xec,
	0x8f, 0x05, 0xe3, 0x23, 0x72, 0x9b, 0xeb, 0xb2, 0x9a, 0x52, 0xf6, 0x04, 0x1f, 0xc3, 0x75, 0xf0,
	0xfb, 0x82, 0xd2, 0x25, 0x0f, 0x57, 0x29, 0xfa, 0xc0, 0x1c, 0xc3, 0x72, 0x7e, 0x1a, 0xff, 0xef,
	0x72, 0x6e, 0xf7, 0x1f, 0x65, 0xf5, 0xbe, 0x49, 0xdf, 0xa1, 0xb7, 0xc9, 0x26, 0x17, 0xc2, 0x16,
	0x70, 0x3c, 0xe9, 0x2d, 0x28, 0x91, 0x63, 0x5a, 0xfd, 0x21, 0x47, 0xbb, 0x04, 0xb6, 0xd4, 0x2c,
	0xb4, 0xcb, 0x40, 0x77, 0x07, 0x82, 0x4b, 0xb3, 0xc2, 0x9a, 0xa4, 0xd1, 0xb3, 0x47, 0x3d, 0xb4,
	0xaa, 0x20, 0x18, 0x38, 0x68, 0x5b, 0x72, 0x7c, 0x23, 0x47, 0xdc, 0x33, 0x1b, 0x91, 0x1a, 0xdb,
	0x21, 0x5b, 0xe0, 0x91, 0x01, 0x75, 0x90, 0xfb, 0x14, 0xb0, 0x25, 0xd4, 0x00, 0x0e, 0x5c, 0x63,
	0x5c, 0x77, 0x11, 0xd8, 0x94, 0xc0, 0x68, 0xac, 0x59, 0x2f, 0x11, 0x20, 0x30, 0xaf, 0x66, 0x0a,
	0x5d, 0x68, 0x27, 0x92, 0xb2, 0x05, 0xad, 0x90, 0x21, 0x4a, 0x02, 0x4d, 0x15, 0x57, 0x12, 0xd9,
	0x86, 0x44, 0x1c, 0x6f, 0xcc, 0x05, 0xac, 0x4d, 0x5b, 0xa0, 0x61, 0x27, 0xb6, 0x27, 0xce, 0x4c,
	0x77, 0x60, 0x5b, 0x3c, 0x95, 0xee, 0x9d, 0xee, 0x6f, 0x94, 0x8a, 0x05, 0x17, 0x0b, 0xac, 0x18,
	0xe4, 0xe4, 0x5b, 0xb6, 0x18, 0x69, 0x20, 0x80, 0x2e, 0x2d, 0x49, 0x44, 0xb9, 0x54, 0xca, 0x10,
	0xb0, 0xab, 0x5c, 0x19, 0x58, 0x28, 0x37, 0xbb, 0x11, 0xaa, 0x50, 0x55, 0xb7, 0x50, 0xed, 0x0d,
	0x46, 0x48, 0xcd, 0x95, 0x1a, 0x5b, 0xcb, 0x9e, 0x9d, 0x01, 0xad, 0x77, 0x03, 0xf9, 0xfd, 0x8b,
	0xcb, 0x7f, 0x5b, 0xbc, 0x8b, 0x12, 0x52, 0xf3, 0x7c, 0xd3, 0x32, 0xe1, 0xc5, 0x80, 0x92, 0xa6,
	0xa7, 0xae, 0x5d, 0x82, 0xb5, 0x3d, 0x65, 0x6d, 0xdc, 0x33, 0x0f, 0x35, 0x13, 0x2e, 0x48, 0x0c,
	0xc5, 0xf3, 0x4f, 0x4c, 0xcb, 0x74, 0x06, 0xb4, 0xda, 0xfd, 0x5b, 0x55, 0xfe, 0x3f, 0xe2, 0xda,
	0xf7, 0x24, 0x5c, 0x65, 0x69, 0x96, 0x06, 0x3f, 0xd1, 0x40, 0x41, 0x6f, 0x81, 0xe4, 0xa6, 0x18,
	0x6a, 0x04, 0x2a, 0x1d, 0xe6, 0x9f, 0xa2, 0xf2, 0xc2, 0x2e, 0x2b, 0x88, 0xa1, 0x8d, 0x35, 0x93,
	0x56, 0x94, 0xd9, 0x32, 0xcd, 0xc5, 0x32, 0xe4, 0xb3, 0xa5, 0xdd, 0x32, 0x18, 0x62, 0x2e, 0x96,
	0x0d, 0x95, 0xc5, 0x6e, 0x49, 0x11, 0xf8, 0x91, 0xdd, 0x92, 0x02, 0x3d, 0x0f, 0xa1, 0x86, 0x84,
	0x9e, 0x9b, 0x9a, 0xd5, 0x4f, 0xdd, 0x36, 0x55, 0x08, 0x7f, 0x29, 0x01, 0xc5, 0xcd, 0xa0, 0x9e,
	0x27, 0xc1, 0x2d, 0x08, 0x60, 0x30, 0x3c, 0xed, 0xa5, 0x7e, 0x4d, 0x28, 0x0d, 0xda, 0xa7, 0xa6,
	0x46, 0xb7, 0xf3, 0x51, 0x5c, 0x89, 0xb6, 0xf0, 0x6c, 0xe8, 0xa3, 0xf3, 0x94, 0xbd, 0x03, 0xe1,
	0xa2, 0x3d, 0xe2, 0x16, 0xee, 0x23, 0x85, 0x75, 0x11, 0x71, 0xe4, 0x01, 0x71, 0xe8, 0xae, 0x74,
	0x3a, 0x1f, 0xa7, 0x4e, 0x0c, 0xfb, 0x0e, 0x6c, 0xf4, 0xd8, 0x83, 0x04, 0xd1, 0xec, 0x79, 0x08,
	0xdc, 0x96, 0xfc, 0xa1, 0x91, 0xf2, 0xf7, 0xd9, 0x16, 0xa9, 0xa3, 0x3d, 0x84, 0xdb, 0xbd, 0x49,
	0x1a, 0x68, 0x18, 0x9a, 0x4d, 0xef, 0xca, 0xa9, 0x86, 0x86, 0xdf, 0xf3, 0x86, 0x06, 0x6d, 0x43,
	0x38, 0xa7, 0x86, 0x52, 0xbd, 0x7b, 0x30, 0x79, 0x8a, 0x60, 0xa9, 0x0e, 0x20, 0xbe, 0x14, 0x48,
	0xab, 0x77, 0x1f, 0xea, 0x02, 0xef, 0x17, 0xf8, 0x6a, 0x91, 0x6e, 0xdf, 0x03, 0xb8, 0x8a, 0x0b,
	0xb0, 0xd8, 0xe9, 0x87, 0x5d, 0x53, 0x7e, 0x3a, 0xad, 0xfc, 0x2b, 0x6a, 0xe5, 0x40, 0x18, 0xc6,
	0xb9, 0x6c, 0x41, 0xd7, 0x1f, 0x68, 0xe3, 0xf1, 0x4b, 0x04, 0xca, 0xb0, 0xb0, 0xeb, 0x3b, 0xa6,
	0x3e, 0xf0, 0x34, 0x0b, 0xa1, 0x4a, 0xb7, 0xab, 0x4a, 0x74, 0xfe, 0xce, 0x4c, 0x48, 0xed, 0x44,
	0x98, 0xd0, 0x0e, 0x25, 0xd6, 0x20, 0x55, 0xdd, 0x36, 0x2d, 0x5a, 0xee, 0x3e, 0x25, 0x77, 0x72,
	0x2e, 0xbc, 0x40, 0xc3, 0x17, 0xca, 0x30, 0xfc, 0x3e, 0xbc, 0x64, 0x75, 0x52, 0x19, 0xbe, 0xf8,
	0x92, 0x96, 0xe4, 0xc3, 0x13, 0x5a, 0x96, 0x0f, 0x4f, 0x69, 0xa5, 0xfb, 0x6b, 0xf9, 0x11, 0x8b,
	0x4e, 0xf0, 0x99, 0xa7, 0x7c, 0xcc, 0x35, 0x48, 0x35, 0x3d, 0x3e, 0xa0, 0x6f, 0xc5, 0x5b, 0x22,
	0xea, 0xdd, 0xca, 0x41, 0xde, 0x22, 0xf5, 0xe2, 0xe4, 0x40, 0x70, 0xe9, 0xb9, 0xe9, 0x95, 0x07,
	0x95, 0xf1, 0xad, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xb3, 0x9b, 0x07, 0xfc, 0x13, 0x00,
	0x00,
}
