// Code generated by protoc-gen-go.
// source: ddz_base.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type DdzEnumProtoId int32

const (
	// //////////////////////////////////
	//
	DdzEnumProtoId_DDZ_PID_HEARTBEAT      DdzEnumProtoId = 0
	DdzEnumProtoId_DDZ_PID_QUICK_CONN     DdzEnumProtoId = 1
	DdzEnumProtoId_DDZ_PID_QUICK_CONN_ACK DdzEnumProtoId = 2
	DdzEnumProtoId_DDZ_PID_GAME_LOGIN     DdzEnumProtoId = 3
	DdzEnumProtoId_DDZ_PID_GAME_LOGIN_ACK DdzEnumProtoId = 4
	DdzEnumProtoId_DDZ_PID_CREATEROOM     DdzEnumProtoId = 5
	DdzEnumProtoId_DDZ_PID_CREATEROOM_ACK DdzEnumProtoId = 6
	DdzEnumProtoId_DDZ_PID_ENTER_ROOM     DdzEnumProtoId = 7
	DdzEnumProtoId_DDZ_PID_ENTER_ROOM_ACK DdzEnumProtoId = 8
	DdzEnumProtoId_DDZ_PID_SEND_GAMEINFO  DdzEnumProtoId = 9
	DdzEnumProtoId_DDZ_PID_READY          DdzEnumProtoId = 10
	DdzEnumProtoId_DDZ_PID_READY_ACK      DdzEnumProtoId = 11
	DdzEnumProtoId_DDZ_PID_OPENING        DdzEnumProtoId = 12
	DdzEnumProtoId_DDZ_PID_DEAL_CARDS     DdzEnumProtoId = 13
	DdzEnumProtoId_DDZ_PID_JIAO_DIZHU     DdzEnumProtoId = 14
	DdzEnumProtoId_DDZ_PID_JIAO_DIZHU_ACK DdzEnumProtoId = 15
	// //////////////////////////////////////////
	// 欢乐斗地主
	DdzEnumProtoId_DDZ_PID_ROB_DIZHU           DdzEnumProtoId = 16
	DdzEnumProtoId_DDZ_PID_ROB_DIZHU_ACK       DdzEnumProtoId = 17
	DdzEnumProtoId_DDZ_PID_DOUBLE              DdzEnumProtoId = 18
	DdzEnumProtoId_DDZ_PID_DOUBLE_ACK          DdzEnumProtoId = 19
	DdzEnumProtoId_DDZ_PID_SHOW_HANDPOKERS     DdzEnumProtoId = 20
	DdzEnumProtoId_DDZ_PID_SHOW_HANDPOKERS_ACK DdzEnumProtoId = 21
	// //////////////////////////////////////////
	// 四川斗地主
	DdzEnumProtoId_DDZ_PID_MEN_ZHUA      DdzEnumProtoId = 22
	DdzEnumProtoId_DDZ_PID_MEN_ZHUA_ACK  DdzEnumProtoId = 23
	DdzEnumProtoId_DDZ_PID_SEE_CARDS     DdzEnumProtoId = 24
	DdzEnumProtoId_DDZ_PID_SEE_CARDS_ACK DdzEnumProtoId = 25
	DdzEnumProtoId_DDZ_PID_PULL          DdzEnumProtoId = 26
	DdzEnumProtoId_DDZ_PID_PULL_ACK      DdzEnumProtoId = 27
	// //////////////////////////////////////////
	DdzEnumProtoId_DDZ_PID_OUT_CARDS     DdzEnumProtoId = 28
	DdzEnumProtoId_DDZ_PID_OUT_CARDS_ACK DdzEnumProtoId = 29
	DdzEnumProtoId_DDZ_PID_ACT_GUO       DdzEnumProtoId = 30
	DdzEnumProtoId_DDZ_PID_ACT_GUO_ACK   DdzEnumProtoId = 31
	// //////////////////////////////////////////
	DdzEnumProtoId_DDZ_PID_START_PLAY     DdzEnumProtoId = 32
	DdzEnumProtoId_DDZ_PID_OVERTURN       DdzEnumProtoId = 33
	DdzEnumProtoId_DDZ_PID_CURRENTRESULT  DdzEnumProtoId = 34
	DdzEnumProtoId_DDZ_PID_SENDENDLOTTERY DdzEnumProtoId = 35
	// //////////////////////////////////////////
	DdzEnumProtoId_DDZ_PID_DISSOLVE_DESK       DdzEnumProtoId = 36
	DdzEnumProtoId_DDZ_PID_DISSOLVE_DESK_ACK   DdzEnumProtoId = 37
	DdzEnumProtoId_DDZ_PID_LEAVE_DESK          DdzEnumProtoId = 38
	DdzEnumProtoId_DDZ_PID_LEAVE_DESK_ACK      DdzEnumProtoId = 39
	DdzEnumProtoId_DDZ_PID_MESSAGE             DdzEnumProtoId = 40
	DdzEnumProtoId_DDZ_PID_SEND_MESSAGE        DdzEnumProtoId = 41
	DdzEnumProtoId_DDZ_PID_GAME_GAMERECORD     DdzEnumProtoId = 42
	DdzEnumProtoId_DDZ_PID_GAME_GAMERECORD_ACK DdzEnumProtoId = 43
)

var DdzEnumProtoId_name = map[int32]string{
	0:  "DDZ_PID_HEARTBEAT",
	1:  "DDZ_PID_QUICK_CONN",
	2:  "DDZ_PID_QUICK_CONN_ACK",
	3:  "DDZ_PID_GAME_LOGIN",
	4:  "DDZ_PID_GAME_LOGIN_ACK",
	5:  "DDZ_PID_CREATEROOM",
	6:  "DDZ_PID_CREATEROOM_ACK",
	7:  "DDZ_PID_ENTER_ROOM",
	8:  "DDZ_PID_ENTER_ROOM_ACK",
	9:  "DDZ_PID_SEND_GAMEINFO",
	10: "DDZ_PID_READY",
	11: "DDZ_PID_READY_ACK",
	12: "DDZ_PID_OPENING",
	13: "DDZ_PID_DEAL_CARDS",
	14: "DDZ_PID_JIAO_DIZHU",
	15: "DDZ_PID_JIAO_DIZHU_ACK",
	16: "DDZ_PID_ROB_DIZHU",
	17: "DDZ_PID_ROB_DIZHU_ACK",
	18: "DDZ_PID_DOUBLE",
	19: "DDZ_PID_DOUBLE_ACK",
	20: "DDZ_PID_SHOW_HANDPOKERS",
	21: "DDZ_PID_SHOW_HANDPOKERS_ACK",
	22: "DDZ_PID_MEN_ZHUA",
	23: "DDZ_PID_MEN_ZHUA_ACK",
	24: "DDZ_PID_SEE_CARDS",
	25: "DDZ_PID_SEE_CARDS_ACK",
	26: "DDZ_PID_PULL",
	27: "DDZ_PID_PULL_ACK",
	28: "DDZ_PID_OUT_CARDS",
	29: "DDZ_PID_OUT_CARDS_ACK",
	30: "DDZ_PID_ACT_GUO",
	31: "DDZ_PID_ACT_GUO_ACK",
	32: "DDZ_PID_START_PLAY",
	33: "DDZ_PID_OVERTURN",
	34: "DDZ_PID_CURRENTRESULT",
	35: "DDZ_PID_SENDENDLOTTERY",
	36: "DDZ_PID_DISSOLVE_DESK",
	37: "DDZ_PID_DISSOLVE_DESK_ACK",
	38: "DDZ_PID_LEAVE_DESK",
	39: "DDZ_PID_LEAVE_DESK_ACK",
	40: "DDZ_PID_MESSAGE",
	41: "DDZ_PID_SEND_MESSAGE",
	42: "DDZ_PID_GAME_GAMERECORD",
	43: "DDZ_PID_GAME_GAMERECORD_ACK",
}
var DdzEnumProtoId_value = map[string]int32{
	"DDZ_PID_HEARTBEAT":           0,
	"DDZ_PID_QUICK_CONN":          1,
	"DDZ_PID_QUICK_CONN_ACK":      2,
	"DDZ_PID_GAME_LOGIN":          3,
	"DDZ_PID_GAME_LOGIN_ACK":      4,
	"DDZ_PID_CREATEROOM":          5,
	"DDZ_PID_CREATEROOM_ACK":      6,
	"DDZ_PID_ENTER_ROOM":          7,
	"DDZ_PID_ENTER_ROOM_ACK":      8,
	"DDZ_PID_SEND_GAMEINFO":       9,
	"DDZ_PID_READY":               10,
	"DDZ_PID_READY_ACK":           11,
	"DDZ_PID_OPENING":             12,
	"DDZ_PID_DEAL_CARDS":          13,
	"DDZ_PID_JIAO_DIZHU":          14,
	"DDZ_PID_JIAO_DIZHU_ACK":      15,
	"DDZ_PID_ROB_DIZHU":           16,
	"DDZ_PID_ROB_DIZHU_ACK":       17,
	"DDZ_PID_DOUBLE":              18,
	"DDZ_PID_DOUBLE_ACK":          19,
	"DDZ_PID_SHOW_HANDPOKERS":     20,
	"DDZ_PID_SHOW_HANDPOKERS_ACK": 21,
	"DDZ_PID_MEN_ZHUA":            22,
	"DDZ_PID_MEN_ZHUA_ACK":        23,
	"DDZ_PID_SEE_CARDS":           24,
	"DDZ_PID_SEE_CARDS_ACK":       25,
	"DDZ_PID_PULL":                26,
	"DDZ_PID_PULL_ACK":            27,
	"DDZ_PID_OUT_CARDS":           28,
	"DDZ_PID_OUT_CARDS_ACK":       29,
	"DDZ_PID_ACT_GUO":             30,
	"DDZ_PID_ACT_GUO_ACK":         31,
	"DDZ_PID_START_PLAY":          32,
	"DDZ_PID_OVERTURN":            33,
	"DDZ_PID_CURRENTRESULT":       34,
	"DDZ_PID_SENDENDLOTTERY":      35,
	"DDZ_PID_DISSOLVE_DESK":       36,
	"DDZ_PID_DISSOLVE_DESK_ACK":   37,
	"DDZ_PID_LEAVE_DESK":          38,
	"DDZ_PID_LEAVE_DESK_ACK":      39,
	"DDZ_PID_MESSAGE":             40,
	"DDZ_PID_SEND_MESSAGE":        41,
	"DDZ_PID_GAME_GAMERECORD":     42,
	"DDZ_PID_GAME_GAMERECORD_ACK": 43,
}

func (x DdzEnumProtoId) Enum() *DdzEnumProtoId {
	p := new(DdzEnumProtoId)
	*p = x
	return p
}
func (x DdzEnumProtoId) String() string {
	return proto.EnumName(DdzEnumProtoId_name, int32(x))
}
func (x *DdzEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumProtoId_value, data, "DdzEnumProtoId")
	if err != nil {
		return err
	}
	*x = DdzEnumProtoId(value)
	return nil
}
func (DdzEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type DdzEnumErrorCode int32

const (
	DdzEnumErrorCode_EC_SUCCESS DdzEnumErrorCode = 0
	// -101   -200	游戏异常
	DdzEnumErrorCode_EC_CREATE_DESK_DIAMOND_NOTENOUGH DdzEnumErrorCode = -101
	DdzEnumErrorCode_EC_CREATE_DESK_USER_NOTFOUND     DdzEnumErrorCode = -102
	DdzEnumErrorCode_EC_INTO_DESK_NOTFOUND            DdzEnumErrorCode = -103
	DdzEnumErrorCode_EC_INTO_DESK_ISFULL              DdzEnumErrorCode = -104
	DdzEnumErrorCode_EC_GAME_READY_REPEAT             DdzEnumErrorCode = -110
	DdzEnumErrorCode_EC_GAME_READY_CHIP_NOT_ENOUGH    DdzEnumErrorCode = -111
)

var DdzEnumErrorCode_name = map[int32]string{
	0:    "EC_SUCCESS",
	-101: "EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_INTO_DESK_NOTFOUND",
	-104: "EC_INTO_DESK_ISFULL",
	-110: "EC_GAME_READY_REPEAT",
	-111: "EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var DdzEnumErrorCode_value = map[string]int32{
	"EC_SUCCESS":                       0,
	"EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_INTO_DESK_NOTFOUND":            -103,
	"EC_INTO_DESK_ISFULL":              -104,
	"EC_GAME_READY_REPEAT":             -110,
	"EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x DdzEnumErrorCode) Enum() *DdzEnumErrorCode {
	p := new(DdzEnumErrorCode)
	*p = x
	return p
}
func (x DdzEnumErrorCode) String() string {
	return proto.EnumName(DdzEnumErrorCode_name, int32(x))
}
func (x *DdzEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumErrorCode_value, data, "DdzEnumErrorCode")
	if err != nil {
		return err
	}
	*x = DdzEnumErrorCode(value)
	return nil
}
func (DdzEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

// 牌型
type DdzEnumPaiType int32

const (
	DdzEnumPaiType_ERRORCARD          DdzEnumPaiType = 0
	DdzEnumPaiType_SINGLECARD         DdzEnumPaiType = 1
	DdzEnumPaiType_DOUBLECARD         DdzEnumPaiType = 2
	DdzEnumPaiType_THREECARD          DdzEnumPaiType = 3
	DdzEnumPaiType_BOMBCARD           DdzEnumPaiType = 4
	DdzEnumPaiType_THREEONECARD       DdzEnumPaiType = 5
	DdzEnumPaiType_THREETWOCARD       DdzEnumPaiType = 6
	DdzEnumPaiType_BOMBTWOCARD        DdzEnumPaiType = 7
	DdzEnumPaiType_BOMBTWOOOCARD      DdzEnumPaiType = 8
	DdzEnumPaiType_CONNECTCARD        DdzEnumPaiType = 9
	DdzEnumPaiType_COMPANYCARD        DdzEnumPaiType = 10
	DdzEnumPaiType_AIRCRAFTCARD       DdzEnumPaiType = 11
	DdzEnumPaiType_AIRCRAFTSINGLECARD DdzEnumPaiType = 12
	DdzEnumPaiType_AIRCRAFTDOUBLECARD DdzEnumPaiType = 13
	DdzEnumPaiType_SUPERBOMB          DdzEnumPaiType = 14
	DdzEnumPaiType_FOURWITHONEDOUBLE  DdzEnumPaiType = 15
)

var DdzEnumPaiType_name = map[int32]string{
	0:  "ERRORCARD",
	1:  "SINGLECARD",
	2:  "DOUBLECARD",
	3:  "THREECARD",
	4:  "BOMBCARD",
	5:  "THREEONECARD",
	6:  "THREETWOCARD",
	7:  "BOMBTWOCARD",
	8:  "BOMBTWOOOCARD",
	9:  "CONNECTCARD",
	10: "COMPANYCARD",
	11: "AIRCRAFTCARD",
	12: "AIRCRAFTSINGLECARD",
	13: "AIRCRAFTDOUBLECARD",
	14: "SUPERBOMB",
	15: "FOURWITHONEDOUBLE",
}
var DdzEnumPaiType_value = map[string]int32{
	"ERRORCARD":          0,
	"SINGLECARD":         1,
	"DOUBLECARD":         2,
	"THREECARD":          3,
	"BOMBCARD":           4,
	"THREEONECARD":       5,
	"THREETWOCARD":       6,
	"BOMBTWOCARD":        7,
	"BOMBTWOOOCARD":      8,
	"CONNECTCARD":        9,
	"COMPANYCARD":        10,
	"AIRCRAFTCARD":       11,
	"AIRCRAFTSINGLECARD": 12,
	"AIRCRAFTDOUBLECARD": 13,
	"SUPERBOMB":          14,
	"FOURWITHONEDOUBLE":  15,
}

func (x DdzEnumPaiType) Enum() *DdzEnumPaiType {
	p := new(DdzEnumPaiType)
	*p = x
	return p
}
func (x DdzEnumPaiType) String() string {
	return proto.EnumName(DdzEnumPaiType_name, int32(x))
}
func (x *DdzEnumPaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumPaiType_value, data, "DdzEnumPaiType")
	if err != nil {
		return err
	}
	*x = DdzEnumPaiType(value)
	return nil
}
func (DdzEnumPaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

// 轮到玩家操作时：可执行何种操作
type DdzEnumActType int32

const (
	DdzEnumActType_T_NORMAL_ACT DdzEnumActType = 1
	DdzEnumActType_T_JIAO_DIZHU DdzEnumActType = 2
	DdzEnumActType_T_ROB_DIZHU  DdzEnumActType = 3
	DdzEnumActType_T_DOUBLE     DdzEnumActType = 4
	DdzEnumActType_T_MEN_ZHUA   DdzEnumActType = 5
	DdzEnumActType_T_PULL       DdzEnumActType = 6
	DdzEnumActType_T_PUSH       DdzEnumActType = 7
)

var DdzEnumActType_name = map[int32]string{
	1: "T_NORMAL_ACT",
	2: "T_JIAO_DIZHU",
	3: "T_ROB_DIZHU",
	4: "T_DOUBLE",
	5: "T_MEN_ZHUA",
	6: "T_PULL",
	7: "T_PUSH",
}
var DdzEnumActType_value = map[string]int32{
	"T_NORMAL_ACT": 1,
	"T_JIAO_DIZHU": 2,
	"T_ROB_DIZHU":  3,
	"T_DOUBLE":     4,
	"T_MEN_ZHUA":   5,
	"T_PULL":       6,
	"T_PUSH":       7,
}

func (x DdzEnumActType) Enum() *DdzEnumActType {
	p := new(DdzEnumActType)
	*p = x
	return p
}
func (x DdzEnumActType) String() string {
	return proto.EnumName(DdzEnumActType_name, int32(x))
}
func (x *DdzEnumActType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumActType_value, data, "DdzEnumActType")
	if err != nil {
		return err
	}
	*x = DdzEnumActType(value)
	return nil
}
func (DdzEnumActType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type DdzEnumGameStatus int32

const (
	DdzEnumGameStatus_U_INIT       DdzEnumGameStatus = 0
	DdzEnumGameStatus_U_JIAO_DIZHU DdzEnumGameStatus = 1
	DdzEnumGameStatus_U_ROB_DIZHU  DdzEnumGameStatus = 2
	DdzEnumGameStatus_U_PLAYING    DdzEnumGameStatus = 3
	DdzEnumGameStatus_U_FINISH     DdzEnumGameStatus = 4
)

var DdzEnumGameStatus_name = map[int32]string{
	0: "U_INIT",
	1: "U_JIAO_DIZHU",
	2: "U_ROB_DIZHU",
	3: "U_PLAYING",
	4: "U_FINISH",
}
var DdzEnumGameStatus_value = map[string]int32{
	"U_INIT":       0,
	"U_JIAO_DIZHU": 1,
	"U_ROB_DIZHU":  2,
	"U_PLAYING":    3,
	"U_FINISH":     4,
}

func (x DdzEnumGameStatus) Enum() *DdzEnumGameStatus {
	p := new(DdzEnumGameStatus)
	*p = x
	return p
}
func (x DdzEnumGameStatus) String() string {
	return proto.EnumName(DdzEnumGameStatus_name, int32(x))
}
func (x *DdzEnumGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumGameStatus_value, data, "DdzEnumGameStatus")
	if err != nil {
		return err
	}
	*x = DdzEnumGameStatus(value)
	return nil
}
func (DdzEnumGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

// 玩家当前状态
type DdzEnumPlayerGameStatus int32

const (
	DdzEnumPlayerGameStatus_S_INIT       DdzEnumPlayerGameStatus = 0
	DdzEnumPlayerGameStatus_S_DEALCARDS  DdzEnumPlayerGameStatus = 1
	DdzEnumPlayerGameStatus_S_JIAO_DIZHU DdzEnumPlayerGameStatus = 2
	DdzEnumPlayerGameStatus_S_ROB_DIZHU  DdzEnumPlayerGameStatus = 3
	DdzEnumPlayerGameStatus_S_DOUBLE     DdzEnumPlayerGameStatus = 4
	DdzEnumPlayerGameStatus_S_NO_DOUBLE  DdzEnumPlayerGameStatus = 5
	DdzEnumPlayerGameStatus_S_PULL       DdzEnumPlayerGameStatus = 6
	DdzEnumPlayerGameStatus_S_PUSH       DdzEnumPlayerGameStatus = 7
	DdzEnumPlayerGameStatus_S_ACTING     DdzEnumPlayerGameStatus = 8
	DdzEnumPlayerGameStatus_S_WAIT       DdzEnumPlayerGameStatus = 9
	DdzEnumPlayerGameStatus_S_GAME_END   DdzEnumPlayerGameStatus = 10
)

var DdzEnumPlayerGameStatus_name = map[int32]string{
	0:  "S_INIT",
	1:  "S_DEALCARDS",
	2:  "S_JIAO_DIZHU",
	3:  "S_ROB_DIZHU",
	4:  "S_DOUBLE",
	5:  "S_NO_DOUBLE",
	6:  "S_PULL",
	7:  "S_PUSH",
	8:  "S_ACTING",
	9:  "S_WAIT",
	10: "S_GAME_END",
}
var DdzEnumPlayerGameStatus_value = map[string]int32{
	"S_INIT":       0,
	"S_DEALCARDS":  1,
	"S_JIAO_DIZHU": 2,
	"S_ROB_DIZHU":  3,
	"S_DOUBLE":     4,
	"S_NO_DOUBLE":  5,
	"S_PULL":       6,
	"S_PUSH":       7,
	"S_ACTING":     8,
	"S_WAIT":       9,
	"S_GAME_END":   10,
}

func (x DdzEnumPlayerGameStatus) Enum() *DdzEnumPlayerGameStatus {
	p := new(DdzEnumPlayerGameStatus)
	*p = x
	return p
}
func (x DdzEnumPlayerGameStatus) String() string {
	return proto.EnumName(DdzEnumPlayerGameStatus_name, int32(x))
}
func (x *DdzEnumPlayerGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumPlayerGameStatus_value, data, "DdzEnumPlayerGameStatus")
	if err != nil {
		return err
	}
	*x = DdzEnumPlayerGameStatus(value)
	return nil
}
func (DdzEnumPlayerGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type DdzEnumRoomType int32

const (
	DdzEnumRoomType_T_NORMAL_DDZ  DdzEnumRoomType = 1
	DdzEnumRoomType_T_HAPPY_DDZ   DdzEnumRoomType = 2
	DdzEnumRoomType_T_SICHUAN_DDZ DdzEnumRoomType = 3
)

var DdzEnumRoomType_name = map[int32]string{
	1: "T_NORMAL_DDZ",
	2: "T_HAPPY_DDZ",
	3: "T_SICHUAN_DDZ",
}
var DdzEnumRoomType_value = map[string]int32{
	"T_NORMAL_DDZ":  1,
	"T_HAPPY_DDZ":   2,
	"T_SICHUAN_DDZ": 3,
}

func (x DdzEnumRoomType) Enum() *DdzEnumRoomType {
	p := new(DdzEnumRoomType)
	*p = x
	return p
}
func (x DdzEnumRoomType) String() string {
	return proto.EnumName(DdzEnumRoomType_name, int32(x))
}
func (x *DdzEnumRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumRoomType_value, data, "DdzEnumRoomType")
	if err != nil {
		return err
	}
	*x = DdzEnumRoomType(value)
	return nil
}
func (DdzEnumRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

type DdzEnumDeskGameStatus int32

const (
	DdzEnumDeskGameStatus_INIT       DdzEnumDeskGameStatus = 0
	DdzEnumDeskGameStatus_DEAL_CARDS DdzEnumDeskGameStatus = 1
	DdzEnumDeskGameStatus_JIAO_DIZHU DdzEnumDeskGameStatus = 2
	DdzEnumDeskGameStatus_PLAYING    DdzEnumDeskGameStatus = 3
	DdzEnumDeskGameStatus_FINISH     DdzEnumDeskGameStatus = 4
)

var DdzEnumDeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "DEAL_CARDS",
	2: "JIAO_DIZHU",
	3: "PLAYING",
	4: "FINISH",
}
var DdzEnumDeskGameStatus_value = map[string]int32{
	"INIT":       0,
	"DEAL_CARDS": 1,
	"JIAO_DIZHU": 2,
	"PLAYING":    3,
	"FINISH":     4,
}

func (x DdzEnumDeskGameStatus) Enum() *DdzEnumDeskGameStatus {
	p := new(DdzEnumDeskGameStatus)
	*p = x
	return p
}
func (x DdzEnumDeskGameStatus) String() string {
	return proto.EnumName(DdzEnumDeskGameStatus_name, int32(x))
}
func (x *DdzEnumDeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DdzEnumDeskGameStatus_value, data, "DdzEnumDeskGameStatus")
	if err != nil {
		return err
	}
	*x = DdzEnumDeskGameStatus(value)
	return nil
}
func (DdzEnumDeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

type DdzBaseRoomTypeInfo struct {
	RoomType         *DdzEnumRoomType `protobuf:"varint,1,opt,name=roomType,enum=ddproto.DdzEnumRoomType" json:"roomType,omitempty"`
	BoardsCount      *int32           `protobuf:"varint,2,opt,name=boardsCount" json:"boardsCount,omitempty"`
	CapMax           *int64           `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	BaseValue        *int64           `protobuf:"varint,4,opt,name=baseValue" json:"baseValue,omitempty"`
	IsJiaoFen        *bool            `protobuf:"varint,5,opt,name=isJiaoFen" json:"isJiaoFen,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DdzBaseRoomTypeInfo) Reset()                    { *m = DdzBaseRoomTypeInfo{} }
func (m *DdzBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBaseRoomTypeInfo) ProtoMessage()               {}
func (*DdzBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *DdzBaseRoomTypeInfo) GetRoomType() DdzEnumRoomType {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return DdzEnumRoomType_T_NORMAL_DDZ
}

func (m *DdzBaseRoomTypeInfo) GetBoardsCount() int32 {
	if m != nil && m.BoardsCount != nil {
		return *m.BoardsCount
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *DdzBaseRoomTypeInfo) GetIsJiaoFen() bool {
	if m != nil && m.IsJiaoFen != nil {
		return *m.IsJiaoFen
	}
	return false
}

type DdzBasePlayerInfo struct {
	IsDiZhu          *bool                    `protobuf:"varint,1,opt,name=isDiZhu" json:"isDiZhu,omitempty"`
	PlayerPokers     []*ClientBasePoker       `protobuf:"bytes,2,rep,name=playerPokers" json:"playerPokers,omitempty"`
	Coin             *int64                   `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string                  `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32                   `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32                  `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool                    `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32                   `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	Status           *DdzEnumPlayerGameStatus `protobuf:"varint,9,opt,name=status,enum=ddproto.DdzEnumPlayerGameStatus" json:"status,omitempty"`
	WxInfo           *WeixinInfo              `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	OnlineStatus     *int32                   `protobuf:"varint,11,opt,name=onlineStatus" json:"onlineStatus,omitempty"`
	PlayRate         *int32                   `protobuf:"varint,12,opt,name=playRate" json:"playRate,omitempty"`
	RemainPaiCount   *int32                   `protobuf:"varint,13,opt,name=remainPaiCount" json:"remainPaiCount,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *DdzBasePlayerInfo) Reset()                    { *m = DdzBasePlayerInfo{} }
func (m *DdzBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBasePlayerInfo) ProtoMessage()               {}
func (*DdzBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *DdzBasePlayerInfo) GetIsDiZhu() bool {
	if m != nil && m.IsDiZhu != nil {
		return *m.IsDiZhu
	}
	return false
}

func (m *DdzBasePlayerInfo) GetPlayerPokers() []*ClientBasePoker {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

func (m *DdzBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *DdzBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *DdzBasePlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetStatus() DdzEnumPlayerGameStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DdzEnumPlayerGameStatus_S_INIT
}

func (m *DdzBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *DdzBasePlayerInfo) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetPlayRate() int32 {
	if m != nil && m.PlayRate != nil {
		return *m.PlayRate
	}
	return 0
}

func (m *DdzBasePlayerInfo) GetRemainPaiCount() int32 {
	if m != nil && m.RemainPaiCount != nil {
		return *m.RemainPaiCount
	}
	return 0
}

type DdzBaseDeskInfo struct {
	GameStatus       *int32               `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *DdzBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32               `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32              `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32               `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	NInitActionTime  *int32               `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	InitRoomCoin     *int64               `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32               `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32               `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string              `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	DiZhuUserId      *uint32              `protobuf:"varint,14,opt,name=diZhuUserId" json:"diZhuUserId,omitempty"`
	FootPokers       []*ClientBasePoker   `protobuf:"bytes,15,rep,name=footPokers" json:"footPokers,omitempty"`
	FootRate         *int32               `protobuf:"varint,16,opt,name=footRate" json:"footRate,omitempty"`
	PlayRate         *int32               `protobuf:"varint,17,opt,name=playRate" json:"playRate,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *DdzBaseDeskInfo) Reset()                    { *m = DdzBaseDeskInfo{} }
func (m *DdzBaseDeskInfo) String() string            { return proto.CompactTextString(m) }
func (*DdzBaseDeskInfo) ProtoMessage()               {}
func (*DdzBaseDeskInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *DdzBaseDeskInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetRoomTypeInfo() *DdzBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DdzBaseDeskInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DdzBaseDeskInfo) GetDiZhuUserId() uint32 {
	if m != nil && m.DiZhuUserId != nil {
		return *m.DiZhuUserId
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetFootPokers() []*ClientBasePoker {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *DdzBaseDeskInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *DdzBaseDeskInfo) GetPlayRate() int32 {
	if m != nil && m.PlayRate != nil {
		return *m.PlayRate
	}
	return 0
}

func init() {
	proto.RegisterType((*DdzBaseRoomTypeInfo)(nil), "ddproto.ddz_base_roomTypeInfo")
	proto.RegisterType((*DdzBasePlayerInfo)(nil), "ddproto.ddz_base_playerInfo")
	proto.RegisterType((*DdzBaseDeskInfo)(nil), "ddproto.ddz_base_deskInfo")
	proto.RegisterEnum("ddproto.DdzEnumProtoId", DdzEnumProtoId_name, DdzEnumProtoId_value)
	proto.RegisterEnum("ddproto.DdzEnumErrorCode", DdzEnumErrorCode_name, DdzEnumErrorCode_value)
	proto.RegisterEnum("ddproto.DdzEnumPaiType", DdzEnumPaiType_name, DdzEnumPaiType_value)
	proto.RegisterEnum("ddproto.DdzEnumActType", DdzEnumActType_name, DdzEnumActType_value)
	proto.RegisterEnum("ddproto.DdzEnumGameStatus", DdzEnumGameStatus_name, DdzEnumGameStatus_value)
	proto.RegisterEnum("ddproto.DdzEnumPlayerGameStatus", DdzEnumPlayerGameStatus_name, DdzEnumPlayerGameStatus_value)
	proto.RegisterEnum("ddproto.DdzEnumRoomType", DdzEnumRoomType_name, DdzEnumRoomType_value)
	proto.RegisterEnum("ddproto.DdzEnumDeskGameStatus", DdzEnumDeskGameStatus_name, DdzEnumDeskGameStatus_value)
}

var fileDescriptor3 = []byte{
	// 1476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x56, 0xeb, 0x6e, 0xdb, 0xc6,
	0x12, 0x8e, 0xee, 0xd2, 0x4a, 0xb6, 0xd7, 0xb4, 0x1d, 0xcb, 0xce, 0xcd, 0x71, 0xce, 0x25, 0xd1,
	0x39, 0x35, 0x0a, 0xa3, 0x2f, 0x40, 0x53, 0x6b, 0x8b, 0xb1, 0xc4, 0x65, 0x79, 0x89, 0xe1, 0xa0,
	0x00, 0x41, 0x5b, 0x4c, 0x4b, 0xc4, 0x12, 0x0d, 0x5d, 0x1a, 0xa7, 0x40, 0xdf, 0xa1, 0x97, 0x3f,
	0xbd, 0xbc, 0x44, 0x1f, 0xa0, 0xef, 0xd0, 0xa7, 0xe8, 0x23, 0xf4, 0x77, 0x3b, 0x3b, 0x4b, 0x8a,
	0x2b, 0xbb, 0x41, 0x83, 0xc0, 0xd0, 0x7e, 0x3b, 0xb3, 0xf3, 0xcd, 0x37, 0xb3, 0xc3, 0x25, 0xab,
	0xc3, 0xe1, 0x57, 0xc1, 0x45, 0x38, 0x8d, 0x0e, 0xae, 0x27, 0xc9, 0x2c, 0xd1, 0x6a, 0xc3, 0x21,
	0xfe, 0xd8, 0xdd, 0xb8, 0x4c, 0x46, 0xa3, 0x64, 0x1c, 0x5c, 0x5e, 0xc5, 0xd1, 0x78, 0x26, 0x77,
	0xf7, 0xbf, 0x29, 0x90, 0xad, 0xcc, 0x21, 0x98, 0x24, 0xc9, 0xc8, 0x7b, 0x7f, 0x1d, 0x99, 0xe3,
	0x37, 0x89, 0xf6, 0x7f, 0x52, 0xcf, 0xd6, 0xed, 0xc2, 0x5e, 0xe1, 0xf9, 0xea, 0xe1, 0xee, 0x41,
	0x7a, 0xd4, 0x81, 0xf0, 0x88, 0xc6, 0xf3, 0xd1, 0xc2, 0x43, 0xdb, 0x20, 0xcd, 0x8b, 0x24, 0x9c,
	0x0c, 0xa7, 0x46, 0x32, 0x1f, 0xcf, 0xda, 0x45, 0x70, 0xa8, 0x68, 0xab, 0xa4, 0x7a, 0x19, 0x5e,
	0x0f, 0xc2, 0x9b, 0x76, 0x09, 0xd6, 0x25, 0x6d, 0x9d, 0x34, 0x44, 0x9c, 0x57, 0xe1, 0xd5, 0x3c,
	0x6a, 0x97, 0x33, 0x28, 0x9e, 0xbe, 0x8c, 0xc3, 0xe4, 0x38, 0x1a, 0xb7, 0x2b, 0x00, 0xd5, 0xf7,
	0x7f, 0x2b, 0x92, 0x8d, 0x05, 0xa5, 0xeb, 0xab, 0xf0, 0x7d, 0x34, 0x41, 0x42, 0x6b, 0xa4, 0x16,
	0x4f, 0xbb, 0xf1, 0xeb, 0x2f, 0xe6, 0xc8, 0xa7, 0xae, 0x7d, 0x4c, 0x5a, 0x72, 0xdb, 0x4e, 0xde,
	0x46, 0x93, 0x29, 0x04, 0x2d, 0x3d, 0x6f, 0x2a, 0x2c, 0x65, 0xa2, 0xe9, 0x39, 0xc2, 0x44, 0x6b,
	0x91, 0xf2, 0x65, 0x12, 0x8f, 0x53, 0x3a, 0x94, 0xd4, 0xc7, 0xf1, 0xe5, 0x5b, 0x2b, 0x1c, 0x49,
	0x36, 0x0d, 0xad, 0x49, 0x4a, 0xd3, 0xe8, 0x06, 0x79, 0x20, 0xfb, 0xf9, 0x14, 0x62, 0x0f, 0xdb,
	0x55, 0x58, 0xaf, 0xc8, 0xf8, 0xfc, 0xdd, 0x38, 0x9a, 0xb4, 0x6b, 0x18, 0x1f, 0x0c, 0x2e, 0x9c,
	0x28, 0x1c, 0xbe, 0x6f, 0xd7, 0xd1, 0xe1, 0x90, 0x54, 0xa7, 0xb3, 0x70, 0x36, 0x9f, 0xb6, 0x1b,
	0xa8, 0xd7, 0xfe, 0x5d, 0xbd, 0x24, 0xdf, 0x13, 0x88, 0xe8, 0xa2, 0xa5, 0xf6, 0x8c, 0x54, 0xdf,
	0xdd, 0x88, 0xf4, 0xda, 0x04, 0x7c, 0x9a, 0x87, 0x1b, 0x0b, 0x9f, 0xb3, 0x28, 0xbe, 0x89, 0xc7,
	0x98, 0xf9, 0x26, 0x69, 0x25, 0xe3, 0xab, 0x78, 0x9c, 0x3a, 0xb5, 0x9b, 0x18, 0x0e, 0xe8, 0x8b,
	0xe3, 0x9c, 0x70, 0x16, 0xb5, 0x5b, 0x88, 0xdc, 0x27, 0xab, 0x93, 0x68, 0x14, 0xc6, 0x63, 0x3b,
	0x8c, 0x65, 0x1d, 0x56, 0x04, 0xbe, 0xff, 0x47, 0x91, 0xac, 0x2f, 0x14, 0x1d, 0x46, 0xd3, 0xb7,
	0x78, 0xaa, 0x46, 0x48, 0x4e, 0x04, 0x25, 0xad, 0x68, 0x9f, 0x90, 0x96, 0xda, 0x04, 0x58, 0xc7,
	0xe6, 0xe1, 0xe3, 0xa5, 0x44, 0xee, 0xb6, 0x0a, 0x14, 0x51, 0x26, 0x66, 0xcd, 0x47, 0xa8, 0x6d,
	0x45, 0x50, 0x0e, 0x2f, 0x67, 0xf1, 0x97, 0x91, 0x2f, 0x25, 0x2c, 0xa3, 0x84, 0x10, 0x52, 0xa0,
	0xc9, 0xd8, 0x8b, 0x41, 0x73, 0x29, 0xf3, 0x36, 0x59, 0x83, 0x2c, 0xe3, 0x99, 0x9e, 0x6f, 0xd4,
	0xb2, 0x23, 0x62, 0xc0, 0x1d, 0x88, 0x64, 0x88, 0xa2, 0x35, 0xb0, 0x68, 0x5b, 0x64, 0xe5, 0x72,
	0x3e, 0x99, 0xd8, 0x10, 0x4f, 0xa6, 0x48, 0xb2, 0xd4, 0x67, 0xc9, 0x2c, 0xbc, 0xca, 0x71, 0x29,
	0x12, 0x44, 0x14, 0x54, 0x81, 0xd8, 0x05, 0xd4, 0xad, 0x85, 0x55, 0x86, 0x5e, 0x1d, 0x8a, 0x36,
	0x4a, 0xa9, 0xad, 0x22, 0xb5, 0x03, 0x42, 0xde, 0x24, 0xc9, 0x2c, 0x6d, 0xa5, 0xb5, 0x7f, 0x6c,
	0x25, 0x50, 0x5f, 0xd8, 0xa3, 0xfa, 0xf4, 0x4e, 0x3d, 0xd6, 0x05, 0xd2, 0xf9, 0xbd, 0x4e, 0x68,
	0x5e, 0x7a, 0x71, 0x90, 0x39, 0x84, 0x04, 0xd6, 0xbb, 0xdd, 0xd7, 0x81, 0x6d, 0x76, 0x83, 0x1e,
	0xd3, 0x1d, 0xef, 0x88, 0xe9, 0x1e, 0xbd, 0x07, 0x09, 0x68, 0x19, 0xfc, 0xa9, 0x6f, 0x1a, 0xa7,
	0x81, 0xc1, 0x2d, 0x8b, 0x16, 0xb4, 0x5d, 0x72, 0xff, 0x2e, 0x1e, 0xe8, 0xc6, 0x29, 0x2d, 0xaa,
	0x3e, 0x27, 0xfa, 0x80, 0x05, 0x7d, 0x7e, 0x62, 0x5a, 0xb4, 0xa4, 0xfa, 0xe4, 0x38, 0xfa, 0x94,
	0x55, 0x1f, 0xc3, 0x81, 0xd0, 0xcc, 0xe1, 0x7c, 0x40, 0x2b, 0xaa, 0x4f, 0x8e, 0xa3, 0x4f, 0x55,
	0xf5, 0x61, 0x16, 0xec, 0x04, 0xe8, 0x53, 0x53, 0x7d, 0x72, 0x1c, 0x7d, 0xea, 0xda, 0x0e, 0xd9,
	0xca, 0xf6, 0x5c, 0x66, 0x49, 0x22, 0xa6, 0x75, 0xcc, 0x69, 0x03, 0xda, 0x65, 0x25, 0xdb, 0x82,
	0x48, 0xdd, 0x73, 0x4a, 0x54, 0x51, 0x10, 0xc2, 0x43, 0x9a, 0x50, 0xa9, 0xb5, 0x0c, 0xe6, 0x36,
	0xb3, 0x4c, 0xeb, 0x84, 0xb6, 0x54, 0x36, 0x5d, 0xa6, 0xf7, 0x03, 0x43, 0x77, 0xba, 0x2e, 0x5d,
	0x51, 0xf1, 0x97, 0xa6, 0xce, 0x83, 0xae, 0xf9, 0xba, 0xe7, 0xd3, 0x55, 0x95, 0x65, 0x8e, 0x63,
	0x80, 0xb5, 0xa5, 0xb8, 0xfc, 0x28, 0x75, 0xa1, 0x2a, 0xf9, 0x05, 0x8c, 0x1e, 0xeb, 0xd0, 0x50,
	0xab, 0x8b, 0xe8, 0xdc, 0x3f, 0xea, 0x33, 0xaa, 0x2d, 0x31, 0x42, 0x0c, 0x6d, 0x37, 0xb4, 0x07,
	0x64, 0x7b, 0xa1, 0x41, 0x8f, 0x9f, 0x05, 0x3d, 0xdd, 0xea, 0xda, 0xfc, 0x94, 0x39, 0x2e, 0xdd,
	0xd4, 0x9e, 0x90, 0x07, 0x1f, 0xd8, 0x44, 0xef, 0x2d, 0xe8, 0x7f, 0x9a, 0x19, 0x0c, 0x98, 0x15,
	0x00, 0x05, 0x9d, 0xde, 0xd7, 0xda, 0x64, 0xf3, 0x36, 0x8a, 0xf6, 0xdb, 0x6a, 0x2e, 0x2e, 0x63,
	0xa9, 0x2c, 0xed, 0xe5, 0x42, 0xa4, 0x30, 0x7a, 0xec, 0x40, 0xc7, 0xb6, 0xb2, 0x2d, 0xdb, 0xef,
	0xf7, 0xe9, 0xae, 0x1a, 0x53, 0x20, 0x68, 0xf7, 0x40, 0x3d, 0x99, 0xfb, 0x5e, 0x7a, 0xf2, 0x43,
	0xf5, 0xe4, 0x05, 0x8c, 0x1e, 0x8f, 0xd4, 0xc2, 0xe9, 0x86, 0x17, 0x9c, 0xf8, 0x9c, 0x3e, 0x86,
	0x9b, 0xbe, 0x71, 0x0b, 0x44, 0xeb, 0x27, 0xaa, 0x7e, 0xae, 0x07, 0x57, 0x22, 0xb0, 0xfb, 0xfa,
	0x39, 0xdd, 0x53, 0xd9, 0xf0, 0x57, 0xcc, 0xf1, 0x7c, 0xc7, 0xa2, 0x4f, 0xd5, 0xb0, 0x86, 0xef,
	0x38, 0xd0, 0x79, 0x0e, 0x73, 0xfd, 0xbe, 0x47, 0xf7, 0xd5, 0x52, 0x8b, 0xa6, 0x83, 0xff, 0x7d,
	0xee, 0x41, 0x63, 0x9e, 0xd3, 0x67, 0xaa, 0x5b, 0xd7, 0x74, 0x5d, 0xde, 0x7f, 0xc5, 0xa0, 0x7f,
	0xdc, 0x53, 0xfa, 0x2f, 0xed, 0x11, 0xd9, 0xf9, 0xdb, 0x2d, 0xa4, 0xf7, 0x6f, 0x95, 0x5e, 0x9f,
	0xe9, 0x99, 0xdb, 0x7f, 0xd4, 0x68, 0x39, 0x8e, 0x3e, 0xff, 0x55, 0x05, 0x18, 0x30, 0xd7, 0xd5,
	0x4f, 0x18, 0x7d, 0xae, 0xd6, 0x0e, 0xef, 0x44, 0xb6, 0xf3, 0x42, 0xed, 0x14, 0xbc, 0xb1, 0xe2,
	0x8f, 0xc3, 0x0c, 0xee, 0x74, 0x69, 0x47, 0xed, 0x94, 0x5b, 0x9b, 0x18, 0xec, 0x7f, 0x9d, 0xef,
	0x8b, 0x44, 0x5b, 0xcc, 0x99, 0x68, 0x32, 0x49, 0x26, 0x46, 0x32, 0x8c, 0xe0, 0xfb, 0x44, 0x98,
	0x11, 0xb8, 0xbe, 0x61, 0x40, 0x1c, 0x18, 0x31, 0x1f, 0x91, 0x3d, 0x58, 0xcb, 0xdb, 0x2d, 0xb9,
	0x76, 0x4d, 0x7d, 0xc0, 0x81, 0x88, 0xc5, 0x3d, 0x66, 0x71, 0xff, 0xa4, 0x47, 0x7f, 0xfe, 0x33,
	0xfd, 0x57, 0xd0, 0x5e, 0x90, 0x87, 0xb7, 0xcc, 0x7d, 0x17, 0xee, 0x38, 0xd8, 0x1e, 0x73, 0xdf,
	0xea, 0xd2, 0x9f, 0x72, 0xd3, 0x7d, 0xb2, 0x05, 0xa6, 0xa6, 0xe5, 0x71, 0x69, 0xb8, 0xb0, 0xf9,
	0x31, 0xb7, 0xd9, 0x23, 0x1b, 0x4b, 0x36, 0xa6, 0x7b, 0x2c, 0x7a, 0xee, 0x87, 0xdc, 0xe2, 0x29,
	0xd9, 0x04, 0x0b, 0x4c, 0x51, 0x0e, 0x01, 0x87, 0xd9, 0x62, 0x38, 0x7e, 0x97, 0x9b, 0x74, 0xc8,
	0xa3, 0x65, 0x13, 0xa3, 0x67, 0xda, 0x22, 0x5c, 0x90, 0xf2, 0xff, 0x76, 0x61, 0xdb, 0xf9, 0xa5,
	0xa8, 0x4e, 0xdf, 0x30, 0xc6, 0x77, 0xca, 0x0a, 0x69, 0x30, 0xc7, 0xe1, 0x8e, 0x68, 0x56, 0x90,
	0x04, 0x24, 0x72, 0x61, 0xaa, 0xf4, 0x19, 0xae, 0x0b, 0x62, 0x2d, 0x6f, 0x30, 0xae, 0x8b, 0xc2,
	0xdc, 0xeb, 0x39, 0x4c, 0x2e, 0x4b, 0xf0, 0x7e, 0xa8, 0x1f, 0xf1, 0xc1, 0x11, 0xae, 0xca, 0xe2,
	0xfa, 0xe0, 0x26, 0xb7, 0xe4, 0x7e, 0x65, 0x81, 0x78, 0x67, 0x1c, 0x91, 0x2a, 0x3c, 0x1a, 0x9a,
	0xc2, 0x23, 0x03, 0x6a, 0x62, 0xf8, 0xa5, 0x00, 0x97, 0x50, 0x5d, 0xd8, 0x88, 0xa1, 0xce, 0x0c,
	0x0f, 0x81, 0x86, 0x04, 0x06, 0xb6, 0x6e, 0x9d, 0x23, 0x40, 0xc4, 0xb9, 0xba, 0xe9, 0x18, 0x8e,
	0x7e, 0x2c, 0x4d, 0x9a, 0xa2, 0x27, 0x33, 0x44, 0x49, 0xa0, 0xa5, 0xe2, 0x4a, 0x22, 0x2b, 0x22,
	0x11, 0xd7, 0xb7, 0x99, 0x23, 0x62, 0xc3, 0x4c, 0x84, 0x1b, 0x0d, 0x05, 0x72, 0xce, 0x4c, 0xaf,
	0x07, 0xec, 0xd3, 0x41, 0xb6, 0xd6, 0xf9, 0x5a, 0x51, 0x0c, 0x3e, 0xd4, 0xa8, 0x98, 0xc8, 0x09,
	0x14, 0x76, 0x06, 0xba, 0x18, 0x07, 0x1e, 0x88, 0x84, 0x88, 0x32, 0x62, 0x8b, 0x82, 0xb0, 0xa7,
	0x0c, 0x50, 0x14, 0xca, 0xcb, 0xe6, 0x63, 0x59, 0xa8, 0xea, 0xe5, 0x33, 0xac, 0x02, 0xdf, 0xe4,
	0xaa, 0x27, 0x27, 0x4e, 0x35, 0xfb, 0xed, 0xf6, 0x68, 0xad, 0x13, 0xca, 0x87, 0x1f, 0x86, 0xff,
	0x3c, 0x7f, 0x23, 0x81, 0x89, 0x0f, 0x8d, 0x63, 0x8a, 0xcf, 0x24, 0xc4, 0xf6, 0xd5, 0xd8, 0x05,
	0x11, 0xdb, 0x57, 0x62, 0x63, 0xcd, 0x7c, 0x9c, 0x20, 0xe2, 0x73, 0x81, 0x54, 0xfc, 0xe0, 0x18,
	0xdc, 0x21, 0x44, 0xb9, 0xf3, 0x6b, 0x81, 0xec, 0x7c, 0xf8, 0x35, 0x06, 0x91, 0xdc, 0x2c, 0x12,
	0x9c, 0xeb, 0xe2, 0x07, 0x46, 0x8e, 0x3b, 0x4c, 0xdb, 0xbd, 0x93, 0xb6, 0x7b, 0x3b, 0x6d, 0x37,
	0x4f, 0x1b, 0xb7, 0x2d, 0x9e, 0x01, 0x15, 0x79, 0x7c, 0x9e, 0xb7, 0x9b, 0xe6, 0x2d, 0xdd, 0x40,
	0x5b, 0x41, 0xb8, 0x2e, 0x77, 0xce, 0x74, 0x20, 0xd1, 0xc0, 0xfe, 0x94, 0xed, 0x0e, 0xf3, 0x82,
	0x92, 0x8e, 0x29, 0x1f, 0x72, 0xcb, 0x6f, 0x6f, 0xb5, 0x42, 0x30, 0x28, 0xa4, 0x26, 0x1e, 0x7c,
	0x50, 0x6c, 0xfb, 0x1c, 0x81, 0xa2, 0xe8, 0x3a, 0x2f, 0x70, 0x4d, 0x03, 0xf4, 0xb7, 0x10, 0x2a,
	0x75, 0x3e, 0x23, 0xdb, 0x8b, 0xa3, 0xc4, 0x9b, 0x50, 0x91, 0xa1, 0x4e, 0xca, 0xa9, 0x08, 0xe2,
	0x3e, 0xe4, 0xdf, 0x58, 0xbc, 0x1f, 0x4b, 0x0a, 0x34, 0x49, 0x2d, 0x57, 0x1a, 0x88, 0x67, 0x3a,
	0x1f, 0x15, 0x7b, 0x25, 0xfb, 0xde, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59, 0xe5, 0xb5, 0x5e,
	0x8c, 0x0c, 0x00, 0x00,
}
