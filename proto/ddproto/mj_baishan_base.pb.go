// Code generated by protoc-gen-go.
// source: mj_baishan_base.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

// Ignoring public import of CardInfo from mj_common.proto

// Ignoring public import of ErrorCode from mj_common.proto

// Ignoring public import of mj_enum_color from mj_common.proto

// Ignoring public import of mj_enum_gangType from mj_common.proto

// Ignoring public import of mj_enum_huType from mj_common.proto

// Ignoring public import of mj_enum_composeCardType from mj_common.proto

// Ignoring public import of mj_enum_paiType from mj_common.proto

// Ignoring public import of mj_enum_userGameStatus from mj_common.proto

// Ignoring public import of mj_enum_deskGameStatus from mj_common.proto

// Ignoring public import of MJRoomType from mj_common.proto

type MJ_BAISHAN_PID int32

const (
	MJ_BAISHAN_PID_MJBAISHN_PID_QUICK_CONN                     MJ_BAISHAN_PID = 1
	MJ_BAISHAN_PID_MJBAISHN_PID_QUICK_CONN_ACK                 MJ_BAISHAN_PID = 2
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_LOGIN                     MJ_BAISHAN_PID = 3
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_LOGIN_ACK                 MJ_BAISHAN_PID = 4
	MJ_BAISHAN_PID_MJBAISHN_PID_CREATEROOM                     MJ_BAISHAN_PID = 5
	MJ_BAISHAN_PID_MJBAISHN_PID_CREATEROOM_ACK                 MJ_BAISHAN_PID = 6
	MJ_BAISHAN_PID_MJBAISHN_PID_ENTER_ROOM                     MJ_BAISHAN_PID = 7
	MJ_BAISHAN_PID_MJBAISHN_PID_ENTER_ROOM_ACK                 MJ_BAISHAN_PID = 8
	MJ_BAISHAN_PID_MJBAISHN_PID_SEND_GAMEINFO                  MJ_BAISHAN_PID = 9
	MJ_BAISHAN_PID_MJBAISHN_PID_READY                          MJ_BAISHAN_PID = 10
	MJ_BAISHAN_PID_MJBAISHN_PID_READY_ACK                      MJ_BAISHAN_PID = 11
	MJ_BAISHAN_PID_MJBAISHN_PID_EXCHANGECARDS                  MJ_BAISHAN_PID = 12
	MJ_BAISHAN_PID_MJBAISHN_PID_EXCHANGECARDS_ACK              MJ_BAISHAN_PID = 13
	MJ_BAISHAN_PID_MJBAISHN_PID_DINGQUE                        MJ_BAISHAN_PID = 14
	MJ_BAISHAN_PID_MJBAISHN_PID_OPENING                        MJ_BAISHAN_PID = 15
	MJ_BAISHAN_PID_MJBAISHN_PID_DEAL_CARDS                     MJ_BAISHAN_PID = 16
	MJ_BAISHAN_PID_MJBAISHN_PID_GET_IN_CARD                    MJ_BAISHAN_PID = 17
	MJ_BAISHAN_PID_MJBAISHN_PID_SEND_OUT_CARD                  MJ_BAISHAN_PID = 18
	MJ_BAISHAN_PID_MJBAISHN_PID_SEND_OUT_CARD_ACK              MJ_BAISHAN_PID = 19
	MJ_BAISHAN_PID_MJBAISHN_PID_PENG_CARD                      MJ_BAISHAN_PID = 20
	MJ_BAISHAN_PID_MJBAISHN_PID_PENG_CARD_ACK                  MJ_BAISHAN_PID = 21
	MJ_BAISHAN_PID_MJBAISHN_PID_GANG_CARD                      MJ_BAISHAN_PID = 22
	MJ_BAISHAN_PID_MJBAISHN_PID_GANG_CARD_ACK                  MJ_BAISHAN_PID = 23
	MJ_BAISHAN_PID_MJBAISHN_PID_GUO_CARD                       MJ_BAISHAN_PID = 24
	MJ_BAISHAN_PID_MJBAISHN_PID_GUO_CARD_ACK                   MJ_BAISHAN_PID = 25
	MJ_BAISHAN_PID_MJBAISHN_PID_HU_CARD                        MJ_BAISHAN_PID = 26
	MJ_BAISHAN_PID_MJBAISHN_PID_HU_CARD_ACK                    MJ_BAISHAN_PID = 27
	MJ_BAISHAN_PID_MJBAISHN_PID_BROADCAST_BEGIN_DINGQUE        MJ_BAISHAN_PID = 28
	MJ_BAISHAN_PID_MJBAISHN_PID_BROADCAST_BEGIN_EXCHANGE       MJ_BAISHAN_PID = 29
	MJ_BAISHAN_PID_MJBAISHN_PID_OVERTURN                       MJ_BAISHAN_PID = 30
	MJ_BAISHAN_PID_MJBAISHN_PID_CURRENTRESULT                  MJ_BAISHAN_PID = 31
	MJ_BAISHAN_PID_MJBAISHN_PID_SENDENDLOTTERY                 MJ_BAISHAN_PID = 32
	MJ_BAISHAN_PID_MJBAISHN_PID_DISSOLVE_DESK                  MJ_BAISHAN_PID = 33
	MJ_BAISHAN_PID_MJBAISHN_PID_DISSOLVE_DESK_ACK              MJ_BAISHAN_PID = 34
	MJ_BAISHAN_PID_MJBAISHN_PID_LEAVE_DESK                     MJ_BAISHAN_PID = 35
	MJ_BAISHAN_PID_MJBAISHN_PID_LEAVE_DESK_ACK                 MJ_BAISHAN_PID = 36
	MJ_BAISHAN_PID_MJBAISHN_PID_MESSAGE                        MJ_BAISHAN_PID = 37
	MJ_BAISHAN_PID_MJBAISHN_PID_SEND_MESSAGE                   MJ_BAISHAN_PID = 38
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_DINGQUEEND                MJ_BAISHAN_PID = 39
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_GAMERECORD                MJ_BAISHAN_PID = 40
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_ACKGAMERECORD             MJ_BAISHAN_PID = 41
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_ACKGAMERECORDEDN          MJ_BAISHAN_PID = 42
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_NOTICE                    MJ_BAISHAN_PID = 43
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_ACKNOTICE                 MJ_BAISHAN_PID = 44
	MJ_BAISHAN_PID_MJBAISHN_PID_LOGOUT_REQ                     MJ_BAISHAN_PID = 45
	MJ_BAISHAN_PID_MJBAISHN_PID_LOGOUT_ACK                     MJ_BAISHAN_PID = 46
	MJ_BAISHAN_PID_MJBAISHN_PID_AWARD_ONLINE_REQ               MJ_BAISHAN_PID = 47
	MJ_BAISHAN_PID_MJBAISHN_PID_AWARD_ONLINE_ACK               MJ_BAISHAN_PID = 48
	MJ_BAISHAN_PID_MJBAISHN_PID_HALL_TASK_REQ                  MJ_BAISHAN_PID = 49
	MJ_BAISHAN_PID_MJBAISHN_PID_HALL_TASK_ACK                  MJ_BAISHAN_PID = 50
	MJ_BAISHAN_PID_MJBAISHN_PID_ENTER_AGENTMODE_REQ            MJ_BAISHAN_PID = 51
	MJ_BAISHAN_PID_MJBAISHN_PID_ENTER_AGENTMODE_ACK            MJ_BAISHAN_PID = 52
	MJ_BAISHAN_PID_MJBAISHN_PID_QUIT_AGENTMODE_REQ             MJ_BAISHAN_PID = 53
	MJ_BAISHAN_PID_MJBAISHN_PID_QUIT_AGENTMODE_ACK             MJ_BAISHAN_PID = 54
	MJ_BAISHAN_PID_MJBAISHN_PID_REG_REQ                        MJ_BAISHAN_PID = 55
	MJ_BAISHAN_PID_MJBAISHN_PID_REG_ACK                        MJ_BAISHAN_PID = 56
	MJ_BAISHAN_PID_MJBAISHN_PID_GAMESTATE_REQ                  MJ_BAISHAN_PID = 57
	MJ_BAISHAN_PID_MJBAISHN_PID_GAMESTATE_ACK                  MJ_BAISHAN_PID = 58
	MJ_BAISHAN_PID_MJBAISHN_PID_FEEDBACK_REQ                   MJ_BAISHAN_PID = 59
	MJ_BAISHAN_PID_MJBAISHN_PID_APPLYDISSOLVE_REQ              MJ_BAISHAN_PID = 60
	MJ_BAISHAN_PID_MJBAISHN_PID_APPLYDISSOLVE_ACK              MJ_BAISHAN_PID = 61
	MJ_BAISHAN_PID_MJBAISHN_PID_APPLYDISSOLVEBACK_REQ          MJ_BAISHAN_PID = 62
	MJ_BAISHAN_PID_MJBAISHN_PID_APPLYDISSOLVEBACK_ACK          MJ_BAISHAN_PID = 63
	MJ_BAISHAN_PID_MJBAISHN_PID_COMMONBCKICKOUT                MJ_BAISHAN_PID = 64
	MJ_BAISHAN_PID_MJBAISHN_PID_ACTCHI_REQ                     MJ_BAISHAN_PID = 65
	MJ_BAISHAN_PID_MJBAISHN_PID_ACTCHI_ACK                     MJ_BAISHAN_PID = 66
	MJ_BAISHAN_PID_MJBAISHN_PID_CHANGSHA_GANG_CARD_ACK         MJ_BAISHAN_PID = 67
	MJ_BAISHAN_PID_MJBAISHN_PID_ACTCHANGSHAQISHOUHU            MJ_BAISHAN_PID = 68
	MJ_BAISHAN_PID_MJBAISHN_PID_ACTCHANGSHAQISHOUHU_ACK        MJ_BAISHAN_PID = 69
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_CHANGSHQISHOUHUOVERTURN   MJ_BAISHAN_PID = 70
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_CHANGSHAOVERTURNAFTERGANG MJ_BAISHAN_PID = 71
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_ACKACTHUCHANGSHA          MJ_BAISHAN_PID = 72
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_DEALHAIDICARDS            MJ_BAISHAN_PID = 73
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_REQDEALHAIDICARDS         MJ_BAISHAN_PID = 74
	MJ_BAISHAN_PID_MJBAISHN_PID_GAME_ACKDEALHAIDICARDS         MJ_BAISHAN_PID = 75
	MJ_BAISHAN_PID_MJBAISHN_PID_COMMONBCUSERBREAK              MJ_BAISHAN_PID = 76
	MJ_BAISHAN_PID_MJBAISHN_PID_COMMONREQRECONNECT             MJ_BAISHAN_PID = 77
	MJ_BAISHAN_PID_MJBAISHN_PID_GAMEREQBUXIAZI                 MJ_BAISHAN_PID = 78
	MJ_BAISHAN_PID_MJBAISHN_PID_GAMEACKBUXIAZI                 MJ_BAISHAN_PID = 79
)

var MJ_BAISHAN_PID_name = map[int32]string{
	1:  "MJBAISHN_PID_QUICK_CONN",
	2:  "MJBAISHN_PID_QUICK_CONN_ACK",
	3:  "MJBAISHN_PID_GAME_LOGIN",
	4:  "MJBAISHN_PID_GAME_LOGIN_ACK",
	5:  "MJBAISHN_PID_CREATEROOM",
	6:  "MJBAISHN_PID_CREATEROOM_ACK",
	7:  "MJBAISHN_PID_ENTER_ROOM",
	8:  "MJBAISHN_PID_ENTER_ROOM_ACK",
	9:  "MJBAISHN_PID_SEND_GAMEINFO",
	10: "MJBAISHN_PID_READY",
	11: "MJBAISHN_PID_READY_ACK",
	12: "MJBAISHN_PID_EXCHANGECARDS",
	13: "MJBAISHN_PID_EXCHANGECARDS_ACK",
	14: "MJBAISHN_PID_DINGQUE",
	15: "MJBAISHN_PID_OPENING",
	16: "MJBAISHN_PID_DEAL_CARDS",
	17: "MJBAISHN_PID_GET_IN_CARD",
	18: "MJBAISHN_PID_SEND_OUT_CARD",
	19: "MJBAISHN_PID_SEND_OUT_CARD_ACK",
	20: "MJBAISHN_PID_PENG_CARD",
	21: "MJBAISHN_PID_PENG_CARD_ACK",
	22: "MJBAISHN_PID_GANG_CARD",
	23: "MJBAISHN_PID_GANG_CARD_ACK",
	24: "MJBAISHN_PID_GUO_CARD",
	25: "MJBAISHN_PID_GUO_CARD_ACK",
	26: "MJBAISHN_PID_HU_CARD",
	27: "MJBAISHN_PID_HU_CARD_ACK",
	28: "MJBAISHN_PID_BROADCAST_BEGIN_DINGQUE",
	29: "MJBAISHN_PID_BROADCAST_BEGIN_EXCHANGE",
	30: "MJBAISHN_PID_OVERTURN",
	31: "MJBAISHN_PID_CURRENTRESULT",
	32: "MJBAISHN_PID_SENDENDLOTTERY",
	33: "MJBAISHN_PID_DISSOLVE_DESK",
	34: "MJBAISHN_PID_DISSOLVE_DESK_ACK",
	35: "MJBAISHN_PID_LEAVE_DESK",
	36: "MJBAISHN_PID_LEAVE_DESK_ACK",
	37: "MJBAISHN_PID_MESSAGE",
	38: "MJBAISHN_PID_SEND_MESSAGE",
	39: "MJBAISHN_PID_GAME_DINGQUEEND",
	40: "MJBAISHN_PID_GAME_GAMERECORD",
	41: "MJBAISHN_PID_GAME_ACKGAMERECORD",
	42: "MJBAISHN_PID_GAME_ACKGAMERECORDEDN",
	43: "MJBAISHN_PID_GAME_NOTICE",
	44: "MJBAISHN_PID_GAME_ACKNOTICE",
	45: "MJBAISHN_PID_LOGOUT_REQ",
	46: "MJBAISHN_PID_LOGOUT_ACK",
	47: "MJBAISHN_PID_AWARD_ONLINE_REQ",
	48: "MJBAISHN_PID_AWARD_ONLINE_ACK",
	49: "MJBAISHN_PID_HALL_TASK_REQ",
	50: "MJBAISHN_PID_HALL_TASK_ACK",
	51: "MJBAISHN_PID_ENTER_AGENTMODE_REQ",
	52: "MJBAISHN_PID_ENTER_AGENTMODE_ACK",
	53: "MJBAISHN_PID_QUIT_AGENTMODE_REQ",
	54: "MJBAISHN_PID_QUIT_AGENTMODE_ACK",
	55: "MJBAISHN_PID_REG_REQ",
	56: "MJBAISHN_PID_REG_ACK",
	57: "MJBAISHN_PID_GAMESTATE_REQ",
	58: "MJBAISHN_PID_GAMESTATE_ACK",
	59: "MJBAISHN_PID_FEEDBACK_REQ",
	60: "MJBAISHN_PID_APPLYDISSOLVE_REQ",
	61: "MJBAISHN_PID_APPLYDISSOLVE_ACK",
	62: "MJBAISHN_PID_APPLYDISSOLVEBACK_REQ",
	63: "MJBAISHN_PID_APPLYDISSOLVEBACK_ACK",
	64: "MJBAISHN_PID_COMMONBCKICKOUT",
	65: "MJBAISHN_PID_ACTCHI_REQ",
	66: "MJBAISHN_PID_ACTCHI_ACK",
	67: "MJBAISHN_PID_CHANGSHA_GANG_CARD_ACK",
	68: "MJBAISHN_PID_ACTCHANGSHAQISHOUHU",
	69: "MJBAISHN_PID_ACTCHANGSHAQISHOUHU_ACK",
	70: "MJBAISHN_PID_GAME_CHANGSHQISHOUHUOVERTURN",
	71: "MJBAISHN_PID_GAME_CHANGSHAOVERTURNAFTERGANG",
	72: "MJBAISHN_PID_GAME_ACKACTHUCHANGSHA",
	73: "MJBAISHN_PID_GAME_DEALHAIDICARDS",
	74: "MJBAISHN_PID_GAME_REQDEALHAIDICARDS",
	75: "MJBAISHN_PID_GAME_ACKDEALHAIDICARDS",
	76: "MJBAISHN_PID_COMMONBCUSERBREAK",
	77: "MJBAISHN_PID_COMMONREQRECONNECT",
	78: "MJBAISHN_PID_GAMEREQBUXIAZI",
	79: "MJBAISHN_PID_GAMEACKBUXIAZI",
}
var MJ_BAISHAN_PID_value = map[string]int32{
	"MJBAISHN_PID_QUICK_CONN":                     1,
	"MJBAISHN_PID_QUICK_CONN_ACK":                 2,
	"MJBAISHN_PID_GAME_LOGIN":                     3,
	"MJBAISHN_PID_GAME_LOGIN_ACK":                 4,
	"MJBAISHN_PID_CREATEROOM":                     5,
	"MJBAISHN_PID_CREATEROOM_ACK":                 6,
	"MJBAISHN_PID_ENTER_ROOM":                     7,
	"MJBAISHN_PID_ENTER_ROOM_ACK":                 8,
	"MJBAISHN_PID_SEND_GAMEINFO":                  9,
	"MJBAISHN_PID_READY":                          10,
	"MJBAISHN_PID_READY_ACK":                      11,
	"MJBAISHN_PID_EXCHANGECARDS":                  12,
	"MJBAISHN_PID_EXCHANGECARDS_ACK":              13,
	"MJBAISHN_PID_DINGQUE":                        14,
	"MJBAISHN_PID_OPENING":                        15,
	"MJBAISHN_PID_DEAL_CARDS":                     16,
	"MJBAISHN_PID_GET_IN_CARD":                    17,
	"MJBAISHN_PID_SEND_OUT_CARD":                  18,
	"MJBAISHN_PID_SEND_OUT_CARD_ACK":              19,
	"MJBAISHN_PID_PENG_CARD":                      20,
	"MJBAISHN_PID_PENG_CARD_ACK":                  21,
	"MJBAISHN_PID_GANG_CARD":                      22,
	"MJBAISHN_PID_GANG_CARD_ACK":                  23,
	"MJBAISHN_PID_GUO_CARD":                       24,
	"MJBAISHN_PID_GUO_CARD_ACK":                   25,
	"MJBAISHN_PID_HU_CARD":                        26,
	"MJBAISHN_PID_HU_CARD_ACK":                    27,
	"MJBAISHN_PID_BROADCAST_BEGIN_DINGQUE":        28,
	"MJBAISHN_PID_BROADCAST_BEGIN_EXCHANGE":       29,
	"MJBAISHN_PID_OVERTURN":                       30,
	"MJBAISHN_PID_CURRENTRESULT":                  31,
	"MJBAISHN_PID_SENDENDLOTTERY":                 32,
	"MJBAISHN_PID_DISSOLVE_DESK":                  33,
	"MJBAISHN_PID_DISSOLVE_DESK_ACK":              34,
	"MJBAISHN_PID_LEAVE_DESK":                     35,
	"MJBAISHN_PID_LEAVE_DESK_ACK":                 36,
	"MJBAISHN_PID_MESSAGE":                        37,
	"MJBAISHN_PID_SEND_MESSAGE":                   38,
	"MJBAISHN_PID_GAME_DINGQUEEND":                39,
	"MJBAISHN_PID_GAME_GAMERECORD":                40,
	"MJBAISHN_PID_GAME_ACKGAMERECORD":             41,
	"MJBAISHN_PID_GAME_ACKGAMERECORDEDN":          42,
	"MJBAISHN_PID_GAME_NOTICE":                    43,
	"MJBAISHN_PID_GAME_ACKNOTICE":                 44,
	"MJBAISHN_PID_LOGOUT_REQ":                     45,
	"MJBAISHN_PID_LOGOUT_ACK":                     46,
	"MJBAISHN_PID_AWARD_ONLINE_REQ":               47,
	"MJBAISHN_PID_AWARD_ONLINE_ACK":               48,
	"MJBAISHN_PID_HALL_TASK_REQ":                  49,
	"MJBAISHN_PID_HALL_TASK_ACK":                  50,
	"MJBAISHN_PID_ENTER_AGENTMODE_REQ":            51,
	"MJBAISHN_PID_ENTER_AGENTMODE_ACK":            52,
	"MJBAISHN_PID_QUIT_AGENTMODE_REQ":             53,
	"MJBAISHN_PID_QUIT_AGENTMODE_ACK":             54,
	"MJBAISHN_PID_REG_REQ":                        55,
	"MJBAISHN_PID_REG_ACK":                        56,
	"MJBAISHN_PID_GAMESTATE_REQ":                  57,
	"MJBAISHN_PID_GAMESTATE_ACK":                  58,
	"MJBAISHN_PID_FEEDBACK_REQ":                   59,
	"MJBAISHN_PID_APPLYDISSOLVE_REQ":              60,
	"MJBAISHN_PID_APPLYDISSOLVE_ACK":              61,
	"MJBAISHN_PID_APPLYDISSOLVEBACK_REQ":          62,
	"MJBAISHN_PID_APPLYDISSOLVEBACK_ACK":          63,
	"MJBAISHN_PID_COMMONBCKICKOUT":                64,
	"MJBAISHN_PID_ACTCHI_REQ":                     65,
	"MJBAISHN_PID_ACTCHI_ACK":                     66,
	"MJBAISHN_PID_CHANGSHA_GANG_CARD_ACK":         67,
	"MJBAISHN_PID_ACTCHANGSHAQISHOUHU":            68,
	"MJBAISHN_PID_ACTCHANGSHAQISHOUHU_ACK":        69,
	"MJBAISHN_PID_GAME_CHANGSHQISHOUHUOVERTURN":   70,
	"MJBAISHN_PID_GAME_CHANGSHAOVERTURNAFTERGANG": 71,
	"MJBAISHN_PID_GAME_ACKACTHUCHANGSHA":          72,
	"MJBAISHN_PID_GAME_DEALHAIDICARDS":            73,
	"MJBAISHN_PID_GAME_REQDEALHAIDICARDS":         74,
	"MJBAISHN_PID_GAME_ACKDEALHAIDICARDS":         75,
	"MJBAISHN_PID_COMMONBCUSERBREAK":              76,
	"MJBAISHN_PID_COMMONREQRECONNECT":             77,
	"MJBAISHN_PID_GAMEREQBUXIAZI":                 78,
	"MJBAISHN_PID_GAMEACKBUXIAZI":                 79,
}

func (x MJ_BAISHAN_PID) Enum() *MJ_BAISHAN_PID {
	p := new(MJ_BAISHAN_PID)
	*p = x
	return p
}
func (x MJ_BAISHAN_PID) String() string {
	return proto.EnumName(MJ_BAISHAN_PID_name, int32(x))
}
func (x *MJ_BAISHAN_PID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJ_BAISHAN_PID_value, data, "MJ_BAISHAN_PID")
	if err != nil {
		return err
	}
	*x = MJ_BAISHAN_PID(value)
	return nil
}
func (MJ_BAISHAN_PID) EnumDescriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

type MJOption int32

const (
	MJOption_EXCHANGE_CARDS       MJOption = 1
	MJOption_ZIMO_JIA_DI          MJOption = 2
	MJOption_ZIMO_JIA_FAN         MJOption = 3
	MJOption_DIANGANG_HUA_DIANPAO MJOption = 4
	MJOption_DIANGANG_HUA_ZIMO    MJOption = 5
	MJOption_YAOJIU_JIANGDUI      MJOption = 6
	MJOption_MENQING_MID_CARD     MJOption = 7
	MJOption_TIAN_DI_HU           MJOption = 8
	MJOption_KA_ER_TIAO           MJOption = 9
	// 三人两房牌
	MJOption_DIANPAO_CAN_HU MJOption = 10
	MJOption_DUIDUIHU_2_FAN MJOption = 11
	MJOption_JIA_XIN_WU     MJOption = 12
	// 倒倒胡
	MJOption_DDH_QIDUI_HU   MJOption = 13
	MJOption_DDH_ZIMO_HU    MJOption = 14
	MJOption_DDH_DIANPAO_HU MJOption = 15
)

var MJOption_name = map[int32]string{
	1:  "EXCHANGE_CARDS",
	2:  "ZIMO_JIA_DI",
	3:  "ZIMO_JIA_FAN",
	4:  "DIANGANG_HUA_DIANPAO",
	5:  "DIANGANG_HUA_ZIMO",
	6:  "YAOJIU_JIANGDUI",
	7:  "MENQING_MID_CARD",
	8:  "TIAN_DI_HU",
	9:  "KA_ER_TIAO",
	10: "DIANPAO_CAN_HU",
	11: "DUIDUIHU_2_FAN",
	12: "JIA_XIN_WU",
	13: "DDH_QIDUI_HU",
	14: "DDH_ZIMO_HU",
	15: "DDH_DIANPAO_HU",
}
var MJOption_value = map[string]int32{
	"EXCHANGE_CARDS":       1,
	"ZIMO_JIA_DI":          2,
	"ZIMO_JIA_FAN":         3,
	"DIANGANG_HUA_DIANPAO": 4,
	"DIANGANG_HUA_ZIMO":    5,
	"YAOJIU_JIANGDUI":      6,
	"MENQING_MID_CARD":     7,
	"TIAN_DI_HU":           8,
	"KA_ER_TIAO":           9,
	"DIANPAO_CAN_HU":       10,
	"DUIDUIHU_2_FAN":       11,
	"JIA_XIN_WU":           12,
	"DDH_QIDUI_HU":         13,
	"DDH_ZIMO_HU":          14,
	"DDH_DIANPAO_HU":       15,
}

func (x MJOption) Enum() *MJOption {
	p := new(MJOption)
	*p = x
	return p
}
func (x MJOption) String() string {
	return proto.EnumName(MJOption_name, int32(x))
}
func (x *MJOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJOption_value, data, "MJOption")
	if err != nil {
		return err
	}
	*x = MJOption(value)
	return nil
}
func (MJOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor19, []int{1} }

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

func (m *PlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *PlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *PlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *PlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

// 长沙麻将的配置
type ChangShaPlayOptions struct {
	PlayerCount      *int32 `protobuf:"varint,1,opt,name=playerCount" json:"playerCount,omitempty"`
	IgnoreBank       *bool  `protobuf:"varint,2,opt,name=ignoreBank" json:"ignoreBank,omitempty"`
	BirdCount        *int32 `protobuf:"varint,3,opt,name=birdCount" json:"birdCount,omitempty"`
	BirdMultiple     *int32 `protobuf:"varint,4,opt,name=birdMultiple" json:"birdMultiple,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangShaPlayOptions) Reset()                    { *m = ChangShaPlayOptions{} }
func (m *ChangShaPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*ChangShaPlayOptions) ProtoMessage()               {}
func (*ChangShaPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{1} }

func (m *ChangShaPlayOptions) GetPlayerCount() int32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *ChangShaPlayOptions) GetIgnoreBank() bool {
	if m != nil && m.IgnoreBank != nil {
		return *m.IgnoreBank
	}
	return false
}

func (m *ChangShaPlayOptions) GetBirdCount() int32 {
	if m != nil && m.BirdCount != nil {
		return *m.BirdCount
	}
	return 0
}

func (m *ChangShaPlayOptions) GetBirdMultiple() int32 {
	if m != nil && m.BirdMultiple != nil {
		return *m.BirdMultiple
	}
	return 0
}

type RoomTypeInfo struct {
	MjRoomType          *MJRoomType          `protobuf:"varint,1,opt,name=mjRoomType,enum=ddproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout          *int32               `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax              *int64               `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions         *PlayOptions         `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum            *int32               `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement          *int32               `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue           *int64               `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	ChangShaPlayOptions *ChangShaPlayOptions `protobuf:"bytes,9,opt,name=changShaPlayOptions" json:"changShaPlayOptions,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{2} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *RoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *RoomTypeInfo) GetChangShaPlayOptions() *ChangShaPlayOptions {
	if m != nil {
		return m.ChangShaPlayOptions
	}
	return nil
}

type ComposeCard struct {
	Value            *int32  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	ChiValue         []int32 `protobuf:"varint,3,rep,name=chiValue" json:"chiValue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ComposeCard) Reset()                    { *m = ComposeCard{} }
func (m *ComposeCard) String() string            { return proto.CompactTextString(m) }
func (*ComposeCard) ProtoMessage()               {}
func (*ComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{3} }

func (m *ComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ComposeCard) GetChiValue() []int32 {
	if m != nil {
		return m.ChiValue
	}
	return nil
}

type PlayerCard struct {
	HandCard         []*CardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*ComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []*CardInfo    `protobuf:"bytes,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           []*CardInfo    `protobuf:"bytes,4,rep,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32        `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	HandCardCount    *int32         `protobuf:"varint,6,opt,name=handCardCount" json:"handCardCount,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerCard) Reset()                    { *m = PlayerCard{} }
func (m *PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PlayerCard) ProtoMessage()               {}
func (*PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{4} }

func (m *PlayerCard) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PlayerCard) GetComposeCard() []*ComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *PlayerCard) GetOutCard() []*CardInfo {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *PlayerCard) GetHuCard() []*CardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerCard) GetHandCardCount() int32 {
	if m != nil && m.HandCardCount != nil {
		return *m.HandCardCount
	}
	return 0
}

type PlayerInfo struct {
	IsBanker         *bool       `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64      `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string     `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32      `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32     `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool       `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32      `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32      `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32      `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32      `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32      `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32      `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	AgentMode        *bool       `protobuf:"varint,15,opt,name=agentMode" json:"agentMode,omitempty"`
	Ip               *string     `protobuf:"bytes,16,opt,name=ip" json:"ip,omitempty"`
	XiaCount         *int32      `protobuf:"varint,17,opt,name=xiaCount" json:"xiaCount,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{5} }

func (m *PlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *PlayerInfo) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *PlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *PlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *PlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *PlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *PlayerInfo) GetAgentMode() bool {
	if m != nil && m.AgentMode != nil {
		return *m.AgentMode
	}
	return false
}

func (m *PlayerInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *PlayerInfo) GetXiaCount() int32 {
	if m != nil && m.XiaCount != nil {
		return *m.XiaCount
	}
	return 0
}

type DeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32        `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32        `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32        `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32       `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeskGameInfo) Reset()                    { *m = DeskGameInfo{} }
func (m *DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DeskGameInfo) ProtoMessage()               {}
func (*DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{6} }

func (m *DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *DeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayOptions)(nil), "ddproto.PlayOptions")
	proto.RegisterType((*ChangShaPlayOptions)(nil), "ddproto.ChangShaPlayOptions")
	proto.RegisterType((*RoomTypeInfo)(nil), "ddproto.RoomTypeInfo")
	proto.RegisterType((*ComposeCard)(nil), "ddproto.ComposeCard")
	proto.RegisterType((*PlayerCard)(nil), "ddproto.PlayerCard")
	proto.RegisterType((*PlayerInfo)(nil), "ddproto.PlayerInfo")
	proto.RegisterType((*DeskGameInfo)(nil), "ddproto.DeskGameInfo")
	proto.RegisterEnum("ddproto.MJ_BAISHAN_PID", MJ_BAISHAN_PID_name, MJ_BAISHAN_PID_value)
	proto.RegisterEnum("ddproto.MJOption", MJOption_name, MJOption_value)
}

var fileDescriptor19 = []byte{
	// 1926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xeb, 0x76, 0xdb, 0xb8,
	0xd5, 0xfd, 0x7c, 0x97, 0x21, 0x47, 0x46, 0x60, 0x3b, 0xc3, 0x38, 0x4e, 0xe2, 0x51, 0x32, 0x19,
	0x27, 0xf9, 0x92, 0x69, 0x3d, 0xed, 0xb4, 0xd3, 0x3b, 0x44, 0xc2, 0x12, 0x2d, 0x91, 0x94, 0x20,
	0x32, 0x97, 0xf9, 0xc3, 0x45, 0x4b, 0xac, 0xcd, 0xc4, 0x22, 0x55, 0x89, 0x9a, 0xb1, 0xfb, 0x02,
	0x5d, 0x7d, 0x84, 0xbe, 0x43, 0x9f, 0xa8, 0x6b, 0xf5, 0x0d, 0xfa, 0x10, 0x5d, 0x07, 0x20, 0x29,
	0xc9, 0x90, 0x93, 0xfe, 0xc9, 0xd2, 0xd9, 0x67, 0x9f, 0x83, 0x73, 0xd9, 0x00, 0x1d, 0xb4, 0x37,
	0xf8, 0xe0, 0x9f, 0x05, 0xd1, 0xf8, 0x22, 0x88, 0xfd, 0xb3, 0x60, 0x1c, 0xbe, 0x1e, 0x8e, 0x92,
	0x34, 0x21, 0x1b, 0xfd, 0xbe, 0xf8, 0xb1, 0xbf, 0xd3, 0x4b, 0x06, 0x83, 0x24, 0xf6, 0x7b, 0x97,
	0x51, 0x18, 0xa7, 0xd2, 0xbb, 0xbf, 0x3d, 0xf8, 0xe0, 0x4b, 0x5c, 0x02, 0xd5, 0x7f, 0x2c, 0xa1,
	0x72, 0xfb, 0x32, 0xb8, 0x76, 0x86, 0x69, 0x94, 0xc4, 0x63, 0x72, 0x80, 0x36, 0xff, 0x1a, 0x59,
	0x09, 0x0f, 0xfa, 0x51, 0xa2, 0x2d, 0x1d, 0x2e, 0x1d, 0xad, 0xf1, 0x29, 0x40, 0x5e, 0x20, 0xdc,
	0x8f, 0x82, 0xb8, 0x1e, 0xc4, 0xe7, 0x8d, 0x49, 0x20, 0x49, 0xcb, 0x82, 0xa4, 0xe0, 0xe4, 0x19,
	0xaa, 0x24, 0xe9, 0x45, 0x38, 0x1a, 0xeb, 0x17, 0x61, 0xef, 0x63, 0x2d, 0xb9, 0xd2, 0x56, 0x0e,
	0x57, 0x8e, 0xd6, 0xf8, 0x0d, 0x94, 0x68, 0x68, 0xe3, 0x62, 0x22, 0x53, 0xad, 0x8a, 0x54, 0xb9,
	0x09, 0xb5, 0xed, 0xe8, 0x17, 0x41, 0x7c, 0xde, 0xbd, 0x08, 0x66, 0x6b, 0x3c, 0x44, 0xe5, 0xe1,
	0x65, 0x70, 0x1d, 0x8e, 0xf4, 0x64, 0x12, 0xa7, 0x59, 0x95, 0xb3, 0x10, 0x79, 0x84, 0x50, 0x74,
	0x1e, 0x27, 0xa3, 0xb0, 0x16, 0xc4, 0x1f, 0x45, 0x85, 0x25, 0x3e, 0x83, 0x40, 0x97, 0x67, 0xd1,
	0xa8, 0x2f, 0xe3, 0x57, 0x64, 0x97, 0x05, 0x40, 0xaa, 0x68, 0x0b, 0x0c, 0x6b, 0x72, 0x99, 0x46,
	0xc3, 0xcb, 0x30, 0x2b, 0x6b, 0x0e, 0xab, 0xfe, 0x7b, 0x19, 0x6d, 0xf1, 0x24, 0x19, 0xb8, 0xd7,
	0xc3, 0xd0, 0x8c, 0xff, 0x9c, 0x90, 0x6f, 0x11, 0x1a, 0x7c, 0xc8, 0x11, 0x51, 0x53, 0xe5, 0x78,
	0xe7, 0x75, 0xb6, 0x8c, 0xd7, 0xd6, 0x69, 0xee, 0xe2, 0x33, 0x34, 0xa8, 0xf3, 0x2c, 0x09, 0x46,
	0xfd, 0xb1, 0x9e, 0x4c, 0xd2, 0x6c, 0x92, 0x33, 0x08, 0xb9, 0x87, 0xd6, 0x7b, 0xc1, 0xd0, 0x0a,
	0xae, 0x44, 0x91, 0x2b, 0x3c, 0xb3, 0xc8, 0x77, 0x72, 0x02, 0xd9, 0x40, 0x44, 0x81, 0xe5, 0xe3,
	0xdd, 0xe2, 0xb4, 0x99, 0x61, 0xf1, 0x59, 0x22, 0xd9, 0x47, 0xa5, 0x1e, 0x24, 0xb7, 0x27, 0x03,
	0x6d, 0x4d, 0x9c, 0x56, 0xd8, 0x50, 0xcb, 0x38, 0x4c, 0xd3, 0xcb, 0x70, 0x10, 0xc6, 0xa9, 0xb6,
	0x2e, 0x6b, 0x99, 0x22, 0x62, 0x66, 0xc1, 0x38, 0x7c, 0x13, 0x5c, 0x4e, 0x42, 0x6d, 0x43, 0x94,
	0x33, 0x05, 0x88, 0x8d, 0x76, 0x7a, 0xea, 0xaa, 0xb4, 0x4d, 0x51, 0xd9, 0x41, 0x51, 0xd9, 0x82,
	0x75, 0xf2, 0x45, 0x81, 0xd5, 0x2e, 0x2a, 0xeb, 0xc9, 0x60, 0x98, 0x8c, 0x43, 0x3d, 0x18, 0xf5,
	0xc9, 0x2e, 0x5a, 0xfb, 0x51, 0x1c, 0x2c, 0x97, 0x2d, 0x0d, 0x42, 0xd0, 0x6a, 0x0a, 0xd3, 0x96,
	0x83, 0x13, 0xbf, 0x45, 0x8b, 0x17, 0x91, 0xac, 0x52, 0x0a, 0xae, 0xb0, 0xab, 0x7f, 0x5f, 0x46,
	0xa8, 0x2d, 0x65, 0x02, 0x49, 0x5f, 0xa1, 0xd2, 0x45, 0x10, 0xf7, 0xe1, 0xb7, 0xb6, 0x74, 0xb8,
	0x72, 0x54, 0x3e, 0xbe, 0x3b, 0x2d, 0x34, 0x18, 0xf5, 0x61, 0xaf, 0xbc, 0xa0, 0xc0, 0xd0, 0x7b,
	0xd3, 0x92, 0xb4, 0x65, 0x11, 0x31, 0x1d, 0xfa, 0x4c, 0xb9, 0x7c, 0x96, 0x48, 0x5e, 0xa2, 0x8d,
	0x64, 0x92, 0x8a, 0x98, 0x95, 0xdb, 0x4e, 0xc9, 0x19, 0xe4, 0x39, 0x5a, 0xbf, 0x98, 0x08, 0xee,
	0xea, 0x6d, 0xdc, 0x8c, 0x00, 0xe2, 0xf0, 0xc6, 0xe1, 0xc8, 0xec, 0x8b, 0x55, 0xde, 0xe1, 0x99,
	0x45, 0x9e, 0xa2, 0x3b, 0x79, 0xcd, 0x52, 0xe0, 0x72, 0x97, 0xf3, 0x60, 0xf5, 0x3f, 0x2b, 0xf9,
	0x2c, 0x84, 0x7c, 0xf7, 0x51, 0x29, 0x1a, 0xc3, 0xdd, 0x08, 0x47, 0x62, 0xc6, 0x25, 0x5e, 0xd8,
	0x20, 0xed, 0x61, 0x31, 0x35, 0x31, 0xec, 0xf2, 0x8c, 0xb4, 0xa7, 0x03, 0xe5, 0x33, 0x34, 0xd8,
	0x4d, 0x2f, 0x89, 0xe2, 0x4c, 0xb8, 0xe2, 0x37, 0x1c, 0x12, 0x47, 0xbd, 0x8f, 0x76, 0x30, 0x90,
	0x97, 0x6a, 0x93, 0x17, 0x36, 0xc1, 0x68, 0x65, 0x1c, 0x5e, 0x65, 0xaa, 0x84, 0x9f, 0xd0, 0xdf,
	0x44, 0xf6, 0xb7, 0x2e, 0xfb, 0x93, 0x16, 0x3c, 0x18, 0xd1, 0xd8, 0xf9, 0x29, 0x0e, 0x47, 0x42,
	0x86, 0x25, 0x9e, 0x9b, 0x10, 0x71, 0xc6, 0xc3, 0xa0, 0x7f, 0xad, 0x95, 0x44, 0x9a, 0xcc, 0x82,
	0x73, 0xcf, 0x8c, 0x28, 0x3e, 0xef, 0x4c, 0x42, 0xa1, 0xc8, 0x35, 0x5e, 0xd8, 0xe2, 0x0a, 0xb2,
	0x2b, 0x21, 0xc1, 0xb0, 0xaf, 0xa1, 0xec, 0x0a, 0x16, 0x08, 0xe4, 0x8c, 0x1b, 0x93, 0x76, 0x10,
	0x69, 0x65, 0x99, 0x53, 0x5a, 0x80, 0xff, 0x65, 0x12, 0x02, 0xbe, 0x25, 0x71, 0x69, 0x91, 0x97,
	0x68, 0xfd, 0xa7, 0x2b, 0x18, 0xa9, 0x76, 0xe7, 0xc6, 0xa0, 0xde, 0x86, 0xd1, 0x55, 0x14, 0xcb,
	0x15, 0x4a, 0x0a, 0x1c, 0x5e, 0x0f, 0x06, 0x61, 0x37, 0x0d, 0xd2, 0xc9, 0x58, 0xab, 0xc8, 0xc3,
	0xa7, 0x08, 0xdc, 0xb9, 0xe0, 0x3c, 0x8c, 0x53, 0x2b, 0xe9, 0x87, 0xda, 0xb6, 0x68, 0x76, 0x0a,
	0x90, 0x0a, 0x5a, 0x8e, 0x86, 0x1a, 0x16, 0x83, 0x5c, 0x8e, 0x86, 0xd0, 0xe6, 0x55, 0x14, 0xc8,
	0x9d, 0xdf, 0x95, 0x6d, 0xe6, 0x76, 0xf5, 0x6f, 0xab, 0x68, 0xcb, 0x08, 0xc7, 0x1f, 0x21, 0xf9,
	0x82, 0xa3, 0x97, 0x94, 0xa3, 0xbf, 0x47, 0x5b, 0xa3, 0x99, 0xf7, 0x2d, 0x5b, 0xfb, 0x5e, 0xd1,
	0xcd, 0xec, 0xe3, 0xc7, 0xe7, 0xa8, 0x50, 0xb5, 0x14, 0x02, 0x3c, 0x33, 0xd9, 0xeb, 0x5a, 0x00,
	0xf0, 0xba, 0x06, 0xbd, 0x34, 0xfa, 0x31, 0xcc, 0xc4, 0xbb, 0x2a, 0x96, 0x3b, 0x87, 0x41, 0x71,
	0x60, 0x27, 0xb1, 0x1b, 0x0d, 0xc2, 0x4c, 0x13, 0x33, 0x08, 0x9c, 0xd0, 0x0f, 0x2f, 0x83, 0x6b,
	0xe1, 0x96, 0xf2, 0x9e, 0x02, 0xe4, 0x08, 0x6d, 0xc7, 0x66, 0x1c, 0xa5, 0x74, 0x9a, 0x62, 0x43,
	0x70, 0x6e, 0xc2, 0xf0, 0x8d, 0x12, 0x90, 0x51, 0x24, 0x93, 0xc2, 0xb9, 0x81, 0x42, 0xcd, 0x51,
	0x1c, 0xa5, 0xd0, 0xb3, 0x0e, 0xa2, 0xde, 0x14, 0xa2, 0x9e, 0xc3, 0xe0, 0xda, 0xf5, 0x26, 0xa3,
	0x11, 0x5c, 0x07, 0xb9, 0x02, 0xa9, 0xa5, 0x79, 0x10, 0x4e, 0x4c, 0x93, 0x34, 0xb8, 0x9c, 0xd2,
	0xa4, 0xac, 0x6e, 0xa0, 0x30, 0x01, 0x98, 0xa9, 0x3d, 0x19, 0x9c, 0x85, 0x23, 0x21, 0xb1, 0x4d,
	0x3e, 0x83, 0xc0, 0x37, 0x70, 0x14, 0x0e, 0x82, 0x28, 0x86, 0xcb, 0x36, 0x16, 0x5a, 0x5b, 0xe3,
	0xb3, 0x10, 0x08, 0x34, 0xbb, 0xcf, 0x15, 0x79, 0x7d, 0xa4, 0xf5, 0xe2, 0x5f, 0xbb, 0xa8, 0x62,
	0x9d, 0xfa, 0x35, 0x6a, 0x76, 0x1b, 0xd4, 0xf6, 0xdb, 0xa6, 0x41, 0x1e, 0xa0, 0x2f, 0xac, 0x53,
	0x01, 0x08, 0xdb, 0xef, 0x78, 0xa6, 0xde, 0xf4, 0x75, 0xc7, 0xb6, 0xf1, 0x12, 0x79, 0x8c, 0x1e,
	0xdc, 0xe2, 0xf4, 0xa9, 0xde, 0xc4, 0xcb, 0x4a, 0x74, 0x9d, 0x5a, 0xcc, 0x6f, 0x39, 0x75, 0xd3,
	0xc6, 0x2b, 0x4a, 0xf4, 0xd4, 0x29, 0xa2, 0x57, 0x95, 0x68, 0x9d, 0x33, 0xea, 0x32, 0xee, 0x38,
	0x16, 0x5e, 0x53, 0xa2, 0xa7, 0x4e, 0x11, 0xbd, 0xae, 0x44, 0x33, 0xdb, 0x65, 0xdc, 0x17, 0xd1,
	0x1b, 0x4a, 0xf4, 0xd4, 0x29, 0xa2, 0x4b, 0xe4, 0x11, 0xda, 0x9f, 0x23, 0x74, 0x99, 0x2d, 0x2b,
	0x34, 0xed, 0x13, 0x07, 0x6f, 0x92, 0x7b, 0x88, 0xcc, 0xf9, 0x39, 0xa3, 0xc6, 0x7b, 0x8c, 0xc8,
	0x3e, 0xba, 0xa7, 0xe2, 0x22, 0x67, 0x59, 0xc9, 0xc9, 0xde, 0xe9, 0x0d, 0x6a, 0xd7, 0x99, 0x4e,
	0xb9, 0xd1, 0xc5, 0x5b, 0xa4, 0x8a, 0x1e, 0xdd, 0xee, 0x17, 0x39, 0xee, 0x10, 0x0d, 0xed, 0xce,
	0x71, 0x0c, 0xd3, 0xae, 0x77, 0x3c, 0x86, 0x2b, 0x8a, 0xc7, 0x69, 0x33, 0xdb, 0xb4, 0xeb, 0x78,
	0x5b, 0x99, 0x84, 0xc1, 0x68, 0xcb, 0x97, 0x87, 0x62, 0x72, 0x80, 0xb4, 0xf9, 0x2d, 0x30, 0xd7,
	0x37, 0x6d, 0xe1, 0xc6, 0x77, 0x17, 0x8f, 0xc1, 0xf1, 0x5c, 0xe9, 0x27, 0x4a, 0xc9, 0x73, 0x7e,
	0x51, 0xf2, 0x8e, 0x32, 0x92, 0x36, 0xb3, 0xeb, 0x32, 0x7e, 0x57, 0xc9, 0x5f, 0xf8, 0x44, 0xec,
	0x9e, 0x12, 0x5b, 0xa7, 0x79, 0xec, 0x3d, 0x25, 0xb6, 0xf0, 0x89, 0xd8, 0x2f, 0xc8, 0x7d, 0xb4,
	0x37, 0xef, 0xf7, 0x1c, 0x19, 0xaa, 0x91, 0x87, 0xe8, 0xfe, 0x42, 0x97, 0x88, 0xbc, 0xaf, 0x8c,
	0xb2, 0xe1, 0xc9, 0xc0, 0x7d, 0x65, 0x5a, 0x99, 0x47, 0xc4, 0x3d, 0x20, 0x47, 0xe8, 0xe9, 0x9c,
	0xb7, 0xc6, 0x1d, 0x6a, 0xe8, 0xb4, 0xeb, 0xfa, 0x35, 0x06, 0xb2, 0xce, 0x97, 0x75, 0x40, 0x9e,
	0xa3, 0xaf, 0x3e, 0xc9, 0xcc, 0x57, 0x8f, 0x1f, 0x2a, 0x6d, 0x38, 0x6f, 0x18, 0x77, 0x3d, 0x6e,
	0xe3, 0x47, 0xca, 0x04, 0x74, 0x8f, 0x73, 0x66, 0xbb, 0x9c, 0x75, 0xbd, 0x96, 0x8b, 0x1f, 0x2b,
	0x2a, 0x87, 0xed, 0x30, 0xdb, 0x68, 0x39, 0xae, 0xcb, 0xf8, 0x7b, 0x7c, 0xa8, 0x24, 0x30, 0xcc,
	0x6e, 0xd7, 0x69, 0xbd, 0x61, 0xbe, 0xc1, 0xba, 0x4d, 0xfc, 0xa5, 0xb2, 0xde, 0x39, 0xbf, 0x68,
	0xba, 0xaa, 0xa8, 0xab, 0xc5, 0x68, 0x9e, 0xe0, 0x89, 0x52, 0xc1, 0xd4, 0x29, 0xa2, 0x9f, 0x2a,
	0xa3, 0xb6, 0x58, 0xb7, 0x4b, 0xeb, 0x0c, 0x7f, 0xa5, 0xec, 0x48, 0x48, 0x2b, 0x77, 0x3f, 0x23,
	0x87, 0xe8, 0x40, 0x7d, 0x3d, 0xb2, 0x01, 0x33, 0xdb, 0xc0, 0x5f, 0x2f, 0x66, 0xc0, 0x3f, 0x9c,
	0xe9, 0x0e, 0x37, 0xf0, 0x11, 0x79, 0x82, 0x1e, 0xab, 0x0c, 0xaa, 0x37, 0x67, 0x48, 0xcf, 0xc9,
	0x33, 0x54, 0xfd, 0x0c, 0x89, 0x19, 0x36, 0x7e, 0xa1, 0x5e, 0x24, 0xe0, 0xd9, 0x8e, 0x6b, 0xea,
	0x0c, 0xbf, 0x5c, 0xfc, 0xd8, 0x51, 0xbd, 0x99, 0x11, 0xfe, 0x5f, 0x1d, 0xa3, 0x53, 0x87, 0x7b,
	0xc4, 0x59, 0x07, 0xbf, 0xba, 0xcd, 0x09, 0x23, 0x7c, 0x4d, 0xbe, 0x44, 0x0f, 0xe7, 0x9c, 0xf4,
	0x2d, 0x28, 0xd2, 0xb1, 0x5b, 0xa6, 0xcd, 0x44, 0xfc, 0x37, 0x9f, 0xa6, 0x40, 0x96, 0x9f, 0x29,
	0x52, 0x68, 0xd0, 0x56, 0xcb, 0x77, 0x69, 0xb7, 0x29, 0x52, 0xfc, 0xfc, 0x13, 0x7e, 0x88, 0x3f,
	0x26, 0x4f, 0xd1, 0xe1, 0x82, 0x17, 0x95, 0xd6, 0x99, 0xed, 0x5a, 0x8e, 0x21, 0x0b, 0xf9, 0xf6,
	0xb3, 0x2c, 0xc8, 0xf5, 0x0b, 0x65, 0x2f, 0x1d, 0xcf, 0x74, 0x6f, 0xa4, 0xfa, 0xe5, 0xe7, 0x48,
	0x90, 0xe9, 0x3b, 0x45, 0x5e, 0x9c, 0xd5, 0x45, 0xf8, 0xaf, 0x16, 0x7a, 0x20, 0xe6, 0xd7, 0x0b,
	0xde, 0x15, 0x8b, 0x75, 0x5d, 0xea, 0xca, 0x83, 0xbf, 0xff, 0x84, 0x1f, 0xe2, 0x7f, 0xa3, 0x08,
	0xf7, 0x84, 0x31, 0xa3, 0x46, 0x75, 0x39, 0xc8, 0xdf, 0x2a, 0x77, 0x8a, 0xb6, 0xdb, 0xad, 0xf7,
	0xc5, 0xc5, 0x02, 0xce, 0xef, 0x3e, 0xc3, 0x81, 0x63, 0x7e, 0xaf, 0xe8, 0x72, 0x8e, 0x53, 0x9c,
	0xf7, 0x87, 0xff, 0x81, 0x07, 0xf9, 0xfe, 0xa8, 0x5c, 0x17, 0xdd, 0xb1, 0x2c, 0xc7, 0xae, 0xe9,
	0x4d, 0x53, 0x6f, 0x3a, 0x9e, 0x8b, 0xff, 0xa4, 0xa8, 0x90, 0xea, 0xae, 0xde, 0x30, 0xc5, 0x31,
	0xf4, 0x36, 0x27, 0xe4, 0xae, 0x91, 0xaf, 0xd1, 0x93, 0xf9, 0xdc, 0xf0, 0xb8, 0x75, 0x1b, 0xf4,
	0xc6, 0x9b, 0xad, 0x2b, 0xfa, 0x10, 0x59, 0x24, 0xb7, 0x63, 0x76, 0x1b, 0x8e, 0xd7, 0xf0, 0xb0,
	0xa1, 0xbc, 0xb3, 0x0b, 0x58, 0x22, 0x1f, 0x23, 0xaf, 0xd0, 0x73, 0xf5, 0xda, 0x65, 0xdc, 0x9c,
	0x5a, 0x3c, 0xa8, 0x27, 0xe4, 0x1b, 0xf4, 0xf2, 0x56, 0x3a, 0xcd, 0x79, 0xf4, 0xc4, 0x65, 0x1c,
	0x0a, 0xc7, 0xf5, 0x5b, 0x1f, 0x07, 0xaa, 0xbb, 0x0d, 0x2f, 0x0f, 0xc4, 0x0d, 0xa5, 0x2f, 0xf9,
	0x5a, 0x31, 0xda, 0x6a, 0x50, 0xd3, 0x30, 0xe5, 0xb7, 0xd8, 0x54, 0xc6, 0x24, 0x58, 0x9c, 0x75,
	0x6e, 0x10, 0x4f, 0x17, 0x13, 0xa9, 0xde, 0xbc, 0x41, 0x6c, 0x2a, 0x42, 0xca, 0x97, 0xea, 0x75,
	0x19, 0xaf, 0x71, 0x46, 0x9b, 0xb8, 0xa5, 0x5c, 0x24, 0xc9, 0xe1, 0xac, 0x03, 0xaf, 0x9b, 0x6d,
	0x33, 0xdd, 0xc5, 0xd6, 0xc2, 0xf7, 0x8b, 0xb3, 0x4e, 0xcd, 0x7b, 0x67, 0xd2, 0x1f, 0x4c, 0x6c,
	0x2f, 0x24, 0x50, 0xbd, 0x99, 0x13, 0x9c, 0x17, 0xff, 0x5c, 0x46, 0x25, 0xeb, 0x54, 0xfe, 0x27,
	0x9e, 0x10, 0x54, 0xc9, 0x3f, 0x71, 0xd9, 0x5f, 0x22, 0x4b, 0x64, 0x1b, 0x95, 0x7f, 0x30, 0x2d,
	0xc7, 0x3f, 0x35, 0xa9, 0x6f, 0x98, 0x78, 0x99, 0x60, 0xb4, 0x55, 0x00, 0x27, 0x14, 0xfe, 0x64,
	0xd4, 0xd0, 0xae, 0x61, 0x52, 0x5b, 0xa8, 0xa6, 0xe1, 0x01, 0x8d, 0xda, 0x6d, 0xea, 0xe0, 0x55,
	0xb2, 0x87, 0xee, 0xce, 0x79, 0x20, 0x10, 0xaf, 0x91, 0x1d, 0xb4, 0xfd, 0x9e, 0x3a, 0xa7, 0xa6,
	0x07, 0x49, 0xec, 0xba, 0xe1, 0x99, 0x78, 0x9d, 0xec, 0x22, 0x6c, 0x31, 0xbb, 0x63, 0xda, 0x75,
	0xdf, 0x82, 0x7e, 0xe1, 0xd3, 0xbe, 0x41, 0x2a, 0x08, 0xb9, 0x26, 0x85, 0x8f, 0xb4, 0xdf, 0xf0,
	0x70, 0x09, 0xec, 0x26, 0xf5, 0x19, 0xf7, 0x5d, 0x93, 0xc2, 0x5f, 0x7c, 0x04, 0x55, 0xb2, 0xe3,
	0x7c, 0x9d, 0xda, 0xc0, 0x41, 0x02, 0xf3, 0x4c, 0xc3, 0x33, 0x1b, 0x9e, 0x7f, 0x2c, 0x6a, 0x2c,
	0x43, 0x1c, 0x14, 0xfc, 0xce, 0xb4, 0xfd, 0xb7, 0x1e, 0xde, 0x82, 0x2e, 0x0c, 0xa3, 0xe1, 0x77,
	0x80, 0x06, 0x51, 0x77, 0xa0, 0x51, 0x40, 0x44, 0x6f, 0x0d, 0x0f, 0x57, 0x44, 0x1a, 0xa3, 0x91,
	0x77, 0x03, 0xd8, 0x76, 0xfb, 0xff, 0xda, 0x4b, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x8e,
	0x77, 0x2a, 0xc8, 0x13, 0x00, 0x00,
}
