// Code generated by protoc-gen-go.
// source: pez_desk.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

// Ignoring public import of common_enum_game from common_enum.proto

// Ignoring public import of COMMON_ENUM_ROOMTYPE from common_enum.proto

// Ignoring public import of COMMON_ENUM_GAMESTATUS from common_enum.proto

// Ignoring public import of COMMON_ENUM_RELEASETAG from common_enum.proto

// Ignoring public import of COMMON_ENUM_KICKOUT from common_enum.proto

// Ignoring public import of COMMON_ENUM_APPLYDISSOLVE from common_enum.proto

// Ignoring public import of BTN_TYPE from common_enum.proto

// Ignoring public import of COMMON_ENUM_ERROR_TYPE_ENTERCOINROOM from common_enum.proto

// 房主解散房间(未开局)
type Pez_DissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_DissolveDesk) Reset()                    { *m = Pez_DissolveDesk{} }
func (m *Pez_DissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*Pez_DissolveDesk) ProtoMessage()               {}
func (*Pez_DissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{0} }

func (m *Pez_DissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_DissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 解散房间回复
type Pez_AckDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	DeskId           *int32       `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	PassWord         *string      `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_AckDissolveDesk) Reset()                    { *m = Pez_AckDissolveDesk{} }
func (m *Pez_AckDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*Pez_AckDissolveDesk) ProtoMessage()               {}
func (*Pez_AckDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{1} }

func (m *Pez_AckDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_AckDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Pez_AckDissolveDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *Pez_AckDissolveDesk) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

// 申请解散房间(游戏中)
type Pez_ApplyDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_ApplyDissolveDesk) Reset()                    { *m = Pez_ApplyDissolveDesk{} }
func (m *Pez_ApplyDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*Pez_ApplyDissolveDesk) ProtoMessage()               {}
func (*Pez_ApplyDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{2} }

func (m *Pez_ApplyDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_ApplyDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type Pez_AckApplyDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserIdAgree      []uint32     `protobuf:"varint,2,rep,name=userIdAgree" json:"userIdAgree,omitempty"`
	UserIdWait       []uint32     `protobuf:"varint,3,rep,name=userIdWait" json:"userIdWait,omitempty"`
	UserIdDisagree   []uint32     `protobuf:"varint,4,rep,name=userIdDisagree" json:"userIdDisagree,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_AckApplyDissolveDesk) Reset()                    { *m = Pez_AckApplyDissolveDesk{} }
func (m *Pez_AckApplyDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*Pez_AckApplyDissolveDesk) ProtoMessage()               {}
func (*Pez_AckApplyDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{3} }

func (m *Pez_AckApplyDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_AckApplyDissolveDesk) GetUserIdAgree() []uint32 {
	if m != nil {
		return m.UserIdAgree
	}
	return nil
}

func (m *Pez_AckApplyDissolveDesk) GetUserIdWait() []uint32 {
	if m != nil {
		return m.UserIdWait
	}
	return nil
}

func (m *Pez_AckApplyDissolveDesk) GetUserIdDisagree() []uint32 {
	if m != nil {
		return m.UserIdDisagree
	}
	return nil
}

// 准备游戏
type Pez_Ready struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_Ready) Reset()                    { *m = Pez_Ready{} }
func (m *Pez_Ready) String() string            { return proto.CompactTextString(m) }
func (*Pez_Ready) ProtoMessage()               {}
func (*Pez_Ready) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{4} }

func (m *Pez_Ready) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_Ready) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 准备游戏的结果
type Pez_AckReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msg              *string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_AckReady) Reset()                    { *m = Pez_AckReady{} }
func (m *Pez_AckReady) String() string            { return proto.CompactTextString(m) }
func (*Pez_AckReady) ProtoMessage()               {}
func (*Pez_AckReady) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{5} }

func (m *Pez_AckReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_AckReady) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *Pez_AckReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 押注信息
type BetInfo struct {
	BetCount         *int32 `protobuf:"varint,1,opt,name=betCount" json:"betCount,omitempty"`
	ContinueBet      *bool  `protobuf:"varint,2,opt,name=continueBet" json:"continueBet,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BetInfo) Reset()                    { *m = BetInfo{} }
func (m *BetInfo) String() string            { return proto.CompactTextString(m) }
func (*BetInfo) ProtoMessage()               {}
func (*BetInfo) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{6} }

func (m *BetInfo) GetBetCount() int32 {
	if m != nil && m.BetCount != nil {
		return *m.BetCount
	}
	return 0
}

func (m *BetInfo) GetContinueBet() bool {
	if m != nil && m.ContinueBet != nil {
		return *m.ContinueBet
	}
	return false
}

// 赢牌信息：谁赢了多少
type Pez_WinScoreInfo struct {
	NickName         *string `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	WinScore         *int64  `protobuf:"varint,3,opt,name=winScore" json:"winScore,omitempty"`
	Coin             *int64  `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	CardTitle        *string `protobuf:"bytes,5,opt,name=cardTitle" json:"cardTitle,omitempty"`
	IsBanker         *bool   `protobuf:"varint,7,opt,name=isBanker" json:"isBanker,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pez_WinScoreInfo) Reset()                    { *m = Pez_WinScoreInfo{} }
func (m *Pez_WinScoreInfo) String() string            { return proto.CompactTextString(m) }
func (*Pez_WinScoreInfo) ProtoMessage()               {}
func (*Pez_WinScoreInfo) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{7} }

func (m *Pez_WinScoreInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *Pez_WinScoreInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Pez_WinScoreInfo) GetWinScore() int64 {
	if m != nil && m.WinScore != nil {
		return *m.WinScore
	}
	return 0
}

func (m *Pez_WinScoreInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *Pez_WinScoreInfo) GetCardTitle() string {
	if m != nil && m.CardTitle != nil {
		return *m.CardTitle
	}
	return ""
}

func (m *Pez_WinScoreInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

type Pez_EndLotteryInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	IsbigWin         *bool   `protobuf:"varint,3,opt,name=isbigWin" json:"isbigWin,omitempty"`
	IsOwner          *bool   `protobuf:"varint,4,opt,name=isOwner" json:"isOwner,omitempty"`
	BaseValue        *int32  `protobuf:"varint,5,opt,name=baseValue" json:"baseValue,omitempty"`
	WinScore         *int64  `protobuf:"varint,6,opt,name=winScore" json:"winScore,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pez_EndLotteryInfo) Reset()                    { *m = Pez_EndLotteryInfo{} }
func (m *Pez_EndLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*Pez_EndLotteryInfo) ProtoMessage()               {}
func (*Pez_EndLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{8} }

func (m *Pez_EndLotteryInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Pez_EndLotteryInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *Pez_EndLotteryInfo) GetIsbigWin() bool {
	if m != nil && m.IsbigWin != nil {
		return *m.IsbigWin
	}
	return false
}

func (m *Pez_EndLotteryInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *Pez_EndLotteryInfo) GetBaseValue() int32 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *Pez_EndLotteryInfo) GetWinScore() int64 {
	if m != nil && m.WinScore != nil {
		return *m.WinScore
	}
	return 0
}

// 本局结果(广播)
type Pez_SendCurrentResult struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NickName         *string      `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	WinScore         []int32      `protobuf:"varint,4,rep,name=winScore" json:"winScore,omitempty"`
	Coin             *int64       `protobuf:"varint,5,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pez_SendCurrentResult) Reset()                    { *m = Pez_SendCurrentResult{} }
func (m *Pez_SendCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*Pez_SendCurrentResult) ProtoMessage()               {}
func (*Pez_SendCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{9} }

func (m *Pez_SendCurrentResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_SendCurrentResult) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *Pez_SendCurrentResult) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *Pez_SendCurrentResult) GetWinScore() []int32 {
	if m != nil {
		return m.WinScore
	}
	return nil
}

func (m *Pez_SendCurrentResult) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// 牌局结束(广播)
type Pez_SendEndLottery struct {
	Header           *ProtoHeader          `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ScoreInfo        []*Pez_EndLotteryInfo `protobuf:"bytes,2,rep,name=ScoreInfo" json:"ScoreInfo,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Pez_SendEndLottery) Reset()                    { *m = Pez_SendEndLottery{} }
func (m *Pez_SendEndLottery) String() string            { return proto.CompactTextString(m) }
func (*Pez_SendEndLottery) ProtoMessage()               {}
func (*Pez_SendEndLottery) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{10} }

func (m *Pez_SendEndLottery) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pez_SendEndLottery) GetScoreInfo() []*Pez_EndLotteryInfo {
	if m != nil {
		return m.ScoreInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Pez_DissolveDesk)(nil), "ddproto.pez_DissolveDesk")
	proto.RegisterType((*Pez_AckDissolveDesk)(nil), "ddproto.pez_AckDissolveDesk")
	proto.RegisterType((*Pez_ApplyDissolveDesk)(nil), "ddproto.pez_ApplyDissolveDesk")
	proto.RegisterType((*Pez_AckApplyDissolveDesk)(nil), "ddproto.pez_AckApplyDissolveDesk")
	proto.RegisterType((*Pez_Ready)(nil), "ddproto.pez_Ready")
	proto.RegisterType((*Pez_AckReady)(nil), "ddproto.pez_AckReady")
	proto.RegisterType((*BetInfo)(nil), "ddproto.BetInfo")
	proto.RegisterType((*Pez_WinScoreInfo)(nil), "ddproto.pez_WinScoreInfo")
	proto.RegisterType((*Pez_EndLotteryInfo)(nil), "ddproto.pez_EndLotteryInfo")
	proto.RegisterType((*Pez_SendCurrentResult)(nil), "ddproto.pez_SendCurrentResult")
	proto.RegisterType((*Pez_SendEndLottery)(nil), "ddproto.pez_SendEndLottery")
}

func init() { proto.RegisterFile("pez_desk.proto", fileDescriptor36) }

var fileDescriptor36 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x49, 0xb3, 0xb4, 0xc9, 0xed, 0x56, 0x3a, 0x17, 0x50, 0x34, 0x5e, 0xaa, 0x88, 0x87,
	0x3e, 0x55, 0x68, 0xdf, 0xa0, 0x5d, 0x91, 0x5a, 0x89, 0x3f, 0x65, 0x43, 0xf4, 0x71, 0x72, 0xe3,
	0x4b, 0x31, 0x49, 0xec, 0xc8, 0x76, 0x98, 0xca, 0x03, 0x88, 0x6f, 0x8e, 0xec, 0x64, 0x2d, 0xa3,
	0x2f, 0x63, 0xf0, 0x52, 0x35, 0xd7, 0xf6, 0xef, 0x9c, 0x7b, 0xcf, 0x85, 0x5e, 0x89, 0xdf, 0xae,
	0x19, 0xea, 0x6c, 0x5c, 0x2a, 0x69, 0x24, 0xe9, 0x30, 0xe6, 0xfe, 0x9c, 0x0d, 0x52, 0x59, 0x14,
	0x52, 0x5c, 0xa7, 0x39, 0x47, 0x61, 0xea, 0xd3, 0xb3, 0xd3, 0xa6, 0x88, 0xa2, 0x2a, 0xea, 0x52,
	0x32, 0x87, 0xbe, 0x45, 0xcc, 0xb8, 0xd6, 0x32, 0xff, 0x8a, 0x33, 0xd4, 0x19, 0x79, 0x01, 0xed,
	0xcf, 0x48, 0x19, 0xaa, 0xd8, 0x1b, 0x7a, 0xa3, 0xee, 0xf9, 0x93, 0x71, 0x43, 0x1d, 0x2f, 0xed,
	0xef, 0xdc, 0x9d, 0x91, 0x1e, 0xb4, 0x2b, 0x8d, 0x6a, 0xc1, 0xe2, 0xd6, 0xd0, 0x1b, 0x9d, 0x24,
	0x05, 0x0c, 0x2c, 0x69, 0x92, 0x66, 0xff, 0x0e, 0xb3, 0xdf, 0xb6, 0xab, 0x05, 0x8b, 0xfd, 0xa1,
	0x37, 0x0a, 0x48, 0x1f, 0xc2, 0x92, 0x6a, 0xbd, 0x92, 0x8a, 0xc5, 0x47, 0x43, 0x6f, 0x14, 0x25,
	0x6f, 0xe0, 0xa9, 0x93, 0x2b, 0xcb, 0x7c, 0xfb, 0x1f, 0xdc, 0xff, 0xf4, 0x20, 0x6e, 0xec, 0x3f,
	0x14, 0x39, 0x80, 0x6e, 0x8d, 0x9c, 0x6c, 0x14, 0x62, 0xdc, 0x1a, 0xfa, 0xa3, 0x13, 0x42, 0x00,
	0xea, 0xe2, 0x8a, 0x72, 0x13, 0xfb, 0xae, 0xf6, 0x0c, 0x7a, 0x75, 0x6d, 0xc6, 0x35, 0x75, 0x77,
	0x8f, 0x6c, 0x3d, 0x99, 0x40, 0x64, 0x2d, 0x5c, 0x22, 0x65, 0xdb, 0x07, 0xb6, 0xf1, 0x1e, 0x8e,
	0x9b, 0x2e, 0xfe, 0x86, 0xd2, 0x05, 0xbf, 0xd0, 0x1b, 0x87, 0x88, 0x7e, 0x43, 0xfa, 0x0e, 0xf9,
	0x12, 0x3a, 0x53, 0x34, 0x0b, 0xf1, 0x49, 0xda, 0x14, 0xd6, 0x68, 0x2e, 0x64, 0x25, 0x8c, 0xe3,
	0x05, 0xb6, 0xe7, 0x54, 0x0a, 0xc3, 0x45, 0x85, 0x53, 0x34, 0x8e, 0x10, 0x26, 0xdb, 0x7a, 0xa7,
	0x56, 0x5c, 0x5c, 0xa5, 0x52, 0xe1, 0xed, 0x53, 0xc1, 0xd3, 0xec, 0x2d, 0x2d, 0xd0, 0x3d, 0x8d,
	0x0e, 0x22, 0xef, 0x43, 0x78, 0xd3, 0xbc, 0x70, 0xca, 0x3e, 0x39, 0x86, 0xa3, 0x54, 0x72, 0xe1,
	0x02, 0xf7, 0xc9, 0x29, 0x44, 0x29, 0x55, 0xec, 0x03, 0x37, 0x39, 0xc6, 0x81, 0x43, 0xf4, 0x21,
	0xe4, 0x7a, 0x4a, 0x45, 0x86, 0x2a, 0xee, 0x38, 0xe9, 0xef, 0x40, 0xac, 0xf4, 0x2b, 0xc1, 0x5e,
	0x4b, 0x63, 0x50, 0x6d, 0x9d, 0xf8, 0x5e, 0xca, 0xbb, 0x95, 0xda, 0x99, 0x69, 0xed, 0x49, 0x6b,
	0xbe, 0x59, 0x71, 0xe1, 0xc4, 0x43, 0xf2, 0x18, 0x3a, 0x5c, 0xbf, 0xbb, 0x11, 0xa8, 0x9c, 0x7e,
	0x68, 0xf5, 0xd7, 0x54, 0xe3, 0x47, 0x9a, 0x57, 0xb5, 0x7e, 0x70, 0xc7, 0x72, 0xdb, 0x9a, 0x4c,
	0x7e, 0xd4, 0x5b, 0x79, 0x85, 0x82, 0x5d, 0x54, 0x4a, 0xa1, 0x30, 0x97, 0xa8, 0xab, 0xdc, 0xdc,
	0x33, 0x88, 0x43, 0x63, 0x7f, 0xa4, 0x71, 0x47, 0xd2, 0x6e, 0x4d, 0xb0, 0x9b, 0x52, 0xe0, 0x0c,
	0x7c, 0xa9, 0x07, 0x60, 0x0d, 0xec, 0x87, 0x70, 0x4f, 0xf5, 0x31, 0x44, 0xbb, 0xc0, 0xdc, 0xfa,
	0x76, 0xcf, 0x9f, 0xef, 0x2e, 0x1e, 0x8e, 0x75, 0xda, 0x9a, 0xfb, 0xcb, 0x47, 0x4b, 0xef, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x7f, 0x09, 0x79, 0x85, 0x04, 0x00, 0x00,
}
