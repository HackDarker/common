// Code generated by protoc-gen-go.
// source: pez_base.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type PezEnumProtoId int32

const (
	PezEnumProtoId_PEZ_PID_HEARTBEAT             PezEnumProtoId = 0
	PezEnumProtoId_PEZ_PID_QUICK_CONN            PezEnumProtoId = 1
	PezEnumProtoId_PEZ_PID_QUICK_CONN_ACK        PezEnumProtoId = 2
	PezEnumProtoId_PEZ_PID_GAME_LOGIN            PezEnumProtoId = 3
	PezEnumProtoId_PEZ_PID_GAME_LOGIN_ACK        PezEnumProtoId = 4
	PezEnumProtoId_PEZ_PID_CREATEROOM            PezEnumProtoId = 5
	PezEnumProtoId_PEZ_PID_CREATEROOM_ACK        PezEnumProtoId = 6
	PezEnumProtoId_PEZ_PID_ENTER_ROOM            PezEnumProtoId = 7
	PezEnumProtoId_PEZ_PID_ENTER_ROOM_ACK        PezEnumProtoId = 8
	PezEnumProtoId_PEZ_PID_SEND_GAMEINFO         PezEnumProtoId = 9
	PezEnumProtoId_PEZ_PID_READY                 PezEnumProtoId = 10
	PezEnumProtoId_PEZ_PID_READY_ACK             PezEnumProtoId = 11
	PezEnumProtoId_PEZ_PID_OPENING               PezEnumProtoId = 12
	PezEnumProtoId_PEZ_PID_DEAL_CARDS            PezEnumProtoId = 13
	PezEnumProtoId_PEZ_PID_BET                   PezEnumProtoId = 14
	PezEnumProtoId_PEZ_PID_BET_ACK               PezEnumProtoId = 15
	PezEnumProtoId_PEZ_PID_CONTINUE_BET          PezEnumProtoId = 16
	PezEnumProtoId_PEZ_PID_CONTINUE_BET_ACK      PezEnumProtoId = 17
	PezEnumProtoId_PEZ_PID_ALLBET                PezEnumProtoId = 18
	PezEnumProtoId_PEZ_PID_OPENPAI               PezEnumProtoId = 19
	PezEnumProtoId_PEZ_PID_CURRENTRESULT         PezEnumProtoId = 20
	PezEnumProtoId_PEZ_PID_SENDENDLOTTERY        PezEnumProtoId = 21
	PezEnumProtoId_PEZ_PID_DISSOLVE_DESK         PezEnumProtoId = 22
	PezEnumProtoId_PEZ_PID_DISSOLVE_DESK_ACK     PezEnumProtoId = 23
	PezEnumProtoId_PEZ_PID_LEAVE_DESK            PezEnumProtoId = 24
	PezEnumProtoId_PEZ_PID_LEAVE_DESK_ACK        PezEnumProtoId = 25
	PezEnumProtoId_PEZ_PID_MESSAGE               PezEnumProtoId = 26
	PezEnumProtoId_PEZ_PID_SEND_MESSAGE          PezEnumProtoId = 27
	PezEnumProtoId_PEZ_PID_GAME_GAMERECORD       PezEnumProtoId = 28
	PezEnumProtoId_PEZ_PID_GAME_ACKGAMERECORD    PezEnumProtoId = 29
	PezEnumProtoId_PEZ_PID_GAME_NOTICE           PezEnumProtoId = 30
	PezEnumProtoId_PEZ_PID_GAME_ACKNOTICE        PezEnumProtoId = 31
	PezEnumProtoId_PEZ_PID_LOGOUT_REQ            PezEnumProtoId = 32
	PezEnumProtoId_PEZ_PID_LOGOUT_ACK            PezEnumProtoId = 33
	PezEnumProtoId_PEZ_PID_REG_REQ               PezEnumProtoId = 34
	PezEnumProtoId_PEZ_PID_REG_ACK               PezEnumProtoId = 35
	PezEnumProtoId_PEZ_PID_GAMESTATE_REQ         PezEnumProtoId = 36
	PezEnumProtoId_PEZ_PID_GAMESTATE_ACK         PezEnumProtoId = 37
	PezEnumProtoId_PEZ_PID_APPLYDISSOLVE_REQ     PezEnumProtoId = 38
	PezEnumProtoId_PEZ_PID_APPLYDISSOLVE_ACK     PezEnumProtoId = 39
	PezEnumProtoId_PEZ_PID_APPLYDISSOLVEBACK_REQ PezEnumProtoId = 40
	PezEnumProtoId_PEZ_PID_APPLYDISSOLVEBACK_ACK PezEnumProtoId = 41
	PezEnumProtoId_PEZ_PID_COMMONBCKICKOUT       PezEnumProtoId = 42
	PezEnumProtoId_PEZ_PID_COMMONBCUSERBREAK     PezEnumProtoId = 43
	PezEnumProtoId_PEZ_PID_COMMONREQRECONNECT    PezEnumProtoId = 44
	PezEnumProtoId_PEZ_PID_OFFLINE_REQ           PezEnumProtoId = 45
	PezEnumProtoId_PEZ_PID_RECONNECT_REQ         PezEnumProtoId = 46
	PezEnumProtoId_PEZ_PID_RECONNECT_ACK         PezEnumProtoId = 47
)

var PezEnumProtoId_name = map[int32]string{
	0:  "PEZ_PID_HEARTBEAT",
	1:  "PEZ_PID_QUICK_CONN",
	2:  "PEZ_PID_QUICK_CONN_ACK",
	3:  "PEZ_PID_GAME_LOGIN",
	4:  "PEZ_PID_GAME_LOGIN_ACK",
	5:  "PEZ_PID_CREATEROOM",
	6:  "PEZ_PID_CREATEROOM_ACK",
	7:  "PEZ_PID_ENTER_ROOM",
	8:  "PEZ_PID_ENTER_ROOM_ACK",
	9:  "PEZ_PID_SEND_GAMEINFO",
	10: "PEZ_PID_READY",
	11: "PEZ_PID_READY_ACK",
	12: "PEZ_PID_OPENING",
	13: "PEZ_PID_DEAL_CARDS",
	14: "PEZ_PID_BET",
	15: "PEZ_PID_BET_ACK",
	16: "PEZ_PID_CONTINUE_BET",
	17: "PEZ_PID_CONTINUE_BET_ACK",
	18: "PEZ_PID_ALLBET",
	19: "PEZ_PID_OPENPAI",
	20: "PEZ_PID_CURRENTRESULT",
	21: "PEZ_PID_SENDENDLOTTERY",
	22: "PEZ_PID_DISSOLVE_DESK",
	23: "PEZ_PID_DISSOLVE_DESK_ACK",
	24: "PEZ_PID_LEAVE_DESK",
	25: "PEZ_PID_LEAVE_DESK_ACK",
	26: "PEZ_PID_MESSAGE",
	27: "PEZ_PID_SEND_MESSAGE",
	28: "PEZ_PID_GAME_GAMERECORD",
	29: "PEZ_PID_GAME_ACKGAMERECORD",
	30: "PEZ_PID_GAME_NOTICE",
	31: "PEZ_PID_GAME_ACKNOTICE",
	32: "PEZ_PID_LOGOUT_REQ",
	33: "PEZ_PID_LOGOUT_ACK",
	34: "PEZ_PID_REG_REQ",
	35: "PEZ_PID_REG_ACK",
	36: "PEZ_PID_GAMESTATE_REQ",
	37: "PEZ_PID_GAMESTATE_ACK",
	38: "PEZ_PID_APPLYDISSOLVE_REQ",
	39: "PEZ_PID_APPLYDISSOLVE_ACK",
	40: "PEZ_PID_APPLYDISSOLVEBACK_REQ",
	41: "PEZ_PID_APPLYDISSOLVEBACK_ACK",
	42: "PEZ_PID_COMMONBCKICKOUT",
	43: "PEZ_PID_COMMONBCUSERBREAK",
	44: "PEZ_PID_COMMONREQRECONNECT",
	45: "PEZ_PID_OFFLINE_REQ",
	46: "PEZ_PID_RECONNECT_REQ",
	47: "PEZ_PID_RECONNECT_ACK",
}
var PezEnumProtoId_value = map[string]int32{
	"PEZ_PID_HEARTBEAT":             0,
	"PEZ_PID_QUICK_CONN":            1,
	"PEZ_PID_QUICK_CONN_ACK":        2,
	"PEZ_PID_GAME_LOGIN":            3,
	"PEZ_PID_GAME_LOGIN_ACK":        4,
	"PEZ_PID_CREATEROOM":            5,
	"PEZ_PID_CREATEROOM_ACK":        6,
	"PEZ_PID_ENTER_ROOM":            7,
	"PEZ_PID_ENTER_ROOM_ACK":        8,
	"PEZ_PID_SEND_GAMEINFO":         9,
	"PEZ_PID_READY":                 10,
	"PEZ_PID_READY_ACK":             11,
	"PEZ_PID_OPENING":               12,
	"PEZ_PID_DEAL_CARDS":            13,
	"PEZ_PID_BET":                   14,
	"PEZ_PID_BET_ACK":               15,
	"PEZ_PID_CONTINUE_BET":          16,
	"PEZ_PID_CONTINUE_BET_ACK":      17,
	"PEZ_PID_ALLBET":                18,
	"PEZ_PID_OPENPAI":               19,
	"PEZ_PID_CURRENTRESULT":         20,
	"PEZ_PID_SENDENDLOTTERY":        21,
	"PEZ_PID_DISSOLVE_DESK":         22,
	"PEZ_PID_DISSOLVE_DESK_ACK":     23,
	"PEZ_PID_LEAVE_DESK":            24,
	"PEZ_PID_LEAVE_DESK_ACK":        25,
	"PEZ_PID_MESSAGE":               26,
	"PEZ_PID_SEND_MESSAGE":          27,
	"PEZ_PID_GAME_GAMERECORD":       28,
	"PEZ_PID_GAME_ACKGAMERECORD":    29,
	"PEZ_PID_GAME_NOTICE":           30,
	"PEZ_PID_GAME_ACKNOTICE":        31,
	"PEZ_PID_LOGOUT_REQ":            32,
	"PEZ_PID_LOGOUT_ACK":            33,
	"PEZ_PID_REG_REQ":               34,
	"PEZ_PID_REG_ACK":               35,
	"PEZ_PID_GAMESTATE_REQ":         36,
	"PEZ_PID_GAMESTATE_ACK":         37,
	"PEZ_PID_APPLYDISSOLVE_REQ":     38,
	"PEZ_PID_APPLYDISSOLVE_ACK":     39,
	"PEZ_PID_APPLYDISSOLVEBACK_REQ": 40,
	"PEZ_PID_APPLYDISSOLVEBACK_ACK": 41,
	"PEZ_PID_COMMONBCKICKOUT":       42,
	"PEZ_PID_COMMONBCUSERBREAK":     43,
	"PEZ_PID_COMMONREQRECONNECT":    44,
	"PEZ_PID_OFFLINE_REQ":           45,
	"PEZ_PID_RECONNECT_REQ":         46,
	"PEZ_PID_RECONNECT_ACK":         47,
}

func (x PezEnumProtoId) Enum() *PezEnumProtoId {
	p := new(PezEnumProtoId)
	*p = x
	return p
}
func (x PezEnumProtoId) String() string {
	return proto.EnumName(PezEnumProtoId_name, int32(x))
}
func (x *PezEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnumProtoId_value, data, "PezEnumProtoId")
	if err != nil {
		return err
	}
	*x = PezEnumProtoId(value)
	return nil
}
func (PezEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{0} }

type PezEnum_ErrorCode int32

const (
	PezEnum_ErrorCode_PEZ_EC_SUCCESS PezEnum_ErrorCode = 0
	// -101   -200	游戏异常
	PezEnum_ErrorCode_PEZ_EC_CREATE_DESK_DIAMOND_NOTENOUGH PezEnum_ErrorCode = -101
	PezEnum_ErrorCode_PEZ_EC_CREATE_DESK_USER_NOTFOUND     PezEnum_ErrorCode = -102
	PezEnum_ErrorCode_PEZ_EC_INTO_DESK_NOTFOUND            PezEnum_ErrorCode = -103
	PezEnum_ErrorCode_PEZ_EC_GAME_READY_REPEAT             PezEnum_ErrorCode = -110
)

var PezEnum_ErrorCode_name = map[int32]string{
	0:    "PEZ_EC_SUCCESS",
	-101: "PEZ_EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "PEZ_EC_CREATE_DESK_USER_NOTFOUND",
	-103: "PEZ_EC_INTO_DESK_NOTFOUND",
	-110: "PEZ_EC_GAME_READY_REPEAT",
}
var PezEnum_ErrorCode_value = map[string]int32{
	"PEZ_EC_SUCCESS":                       0,
	"PEZ_EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"PEZ_EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"PEZ_EC_INTO_DESK_NOTFOUND":            -103,
	"PEZ_EC_GAME_READY_REPEAT":             -110,
}

func (x PezEnum_ErrorCode) Enum() *PezEnum_ErrorCode {
	p := new(PezEnum_ErrorCode)
	*p = x
	return p
}
func (x PezEnum_ErrorCode) String() string {
	return proto.EnumName(PezEnum_ErrorCode_name, int32(x))
}
func (x *PezEnum_ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnum_ErrorCode_value, data, "PezEnum_ErrorCode")
	if err != nil {
		return err
	}
	*x = PezEnum_ErrorCode(value)
	return nil
}
func (PezEnum_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{1} }

type PezEnum_Option int32

const (
	PezEnum_Option_LUN_BANK  PezEnum_Option = 1
	PezEnum_Option_DING_BANK PezEnum_Option = 2
	PezEnum_Option_TONG_BI   PezEnum_Option = 3
)

var PezEnum_Option_name = map[int32]string{
	1: "LUN_BANK",
	2: "DING_BANK",
	3: "TONG_BI",
}
var PezEnum_Option_value = map[string]int32{
	"LUN_BANK":  1,
	"DING_BANK": 2,
	"TONG_BI":   3,
}

func (x PezEnum_Option) Enum() *PezEnum_Option {
	p := new(PezEnum_Option)
	*p = x
	return p
}
func (x PezEnum_Option) String() string {
	return proto.EnumName(PezEnum_Option_name, int32(x))
}
func (x *PezEnum_Option) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnum_Option_value, data, "PezEnum_Option")
	if err != nil {
		return err
	}
	*x = PezEnum_Option(value)
	return nil
}
func (PezEnum_Option) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{2} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type Pez_RoomType int32

const (
	Pez_RoomType_roomType_pingerzhang Pez_RoomType = 0
)

var Pez_RoomType_name = map[int32]string{
	0: "roomType_pingerzhang",
}
var Pez_RoomType_value = map[string]int32{
	"roomType_pingerzhang": 0,
}

func (x Pez_RoomType) Enum() *Pez_RoomType {
	p := new(Pez_RoomType)
	*p = x
	return p
}
func (x Pez_RoomType) String() string {
	return proto.EnumName(Pez_RoomType_name, int32(x))
}
func (x *Pez_RoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Pez_RoomType_value, data, "Pez_RoomType")
	if err != nil {
		return err
	}
	*x = Pez_RoomType(value)
	return nil
}
func (Pez_RoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{3} }

// 麻将花色
type PezEnumMjColor int32

const (
	PezEnumMjColor_PEZ_TIAO PezEnumMjColor = 1
	PezEnumMjColor_PEZ_TONG PezEnumMjColor = 2
)

var PezEnumMjColor_name = map[int32]string{
	1: "PEZ_TIAO",
	2: "PEZ_TONG",
}
var PezEnumMjColor_value = map[string]int32{
	"PEZ_TIAO": 1,
	"PEZ_TONG": 2,
}

func (x PezEnumMjColor) Enum() *PezEnumMjColor {
	p := new(PezEnumMjColor)
	*p = x
	return p
}
func (x PezEnumMjColor) String() string {
	return proto.EnumName(PezEnumMjColor_name, int32(x))
}
func (x *PezEnumMjColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnumMjColor_value, data, "PezEnumMjColor")
	if err != nil {
		return err
	}
	*x = PezEnumMjColor(value)
	return nil
}
func (PezEnumMjColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{4} }

type PezEnum_PaiType int32

const (
	PezEnum_PaiType_PEZ_LAIZI PezEnum_PaiType = 0
	PezEnum_PaiType_PEZ_DUIZI PezEnum_PaiType = 1
	PezEnum_PaiType_PEZ_DUIJI PezEnum_PaiType = 2
)

var PezEnum_PaiType_name = map[int32]string{
	0: "PEZ_LAIZI",
	1: "PEZ_DUIZI",
	2: "PEZ_DUIJI",
}
var PezEnum_PaiType_value = map[string]int32{
	"PEZ_LAIZI": 0,
	"PEZ_DUIZI": 1,
	"PEZ_DUIJI": 2,
}

func (x PezEnum_PaiType) Enum() *PezEnum_PaiType {
	p := new(PezEnum_PaiType)
	*p = x
	return p
}
func (x PezEnum_PaiType) String() string {
	return proto.EnumName(PezEnum_PaiType_name, int32(x))
}
func (x *PezEnum_PaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnum_PaiType_value, data, "PezEnum_PaiType")
	if err != nil {
		return err
	}
	*x = PezEnum_PaiType(value)
	return nil
}
func (PezEnum_PaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{5} }

type PezEnum_UserGameStatus int32

const (
	PezEnum_UserGameStatus_PEZ_U_INIT    PezEnum_UserGameStatus = 0
	PezEnum_UserGameStatus_PEZ_U_READY   PezEnum_UserGameStatus = 1
	PezEnum_UserGameStatus_PEZ_U_BET     PezEnum_UserGameStatus = 2
	PezEnum_UserGameStatus_PEZ_U_PLAYING PezEnum_UserGameStatus = 3
	PezEnum_UserGameStatus_PEZ_U_FINISH  PezEnum_UserGameStatus = 4
)

var PezEnum_UserGameStatus_name = map[int32]string{
	0: "PEZ_U_INIT",
	1: "PEZ_U_READY",
	2: "PEZ_U_BET",
	3: "PEZ_U_PLAYING",
	4: "PEZ_U_FINISH",
}
var PezEnum_UserGameStatus_value = map[string]int32{
	"PEZ_U_INIT":    0,
	"PEZ_U_READY":   1,
	"PEZ_U_BET":     2,
	"PEZ_U_PLAYING": 3,
	"PEZ_U_FINISH":  4,
}

func (x PezEnum_UserGameStatus) Enum() *PezEnum_UserGameStatus {
	p := new(PezEnum_UserGameStatus)
	*p = x
	return p
}
func (x PezEnum_UserGameStatus) String() string {
	return proto.EnumName(PezEnum_UserGameStatus_name, int32(x))
}
func (x *PezEnum_UserGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnum_UserGameStatus_value, data, "PezEnum_UserGameStatus")
	if err != nil {
		return err
	}
	*x = PezEnum_UserGameStatus(value)
	return nil
}
func (PezEnum_UserGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{6} }

type PezEnum_DeskGameStatus int32

const (
	PezEnum_DeskGameStatus_PEZ_INIT    PezEnum_DeskGameStatus = 0
	PezEnum_DeskGameStatus_PEZ_FAPAI   PezEnum_DeskGameStatus = 1
	PezEnum_DeskGameStatus_PEZ_BET     PezEnum_DeskGameStatus = 2
	PezEnum_DeskGameStatus_PEZ_OPENPAI PezEnum_DeskGameStatus = 3
	PezEnum_DeskGameStatus_PEZ_PLAYING PezEnum_DeskGameStatus = 4
	PezEnum_DeskGameStatus_PEZ_FINISH  PezEnum_DeskGameStatus = 5
)

var PezEnum_DeskGameStatus_name = map[int32]string{
	0: "PEZ_INIT",
	1: "PEZ_FAPAI",
	2: "PEZ_BET",
	3: "PEZ_OPENPAI",
	4: "PEZ_PLAYING",
	5: "PEZ_FINISH",
}
var PezEnum_DeskGameStatus_value = map[string]int32{
	"PEZ_INIT":    0,
	"PEZ_FAPAI":   1,
	"PEZ_BET":     2,
	"PEZ_OPENPAI": 3,
	"PEZ_PLAYING": 4,
	"PEZ_FINISH":  5,
}

func (x PezEnum_DeskGameStatus) Enum() *PezEnum_DeskGameStatus {
	p := new(PezEnum_DeskGameStatus)
	*p = x
	return p
}
func (x PezEnum_DeskGameStatus) String() string {
	return proto.EnumName(PezEnum_DeskGameStatus_name, int32(x))
}
func (x *PezEnum_DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PezEnum_DeskGameStatus_value, data, "PezEnum_DeskGameStatus")
	if err != nil {
		return err
	}
	*x = PezEnum_DeskGameStatus(value)
	return nil
}
func (PezEnum_DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{7} }

// 麻将牌
type PezBase_PaiInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PezBase_PaiInfo) Reset()                    { *m = PezBase_PaiInfo{} }
func (m *PezBase_PaiInfo) String() string            { return proto.CompactTextString(m) }
func (*PezBase_PaiInfo) ProtoMessage()               {}
func (*PezBase_PaiInfo) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{0} }

func (m *PezBase_PaiInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PezBase_PaiInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *PezBase_PaiInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 玩法
type PezBase_PlayOptions struct {
	BankRadio        *int32 `protobuf:"varint,1,opt,name=bankRadio" json:"bankRadio,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PezBase_PlayOptions) Reset()                    { *m = PezBase_PlayOptions{} }
func (m *PezBase_PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PezBase_PlayOptions) ProtoMessage()               {}
func (*PezBase_PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{1} }

func (m *PezBase_PlayOptions) GetBankRadio() int32 {
	if m != nil && m.BankRadio != nil {
		return *m.BankRadio
	}
	return 0
}

// 拼二张的配置
type PezBase_PlayConf struct {
	PlayerCount      *int32 `protobuf:"varint,1,opt,name=playerCount" json:"playerCount,omitempty"`
	IgnoreBank       *bool  `protobuf:"varint,2,opt,name=ignoreBank" json:"ignoreBank,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PezBase_PlayConf) Reset()                    { *m = PezBase_PlayConf{} }
func (m *PezBase_PlayConf) String() string            { return proto.CompactTextString(m) }
func (*PezBase_PlayConf) ProtoMessage()               {}
func (*PezBase_PlayConf) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{2} }

func (m *PezBase_PlayConf) GetPlayerCount() int32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *PezBase_PlayConf) GetIgnoreBank() bool {
	if m != nil && m.IgnoreBank != nil {
		return *m.IgnoreBank
	}
	return false
}

type PezBase_RoomTypeInfo struct {
	BoardsCout       *int32               `protobuf:"varint,1,opt,name=boardsCout" json:"boardsCout,omitempty"`
	PlayOptions      *PezBase_PlayOptions `protobuf:"bytes,2,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum         *int32               `protobuf:"varint,3,opt,name=cardsNum" json:"cardsNum,omitempty"`
	BaseValue        *int64               `protobuf:"varint,4,opt,name=baseValue" json:"baseValue,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *PezBase_RoomTypeInfo) Reset()                    { *m = PezBase_RoomTypeInfo{} }
func (m *PezBase_RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*PezBase_RoomTypeInfo) ProtoMessage()               {}
func (*PezBase_RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{3} }

func (m *PezBase_RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *PezBase_RoomTypeInfo) GetPlayOptions() *PezBase_PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *PezBase_RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *PezBase_RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

type PezBase_PaiValue struct {
	Value            *int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PezBase_PaiValue) Reset()                    { *m = PezBase_PaiValue{} }
func (m *PezBase_PaiValue) String() string            { return proto.CompactTextString(m) }
func (*PezBase_PaiValue) ProtoMessage()               {}
func (*PezBase_PaiValue) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{4} }

func (m *PezBase_PaiValue) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 手里的牌
type PezBase_PlayerCard struct {
	HandCard         []*PezBase_PaiInfo `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	UserId           *uint32            `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	HandCardCount    *int32             `protobuf:"varint,3,opt,name=handCardCount" json:"handCardCount,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PezBase_PlayerCard) Reset()                    { *m = PezBase_PlayerCard{} }
func (m *PezBase_PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PezBase_PlayerCard) ProtoMessage()               {}
func (*PezBase_PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{5} }

func (m *PezBase_PlayerCard) GetHandCard() []*PezBase_PaiInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PezBase_PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PezBase_PlayerCard) GetHandCardCount() int32 {
	if m != nil && m.HandCardCount != nil {
		return *m.HandCardCount
	}
	return 0
}

type PezBase_PlayerInfo struct {
	IsBanker         *bool               `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PezBase_PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64              `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	BetNum           *int32              `protobuf:"varint,4,opt,name=betNum" json:"betNum,omitempty"`
	NickName         *string             `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32              `protobuf:"varint,6,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32             `protobuf:"varint,7,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool               `protobuf:"varint,8,opt,name=isOwner" json:"isOwner,omitempty"`
	IsReady          *int32              `protobuf:"varint,9,opt,name=isReady" json:"isReady,omitempty"`
	IsBet            *int32              `protobuf:"varint,10,opt,name=isBet" json:"isBet,omitempty"`
	WxInfo           *WeixinInfo         `protobuf:"bytes,11,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32              `protobuf:"varint,12,opt,name=GameStatus" json:"GameStatus,omitempty"`
	Ip               *string             `protobuf:"bytes,13,opt,name=ip" json:"ip,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *PezBase_PlayerInfo) Reset()                    { *m = PezBase_PlayerInfo{} }
func (m *PezBase_PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PezBase_PlayerInfo) ProtoMessage()               {}
func (*PezBase_PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{6} }

func (m *PezBase_PlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *PezBase_PlayerInfo) GetPlayerCard() *PezBase_PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *PezBase_PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetBetNum() int32 {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PezBase_PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PezBase_PlayerInfo) GetIsReady() int32 {
	if m != nil && m.IsReady != nil {
		return *m.IsReady
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetIsBet() int32 {
	if m != nil && m.IsBet != nil {
		return *m.IsBet
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PezBase_PlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *PezBase_PlayerInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

type PezBase_DeskGameInfo struct {
	GameStatus       *int32                `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *PezBase_RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32                `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActionTime       *int32                `protobuf:"varint,4,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32                `protobuf:"varint,5,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32                `protobuf:"varint,6,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32                `protobuf:"varint,7,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64                `protobuf:"varint,8,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32                `protobuf:"varint,9,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32                `protobuf:"varint,10,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string               `protobuf:"bytes,11,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32                `protobuf:"varint,12,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32               `protobuf:"varint,13,opt,name=banker" json:"banker,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PezBase_DeskGameInfo) Reset()                    { *m = PezBase_DeskGameInfo{} }
func (m *PezBase_DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*PezBase_DeskGameInfo) ProtoMessage()               {}
func (*PezBase_DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{7} }

func (m *PezBase_DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetRoomTypeInfo() *PezBase_RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *PezBase_DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *PezBase_DeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *PezBase_DeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func init() {
	proto.RegisterType((*PezBase_PaiInfo)(nil), "ddproto.pez_base_PaiInfo")
	proto.RegisterType((*PezBase_PlayOptions)(nil), "ddproto.pez_base_PlayOptions")
	proto.RegisterType((*PezBase_PlayConf)(nil), "ddproto.pez_base_PlayConf")
	proto.RegisterType((*PezBase_RoomTypeInfo)(nil), "ddproto.pez_base_RoomTypeInfo")
	proto.RegisterType((*PezBase_PaiValue)(nil), "ddproto.pez_base_PaiValue")
	proto.RegisterType((*PezBase_PlayerCard)(nil), "ddproto.pez_base_PlayerCard")
	proto.RegisterType((*PezBase_PlayerInfo)(nil), "ddproto.pez_base_PlayerInfo")
	proto.RegisterType((*PezBase_DeskGameInfo)(nil), "ddproto.pez_base_DeskGameInfo")
	proto.RegisterEnum("ddproto.PezEnumProtoId", PezEnumProtoId_name, PezEnumProtoId_value)
	proto.RegisterEnum("ddproto.PezEnum_ErrorCode", PezEnum_ErrorCode_name, PezEnum_ErrorCode_value)
	proto.RegisterEnum("ddproto.PezEnum_Option", PezEnum_Option_name, PezEnum_Option_value)
	proto.RegisterEnum("ddproto.Pez_RoomType", Pez_RoomType_name, Pez_RoomType_value)
	proto.RegisterEnum("ddproto.PezEnumMjColor", PezEnumMjColor_name, PezEnumMjColor_value)
	proto.RegisterEnum("ddproto.PezEnum_PaiType", PezEnum_PaiType_name, PezEnum_PaiType_value)
	proto.RegisterEnum("ddproto.PezEnum_UserGameStatus", PezEnum_UserGameStatus_name, PezEnum_UserGameStatus_value)
	proto.RegisterEnum("ddproto.PezEnum_DeskGameStatus", PezEnum_DeskGameStatus_name, PezEnum_DeskGameStatus_value)
}

var fileDescriptor34 = []byte{
	// 1498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0xec, 0xfc, 0xd8, 0x9b, 0x38, 0xd9, 0x6c, 0xfe, 0x94, 0x34, 0x09, 0xa9, 0x69, 0x4b,
	0xea, 0xd2, 0x30, 0x74, 0xe0, 0x0a, 0x66, 0x3a, 0xb2, 0xb4, 0x71, 0x85, 0x95, 0x95, 0xbb, 0x92,
	0xca, 0xa4, 0x37, 0x1a, 0x25, 0x56, 0x5b, 0x91, 0x58, 0xf2, 0xc8, 0x36, 0x6d, 0xfa, 0x04, 0x0c,
	0x97, 0xdc, 0x01, 0x6f, 0xc1, 0xdb, 0xf0, 0x20, 0x0c, 0x97, 0x30, 0xbb, 0xab, 0x9f, 0x75, 0x62,
	0xf0, 0x85, 0x47, 0xe7, 0x3b, 0xe7, 0x3b, 0x7b, 0xfe, 0xf6, 0x48, 0x60, 0x75, 0x18, 0x7e, 0xf4,
	0x2f, 0x82, 0x51, 0x78, 0x32, 0x4c, 0x93, 0x71, 0x82, 0x96, 0xfa, 0x7d, 0xfe, 0xb0, 0xb7, 0x71,
	0x99, 0x0c, 0x06, 0x49, 0xec, 0x5f, 0x5e, 0x47, 0x61, 0x3c, 0x16, 0xda, 0xa6, 0x05, 0x60, 0x6e,
	0xef, 0xf7, 0x82, 0xc8, 0x8c, 0xdf, 0x24, 0x08, 0x81, 0xf9, 0xf1, 0xcd, 0x30, 0x54, 0x95, 0x23,
	0xe5, 0x78, 0x81, 0xf2, 0x67, 0xb4, 0x09, 0x16, 0x7e, 0x0c, 0xae, 0x27, 0xa1, 0x5a, 0xe1, 0xa0,
	0x10, 0xd0, 0x2a, 0xa8, 0x44, 0x7d, 0xb5, 0xca, 0xa1, 0x4a, 0xd4, 0x6f, 0x7e, 0x05, 0x36, 0x4b,
	0x6f, 0xd7, 0xc1, 0x8d, 0x3d, 0x1c, 0x47, 0x49, 0x3c, 0x42, 0xfb, 0xa0, 0x7e, 0x11, 0xc4, 0x57,
	0x34, 0xe8, 0x47, 0x49, 0xe6, 0xb6, 0x04, 0x9a, 0x1e, 0x58, 0x9f, 0x62, 0xe9, 0x49, 0xfc, 0x06,
	0x1d, 0x81, 0xe5, 0xe1, 0x75, 0x70, 0x13, 0xa6, 0x7a, 0x32, 0x89, 0xc7, 0x19, 0x49, 0x86, 0xd0,
	0x21, 0x00, 0xd1, 0xdb, 0x38, 0x49, 0xc3, 0x76, 0x10, 0x5f, 0xf1, 0xb8, 0x6a, 0x54, 0x42, 0x9a,
	0x7f, 0x28, 0x60, 0xab, 0xf0, 0x4b, 0x93, 0x64, 0xe0, 0xde, 0x0c, 0x43, 0x9e, 0xe0, 0x21, 0x00,
	0x17, 0x49, 0x90, 0xf6, 0x47, 0x7a, 0x32, 0xc9, 0x5d, 0x4b, 0x08, 0x7a, 0x2e, 0xce, 0xce, 0xa2,
	0xe7, 0xae, 0x97, 0x9f, 0x1d, 0x9c, 0x64, 0x85, 0x3c, 0x99, 0x95, 0x22, 0x95, 0x19, 0x68, 0x0f,
	0xd4, 0x2e, 0x99, 0x37, 0x32, 0x19, 0x64, 0xd5, 0x29, 0x64, 0x51, 0x8b, 0x51, 0xf8, 0x8a, 0x57,
	0x73, 0xfe, 0x48, 0x39, 0xae, 0xd2, 0x12, 0x68, 0x3e, 0x96, 0x6b, 0x11, 0x44, 0x1c, 0x2c, 0x8b,
	0xaf, 0x48, 0xc5, 0x6f, 0xfe, 0xac, 0x80, 0x8d, 0xa9, 0x50, 0xc2, 0x54, 0x0f, 0xd2, 0x3e, 0xfa,
	0x1a, 0xd4, 0xde, 0x05, 0x71, 0x9f, 0x3d, 0xab, 0xca, 0x51, 0xf5, 0x78, 0xf9, 0xd9, 0xee, 0x8c,
	0xd0, 0x45, 0xaf, 0x69, 0x61, 0x8a, 0xb6, 0xc1, 0xa2, 0x37, 0x0a, 0x53, 0xb3, 0xcf, 0xf3, 0x6d,
	0xd0, 0x4c, 0x42, 0x0f, 0x40, 0x23, 0xb7, 0x11, 0xad, 0x10, 0x09, 0x4d, 0x83, 0xcd, 0x9f, 0xaa,
	0x77, 0x82, 0xe1, 0xa5, 0xde, 0x03, 0xb5, 0x68, 0xc4, 0xda, 0x11, 0xa6, 0x3c, 0xfa, 0x1a, 0x2d,
	0x64, 0xf4, 0x2d, 0x00, 0xc3, 0x22, 0xec, 0xac, 0xca, 0xfb, 0xb3, 0xab, 0x2c, 0x6c, 0xa8, 0x64,
	0xcf, 0xa6, 0xf4, 0x32, 0x89, 0x62, 0x1e, 0x4e, 0x95, 0xf2, 0x67, 0x96, 0xc3, 0x45, 0x38, 0x66,
	0x55, 0x9f, 0xe7, 0x41, 0x66, 0x12, 0x8b, 0x22, 0x8e, 0x2e, 0xaf, 0x48, 0x30, 0x08, 0xd5, 0x85,
	0x23, 0xe5, 0xb8, 0x4e, 0x0b, 0x19, 0x41, 0x50, 0x1d, 0x85, 0x1f, 0xd4, 0x45, 0x4e, 0x60, 0x8f,
	0xcc, 0xcb, 0x44, 0x54, 0x62, 0x49, 0x54, 0x42, 0x48, 0x48, 0x05, 0x4b, 0xd1, 0xc8, 0x7e, 0x1f,
	0x87, 0xa9, 0x5a, 0xe3, 0xa9, 0xe4, 0xa2, 0xd0, 0xd0, 0x30, 0xe8, 0xdf, 0xa8, 0x75, 0xee, 0x27,
	0x17, 0x59, 0xeb, 0xa2, 0x51, 0x3b, 0x1c, 0xab, 0x40, 0xb4, 0x8e, 0x0b, 0xe8, 0x09, 0x58, 0x7c,
	0xff, 0x81, 0xd5, 0x47, 0x5d, 0xe6, 0x59, 0x6f, 0x14, 0x59, 0x7f, 0x1f, 0x46, 0x1f, 0xa2, 0x98,
	0xb7, 0x26, 0x33, 0x61, 0xd3, 0xda, 0x09, 0x06, 0xa1, 0x33, 0x0e, 0xc6, 0x93, 0x91, 0xba, 0x22,
	0xa6, 0xb5, 0x44, 0xf8, 0x25, 0x1c, 0xaa, 0x0d, 0x9e, 0x56, 0x25, 0x1a, 0x36, 0xff, 0xaa, 0x4a,
	0x73, 0x6f, 0x84, 0xa3, 0x2b, 0x66, 0x3b, 0xc3, 0x93, 0x72, 0xc7, 0x53, 0x1b, 0xac, 0xa4, 0xd2,
	0x3d, 0xc9, 0x5a, 0x72, 0x78, 0xb7, 0x25, 0xf2, 0x6d, 0xa2, 0x53, 0x1c, 0x36, 0xde, 0xa2, 0x49,
	0xe5, 0xec, 0x97, 0x00, 0x8b, 0x20, 0xb8, 0x64, 0x77, 0xc4, 0x8d, 0x06, 0x61, 0xd6, 0x24, 0x09,
	0x61, 0xec, 0x7e, 0x78, 0x1d, 0xdc, 0x70, 0xf5, 0x82, 0x60, 0x17, 0x00, 0x3a, 0x06, 0x6b, 0xb1,
	0x19, 0x47, 0x63, 0xad, 0x74, 0x21, 0xda, 0x76, 0x1b, 0x46, 0x8f, 0xc0, 0x2a, 0x87, 0x8c, 0xc2,
	0xd9, 0x12, 0x37, 0xbc, 0x85, 0xa2, 0x26, 0x58, 0x89, 0xe2, 0x68, 0xcc, 0xf2, 0xd1, 0xd9, 0x30,
	0xd5, 0xf8, 0x30, 0x4d, 0x61, 0xec, 0x02, 0x5c, 0x4e, 0xd2, 0x54, 0x6c, 0x26, 0x76, 0x01, 0x44,
	0x8b, 0xa7, 0x41, 0x76, 0xe2, 0x38, 0x19, 0x07, 0xd7, 0xa5, 0x99, 0xe8, 0xf8, 0x2d, 0x94, 0x55,
	0x80, 0xd5, 0x8b, 0x4c, 0x06, 0x17, 0x61, 0xca, 0xdb, 0x5f, 0xa7, 0x12, 0xc2, 0xf6, 0x5e, 0x1a,
	0x0e, 0x82, 0x28, 0x66, 0x43, 0x9e, 0xb7, 0x5b, 0x86, 0xf8, 0x90, 0x8b, 0x0b, 0xd5, 0x10, 0xe3,
	0x29, 0xa4, 0xd6, 0xdf, 0x75, 0xb1, 0xcb, 0xc3, 0x78, 0x32, 0xf0, 0x79, 0xc3, 0xcc, 0x3e, 0xda,
	0x02, 0xeb, 0x3d, 0xfc, 0xda, 0xef, 0x99, 0x86, 0xff, 0x02, 0x6b, 0xd4, 0x6d, 0x63, 0xcd, 0x85,
	0x73, 0x68, 0x1b, 0xa0, 0x1c, 0x7e, 0xe9, 0x99, 0x7a, 0xd7, 0xd7, 0x6d, 0x42, 0xa0, 0x82, 0xf6,
	0xc0, 0xf6, 0x5d, 0xdc, 0xd7, 0xf4, 0x2e, 0xac, 0xc8, 0x9c, 0x8e, 0x76, 0x86, 0x7d, 0xcb, 0xee,
	0x98, 0x04, 0x56, 0x65, 0x4e, 0x89, 0x73, 0xce, 0xbc, 0xcc, 0xd1, 0x29, 0xd6, 0x5c, 0x4c, 0x6d,
	0xfb, 0x0c, 0x2e, 0xc8, 0x9c, 0x12, 0xe7, 0x9c, 0x45, 0x99, 0x83, 0x89, 0x8b, 0xa9, 0xcf, 0x39,
	0x4b, 0x32, 0xa7, 0xc4, 0x39, 0xa7, 0x86, 0x76, 0xc1, 0x56, 0xae, 0x73, 0x30, 0x11, 0x81, 0x98,
	0xe4, 0xd4, 0x86, 0x75, 0xb4, 0x0e, 0x1a, 0xb9, 0x8a, 0x62, 0xcd, 0x38, 0x87, 0x40, 0x2e, 0x0a,
	0x87, 0xb8, 0x93, 0x65, 0xb4, 0x01, 0xd6, 0x72, 0xd8, 0xee, 0x61, 0x62, 0x92, 0x0e, 0x5c, 0x91,
	0xa3, 0x31, 0xb0, 0x66, 0xf9, 0xba, 0x46, 0x0d, 0x07, 0x36, 0xd0, 0x1a, 0x58, 0xce, 0xf1, 0x36,
	0x76, 0xe1, 0xaa, 0xcc, 0x6e, 0x63, 0x97, 0xbb, 0x5c, 0x43, 0x2a, 0xd8, 0x2c, 0xf2, 0xb4, 0x89,
	0x6b, 0x12, 0x0f, 0x73, 0x73, 0x88, 0xf6, 0x81, 0x3a, 0x4b, 0xc3, 0x79, 0xeb, 0x08, 0x81, 0xd5,
	0x5c, 0xab, 0x59, 0x16, 0x63, 0xa0, 0xdb, 0xe1, 0xf5, 0x34, 0x13, 0x6e, 0xc8, 0x89, 0xeb, 0x1e,
	0xa5, 0x98, 0xb8, 0x14, 0x3b, 0x9e, 0xe5, 0xc2, 0x4d, 0xb9, 0x5e, 0xac, 0x26, 0x98, 0x18, 0x96,
	0xed, 0xba, 0x98, 0x9e, 0xc3, 0x2d, 0x99, 0x66, 0x98, 0x8e, 0x63, 0x5b, 0xaf, 0xb0, 0x6f, 0x60,
	0xa7, 0x0b, 0xb7, 0xd1, 0x01, 0xd8, 0x9d, 0xa9, 0xe2, 0x91, 0xed, 0xc8, 0xf5, 0xb0, 0xb0, 0x96,
	0xd3, 0x54, 0xf9, 0xb4, 0x12, 0xe7, 0x9c, 0x5d, 0x39, 0xf2, 0x33, 0xec, 0x38, 0x5a, 0x07, 0xc3,
	0x3d, 0xb9, 0x34, 0xbc, 0x65, 0xb9, 0xe6, 0x1e, 0xba, 0x07, 0x76, 0xa6, 0x06, 0x8a, 0xfd, 0x51,
	0xac, 0xdb, 0xd4, 0x80, 0xfb, 0xe8, 0x10, 0xec, 0x4d, 0x29, 0x35, 0xbd, 0x2b, 0xe9, 0x0f, 0xd0,
	0x0e, 0xd8, 0x98, 0xd2, 0x13, 0xdb, 0x35, 0x75, 0x0c, 0x0f, 0xef, 0x8c, 0xa9, 0xa6, 0x77, 0x33,
	0xdd, 0x27, 0x53, 0x49, 0xd9, 0x1d, 0xdb, 0x73, 0x7d, 0x8a, 0x5f, 0xc2, 0xa3, 0x19, 0x38, 0x4b,
	0xe8, 0xbe, 0x9c, 0x10, 0xc5, 0x1d, 0x6e, 0xdc, 0xbc, 0x0d, 0x32, 0xcb, 0x4f, 0xe5, 0x42, 0xb3,
	0x53, 0x1d, 0x57, 0x73, 0x31, 0xb7, 0x7f, 0x30, 0x5b, 0xc5, 0x58, 0x0f, 0xe5, 0x1e, 0x68, 0xbd,
	0x9e, 0x75, 0x5e, 0x34, 0x82, 0x31, 0x1f, 0xfd, 0xb7, 0x9a, 0xb1, 0x3f, 0x43, 0xf7, 0xc1, 0xc1,
	0x4c, 0x75, 0x5b, 0xd3, 0xbb, 0xdc, 0xc3, 0xf1, 0xff, 0x9b, 0x30, 0x2f, 0x8f, 0xe5, 0x2e, 0xe8,
	0xf6, 0xd9, 0x99, 0x4d, 0xda, 0x7a, 0xd7, 0xd4, 0xbb, 0xb6, 0xe7, 0xc2, 0x96, 0x1c, 0x41, 0xae,
	0xf4, 0x1c, 0x4c, 0xdb, 0x14, 0x6b, 0x5d, 0xf8, 0x44, 0x6e, 0x92, 0x50, 0x53, 0xfc, 0x92, 0x75,
	0x88, 0x10, 0xac, 0xbb, 0xf0, 0x73, 0xb9, 0x49, 0xf6, 0xe9, 0xa9, 0x65, 0x12, 0x91, 0xd9, 0x53,
	0xb9, 0x26, 0x85, 0x3d, 0x57, 0x9d, 0xcc, 0x56, 0xb1, 0x50, 0xbf, 0x68, 0xfd, 0xa9, 0x00, 0x54,
	0x6c, 0x3e, 0x9c, 0xa6, 0x49, 0xaa, 0x27, 0xfd, 0x30, 0xbf, 0x44, 0x58, 0xf7, 0x1d, 0x4f, 0xd7,
	0xb1, 0xe3, 0xc0, 0x39, 0xf4, 0x25, 0x78, 0x90, 0x61, 0x62, 0xef, 0x88, 0x31, 0x35, 0x4c, 0xed,
	0xcc, 0x26, 0x06, 0x1b, 0x16, 0x4c, 0x6c, 0xaf, 0xf3, 0x02, 0xfe, 0xfe, 0x4f, 0xf6, 0x53, 0xd0,
	0x53, 0x70, 0x34, 0x83, 0xc2, 0xd2, 0x65, 0xf6, 0xa7, 0xb6, 0x47, 0x0c, 0xf8, 0x5b, 0x69, 0xfe,
	0x48, 0x94, 0x06, 0xeb, 0xbe, 0x49, 0x5c, 0x5b, 0x18, 0x17, 0x76, 0xbf, 0x96, 0x76, 0x0f, 0xc5,
	0x02, 0xc0, 0xba, 0x18, 0x47, 0xb1, 0x88, 0x28, 0xee, 0xb1, 0x05, 0xfd, 0x4b, 0x61, 0xd6, 0xfa,
	0x06, 0xac, 0x15, 0xa9, 0x89, 0xcf, 0x4b, 0xb4, 0x02, 0x6a, 0x96, 0x47, 0xfc, 0xb6, 0x46, 0xba,
	0x50, 0x41, 0x0d, 0x50, 0x37, 0x4c, 0xd2, 0x11, 0x62, 0x05, 0x2d, 0x83, 0x25, 0xd7, 0x66, 0xa2,
	0x09, 0xab, 0xad, 0x63, 0xb0, 0xc2, 0xc8, 0xf9, 0xeb, 0x9a, 0xdd, 0xb9, 0xfc, 0x65, 0xed, 0x0f,
	0xa3, 0xf8, 0x6d, 0x98, 0x7e, 0x7c, 0x17, 0xc4, 0x6f, 0xe1, 0x5c, 0xeb, 0x44, 0x7a, 0x77, 0x0c,
	0x7e, 0xd0, 0x93, 0xeb, 0x24, 0x65, 0xe7, 0xb0, 0x08, 0x5d, 0x53, 0xb3, 0xa1, 0x52, 0x48, 0x36,
	0xe9, 0xc0, 0x4a, 0xeb, 0xb9, 0x64, 0xdf, 0x0b, 0x22, 0xee, 0xbd, 0x01, 0xea, 0xcc, 0xc2, 0xd2,
	0xcc, 0xd7, 0x26, 0x9c, 0xcb, 0x45, 0xc3, 0x63, 0xa2, 0x22, 0x89, 0xdf, 0x99, 0xb0, 0xd2, 0x8a,
	0xc1, 0x4e, 0xe1, 0x80, 0x7d, 0x69, 0x4e, 0x7d, 0xd0, 0x00, 0x66, 0xe9, 0xf9, 0x26, 0x31, 0xd9,
	0xcb, 0x2a, 0x5b, 0xb5, 0x5e, 0xb6, 0xbf, 0x0b, 0x57, 0x1e, 0x5f, 0xa5, 0x95, 0x7c, 0xc3, 0x7b,
	0x7e, 0xcf, 0xd2, 0xce, 0xd9, 0xd6, 0xae, 0x22, 0x08, 0x56, 0x04, 0x74, 0x6a, 0x12, 0xd3, 0x79,
	0x01, 0xe7, 0x5b, 0x13, 0xe9, 0xbc, 0xfc, 0xa3, 0x28, 0x3b, 0x2f, 0xcb, 0x2c, 0x3b, 0x2d, 0x73,
	0x7e, 0xaa, 0xb1, 0x05, 0xab, 0xb0, 0x7a, 0x32, 0x51, 0x9c, 0x94, 0x45, 0x92, 0xaf, 0xdf, 0x6a,
	0xf1, 0x16, 0xc8, 0x0e, 0x9e, 0xcf, 0x63, 0xcf, 0x8e, 0x5d, 0xe8, 0xcd, 0xfd, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0xe0, 0x10, 0x99, 0xcb, 0x90, 0x0d, 0x00, 0x00,
}
