// Code generated by protoc-gen-go.
// source: majiang_base.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of CardInfo from common_mj.proto

// Ignoring public import of RoomTypeInfo from common_mj.proto

// Ignoring public import of PlayOptions from common_mj.proto

// Ignoring public import of ChangShaPlayOptions from common_mj.proto

// Ignoring public import of BaiShanPlayOptions from common_mj.proto

// Ignoring public import of ZhuanZhuanPlayOptions from common_mj.proto

// Ignoring public import of ComposeCard from common_mj.proto

// Ignoring public import of PlayerCard from common_mj.proto

// Ignoring public import of ErrorCode from common_mj.proto

// Ignoring public import of MahjongColor from common_mj.proto

// Ignoring public import of GangType from common_mj.proto

// Ignoring public import of HuType from common_mj.proto

// Ignoring public import of ComposeCardType from common_mj.proto

// Ignoring public import of PaiType from common_mj.proto

// Ignoring public import of MJUserGameStatus from common_mj.proto

// Ignoring public import of DeskGameStatus from common_mj.proto

// Ignoring public import of MJRoomType from common_mj.proto

type MjEnumProtoId int32

const (
	MjEnumProtoId_PID_QUICK_CONN                     MjEnumProtoId = 1
	MjEnumProtoId_PID_QUICK_CONN_ACK                 MjEnumProtoId = 2
	MjEnumProtoId_PID_GAME_LOGIN                     MjEnumProtoId = 3
	MjEnumProtoId_PID_GAME_LOGIN_ACK                 MjEnumProtoId = 4
	MjEnumProtoId_PID_CREATEROOM                     MjEnumProtoId = 5
	MjEnumProtoId_PID_CREATEROOM_ACK                 MjEnumProtoId = 6
	MjEnumProtoId_PID_ENTER_ROOM                     MjEnumProtoId = 7
	MjEnumProtoId_PID_ENTER_ROOM_ACK                 MjEnumProtoId = 8
	MjEnumProtoId_PID_SEND_GAMEINFO                  MjEnumProtoId = 9
	MjEnumProtoId_PID_READY                          MjEnumProtoId = 10
	MjEnumProtoId_PID_READY_ACK                      MjEnumProtoId = 11
	MjEnumProtoId_PID_EXCHANGECARDS                  MjEnumProtoId = 12
	MjEnumProtoId_PID_EXCHANGECARDS_ACK              MjEnumProtoId = 13
	MjEnumProtoId_PID_DINGQUE                        MjEnumProtoId = 14
	MjEnumProtoId_PID_OPENING                        MjEnumProtoId = 15
	MjEnumProtoId_PID_DEAL_CARDS                     MjEnumProtoId = 16
	MjEnumProtoId_PID_GET_IN_CARD                    MjEnumProtoId = 17
	MjEnumProtoId_PID_SEND_OUT_CARD                  MjEnumProtoId = 18
	MjEnumProtoId_PID_SEND_OUT_CARD_ACK              MjEnumProtoId = 19
	MjEnumProtoId_PID_PENG_CARD                      MjEnumProtoId = 20
	MjEnumProtoId_PID_PENG_CARD_ACK                  MjEnumProtoId = 21
	MjEnumProtoId_PID_GANG_CARD                      MjEnumProtoId = 22
	MjEnumProtoId_PID_GANG_CARD_ACK                  MjEnumProtoId = 23
	MjEnumProtoId_PID_GUO_CARD                       MjEnumProtoId = 24
	MjEnumProtoId_PID_GUO_CARD_ACK                   MjEnumProtoId = 25
	MjEnumProtoId_PID_HU_CARD                        MjEnumProtoId = 26
	MjEnumProtoId_PID_HU_CARD_ACK                    MjEnumProtoId = 27
	MjEnumProtoId_PID_BROADCAST_BEGIN_DINGQUE        MjEnumProtoId = 28
	MjEnumProtoId_PID_BROADCAST_BEGIN_EXCHANGE       MjEnumProtoId = 29
	MjEnumProtoId_PID_OVERTURN                       MjEnumProtoId = 30
	MjEnumProtoId_PID_CURRENTRESULT                  MjEnumProtoId = 31
	MjEnumProtoId_PID_SENDENDLOTTERY                 MjEnumProtoId = 32
	MjEnumProtoId_PID_DISSOLVE_DESK                  MjEnumProtoId = 33
	MjEnumProtoId_PID_DISSOLVE_DESK_ACK              MjEnumProtoId = 34
	MjEnumProtoId_PID_LEAVE_DESK                     MjEnumProtoId = 35
	MjEnumProtoId_PID_LEAVE_DESK_ACK                 MjEnumProtoId = 36
	MjEnumProtoId_PID_MESSAGE                        MjEnumProtoId = 37
	MjEnumProtoId_PID_SEND_MESSAGE                   MjEnumProtoId = 38
	MjEnumProtoId_PID_GAME_DINGQUEEND                MjEnumProtoId = 39
	MjEnumProtoId_PID_GAME_GAMERECORD                MjEnumProtoId = 40
	MjEnumProtoId_PID_GAME_ACKGAMERECORD             MjEnumProtoId = 41
	MjEnumProtoId_PID_GAME_ACKGAMERECORDEDN          MjEnumProtoId = 42
	MjEnumProtoId_PID_GAME_NOTICE                    MjEnumProtoId = 43
	MjEnumProtoId_PID_GAME_ACKNOTICE                 MjEnumProtoId = 44
	MjEnumProtoId_PID_LOGOUT_REQ                     MjEnumProtoId = 45
	MjEnumProtoId_PID_LOGOUT_ACK                     MjEnumProtoId = 46
	MjEnumProtoId_PID_AWARD_ONLINE_REQ               MjEnumProtoId = 47
	MjEnumProtoId_PID_AWARD_ONLINE_ACK               MjEnumProtoId = 48
	MjEnumProtoId_PID_HALL_TASK_REQ                  MjEnumProtoId = 49
	MjEnumProtoId_PID_HALL_TASK_ACK                  MjEnumProtoId = 50
	MjEnumProtoId_PID_ENTER_AGENTMODE_REQ            MjEnumProtoId = 51
	MjEnumProtoId_PID_ENTER_AGENTMODE_ACK            MjEnumProtoId = 52
	MjEnumProtoId_PID_QUIT_AGENTMODE_REQ             MjEnumProtoId = 53
	MjEnumProtoId_PID_QUIT_AGENTMODE_ACK             MjEnumProtoId = 54
	MjEnumProtoId_PID_REG_REQ                        MjEnumProtoId = 55
	MjEnumProtoId_PID_REG_ACK                        MjEnumProtoId = 56
	MjEnumProtoId_PID_GAMESTATE_REQ                  MjEnumProtoId = 57
	MjEnumProtoId_PID_GAMESTATE_ACK                  MjEnumProtoId = 58
	MjEnumProtoId_PID_FEEDBACK_REQ                   MjEnumProtoId = 59
	MjEnumProtoId_PID_APPLYDISSOLVE_REQ              MjEnumProtoId = 60
	MjEnumProtoId_PID_APPLYDISSOLVE_ACK              MjEnumProtoId = 61
	MjEnumProtoId_PID_APPLYDISSOLVEBACK_REQ          MjEnumProtoId = 62
	MjEnumProtoId_PID_APPLYDISSOLVEBACK_ACK          MjEnumProtoId = 63
	MjEnumProtoId_PID_COMMONBCKICKOUT                MjEnumProtoId = 64
	MjEnumProtoId_PID_ACTCHI_REQ                     MjEnumProtoId = 65
	MjEnumProtoId_PID_ACTCHI_ACK                     MjEnumProtoId = 66
	MjEnumProtoId_PID_CHANGSHA_GANG_CARD_ACK         MjEnumProtoId = 67
	MjEnumProtoId_PID_ACTCHANGSHAQISHOUHU            MjEnumProtoId = 68
	MjEnumProtoId_PID_ACTCHANGSHAQISHOUHU_ACK        MjEnumProtoId = 69
	MjEnumProtoId_PID_GAME_CHANGSHQISHOUHUOVERTURN   MjEnumProtoId = 70
	MjEnumProtoId_PID_GAME_CHANGSHAOVERTURNAFTERGANG MjEnumProtoId = 71
	MjEnumProtoId_PID_GAME_ACKACTHUCHANGSHA          MjEnumProtoId = 72
	MjEnumProtoId_PID_GAME_DEALHAIDICARDS            MjEnumProtoId = 73
	MjEnumProtoId_PID_GAME_REQDEALHAIDICARDS         MjEnumProtoId = 74
	MjEnumProtoId_PID_GAME_ACKDEALHAIDICARDS         MjEnumProtoId = 75
	MjEnumProtoId_PID_COMMONBCUSERBREAK              MjEnumProtoId = 76
	MjEnumProtoId_PID_COMMONREQRECONNECT             MjEnumProtoId = 77
	MjEnumProtoId_PID_GAMEREQBUXIAZI                 MjEnumProtoId = 78
	MjEnumProtoId_PID_GAMEACKBUXIAZI                 MjEnumProtoId = 79
	MjEnumProtoId_PID_OFFLINE_REQ                    MjEnumProtoId = 80
	MjEnumProtoId_PID_RECONNECT_ACK                  MjEnumProtoId = 81
	MjEnumProtoId_PID_BC_BAOTING                     MjEnumProtoId = 82
	MjEnumProtoId_PID_REQ_BAOTING                    MjEnumProtoId = 83
	MjEnumProtoId_PID_ACK_BAOTING                    MjEnumProtoId = 84
	MjEnumProtoId_PID_BC_FENZHANG                    MjEnumProtoId = 85
	// 宜宾麻将
	MjEnumProtoId_PID_BC_PIAO          MjEnumProtoId = 86
	MjEnumProtoId_PID_REQ_PIAO         MjEnumProtoId = 87
	MjEnumProtoId_PID_ACK_PIAO         MjEnumProtoId = 88
	MjEnumProtoId_PID_REQ_FLY          MjEnumProtoId = 89
	MjEnumProtoId_PID_ACK_FLY          MjEnumProtoId = 90
	MjEnumProtoId_PID_REQ_TI           MjEnumProtoId = 91
	MjEnumProtoId_PID_ACK_TI           MjEnumProtoId = 92
	MjEnumProtoId_PID_BC_LEAVE_TIMEOUT MjEnumProtoId = 93
	MjEnumProtoId_PID_ACK_JIAOINFOS    MjEnumProtoId = 94
	MjEnumProtoId_PID_REQ_GANG         MjEnumProtoId = 95
	MjEnumProtoId_PID_ACK_GANG         MjEnumProtoId = 96
)

var MjEnumProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_EXCHANGECARDS",
	13: "PID_EXCHANGECARDS_ACK",
	14: "PID_DINGQUE",
	15: "PID_OPENING",
	16: "PID_DEAL_CARDS",
	17: "PID_GET_IN_CARD",
	18: "PID_SEND_OUT_CARD",
	19: "PID_SEND_OUT_CARD_ACK",
	20: "PID_PENG_CARD",
	21: "PID_PENG_CARD_ACK",
	22: "PID_GANG_CARD",
	23: "PID_GANG_CARD_ACK",
	24: "PID_GUO_CARD",
	25: "PID_GUO_CARD_ACK",
	26: "PID_HU_CARD",
	27: "PID_HU_CARD_ACK",
	28: "PID_BROADCAST_BEGIN_DINGQUE",
	29: "PID_BROADCAST_BEGIN_EXCHANGE",
	30: "PID_OVERTURN",
	31: "PID_CURRENTRESULT",
	32: "PID_SENDENDLOTTERY",
	33: "PID_DISSOLVE_DESK",
	34: "PID_DISSOLVE_DESK_ACK",
	35: "PID_LEAVE_DESK",
	36: "PID_LEAVE_DESK_ACK",
	37: "PID_MESSAGE",
	38: "PID_SEND_MESSAGE",
	39: "PID_GAME_DINGQUEEND",
	40: "PID_GAME_GAMERECORD",
	41: "PID_GAME_ACKGAMERECORD",
	42: "PID_GAME_ACKGAMERECORDEDN",
	43: "PID_GAME_NOTICE",
	44: "PID_GAME_ACKNOTICE",
	45: "PID_LOGOUT_REQ",
	46: "PID_LOGOUT_ACK",
	47: "PID_AWARD_ONLINE_REQ",
	48: "PID_AWARD_ONLINE_ACK",
	49: "PID_HALL_TASK_REQ",
	50: "PID_HALL_TASK_ACK",
	51: "PID_ENTER_AGENTMODE_REQ",
	52: "PID_ENTER_AGENTMODE_ACK",
	53: "PID_QUIT_AGENTMODE_REQ",
	54: "PID_QUIT_AGENTMODE_ACK",
	55: "PID_REG_REQ",
	56: "PID_REG_ACK",
	57: "PID_GAMESTATE_REQ",
	58: "PID_GAMESTATE_ACK",
	59: "PID_FEEDBACK_REQ",
	60: "PID_APPLYDISSOLVE_REQ",
	61: "PID_APPLYDISSOLVE_ACK",
	62: "PID_APPLYDISSOLVEBACK_REQ",
	63: "PID_APPLYDISSOLVEBACK_ACK",
	64: "PID_COMMONBCKICKOUT",
	65: "PID_ACTCHI_REQ",
	66: "PID_ACTCHI_ACK",
	67: "PID_CHANGSHA_GANG_CARD_ACK",
	68: "PID_ACTCHANGSHAQISHOUHU",
	69: "PID_ACTCHANGSHAQISHOUHU_ACK",
	70: "PID_GAME_CHANGSHQISHOUHUOVERTURN",
	71: "PID_GAME_CHANGSHAOVERTURNAFTERGANG",
	72: "PID_GAME_ACKACTHUCHANGSHA",
	73: "PID_GAME_DEALHAIDICARDS",
	74: "PID_GAME_REQDEALHAIDICARDS",
	75: "PID_GAME_ACKDEALHAIDICARDS",
	76: "PID_COMMONBCUSERBREAK",
	77: "PID_COMMONREQRECONNECT",
	78: "PID_GAMEREQBUXIAZI",
	79: "PID_GAMEACKBUXIAZI",
	80: "PID_OFFLINE_REQ",
	81: "PID_RECONNECT_ACK",
	82: "PID_BC_BAOTING",
	83: "PID_REQ_BAOTING",
	84: "PID_ACK_BAOTING",
	85: "PID_BC_FENZHANG",
	86: "PID_BC_PIAO",
	87: "PID_REQ_PIAO",
	88: "PID_ACK_PIAO",
	89: "PID_REQ_FLY",
	90: "PID_ACK_FLY",
	91: "PID_REQ_TI",
	92: "PID_ACK_TI",
	93: "PID_BC_LEAVE_TIMEOUT",
	94: "PID_ACK_JIAOINFOS",
	95: "PID_REQ_GANG",
	96: "PID_ACK_GANG",
}
var MjEnumProtoId_value = map[string]int32{
	"PID_QUICK_CONN":                     1,
	"PID_QUICK_CONN_ACK":                 2,
	"PID_GAME_LOGIN":                     3,
	"PID_GAME_LOGIN_ACK":                 4,
	"PID_CREATEROOM":                     5,
	"PID_CREATEROOM_ACK":                 6,
	"PID_ENTER_ROOM":                     7,
	"PID_ENTER_ROOM_ACK":                 8,
	"PID_SEND_GAMEINFO":                  9,
	"PID_READY":                          10,
	"PID_READY_ACK":                      11,
	"PID_EXCHANGECARDS":                  12,
	"PID_EXCHANGECARDS_ACK":              13,
	"PID_DINGQUE":                        14,
	"PID_OPENING":                        15,
	"PID_DEAL_CARDS":                     16,
	"PID_GET_IN_CARD":                    17,
	"PID_SEND_OUT_CARD":                  18,
	"PID_SEND_OUT_CARD_ACK":              19,
	"PID_PENG_CARD":                      20,
	"PID_PENG_CARD_ACK":                  21,
	"PID_GANG_CARD":                      22,
	"PID_GANG_CARD_ACK":                  23,
	"PID_GUO_CARD":                       24,
	"PID_GUO_CARD_ACK":                   25,
	"PID_HU_CARD":                        26,
	"PID_HU_CARD_ACK":                    27,
	"PID_BROADCAST_BEGIN_DINGQUE":        28,
	"PID_BROADCAST_BEGIN_EXCHANGE":       29,
	"PID_OVERTURN":                       30,
	"PID_CURRENTRESULT":                  31,
	"PID_SENDENDLOTTERY":                 32,
	"PID_DISSOLVE_DESK":                  33,
	"PID_DISSOLVE_DESK_ACK":              34,
	"PID_LEAVE_DESK":                     35,
	"PID_LEAVE_DESK_ACK":                 36,
	"PID_MESSAGE":                        37,
	"PID_SEND_MESSAGE":                   38,
	"PID_GAME_DINGQUEEND":                39,
	"PID_GAME_GAMERECORD":                40,
	"PID_GAME_ACKGAMERECORD":             41,
	"PID_GAME_ACKGAMERECORDEDN":          42,
	"PID_GAME_NOTICE":                    43,
	"PID_GAME_ACKNOTICE":                 44,
	"PID_LOGOUT_REQ":                     45,
	"PID_LOGOUT_ACK":                     46,
	"PID_AWARD_ONLINE_REQ":               47,
	"PID_AWARD_ONLINE_ACK":               48,
	"PID_HALL_TASK_REQ":                  49,
	"PID_HALL_TASK_ACK":                  50,
	"PID_ENTER_AGENTMODE_REQ":            51,
	"PID_ENTER_AGENTMODE_ACK":            52,
	"PID_QUIT_AGENTMODE_REQ":             53,
	"PID_QUIT_AGENTMODE_ACK":             54,
	"PID_REG_REQ":                        55,
	"PID_REG_ACK":                        56,
	"PID_GAMESTATE_REQ":                  57,
	"PID_GAMESTATE_ACK":                  58,
	"PID_FEEDBACK_REQ":                   59,
	"PID_APPLYDISSOLVE_REQ":              60,
	"PID_APPLYDISSOLVE_ACK":              61,
	"PID_APPLYDISSOLVEBACK_REQ":          62,
	"PID_APPLYDISSOLVEBACK_ACK":          63,
	"PID_COMMONBCKICKOUT":                64,
	"PID_ACTCHI_REQ":                     65,
	"PID_ACTCHI_ACK":                     66,
	"PID_CHANGSHA_GANG_CARD_ACK":         67,
	"PID_ACTCHANGSHAQISHOUHU":            68,
	"PID_ACTCHANGSHAQISHOUHU_ACK":        69,
	"PID_GAME_CHANGSHQISHOUHUOVERTURN":   70,
	"PID_GAME_CHANGSHAOVERTURNAFTERGANG": 71,
	"PID_GAME_ACKACTHUCHANGSHA":          72,
	"PID_GAME_DEALHAIDICARDS":            73,
	"PID_GAME_REQDEALHAIDICARDS":         74,
	"PID_GAME_ACKDEALHAIDICARDS":         75,
	"PID_COMMONBCUSERBREAK":              76,
	"PID_COMMONREQRECONNECT":             77,
	"PID_GAMEREQBUXIAZI":                 78,
	"PID_GAMEACKBUXIAZI":                 79,
	"PID_OFFLINE_REQ":                    80,
	"PID_RECONNECT_ACK":                  81,
	"PID_BC_BAOTING":                     82,
	"PID_REQ_BAOTING":                    83,
	"PID_ACK_BAOTING":                    84,
	"PID_BC_FENZHANG":                    85,
	"PID_BC_PIAO":                        86,
	"PID_REQ_PIAO":                       87,
	"PID_ACK_PIAO":                       88,
	"PID_REQ_FLY":                        89,
	"PID_ACK_FLY":                        90,
	"PID_REQ_TI":                         91,
	"PID_ACK_TI":                         92,
	"PID_BC_LEAVE_TIMEOUT":               93,
	"PID_ACK_JIAOINFOS":                  94,
	"PID_REQ_GANG":                       95,
	"PID_ACK_GANG":                       96,
}

func (x MjEnumProtoId) Enum() *MjEnumProtoId {
	p := new(MjEnumProtoId)
	*p = x
	return p
}
func (x MjEnumProtoId) String() string {
	return proto.EnumName(MjEnumProtoId_name, int32(x))
}
func (x *MjEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumProtoId_value, data, "MjEnumProtoId")
	if err != nil {
		return err
	}
	*x = MjEnumProtoId(value)
	return nil
}
func (MjEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

type MJOption int32

const (
	MJOption_EXCHANGE_CARDS       MJOption = 1
	MJOption_ZIMO_JIA_DI          MJOption = 2
	MJOption_ZIMO_JIA_FAN         MJOption = 3
	MJOption_DIANGANG_HUA_DIANPAO MJOption = 4
	MJOption_DIANGANG_HUA_ZIMO    MJOption = 5
	MJOption_YAOJIU_JIANGDUI      MJOption = 6
	MJOption_MENQING_MID_CARD     MJOption = 7
	MJOption_TIAN_DI_HU           MJOption = 8
	MJOption_KA_ER_TIAO           MJOption = 9
	// 三人两房牌
	MJOption_DIANPAO_CAN_HU MJOption = 10
	MJOption_DUIDUIHU_2_FAN MJOption = 11
	MJOption_JIA_XIN_WU     MJOption = 12
	// 倒倒胡
	MJOption_DDH_QIDUI_HU   MJOption = 13
	MJOption_DDH_ZIMO_HU    MJOption = 14
	MJOption_DDH_DIANPAO_HU MJOption = 15
)

var MJOption_name = map[int32]string{
	1:  "EXCHANGE_CARDS",
	2:  "ZIMO_JIA_DI",
	3:  "ZIMO_JIA_FAN",
	4:  "DIANGANG_HUA_DIANPAO",
	5:  "DIANGANG_HUA_ZIMO",
	6:  "YAOJIU_JIANGDUI",
	7:  "MENQING_MID_CARD",
	8:  "TIAN_DI_HU",
	9:  "KA_ER_TIAO",
	10: "DIANPAO_CAN_HU",
	11: "DUIDUIHU_2_FAN",
	12: "JIA_XIN_WU",
	13: "DDH_QIDUI_HU",
	14: "DDH_ZIMO_HU",
	15: "DDH_DIANPAO_HU",
}
var MJOption_value = map[string]int32{
	"EXCHANGE_CARDS":       1,
	"ZIMO_JIA_DI":          2,
	"ZIMO_JIA_FAN":         3,
	"DIANGANG_HUA_DIANPAO": 4,
	"DIANGANG_HUA_ZIMO":    5,
	"YAOJIU_JIANGDUI":      6,
	"MENQING_MID_CARD":     7,
	"TIAN_DI_HU":           8,
	"KA_ER_TIAO":           9,
	"DIANPAO_CAN_HU":       10,
	"DUIDUIHU_2_FAN":       11,
	"JIA_XIN_WU":           12,
	"DDH_QIDUI_HU":         13,
	"DDH_ZIMO_HU":          14,
	"DDH_DIANPAO_HU":       15,
}

func (x MJOption) Enum() *MJOption {
	p := new(MJOption)
	*p = x
	return p
}
func (x MJOption) String() string {
	return proto.EnumName(MJOption_name, int32(x))
}
func (x *MJOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJOption_value, data, "MJOption")
	if err != nil {
		return err
	}
	*x = MJOption(value)
	return nil
}
func (MJOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

type MJPlayerInfo struct {
	IsBanker         *bool       `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64      `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string     `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32      `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32     `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool       `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32      `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32      `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32      `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32      `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32      `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32      `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	AgentMode        *bool       `protobuf:"varint,15,opt,name=agentMode" json:"agentMode,omitempty"`
	Ip               *string     `protobuf:"bytes,16,opt,name=ip" json:"ip,omitempty"`
	XiaCount         *int32      `protobuf:"varint,17,opt,name=xiaCount" json:"xiaCount,omitempty"`
	IsBaoTing        *bool       `protobuf:"varint,18,opt,name=isBaoTing" json:"isBaoTing,omitempty"`
	IsQianniu        *bool       `protobuf:"varint,19,opt,name=isQianniu" json:"isQianniu,omitempty"`
	Address          *string     `protobuf:"bytes,20,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MJPlayerInfo) Reset()                    { *m = MJPlayerInfo{} }
func (m *MJPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*MJPlayerInfo) ProtoMessage()               {}
func (*MJPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

func (m *MJPlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *MJPlayerInfo) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *MJPlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MJPlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *MJPlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *MJPlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MJPlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *MJPlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *MJPlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *MJPlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *MJPlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *MJPlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *MJPlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *MJPlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *MJPlayerInfo) GetAgentMode() bool {
	if m != nil && m.AgentMode != nil {
		return *m.AgentMode
	}
	return false
}

func (m *MJPlayerInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *MJPlayerInfo) GetXiaCount() int32 {
	if m != nil && m.XiaCount != nil {
		return *m.XiaCount
	}
	return 0
}

func (m *MJPlayerInfo) GetIsBaoTing() bool {
	if m != nil && m.IsBaoTing != nil {
		return *m.IsBaoTing
	}
	return false
}

func (m *MJPlayerInfo) GetIsQianniu() bool {
	if m != nil && m.IsQianniu != nil {
		return *m.IsQianniu
	}
	return false
}

func (m *MJPlayerInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type MJDeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32        `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32        `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32        `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32       `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MJDeskGameInfo) Reset()                    { *m = MJDeskGameInfo{} }
func (m *MJDeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*MJDeskGameInfo) ProtoMessage()               {}
func (*MJDeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

func (m *MJDeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *MJDeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *MJDeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *MJDeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *MJDeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *MJDeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *MJDeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *MJDeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *MJDeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *MJDeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *MJDeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *MJDeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *MJDeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *MJDeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func init() {
	proto.RegisterType((*MJPlayerInfo)(nil), "ddproto.MJPlayerInfo")
	proto.RegisterType((*MJDeskGameInfo)(nil), "ddproto.MJDeskGameInfo")
	proto.RegisterEnum("ddproto.MjEnumProtoId", MjEnumProtoId_name, MjEnumProtoId_value)
	proto.RegisterEnum("ddproto.MJOption", MJOption_name, MJOption_value)
}

var fileDescriptor30 = []byte{
	// 1645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x96, 0xf9, 0x7e, 0xdb, 0xb8,
	0x11, 0xc7, 0x2b, 0xc7, 0x27, 0x6c, 0xcb, 0x30, 0xec, 0x24, 0x8c, 0x93, 0xcd, 0xaa, 0x6e, 0x9a,
	0xaa, 0xd9, 0x36, 0x6d, 0xb3, 0xbd, 0xb6, 0x37, 0x44, 0x42, 0x22, 0x2c, 0x11, 0x94, 0x40, 0x32,
	0x89, 0xd3, 0x83, 0xa5, 0x2d, 0xd6, 0x65, 0x12, 0x51, 0xae, 0x8e, 0xc6, 0x79, 0x84, 0xbe, 0x4b,
	0x1f, 0xa3, 0xef, 0xd1, 0x57, 0xd9, 0xcf, 0x80, 0x1a, 0xea, 0x88, 0xf3, 0x8f, 0x3f, 0xc6, 0x77,
	0x7e, 0x18, 0xcc, 0x0c, 0x66, 0x40, 0x11, 0x36, 0x48, 0xde, 0x66, 0x49, 0x7e, 0x15, 0x5f, 0x24,
	0xe3, 0xf4, 0xf9, 0xf5, 0x68, 0x38, 0x19, 0xb2, 0xad, 0x7e, 0xdf, 0xfc, 0x73, 0x72, 0x70, 0x39,
	0x1c, 0x0c, 0x86, 0x79, 0x3c, 0x78, 0x5b, 0x58, 0x4e, 0xff, 0xb7, 0x4e, 0xf6, 0xbc, 0xb3, 0xee,
	0xfb, 0xe4, 0x63, 0x3a, 0x92, 0xf9, 0x3f, 0x86, 0xec, 0x84, 0x6c, 0x67, 0xe3, 0x46, 0x92, 0xbf,
	0x4b, 0x47, 0x56, 0xa5, 0x56, 0xa9, 0x6f, 0xeb, 0x72, 0xcd, 0xbe, 0x26, 0xe4, 0xda, 0x28, 0xed,
	0x64, 0xd4, 0xb7, 0xd6, 0x6a, 0x95, 0xfa, 0xee, 0x8b, 0xa3, 0xe7, 0x33, 0xdf, 0xcf, 0xbb, 0xa5,
	0x49, 0x2f, 0xc8, 0x18, 0x23, 0xeb, 0x97, 0xc3, 0x2c, 0xb7, 0xee, 0xd4, 0x2a, 0xf5, 0x3b, 0xda,
	0xfc, 0x0f, 0x87, 0xe4, 0xd9, 0xe5, 0x3b, 0x95, 0x0c, 0x52, 0x6b, 0xbd, 0x56, 0xa9, 0xef, 0xe8,
	0x72, 0xcd, 0x28, 0xb9, 0x33, 0x4e, 0x6f, 0xac, 0x8d, 0x5a, 0xa5, 0xbe, 0xa1, 0xe1, 0x5f, 0x76,
	0x8f, 0x6c, 0x4e, 0xc7, 0xe9, 0x48, 0xf6, 0xad, 0xcd, 0x5a, 0xa5, 0xbe, 0xaf, 0x67, 0x2b, 0x66,
	0x91, 0xad, 0x6c, 0xec, 0x7f, 0xc8, 0xd3, 0x91, 0xb5, 0x65, 0x22, 0xc5, 0x25, 0xec, 0xb8, 0xd0,
	0x69, 0xd2, 0xff, 0x68, 0x6d, 0x1b, 0x37, 0xb3, 0x15, 0x9c, 0x7b, 0xe1, 0x64, 0xf9, 0x55, 0x6f,
	0x9a, 0x5a, 0x3b, 0xc6, 0x52, 0xae, 0xd9, 0x63, 0x42, 0x2e, 0xc4, 0xcd, 0xe5, 0x3f, 0x93, 0xfc,
	0x2a, 0xed, 0x5b, 0xc4, 0x58, 0x17, 0x08, 0xf8, 0xcc, 0xdd, 0x69, 0x37, 0xc9, 0xac, 0xdd, 0xc2,
	0x67, 0xb1, 0x02, 0xfe, 0xaf, 0x69, 0x0a, 0x7c, 0xaf, 0xe0, 0xc5, 0x8a, 0x7d, 0x45, 0x36, 0x3f,
	0xdc, 0x40, 0x49, 0xad, 0xfd, 0x95, 0x42, 0xbd, 0x4a, 0xb3, 0x9b, 0x2c, 0x07, 0x93, 0x9e, 0x49,
	0xe0, 0xf0, 0x56, 0x32, 0x48, 0x83, 0x49, 0x32, 0x99, 0x8e, 0xad, 0x6a, 0x71, 0xf8, 0x9c, 0xb0,
	0x47, 0x64, 0x27, 0xb9, 0x4a, 0xf3, 0x89, 0x37, 0xec, 0xa7, 0xd6, 0x81, 0x49, 0x76, 0x0e, 0x58,
	0x95, 0xac, 0x65, 0xd7, 0x16, 0x35, 0x85, 0x5c, 0xcb, 0xae, 0x21, 0xcd, 0x9b, 0x2c, 0xb1, 0x87,
	0xd3, 0x7c, 0x62, 0x1d, 0x16, 0x69, 0xe2, 0x1a, 0x3c, 0xc1, 0x7d, 0x0e, 0xc3, 0x2c, 0xbf, 0xb2,
	0x58, 0xe1, 0xa9, 0x04, 0x85, 0xb5, 0x97, 0x25, 0x79, 0x9e, 0x4d, 0xad, 0x23, 0xb4, 0xce, 0x00,
	0x14, 0x3c, 0xe9, 0xf7, 0x47, 0xe9, 0x78, 0x6c, 0x1d, 0x9b, 0xc3, 0x70, 0x79, 0xfa, 0x9f, 0x75,
	0x52, 0xf5, 0xce, 0x9c, 0x74, 0xfc, 0x0e, 0x82, 0xbe, 0x25, 0xa5, 0xca, 0x27, 0x29, 0x7d, 0x43,
	0xf6, 0x46, 0xc3, 0xe1, 0x20, 0xfc, 0x78, 0x6d, 0xf4, 0xb3, 0x76, 0xba, 0x5b, 0x56, 0x49, 0x2f,
	0x18, 0xf5, 0x92, 0x14, 0xa2, 0x2c, 0x1a, 0x4c, 0x4d, 0x07, 0xa6, 0xaf, 0x36, 0xf4, 0x1c, 0xb0,
	0x53, 0xb2, 0x97, 0x5c, 0x4e, 0xb2, 0x7f, 0xa7, 0x51, 0xd1, 0x34, 0xeb, 0xa6, 0x69, 0x96, 0x18,
	0x04, 0x07, 0xeb, 0x61, 0x1e, 0x66, 0x83, 0x74, 0xd6, 0x6b, 0x0b, 0x04, 0x4e, 0xe8, 0xa7, 0xef,
	0x93, 0x8f, 0xc6, 0xbc, 0x59, 0x9c, 0x50, 0x02, 0x56, 0x27, 0x07, 0xb9, 0xcc, 0xb3, 0x09, 0x9f,
	0xbb, 0xd8, 0x32, 0x9a, 0x55, 0xcc, 0x9e, 0x92, 0xaa, 0x41, 0x4e, 0xe9, 0xac, 0x68, 0xc8, 0x15,
	0x0a, 0x31, 0x67, 0x79, 0x36, 0x81, 0x9c, 0x6d, 0x18, 0x96, 0x1d, 0x33, 0x2c, 0x4b, 0x8c, 0x3d,
	0x21, 0xfb, 0x97, 0xd3, 0xd1, 0x08, 0xc6, 0xac, 0xb8, 0xda, 0xa2, 0x47, 0x97, 0x21, 0x9c, 0x38,
	0x19, 0x4e, 0x92, 0xf7, 0x73, 0x59, 0xd1, 0xae, 0x2b, 0x14, 0x2a, 0x00, 0x35, 0x55, 0xd3, 0xc1,
	0x45, 0x3a, 0x32, 0xad, 0xbb, 0xa3, 0x17, 0x08, 0xab, 0x91, 0xdd, 0x51, 0x3a, 0x48, 0xb2, 0x1c,
	0x86, 0x78, 0x6c, 0x7a, 0x78, 0x43, 0x2f, 0x22, 0x68, 0xfc, 0xd9, 0x3b, 0x51, 0x2d, 0xc6, 0xb2,
	0x58, 0x3d, 0xfb, 0xff, 0x21, 0x39, 0x18, 0xbc, 0x8d, 0xd3, 0x7c, 0x3a, 0x88, 0xcd, 0x55, 0x4a,
	0x78, 0x04, 0xaa, 0x5d, 0xe9, 0xc4, 0xbd, 0x48, 0xda, 0xed, 0xd8, 0xf6, 0x95, 0xa2, 0x15, 0x76,
	0x8f, 0xb0, 0x65, 0x16, 0x73, 0xbb, 0x4d, 0xd7, 0x50, 0xdb, 0xe2, 0x9e, 0x88, 0x3b, 0x7e, 0x4b,
	0x2a, 0x7a, 0x07, 0xb5, 0x73, 0x66, 0xb4, 0xeb, 0xa8, 0xb5, 0xb5, 0xe0, 0xa1, 0xd0, 0xbe, 0xef,
	0xd1, 0x0d, 0xd4, 0xce, 0x99, 0xd1, 0x6e, 0xa2, 0x56, 0xa8, 0x50, 0xe8, 0xd8, 0x68, 0xb7, 0x50,
	0x3b, 0x67, 0x46, 0xbb, 0xcd, 0xee, 0x92, 0x43, 0xe0, 0x81, 0x50, 0xc5, 0xa1, 0x52, 0x35, 0x7d,
	0xba, 0xc3, 0xf6, 0xc9, 0x0e, 0x60, 0x2d, 0xb8, 0x73, 0x4e, 0x09, 0x3b, 0x24, 0xfb, 0xe5, 0xd2,
	0x6c, 0xdc, 0xc5, 0x8d, 0xe2, 0xb5, 0xed, 0x72, 0xd5, 0x12, 0x36, 0xd7, 0x4e, 0x40, 0xf7, 0xd8,
	0x03, 0x72, 0xf7, 0x13, 0x6c, 0x76, 0xec, 0xb3, 0x03, 0xb2, 0x0b, 0x26, 0x47, 0xaa, 0x56, 0x2f,
	0x12, 0xb4, 0x8a, 0xc0, 0xef, 0x0a, 0x25, 0x55, 0x8b, 0x1e, 0x60, 0xe0, 0x8e, 0xe0, 0x9d, 0xb8,
	0x70, 0x48, 0xd9, 0x11, 0x39, 0x30, 0x05, 0x11, 0x61, 0x2c, 0x95, 0xa1, 0xf4, 0x70, 0x29, 0x6a,
	0x3f, 0x0a, 0x0b, 0xcc, 0xf0, 0xf0, 0x25, 0x6c, 0x0e, 0x3f, 0xc2, 0x0c, 0xba, 0x42, 0xb5, 0x0a,
	0xf5, 0x31, 0x3a, 0x29, 0x91, 0x51, 0xde, 0x45, 0x65, 0x8b, 0xa3, 0xf2, 0x1e, 0x2a, 0x4b, 0x64,
	0x94, 0xf7, 0x19, 0x25, 0x7b, 0x06, 0x47, 0x7e, 0x21, 0xb4, 0xd8, 0x31, 0xa1, 0x8b, 0xc4, 0xe8,
	0x1e, 0x60, 0x9e, 0x6e, 0x54, 0xc8, 0x4e, 0x30, 0xa7, 0x19, 0x30, 0xaa, 0x87, 0xec, 0x4b, 0xf2,
	0x10, 0x60, 0x43, 0xfb, 0xdc, 0xb1, 0x79, 0x10, 0xc6, 0x0d, 0x01, 0xd7, 0x8f, 0xe5, 0x7a, 0xc4,
	0x6a, 0xe4, 0xd1, 0x6d, 0x02, 0x2c, 0x35, 0xfd, 0x02, 0x03, 0xf2, 0x5f, 0x0a, 0x1d, 0x46, 0x5a,
	0xd1, 0xc7, 0x18, 0xb9, 0x1d, 0x69, 0x2d, 0x54, 0xa8, 0x45, 0x10, 0x75, 0x42, 0xfa, 0x25, 0x76,
	0x03, 0x14, 0x4a, 0x28, 0xa7, 0xe3, 0x87, 0xa1, 0xd0, 0xe7, 0xb4, 0x86, 0x72, 0x47, 0x06, 0x81,
	0xdf, 0x79, 0x29, 0x62, 0x47, 0x04, 0x6d, 0xfa, 0x5d, 0xac, 0xeb, 0x12, 0x36, 0x51, 0x9f, 0xe2,
	0x95, 0x75, 0x04, 0x47, 0xf9, 0xf7, 0xd0, 0xfb, 0x9c, 0x19, 0xed, 0x13, 0xac, 0x83, 0x27, 0x82,
	0x80, 0xb7, 0x04, 0xfd, 0x3e, 0x96, 0xcb, 0xdc, 0x17, 0xd2, 0xa7, 0xec, 0x3e, 0x39, 0x2a, 0x47,
	0x60, 0x96, 0xbd, 0x50, 0x0e, 0xfd, 0xc1, 0x92, 0x01, 0xfe, 0x68, 0x61, 0xfb, 0xda, 0xa1, 0x75,
	0x76, 0x42, 0xee, 0x95, 0x06, 0x6e, 0xb7, 0x17, 0x6c, 0x3f, 0x64, 0x5f, 0x90, 0x07, 0xb7, 0xdb,
	0x84, 0xa3, 0xe8, 0xb3, 0xb2, 0xbd, 0xc0, 0xac, 0xfc, 0x50, 0xda, 0x82, 0x7e, 0xb5, 0x34, 0x84,
	0xdc, 0x6e, 0xcf, 0xf8, 0x8f, 0xca, 0x64, 0xfd, 0x16, 0x74, 0x97, 0x16, 0x3d, 0xfa, 0xe3, 0x15,
	0x06, 0x89, 0x3e, 0x67, 0x16, 0x39, 0x06, 0xc6, 0x5f, 0xc1, 0xed, 0xfa, 0xaa, 0x23, 0x95, 0x30,
	0xea, 0x9f, 0xdc, 0x6a, 0x81, 0x3d, 0x3f, 0xc5, 0xd2, 0xbb, 0xbc, 0xd3, 0x89, 0x43, 0x1e, 0xb4,
	0xcd, 0x86, 0x9f, 0x7d, 0x8a, 0x41, 0xfd, 0x82, 0x3d, 0x24, 0xf7, 0xe7, 0xe3, 0xcc, 0x5b, 0x42,
	0x85, 0x9e, 0xef, 0x14, 0x87, 0x7c, 0xfd, 0x39, 0x23, 0xec, 0xfc, 0x39, 0xd6, 0xaa, 0x17, 0xc9,
	0x70, 0x65, 0xe3, 0x2f, 0x3e, 0x63, 0x83, 0x7d, 0xbf, 0xc4, 0xcb, 0xd3, 0xa2, 0x65, 0xc4, 0xbf,
	0x5a, 0x04, 0xa0, 0xf8, 0xf5, 0x7c, 0x4a, 0x3c, 0x11, 0x84, 0x3c, 0x2c, 0x9c, 0x7e, 0xf3, 0x29,
	0x06, 0xf5, 0x6f, 0xf0, 0xee, 0x9b, 0x42, 0x38, 0x0d, 0x6e, 0x17, 0xe9, 0xfe, 0x16, 0x3b, 0x8d,
	0x77, 0xbb, 0x9d, 0xf3, 0xb2, 0xdd, 0xc0, 0xf4, 0xbb, 0xdb, 0x4d, 0xe0, 0xeb, 0xf7, 0x78, 0xc7,
	0x4b, 0xa6, 0xd2, 0xe9, 0x1f, 0x3e, 0x6f, 0x86, 0xdd, 0x7f, 0xc4, 0xb6, 0xb2, 0x7d, 0xcf, 0xf3,
	0x55, 0xc3, 0x6e, 0x4b, 0xbb, 0xed, 0x47, 0x21, 0xfd, 0x13, 0x5e, 0x2d, 0xb7, 0x43, 0xdb, 0x95,
	0xc6, 0x17, 0x5f, 0x61, 0xe0, 0xa0, 0xc1, 0x1e, 0x93, 0x13, 0xe3, 0x00, 0xc6, 0x30, 0x70, 0xf9,
	0xca, 0x3b, 0x61, 0xe3, 0x7d, 0x98, 0x3d, 0x85, 0xa4, 0x27, 0x03, 0xd7, 0x8f, 0xdc, 0x88, 0x3a,
	0x38, 0xf6, 0xb7, 0x18, 0xcd, 0x6e, 0xc1, 0x9e, 0x90, 0x5a, 0xd9, 0x8c, 0x33, 0x09, 0x2a, 0xca,
	0x41, 0x6f, 0xb2, 0xa7, 0xe4, 0x74, 0x55, 0xc5, 0xd1, 0xcc, 0x9b, 0xa1, 0xd0, 0x10, 0x14, 0x6d,
	0xad, 0x8e, 0x03, 0xb7, 0x43, 0x37, 0x42, 0x3d, 0x75, 0x31, 0xd4, 0x62, 0xf6, 0x04, 0xef, 0xb8,
	0x5c, 0x3a, 0xb2, 0x78, 0x8a, 0x25, 0xe6, 0x69, 0x8c, 0x5a, 0xf4, 0x56, 0xec, 0x67, 0x4b, 0x76,
	0x6e, 0xb7, 0x57, 0xec, 0x6d, 0xbc, 0x41, 0x2c, 0x74, 0x14, 0x08, 0xdd, 0xd0, 0x82, 0xb7, 0x69,
	0x07, 0x3b, 0xaf, 0x30, 0x69, 0xd1, 0x83, 0x11, 0x55, 0x4a, 0xd8, 0x21, 0xf5, 0x16, 0xa7, 0x51,
	0x8b, 0x5e, 0x23, 0x7a, 0x2d, 0xf9, 0x1b, 0x49, 0xd5, 0x22, 0xe7, 0x76, 0x1b, 0xb9, 0x8f, 0x23,
	0xed, 0x37, 0x9b, 0xe5, 0xe0, 0x75, 0xb1, 0x0b, 0x4b, 0xbf, 0xa6, 0xb8, 0x3d, 0xbc, 0xce, 0x86,
	0x1d, 0x37, 0xb8, 0x1f, 0xc2, 0x57, 0x48, 0xe3, 0x7e, 0x2d, 0x7a, 0x25, 0x0c, 0x10, 0x42, 0xd7,
	0x20, 0x0c, 0x11, 0x36, 0xec, 0xb8, 0x29, 0xd4, 0x1b, 0xa8, 0x22, 0x8d, 0x70, 0x2e, 0x1a, 0x76,
	0xdc, 0x95, 0xdc, 0xa7, 0x2f, 0xf1, 0x55, 0x06, 0x7f, 0x86, 0xbc, 0x42, 0x02, 0xce, 0x0c, 0x79,
	0x3d, 0x1f, 0xa6, 0x5e, 0xdc, 0xec, 0x9c, 0xd3, 0x73, 0x04, 0x20, 0x01, 0xf0, 0x86, 0x55, 0x09,
	0x41, 0x45, 0x28, 0xe9, 0x9f, 0x71, 0x0d, 0x82, 0x50, 0xd2, 0xbf, 0xe0, 0xcb, 0xd2, 0xb0, 0x67,
	0xef, 0x6e, 0x28, 0x3d, 0x01, 0x6d, 0xfc, 0x57, 0x4c, 0x1d, 0x94, 0x67, 0x92, 0xfb, 0xf0, 0x85,
	0x0f, 0xe8, 0xdf, 0x16, 0xc3, 0x32, 0xbd, 0x11, 0x2f, 0x86, 0x65, 0xc8, 0xdf, 0x9f, 0xfd, 0x77,
	0x8d, 0x6c, 0x7b, 0x67, 0xfe, 0x35, 0xfc, 0xcc, 0x83, 0x5a, 0xe1, 0xb7, 0x66, 0xf6, 0x75, 0xae,
	0x40, 0x98, 0x6f, 0xa4, 0xe7, 0x83, 0xe3, 0xd8, 0x91, 0x74, 0x0d, 0x7c, 0x94, 0xa0, 0xc9, 0xe1,
	0x17, 0x8d, 0x45, 0x8e, 0x1d, 0xc9, 0x95, 0x19, 0x0a, 0x37, 0x02, 0x19, 0x57, 0x5d, 0xee, 0xd3,
	0x75, 0x08, 0x6c, 0xc9, 0x02, 0x1b, 0xe9, 0x06, 0x54, 0xf5, 0x9c, 0xfb, 0x67, 0x32, 0x02, 0x27,
	0xaa, 0xe5, 0x44, 0x92, 0x6e, 0xc2, 0x73, 0xe1, 0x09, 0xd5, 0x93, 0xaa, 0x15, 0x7b, 0xd0, 0x28,
	0xf0, 0x21, 0xdd, 0x82, 0x22, 0x84, 0x92, 0xc3, 0x47, 0x32, 0x76, 0x23, 0xba, 0x0d, 0xeb, 0x36,
	0x8f, 0x85, 0x8e, 0x43, 0x28, 0xeb, 0x0e, 0x84, 0x3c, 0x3b, 0x2e, 0xb6, 0xb9, 0x02, 0x0d, 0x31,
	0x2c, 0x92, 0x4e, 0x24, 0xdd, 0x28, 0x7e, 0x61, 0x62, 0xdc, 0x85, 0x7d, 0x10, 0xf0, 0x6b, 0xa9,
	0xe2, 0x57, 0x11, 0xdd, 0x83, 0x2c, 0x1c, 0xc7, 0x8d, 0x7b, 0x20, 0x83, 0x5d, 0xe6, 0xc7, 0x0b,
	0x10, 0x93, 0x9b, 0x1b, 0xd1, 0xaa, 0x71, 0xe3, 0xb8, 0x98, 0x0d, 0xb0, 0x83, 0xee, 0x77, 0xbe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x01, 0xe9, 0xcf, 0x94, 0x0e, 0x00, 0x00,
}
