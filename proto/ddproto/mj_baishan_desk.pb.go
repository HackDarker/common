// Code generated by protoc-gen-go.
// source: mj_baishan_desk.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

// Ignoring public import of CardInfo from mj_common.proto

// Ignoring public import of ErrorCode from mj_common.proto

// Ignoring public import of mj_enum_color from mj_common.proto

// Ignoring public import of mj_enum_gangType from mj_common.proto

// Ignoring public import of mj_enum_huType from mj_common.proto

// Ignoring public import of mj_enum_composeCardType from mj_common.proto

// Ignoring public import of mj_enum_paiType from mj_common.proto

// Ignoring public import of mj_enum_userGameStatus from mj_common.proto

// Ignoring public import of mj_enum_deskGameStatus from mj_common.proto

// Ignoring public import of MJRoomType from mj_common.proto

type MjEnumProtoId int32

const (
	MjEnumProtoId_PID_QUICK_CONN               MjEnumProtoId = 1
	MjEnumProtoId_PID_QUICK_CONN_ACK           MjEnumProtoId = 2
	MjEnumProtoId_PID_GAME_LOGIN               MjEnumProtoId = 3
	MjEnumProtoId_PID_GAME_LOGIN_ACK           MjEnumProtoId = 4
	MjEnumProtoId_PID_CREATEROOM               MjEnumProtoId = 5
	MjEnumProtoId_PID_CREATEROOM_ACK           MjEnumProtoId = 6
	MjEnumProtoId_PID_ENTER_ROOM               MjEnumProtoId = 7
	MjEnumProtoId_PID_ENTER_ROOM_ACK           MjEnumProtoId = 8
	MjEnumProtoId_PID_SEND_GAMEINFO            MjEnumProtoId = 9
	MjEnumProtoId_PID_READY                    MjEnumProtoId = 10
	MjEnumProtoId_PID_READY_ACK                MjEnumProtoId = 11
	MjEnumProtoId_PID_EXCHANGECARDS            MjEnumProtoId = 12
	MjEnumProtoId_PID_EXCHANGECARDS_ACK        MjEnumProtoId = 13
	MjEnumProtoId_PID_DINGQUE                  MjEnumProtoId = 14
	MjEnumProtoId_PID_OPENING                  MjEnumProtoId = 15
	MjEnumProtoId_PID_DEAL_CARDS               MjEnumProtoId = 16
	MjEnumProtoId_PID_GET_IN_CARD              MjEnumProtoId = 17
	MjEnumProtoId_PID_SEND_OUT_CARD            MjEnumProtoId = 18
	MjEnumProtoId_PID_SEND_OUT_CARD_ACK        MjEnumProtoId = 19
	MjEnumProtoId_PID_PENG_CARD                MjEnumProtoId = 20
	MjEnumProtoId_PID_PENG_CARD_ACK            MjEnumProtoId = 21
	MjEnumProtoId_PID_GANG_CARD                MjEnumProtoId = 22
	MjEnumProtoId_PID_GANG_CARD_ACK            MjEnumProtoId = 23
	MjEnumProtoId_PID_GUO_CARD                 MjEnumProtoId = 24
	MjEnumProtoId_PID_GUO_CARD_ACK             MjEnumProtoId = 25
	MjEnumProtoId_PID_HU_CARD                  MjEnumProtoId = 26
	MjEnumProtoId_PID_HU_CARD_ACK              MjEnumProtoId = 27
	MjEnumProtoId_PID_BROADCAST_BEGIN_DINGQUE  MjEnumProtoId = 28
	MjEnumProtoId_PID_BROADCAST_BEGIN_EXCHANGE MjEnumProtoId = 29
	MjEnumProtoId_PID_OVERTURN                 MjEnumProtoId = 30
	MjEnumProtoId_PID_CURRENTRESULT            MjEnumProtoId = 31
	MjEnumProtoId_PID_SENDENDLOTTERY           MjEnumProtoId = 32
	MjEnumProtoId_PID_DISSOLVE_DESK            MjEnumProtoId = 33
	MjEnumProtoId_PID_DISSOLVE_DESK_ACK        MjEnumProtoId = 34
	MjEnumProtoId_PID_LEAVE_DESK               MjEnumProtoId = 35
	MjEnumProtoId_PID_LEAVE_DESK_ACK           MjEnumProtoId = 36
	MjEnumProtoId_PID_MESSAGE                  MjEnumProtoId = 37
	MjEnumProtoId_PID_SEND_MESSAGE             MjEnumProtoId = 38
	MjEnumProtoId_PID_GAME_DINGQUEEND          MjEnumProtoId = 39
	MjEnumProtoId_PID_GAME_GAMERECORD          MjEnumProtoId = 40
	MjEnumProtoId_PID_GAME_ACKGAMERECORD       MjEnumProtoId = 41
	MjEnumProtoId_PID_GAME_ACKGAMERECORDEDN    MjEnumProtoId = 42
	MjEnumProtoId_PID_GAME_NOTICE              MjEnumProtoId = 43
	MjEnumProtoId_PID_GAME_ACKNOTICE           MjEnumProtoId = 44
)

var MjEnumProtoId_name = map[int32]string{
	1:  "PID_QUICK_CONN",
	2:  "PID_QUICK_CONN_ACK",
	3:  "PID_GAME_LOGIN",
	4:  "PID_GAME_LOGIN_ACK",
	5:  "PID_CREATEROOM",
	6:  "PID_CREATEROOM_ACK",
	7:  "PID_ENTER_ROOM",
	8:  "PID_ENTER_ROOM_ACK",
	9:  "PID_SEND_GAMEINFO",
	10: "PID_READY",
	11: "PID_READY_ACK",
	12: "PID_EXCHANGECARDS",
	13: "PID_EXCHANGECARDS_ACK",
	14: "PID_DINGQUE",
	15: "PID_OPENING",
	16: "PID_DEAL_CARDS",
	17: "PID_GET_IN_CARD",
	18: "PID_SEND_OUT_CARD",
	19: "PID_SEND_OUT_CARD_ACK",
	20: "PID_PENG_CARD",
	21: "PID_PENG_CARD_ACK",
	22: "PID_GANG_CARD",
	23: "PID_GANG_CARD_ACK",
	24: "PID_GUO_CARD",
	25: "PID_GUO_CARD_ACK",
	26: "PID_HU_CARD",
	27: "PID_HU_CARD_ACK",
	28: "PID_BROADCAST_BEGIN_DINGQUE",
	29: "PID_BROADCAST_BEGIN_EXCHANGE",
	30: "PID_OVERTURN",
	31: "PID_CURRENTRESULT",
	32: "PID_SENDENDLOTTERY",
	33: "PID_DISSOLVE_DESK",
	34: "PID_DISSOLVE_DESK_ACK",
	35: "PID_LEAVE_DESK",
	36: "PID_LEAVE_DESK_ACK",
	37: "PID_MESSAGE",
	38: "PID_SEND_MESSAGE",
	39: "PID_GAME_DINGQUEEND",
	40: "PID_GAME_GAMERECORD",
	41: "PID_GAME_ACKGAMERECORD",
	42: "PID_GAME_ACKGAMERECORDEDN",
	43: "PID_GAME_NOTICE",
	44: "PID_GAME_ACKNOTICE",
}
var MjEnumProtoId_value = map[string]int32{
	"PID_QUICK_CONN":               1,
	"PID_QUICK_CONN_ACK":           2,
	"PID_GAME_LOGIN":               3,
	"PID_GAME_LOGIN_ACK":           4,
	"PID_CREATEROOM":               5,
	"PID_CREATEROOM_ACK":           6,
	"PID_ENTER_ROOM":               7,
	"PID_ENTER_ROOM_ACK":           8,
	"PID_SEND_GAMEINFO":            9,
	"PID_READY":                    10,
	"PID_READY_ACK":                11,
	"PID_EXCHANGECARDS":            12,
	"PID_EXCHANGECARDS_ACK":        13,
	"PID_DINGQUE":                  14,
	"PID_OPENING":                  15,
	"PID_DEAL_CARDS":               16,
	"PID_GET_IN_CARD":              17,
	"PID_SEND_OUT_CARD":            18,
	"PID_SEND_OUT_CARD_ACK":        19,
	"PID_PENG_CARD":                20,
	"PID_PENG_CARD_ACK":            21,
	"PID_GANG_CARD":                22,
	"PID_GANG_CARD_ACK":            23,
	"PID_GUO_CARD":                 24,
	"PID_GUO_CARD_ACK":             25,
	"PID_HU_CARD":                  26,
	"PID_HU_CARD_ACK":              27,
	"PID_BROADCAST_BEGIN_DINGQUE":  28,
	"PID_BROADCAST_BEGIN_EXCHANGE": 29,
	"PID_OVERTURN":                 30,
	"PID_CURRENTRESULT":            31,
	"PID_SENDENDLOTTERY":           32,
	"PID_DISSOLVE_DESK":            33,
	"PID_DISSOLVE_DESK_ACK":        34,
	"PID_LEAVE_DESK":               35,
	"PID_LEAVE_DESK_ACK":           36,
	"PID_MESSAGE":                  37,
	"PID_SEND_MESSAGE":             38,
	"PID_GAME_DINGQUEEND":          39,
	"PID_GAME_GAMERECORD":          40,
	"PID_GAME_ACKGAMERECORD":       41,
	"PID_GAME_ACKGAMERECORDEDN":    42,
	"PID_GAME_NOTICE":              43,
	"PID_GAME_ACKNOTICE":           44,
}

func (x MjEnumProtoId) Enum() *MjEnumProtoId {
	p := new(MjEnumProtoId)
	*p = x
	return p
}
func (x MjEnumProtoId) String() string {
	return proto.EnumName(MjEnumProtoId_name, int32(x))
}
func (x *MjEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumProtoId_value, data, "MjEnumProtoId")
	if err != nil {
		return err
	}
	*x = MjEnumProtoId(value)
	return nil
}
func (MjEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

type MjEnumErrorCode int32

const (
	MjEnumErrorCode_EC_MJ_SUCCESS MjEnumErrorCode = 0
	// -101   -200	游戏异常
	MjEnumErrorCode_EC_MJ_CREATE_DESK_DIAMOND_NOTENOUGH MjEnumErrorCode = -101
	MjEnumErrorCode_EC_MJ_CREATE_DESK_USER_NOTFOUND     MjEnumErrorCode = -102
	MjEnumErrorCode_EC_MJ_INTO_DESK_NOTFOUND            MjEnumErrorCode = -103
	MjEnumErrorCode_EC_MJ_GAME_READY_REPEAT             MjEnumErrorCode = -110
	MjEnumErrorCode_EC_MJ_GAME_READY_CHIP_NOT_ENOUGH    MjEnumErrorCode = -111
)

var MjEnumErrorCode_name = map[int32]string{
	0:    "EC_MJ_SUCCESS",
	-101: "EC_MJ_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_MJ_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_MJ_INTO_DESK_NOTFOUND",
	-110: "EC_MJ_GAME_READY_REPEAT",
	-111: "EC_MJ_GAME_READY_CHIP_NOT_ENOUGH",
}
var MjEnumErrorCode_value = map[string]int32{
	"EC_MJ_SUCCESS":                       0,
	"EC_MJ_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_MJ_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_MJ_INTO_DESK_NOTFOUND":            -103,
	"EC_MJ_GAME_READY_REPEAT":             -110,
	"EC_MJ_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x MjEnumErrorCode) Enum() *MjEnumErrorCode {
	p := new(MjEnumErrorCode)
	*p = x
	return p
}
func (x MjEnumErrorCode) String() string {
	return proto.EnumName(MjEnumErrorCode_name, int32(x))
}
func (x *MjEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumErrorCode_value, data, "MjEnumErrorCode")
	if err != nil {
		return err
	}
	*x = MjEnumErrorCode(value)
	return nil
}
func (MjEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{1} }

type MjEnumPlayOption int32

const (
	MjEnumPlayOption_MJ_OPT_EXCHANGE_CARDS       MjEnumPlayOption = 1
	MjEnumPlayOption_MJ_OPT_ZIMO_JIA_DI          MjEnumPlayOption = 2
	MjEnumPlayOption_MJ_OPT_ZIMO_JIA_FAN         MjEnumPlayOption = 3
	MjEnumPlayOption_MJ_OPT_DIANGANG_HUA_DIANPAO MjEnumPlayOption = 4
	MjEnumPlayOption_MJ_OPT_DIANGANG_HUA_ZIMO    MjEnumPlayOption = 5
	MjEnumPlayOption_MJ_OPT_YAOJIU_JIANGDUI      MjEnumPlayOption = 6
	MjEnumPlayOption_MJ_OPT_MENQING_MID_CARD     MjEnumPlayOption = 7
	MjEnumPlayOption_MJ_OPT_TIAN_DI_HU           MjEnumPlayOption = 8
	MjEnumPlayOption_MJ_OPT_KA_ER_TIAO           MjEnumPlayOption = 9
	// 三人两房牌
	MjEnumPlayOption_MJ_OPT_DIANPAO_CAN_HU MjEnumPlayOption = 10
	MjEnumPlayOption_MJ_OPT_DUIDUIHU_2_FAN MjEnumPlayOption = 11
	MjEnumPlayOption_MJ_OPT_JIA_XIN_WU     MjEnumPlayOption = 12
	// 倒倒胡
	MjEnumPlayOption_MJ_OPT_DDH_QIDUI_HU   MjEnumPlayOption = 13
	MjEnumPlayOption_MJ_OPT_DDH_ZIMO_HU    MjEnumPlayOption = 14
	MjEnumPlayOption_MJ_OPT_DDH_DIANPAO_HU MjEnumPlayOption = 15
)

var MjEnumPlayOption_name = map[int32]string{
	1:  "MJ_OPT_EXCHANGE_CARDS",
	2:  "MJ_OPT_ZIMO_JIA_DI",
	3:  "MJ_OPT_ZIMO_JIA_FAN",
	4:  "MJ_OPT_DIANGANG_HUA_DIANPAO",
	5:  "MJ_OPT_DIANGANG_HUA_ZIMO",
	6:  "MJ_OPT_YAOJIU_JIANGDUI",
	7:  "MJ_OPT_MENQING_MID_CARD",
	8:  "MJ_OPT_TIAN_DI_HU",
	9:  "MJ_OPT_KA_ER_TIAO",
	10: "MJ_OPT_DIANPAO_CAN_HU",
	11: "MJ_OPT_DUIDUIHU_2_FAN",
	12: "MJ_OPT_JIA_XIN_WU",
	13: "MJ_OPT_DDH_QIDUI_HU",
	14: "MJ_OPT_DDH_ZIMO_HU",
	15: "MJ_OPT_DDH_DIANPAO_HU",
}
var MjEnumPlayOption_value = map[string]int32{
	"MJ_OPT_EXCHANGE_CARDS":       1,
	"MJ_OPT_ZIMO_JIA_DI":          2,
	"MJ_OPT_ZIMO_JIA_FAN":         3,
	"MJ_OPT_DIANGANG_HUA_DIANPAO": 4,
	"MJ_OPT_DIANGANG_HUA_ZIMO":    5,
	"MJ_OPT_YAOJIU_JIANGDUI":      6,
	"MJ_OPT_MENQING_MID_CARD":     7,
	"MJ_OPT_TIAN_DI_HU":           8,
	"MJ_OPT_KA_ER_TIAO":           9,
	"MJ_OPT_DIANPAO_CAN_HU":       10,
	"MJ_OPT_DUIDUIHU_2_FAN":       11,
	"MJ_OPT_JIA_XIN_WU":           12,
	"MJ_OPT_DDH_QIDUI_HU":         13,
	"MJ_OPT_DDH_ZIMO_HU":          14,
	"MJ_OPT_DDH_DIANPAO_HU":       15,
}

func (x MjEnumPlayOption) Enum() *MjEnumPlayOption {
	p := new(MjEnumPlayOption)
	*p = x
	return p
}
func (x MjEnumPlayOption) String() string {
	return proto.EnumName(MjEnumPlayOption_name, int32(x))
}
func (x *MjEnumPlayOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MjEnumPlayOption_value, data, "MjEnumPlayOption")
	if err != nil {
		return err
	}
	*x = MjEnumPlayOption(value)
	return nil
}
func (MjEnumPlayOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{2} }

// 玩法：包括自摸、点炮、以及可多选的玩法
type MjBasePlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MjBasePlayOptions) Reset()                    { *m = MjBasePlayOptions{} }
func (m *MjBasePlayOptions) String() string            { return proto.CompactTextString(m) }
func (*MjBasePlayOptions) ProtoMessage()               {}
func (*MjBasePlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

func (m *MjBasePlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *MjBasePlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *MjBasePlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *MjBasePlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

// 麻将牌
type MjBaseCardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MjBaseCardInfo) Reset()                    { *m = MjBaseCardInfo{} }
func (m *MjBaseCardInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBaseCardInfo) ProtoMessage()               {}
func (*MjBaseCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{1} }

func (m *MjBaseCardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MjBaseCardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *MjBaseCardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type MjBaseRoomTypeInfo struct {
	MjRoomType       *MJRoomType        `protobuf:"varint,1,opt,name=mjRoomType,enum=ddproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout       *int32             `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax           *int64             `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions      *MjBasePlayOptions `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum         *int32             `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement       *int32             `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue        *int64             `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MjBaseRoomTypeInfo) Reset()                    { *m = MjBaseRoomTypeInfo{} }
func (m *MjBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBaseRoomTypeInfo) ProtoMessage()               {}
func (*MjBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{2} }

func (m *MjBaseRoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *MjBaseRoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetPlayOptions() *MjBasePlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *MjBaseRoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *MjBaseRoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

type MjBaseComposeCard struct {
	Value            *int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MjBaseComposeCard) Reset()                    { *m = MjBaseComposeCard{} }
func (m *MjBaseComposeCard) String() string            { return proto.CompactTextString(m) }
func (*MjBaseComposeCard) ProtoMessage()               {}
func (*MjBaseComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{3} }

func (m *MjBaseComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *MjBaseComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type MjBasePlayerCard struct {
	HandCard         []*MjBaseCardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*MjBaseComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []*MjBaseCardInfo    `protobuf:"bytes,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           []*MjBaseCardInfo    `protobuf:"bytes,4,rep,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32              `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *MjBasePlayerCard) Reset()                    { *m = MjBasePlayerCard{} }
func (m *MjBasePlayerCard) String() string            { return proto.CompactTextString(m) }
func (*MjBasePlayerCard) ProtoMessage()               {}
func (*MjBasePlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{4} }

func (m *MjBasePlayerCard) GetHandCard() []*MjBaseCardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetComposeCard() []*MjBaseComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetOutCard() []*MjBaseCardInfo {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetHuCard() []*MjBaseCardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *MjBasePlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type MjBasePlayerInfo struct {
	IsBanker         *bool             `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *MjBasePlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64            `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string           `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32            `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32           `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool             `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32            `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32            `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32            `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32            `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32            `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo       `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32            `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MjBasePlayerInfo) Reset()                    { *m = MjBasePlayerInfo{} }
func (m *MjBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBasePlayerInfo) ProtoMessage()               {}
func (*MjBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{5} }

func (m *MjBasePlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *MjBasePlayerInfo) GetPlayerCard() *MjBasePlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *MjBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *MjBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *MjBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *MjBasePlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MjBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *MjBasePlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *MjBasePlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *MjBasePlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *MjBasePlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *MjBasePlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *MjBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *MjBasePlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

type MjBaseDeskGameInfo struct {
	GameStatus       *int32              `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *MjBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32              `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32             `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32              `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32              `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32              `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32              `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64              `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32              `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32              `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string             `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32              `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32             `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *MjBaseDeskGameInfo) Reset()                    { *m = MjBaseDeskGameInfo{} }
func (m *MjBaseDeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*MjBaseDeskGameInfo) ProtoMessage()               {}
func (*MjBaseDeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{6} }

func (m *MjBaseDeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetRoomTypeInfo() *MjBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *MjBaseDeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *MjBaseDeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *MjBaseDeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

// 房主解散房间(未开局)
type MjReqDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MjReqDissolveDesk) Reset()                    { *m = MjReqDissolveDesk{} }
func (m *MjReqDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*MjReqDissolveDesk) ProtoMessage()               {}
func (*MjReqDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{7} }

func (m *MjReqDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MjReqDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 解散房间回复
type MjAckDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	DeskId           *int32       `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	PassWord         *string      `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MjAckDissolveDesk) Reset()                    { *m = MjAckDissolveDesk{} }
func (m *MjAckDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*MjAckDissolveDesk) ProtoMessage()               {}
func (*MjAckDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{8} }

func (m *MjAckDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MjAckDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MjAckDissolveDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *MjAckDissolveDesk) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func init() {
	proto.RegisterType((*MjBasePlayOptions)(nil), "ddproto.mj_base_playOptions")
	proto.RegisterType((*MjBaseCardInfo)(nil), "ddproto.mj_base_cardInfo")
	proto.RegisterType((*MjBaseRoomTypeInfo)(nil), "ddproto.mj_base_roomTypeInfo")
	proto.RegisterType((*MjBaseComposeCard)(nil), "ddproto.mj_base_composeCard")
	proto.RegisterType((*MjBasePlayerCard)(nil), "ddproto.mj_base_playerCard")
	proto.RegisterType((*MjBasePlayerInfo)(nil), "ddproto.mj_base_playerInfo")
	proto.RegisterType((*MjBaseDeskGameInfo)(nil), "ddproto.mj_base_deskGameInfo")
	proto.RegisterType((*MjReqDissolveDesk)(nil), "ddproto.mj_req_dissolveDesk")
	proto.RegisterType((*MjAckDissolveDesk)(nil), "ddproto.mj_ack_dissolveDesk")
	proto.RegisterEnum("ddproto.MjEnumProtoId", MjEnumProtoId_name, MjEnumProtoId_value)
	proto.RegisterEnum("ddproto.MjEnumErrorCode", MjEnumErrorCode_name, MjEnumErrorCode_value)
	proto.RegisterEnum("ddproto.MjEnumPlayOption", MjEnumPlayOption_name, MjEnumPlayOption_value)
}

var fileDescriptor24 = []byte{
	// 1525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x52, 0xdb, 0xd6,
	0x16, 0x8e, 0x6d, 0xc0, 0x78, 0xfb, 0x07, 0x21, 0x20, 0x98, 0x9f, 0x9c, 0x70, 0x48, 0x72, 0x92,
	0x90, 0x9c, 0x9c, 0x53, 0x7a, 0xd9, 0x2b, 0x21, 0x29, 0xb6, 0x00, 0x4b, 0x46, 0x96, 0xf2, 0xd3,
	0x1b, 0x8d, 0xb0, 0x76, 0x83, 0x02, 0x96, 0x1c, 0x49, 0x4e, 0x48, 0x2f, 0xfb, 0x06, 0xed, 0x5d,
	0xdb, 0x8b, 0xbe, 0x44, 0xdf, 0xa3, 0x0f, 0xd0, 0x99, 0x3e, 0x42, 0x5f, 0xa1, 0x5d, 0x7b, 0x49,
	0x5b, 0xb2, 0x83, 0x67, 0x72, 0xd3, 0x4c, 0x86, 0x41, 0xdf, 0xfa, 0xd6, 0xdf, 0xb7, 0xd6, 0xda,
	0x03, 0xd9, 0x18, 0xbd, 0x75, 0xce, 0x5d, 0x3f, 0xbe, 0x70, 0x03, 0xc7, 0xa3, 0xf1, 0xe5, 0xb3,
	0x71, 0x14, 0x26, 0xa1, 0x58, 0xf5, 0x3c, 0xfc, 0x65, 0x7b, 0x6d, 0x18, 0x8e, 0x46, 0x61, 0xe0,
	0x0c, 0xaf, 0x7c, 0x1a, 0x24, 0xa9, 0x75, 0x7b, 0x05, 0x9c, 0x52, 0x3c, 0x05, 0xf6, 0x2f, 0xc9,
	0x1a, 0xc6, 0x89, 0xa9, 0x33, 0xbe, 0x72, 0x3f, 0x1a, 0xe3, 0xc4, 0x0f, 0x83, 0x58, 0x5c, 0x25,
	0xb5, 0x6f, 0xfd, 0x5e, 0x68, 0xba, 0x9e, 0x1f, 0xb6, 0x4b, 0x7b, 0xa5, 0x47, 0x8b, 0x62, 0x9b,
	0x08, 0x9e, 0xef, 0x06, 0x1d, 0x37, 0x78, 0xd3, 0x9d, 0xb8, 0xa9, 0xa5, 0x8c, 0x96, 0xdb, 0xa4,
	0x15, 0x26, 0x17, 0x34, 0x8a, 0xe5, 0x0b, 0x3a, 0xbc, 0x3c, 0x0a, 0xaf, 0xdb, 0x95, 0xbd, 0x0a,
	0xe0, 0x2b, 0xa4, 0x7a, 0x31, 0x49, 0x89, 0x0b, 0x8c, 0xb8, 0xff, 0x15, 0x11, 0x78, 0xb2, 0xa1,
	0x1b, 0x79, 0x5a, 0xf0, 0x4d, 0x28, 0x36, 0xc8, 0x42, 0xf2, 0x71, 0x4c, 0xb3, 0x24, 0x4d, 0xb2,
	0xf8, 0xde, 0xbd, 0x9a, 0xd0, 0x2c, 0x32, 0x21, 0x65, 0xdf, 0x83, 0x68, 0xcc, 0xf9, 0xb7, 0x12,
	0x59, 0xe7, 0xde, 0x51, 0x18, 0x8e, 0x2c, 0xf0, 0xc2, 0x08, 0x0f, 0x09, 0x19, 0xbd, 0x35, 0x33,
	0x04, 0xe3, 0xb4, 0x0e, 0xd7, 0x9e, 0x65, 0x32, 0x3c, 0xeb, 0x1d, 0x73, 0x93, 0x08, 0xe1, 0xce,
	0x43, 0xc8, 0x1b, 0xcb, 0xe1, 0x24, 0xc9, 0x32, 0xb4, 0xc8, 0xd2, 0xd0, 0x1d, 0xf7, 0xdc, 0x6b,
	0xcc, 0x52, 0x11, 0xbf, 0x20, 0xf5, 0x29, 0x1d, 0xb0, 0xee, 0xfa, 0xe1, 0x6e, 0x1e, 0x6d, 0x9e,
	0x56, 0x02, 0x59, 0x66, 0xdd, 0xc4, 0xfa, 0x64, 0xd4, 0x5e, 0xc4, 0xa0, 0x90, 0x28, 0xa6, 0x49,
	0x72, 0x45, 0x47, 0xa0, 0x7c, 0x7b, 0x09, 0x31, 0x50, 0x94, 0x79, 0xbe, 0xc0, 0xee, 0xaa, 0x2c,
	0xd7, 0xfe, 0x61, 0xa1, 0x3d, 0xcc, 0x64, 0x1c, 0xc6, 0x54, 0x86, 0x38, 0x85, 0x06, 0xa9, 0x24,
	0x5c, 0x20, 0xac, 0x77, 0xff, 0xf7, 0x12, 0x11, 0xa7, 0x8b, 0xa0, 0x11, 0xfa, 0x3c, 0x21, 0xcb,
	0xb0, 0x07, 0x1e, 0xfb, 0x1d, 0xdc, 0x2a, 0x50, 0xf3, 0xd6, 0x8d, 0x9a, 0x73, 0xc9, 0xa1, 0xc7,
	0xa9, 0x7c, 0x10, 0xb8, 0x32, 0xb7, 0xc7, 0xe9, 0x9a, 0x0e, 0x48, 0x15, 0x34, 0x43, 0x7a, 0xe5,
	0x73, 0xe1, 0x1f, 0x93, 0xa5, 0x8b, 0x09, 0x52, 0x17, 0x3e, 0x47, 0x05, 0xf5, 0xed, 0x98, 0x46,
	0x9a, 0x87, 0xc2, 0x35, 0xf7, 0x7f, 0x2d, 0x7f, 0xda, 0x1d, 0xd2, 0x40, 0x61, 0x3f, 0x3e, 0x72,
	0x83, 0x4b, 0x1a, 0xa1, 0x28, 0xcb, 0xe2, 0xff, 0x08, 0x29, 0xba, 0x47, 0x69, 0xea, 0x87, 0x3b,
	0x73, 0xa7, 0x94, 0x09, 0x04, 0x2a, 0x0e, 0x43, 0x3f, 0xc8, 0xa6, 0x0c, 0x01, 0x03, 0x7f, 0x78,
	0xa9, 0xbb, 0x23, 0x8a, 0x23, 0xae, 0x89, 0x75, 0x52, 0x89, 0xe9, 0x75, 0x36, 0x3f, 0x28, 0x6b,
	0x92, 0x96, 0xc5, 0x66, 0xd7, 0x64, 0x8b, 0xec, 0xc7, 0xc6, 0x87, 0x00, 0xd2, 0x57, 0x31, 0x3d,
	0x10, 0xce, 0x4d, 0xea, 0x7a, 0x1f, 0xdb, 0xcb, 0xe8, 0x00, 0xf1, 0xce, 0x15, 0x3f, 0x78, 0x73,
	0x06, 0x53, 0xab, 0xf1, 0x15, 0x38, 0x57, 0xaf, 0x87, 0x30, 0x94, 0x37, 0xd4, 0x6b, 0x13, 0x1e,
	0x36, 0xe8, 0x4e, 0xfa, 0xae, 0xdf, 0xae, 0xf3, 0xef, 0x77, 0x13, 0xca, 0xbe, 0x1b, 0xf8, 0x7d,
	0x8f, 0x2c, 0x7d, 0xb8, 0x66, 0x0d, 0xb7, 0x9b, 0xd8, 0x50, 0xb1, 0xc4, 0x2f, 0xa9, 0x7f, 0xed,
	0x07, 0xa8, 0x05, 0x04, 0xee, 0x40, 0xd9, 0x83, 0xc4, 0x4d, 0x26, 0x71, 0xbb, 0x85, 0x4b, 0xf1,
	0x47, 0xb9, 0x38, 0x0d, 0xf6, 0x14, 0x30, 0xc2, 0x1c, 0x72, 0xba, 0x4f, 0x5f, 0x92, 0xc6, 0xf4,
	0xf9, 0x64, 0xe2, 0xdd, 0xb9, 0x21, 0xde, 0xcc, 0x8d, 0xc1, 0xf6, 0xa6, 0x62, 0xb2, 0x25, 0xc7,
	0x7b, 0x14, 0xd7, 0x49, 0xc3, 0x1d, 0x26, 0xfe, 0x7b, 0x9a, 0x4d, 0x70, 0x01, 0xa5, 0x82, 0x8c,
	0x0c, 0x0d, 0x03, 0xcb, 0x07, 0x6d, 0x17, 0xf9, 0xea, 0x7b, 0x14, 0xbc, 0x11, 0x4a, 0xaf, 0x61,
	0x93, 0xac, 0x40, 0x3b, 0x7e, 0x22, 0x15, 0xdc, 0x2a, 0x7f, 0x4b, 0xd0, 0xa0, 0xe4, 0x0e, 0xcb,
	0x3c, 0x9b, 0x0f, 0x30, 0xbb, 0x65, 0x99, 0xcd, 0xb1, 0x86, 0x73, 0xdc, 0x20, 0xcd, 0xe1, 0x24,
	0x8a, 0xfa, 0xc0, 0x85, 0x9b, 0x86, 0x5b, 0x23, 0x3c, 0x48, 0x12, 0x26, 0xee, 0x55, 0x81, 0xd7,
	0xf9, 0x50, 0x58, 0x57, 0xd0, 0xc3, 0x39, 0x8c, 0xb2, 0x81, 0x83, 0x5f, 0x23, 0xf5, 0x88, 0x8e,
	0x5c, 0x3f, 0x60, 0x6b, 0x12, 0xa3, 0xf2, 0x38, 0x99, 0x6c, 0xdd, 0x5a, 0xb8, 0x97, 0x27, 0x78,
	0xa9, 0x11, 0x7d, 0xe7, 0x78, 0x7e, 0x1c, 0x87, 0x57, 0xef, 0xa9, 0x02, 0x32, 0x8b, 0xf7, 0x61,
	0xd3, 0x61, 0x0b, 0xb2, 0xad, 0xac, 0x1f, 0xae, 0xe7, 0x22, 0xf6, 0xd9, 0xcf, 0x2e, 0xda, 0xa6,
	0xb6, 0xa9, 0x8c, 0xc1, 0x46, 0x18, 0xcc, 0x1d, 0x5e, 0xfe, 0x03, 0xc1, 0xd8, 0x37, 0x9b, 0xb8,
	0x96, 0xbd, 0x92, 0x6c, 0x13, 0xc7, 0x6e, 0x1c, 0xbf, 0x0c, 0xa3, 0x74, 0x22, 0xb5, 0x83, 0x3f,
	0xab, 0x84, 0xbd, 0xfa, 0x34, 0x98, 0x8c, 0x1c, 0x8c, 0xa7, 0x79, 0x20, 0x44, 0xab, 0xaf, 0x29,
	0xce, 0x99, 0xad, 0xc9, 0x27, 0x8e, 0x6c, 0xe8, 0xba, 0x50, 0x02, 0xd1, 0xc4, 0x59, 0xcc, 0x91,
	0xe4, 0x13, 0xa1, 0xcc, 0xb9, 0x1d, 0xa9, 0xa7, 0x3a, 0xa7, 0x46, 0x47, 0xd3, 0x85, 0x0a, 0xe7,
	0x16, 0x18, 0x72, 0x17, 0x38, 0x57, 0x36, 0x55, 0xc9, 0x52, 0x4d, 0xc3, 0xe8, 0x09, 0x8b, 0x9c,
	0x5b, 0x60, 0xc8, 0x5d, 0xe2, 0x5c, 0x55, 0x07, 0xd4, 0x41, 0x6e, 0x95, 0x73, 0x0b, 0x0c, 0xb9,
	0xcb, 0x30, 0xe7, 0x55, 0x86, 0x0f, 0x54, 0x3d, 0x4d, 0xaa, 0xe9, 0xcf, 0x0d, 0xa1, 0x06, 0x2f,
	0x65, 0x8d, 0xc1, 0x10, 0x59, 0x79, 0x2d, 0x10, 0xd8, 0xb3, 0x66, 0xfe, 0x89, 0x8e, 0x75, 0xee,
	0xa8, 0xbe, 0x92, 0xbb, 0x92, 0xde, 0x51, 0x65, 0xc9, 0x54, 0x06, 0x42, 0x43, 0xdc, 0x22, 0x1b,
	0x37, 0x60, 0xf4, 0x60, 0xb7, 0x5e, 0x67, 0x26, 0x45, 0xd3, 0x3b, 0x67, 0xb6, 0x2a, 0xb4, 0x38,
	0x60, 0xf4, 0x55, 0x1d, 0x30, 0x61, 0x85, 0x17, 0xae, 0xa8, 0xd2, 0xa9, 0x93, 0x06, 0x14, 0x60,
	0x8b, 0x56, 0x50, 0x10, 0xd5, 0x72, 0x40, 0x0c, 0x86, 0x0a, 0xab, 0x33, 0x55, 0x1b, 0xb6, 0x95,
	0xc2, 0x22, 0x4f, 0x3e, 0x03, 0x63, 0xf2, 0x35, 0xde, 0x01, 0xa4, 0xea, 0xa4, 0xec, 0x75, 0x1e,
	0x24, 0x87, 0x90, 0xb9, 0xc1, 0x99, 0x1d, 0x89, 0x33, 0x6f, 0x73, 0x66, 0x0e, 0x21, 0x73, 0x13,
	0x36, 0xa2, 0x81, 0xb0, 0x6d, 0xa4, 0xc4, 0x36, 0xdc, 0x92, 0x30, 0x8d, 0x20, 0x6f, 0x8b, 0xf7,
	0xd9, 0xb5, 0x53, 0xda, 0x36, 0xef, 0x29, 0x03, 0x90, 0xb5, 0x23, 0xde, 0x25, 0x3b, 0x0c, 0x3c,
	0x32, 0x0d, 0x49, 0x91, 0xa5, 0x81, 0xe5, 0x1c, 0xa9, 0x6c, 0xfc, 0x5c, 0xae, 0x5d, 0x71, 0x8f,
	0xec, 0xce, 0x23, 0x70, 0xa9, 0x85, 0x3b, 0xbc, 0x20, 0xe3, 0x85, 0x6a, 0x5a, 0xb6, 0xa9, 0x0b,
	0xff, 0xe2, 0x95, 0xcb, 0xb6, 0x69, 0xc2, 0xe8, 0x4d, 0x75, 0x60, 0x9f, 0x5a, 0xc2, 0x5d, 0xbe,
	0x0d, 0x4c, 0x28, 0xf8, 0x7f, 0x6a, 0x58, 0xb0, 0x15, 0xaf, 0x85, 0x3d, 0x4e, 0x57, 0xb4, 0xc1,
	0xc0, 0x38, 0x7d, 0xa1, 0xc2, 0x24, 0x06, 0x27, 0xc2, 0xbf, 0xb9, 0xae, 0x33, 0x30, 0x56, 0xbd,
	0xcf, 0x47, 0x76, 0xaa, 0x4a, 0x9c, 0x7e, 0x8f, 0x47, 0x2f, 0x30, 0xe4, 0xde, 0xe7, 0x3a, 0xf4,
	0xd4, 0xc1, 0x40, 0x82, 0x7a, 0x1f, 0x70, 0xb9, 0x70, 0x5e, 0x1c, 0xfd, 0x0f, 0xbc, 0x60, 0x6b,
	0xf9, 0x09, 0x64, 0xdd, 0x03, 0x41, 0x78, 0x38, 0x63, 0x60, 0x3f, 0x4c, 0x55, 0x36, 0x40, 0xcf,
	0x47, 0xe2, 0x36, 0xb9, 0x9d, 0x1b, 0x20, 0xd5, 0x94, 0xed, 0xb1, 0x78, 0x87, 0x6c, 0xcd, 0xb7,
	0xa9, 0x8a, 0x2e, 0x1c, 0xe4, 0xeb, 0xc5, 0xcc, 0xba, 0x61, 0x69, 0xb2, 0x2a, 0x3c, 0x99, 0x39,
	0x42, 0xf0, 0xc9, 0xf0, 0xa7, 0x07, 0xdf, 0x95, 0xc9, 0x2a, 0x3f, 0x78, 0x1a, 0x45, 0x61, 0x24,
	0x87, 0x1e, 0x65, 0x0b, 0xa3, 0xca, 0x4e, 0xef, 0xd8, 0x19, 0xd8, 0xb2, 0x0c, 0x5d, 0x08, 0xb7,
	0xc4, 0xff, 0x93, 0x7b, 0x29, 0x94, 0xde, 0x66, 0x2a, 0x82, 0xa2, 0x49, 0x3d, 0x03, 0x3a, 0x85,
	0x70, 0xaa, 0x6e, 0xd8, 0x9d, 0xae, 0xf0, 0xf3, 0x5f, 0xd9, 0xbf, 0x92, 0xf8, 0x94, 0xdc, 0xbd,
	0xe9, 0x61, 0x0f, 0xe0, 0x58, 0x81, 0xfe, 0xdc, 0xb0, 0x41, 0x80, 0x9f, 0x0a, 0xf6, 0x03, 0xd2,
	0x4e, 0xd9, 0x9a, 0x6e, 0x19, 0x29, 0x37, 0xa7, 0xfd, 0x58, 0xd0, 0xee, 0x93, 0xcd, 0x94, 0x86,
	0x9d, 0xa4, 0xd7, 0x6b, 0xaa, 0x7d, 0x48, 0x20, 0xfc, 0x50, 0xb0, 0xfe, 0x4b, 0xf6, 0x6e, 0xb0,
	0xe4, 0xae, 0xd6, 0x67, 0x21, 0x9d, 0xac, 0xd2, 0xef, 0x73, 0xfa, 0xc1, 0x2f, 0x15, 0xfc, 0x4b,
	0x22, 0x7d, 0xf5, 0xf2, 0x3f, 0xd6, 0xd8, 0x8e, 0x40, 0x08, 0xa3, 0x6f, 0xe5, 0x0b, 0x99, 0x9d,
	0x30, 0xbe, 0x7f, 0x99, 0xe9, 0x6b, 0xad, 0x67, 0x38, 0xc7, 0x9a, 0x04, 0x5a, 0xc0, 0xfb, 0x07,
	0xf3, 0xfc, 0x14, 0x7f, 0x2e, 0xb1, 0x47, 0x10, 0x4e, 0x21, 0x33, 0x80, 0x66, 0x3a, 0x9e, 0x5d,
	0xd7, 0x96, 0xf0, 0xa3, 0x2f, 0x19, 0xf0, 0x1a, 0xee, 0x92, 0xf6, 0x3c, 0x02, 0x0b, 0x03, 0xef,
	0x22, 0xac, 0x43, 0x66, 0x7d, 0x2d, 0x19, 0xc7, 0x9a, 0xcd, 0x22, 0xeb, 0x1d, 0xc5, 0xd6, 0xe0,
	0x6d, 0xdc, 0x21, 0x9b, 0x99, 0xad, 0xa7, 0xea, 0x67, 0xb0, 0x5d, 0x4e, 0x8f, 0xdd, 0x07, 0xbb,
	0xcb, 0x2a, 0x5b, 0xff, 0xcc, 0x68, 0x81, 0x07, 0xc4, 0x86, 0xa8, 0xe9, 0x1b, 0x99, 0xc1, 0x27,
	0x92, 0x03, 0x13, 0x01, 0x23, 0x7b, 0x23, 0x8b, 0x8e, 0xb3, 0xc2, 0x20, 0x8c, 0xce, 0x3c, 0xc8,
	0xb4, 0xc9, 0xd6, 0xe0, 0x3f, 0x5c, 0xfa, 0x21, 0xf6, 0x56, 0x9f, 0x0a, 0xc6, 0xfa, 0x7d, 0x05,
	0x07, 0xfc, 0xd2, 0x86, 0x77, 0xb3, 0xd0, 0x42, 0x51, 0xba, 0xce, 0x19, 0x73, 0x62, 0xa1, 0x9a,
	0x53, 0xe2, 0x31, 0x03, 0x0a, 0x05, 0x78, 0x6b, 0x3a, 0x05, 0xe0, 0xbc, 0x02, 0x30, 0xad, 0x1c,
	0x95, 0xbb, 0x95, 0xfe, 0xad, 0x7e, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xb6, 0xe4,
	0x58, 0xc8, 0x0c, 0x00, 0x00,
}
