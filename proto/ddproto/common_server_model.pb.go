// Code generated by protoc-gen-go.
// source: common_server_model.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	RoomCard            *int64  `protobuf:"varint,1,opt,name=RoomCard" json:"RoomCard,omitempty"`
	Pwd                 *string `protobuf:"bytes,2,opt,name=pwd" json:"pwd,omitempty"`
	Coin                *int64  `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	Id                  *uint32 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	NickName            *string `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	Scores              *int32  `protobuf:"varint,6,opt,name=scores" json:"scores,omitempty"`
	LastDrawLotteryTime *string `protobuf:"bytes,7,opt,name=lastDrawLotteryTime" json:"lastDrawLotteryTime,omitempty"`
	LastSignTime        *string `protobuf:"bytes,8,opt,name=lastSignTime" json:"lastSignTime,omitempty"`
	SignCount           *int32  `protobuf:"varint,9,opt,name=signCount" json:"signCount,omitempty"`
	Diamond             *int64  `protobuf:"varint,10,opt,name=Diamond" json:"Diamond,omitempty"`
	Diamond2            *int64  `protobuf:"varint,11,opt,name=Diamond2" json:"Diamond2,omitempty"`
	OpenId              *string `protobuf:"bytes,12,opt,name=openId" json:"openId,omitempty"`
	UnionId             *string `protobuf:"bytes,13,opt,name=UnionId" json:"UnionId,omitempty"`
	HeadUrl             *string `protobuf:"bytes,14,opt,name=headUrl" json:"headUrl,omitempty"`
	City                *string `protobuf:"bytes,15,opt,name=city" json:"city,omitempty"`
	Sex                 *int32  `protobuf:"varint,16,opt,name=sex" json:"sex,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *User) GetRoomCard() int64 {
	if m != nil && m.RoomCard != nil {
		return *m.RoomCard
	}
	return 0
}

func (m *User) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *User) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *User) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *User) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *User) GetScores() int32 {
	if m != nil && m.Scores != nil {
		return *m.Scores
	}
	return 0
}

func (m *User) GetLastDrawLotteryTime() string {
	if m != nil && m.LastDrawLotteryTime != nil {
		return *m.LastDrawLotteryTime
	}
	return ""
}

func (m *User) GetLastSignTime() string {
	if m != nil && m.LastSignTime != nil {
		return *m.LastSignTime
	}
	return ""
}

func (m *User) GetSignCount() int32 {
	if m != nil && m.SignCount != nil {
		return *m.SignCount
	}
	return 0
}

func (m *User) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *User) GetDiamond2() int64 {
	if m != nil && m.Diamond2 != nil {
		return *m.Diamond2
	}
	return 0
}

func (m *User) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *User) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

func (m *User) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *User) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *User) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

type TNotice struct {
	Id               *int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NoticeType       *int32   `protobuf:"varint,2,opt,name=noticeType" json:"noticeType,omitempty"`
	NoticeTitle      *string  `protobuf:"bytes,3,opt,name=noticeTitle" json:"noticeTitle,omitempty"`
	NoticeContent    *string  `protobuf:"bytes,4,opt,name=noticeContent" json:"noticeContent,omitempty"`
	NoticeMemo       *string  `protobuf:"bytes,5,opt,name=noticeMemo" json:"noticeMemo,omitempty"`
	Fileds           []string `protobuf:"bytes,6,rep,name=fileds" json:"fileds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TNotice) Reset()                    { *m = TNotice{} }
func (m *TNotice) String() string            { return proto.CompactTextString(m) }
func (*TNotice) ProtoMessage()               {}
func (*TNotice) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *TNotice) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TNotice) GetNoticeType() int32 {
	if m != nil && m.NoticeType != nil {
		return *m.NoticeType
	}
	return 0
}

func (m *TNotice) GetNoticeTitle() string {
	if m != nil && m.NoticeTitle != nil {
		return *m.NoticeTitle
	}
	return ""
}

func (m *TNotice) GetNoticeContent() string {
	if m != nil && m.NoticeContent != nil {
		return *m.NoticeContent
	}
	return ""
}

func (m *TNotice) GetNoticeMemo() string {
	if m != nil && m.NoticeMemo != nil {
		return *m.NoticeMemo
	}
	return ""
}

func (m *TNotice) GetFileds() []string {
	if m != nil {
		return m.Fileds
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "ddproto.User")
	proto.RegisterType((*TNotice)(nil), "ddproto.TNotice")
}

var fileDescriptor5 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x90, 0xcf, 0x4e, 0xf3, 0x30,
	0x10, 0xc4, 0xd5, 0x26, 0x6d, 0x9a, 0xed, 0xdf, 0xcf, 0xfd, 0x90, 0x8c, 0xb8, 0xa0, 0x9e, 0x7a,
	0xe2, 0xc0, 0x2b, 0xb4, 0x17, 0x24, 0xe8, 0x01, 0xda, 0x73, 0x15, 0xc5, 0x0b, 0x58, 0x24, 0xde,
	0xc8, 0x31, 0x94, 0x3c, 0x09, 0xaf, 0xcb, 0x66, 0x09, 0xe5, 0xe6, 0xf9, 0x79, 0xd6, 0xeb, 0x19,
	0xb8, 0xcc, 0xa9, 0x2c, 0xc9, 0x1d, 0x6b, 0xf4, 0x1f, 0xe8, 0x8f, 0x25, 0x19, 0x2c, 0x6e, 0x2a,
	0x4f, 0x81, 0x54, 0x62, 0x8c, 0x1c, 0x56, 0x5f, 0x7d, 0x88, 0x0f, 0x6c, 0x50, 0x0b, 0x18, 0x3d,
	0x12, 0x95, 0x9b, 0xcc, 0x1b, 0xdd, 0xbb, 0xee, 0xad, 0x23, 0x35, 0x86, 0xa8, 0x3a, 0x19, 0xdd,
	0x67, 0x91, 0xaa, 0x09, 0xc4, 0x39, 0x59, 0xa7, 0x23, 0xb9, 0x02, 0xe8, 0x5b, 0xa3, 0x63, 0x3e,
	0x4f, 0xdb, 0x41, 0x67, 0xf3, 0xb7, 0x5d, 0x56, 0xa2, 0x1e, 0x88, 0x77, 0x06, 0xc3, 0x3a, 0x27,
	0x8f, 0xb5, 0x1e, 0xb2, 0x1e, 0xa8, 0x2b, 0x58, 0x16, 0x59, 0x1d, 0xb6, 0x3e, 0x3b, 0xdd, 0x53,
	0x08, 0xe8, 0x9b, 0xbd, 0x65, 0x73, 0x22, 0xe6, 0xff, 0x30, 0x69, 0x2f, 0x9f, 0xec, 0x8b, 0x13,
	0x3a, 0x12, 0xfa, 0x0f, 0xd2, 0x9a, 0xc9, 0x86, 0xde, 0x5d, 0xd0, 0xa9, 0xbc, 0x32, 0x87, 0x64,
	0x6b, 0x33, 0xce, 0x63, 0x34, 0xc8, 0x27, 0x78, 0x71, 0x07, 0x6e, 0xf5, 0x58, 0x08, 0x2f, 0xa6,
	0x0a, 0xdd, 0x9d, 0xd1, 0x13, 0x79, 0x85, 0x47, 0x0e, 0xce, 0x52, 0x0b, 0xa6, 0xbf, 0xe0, 0x15,
	0x33, 0x73, 0xf0, 0x85, 0x9e, 0x9d, 0x63, 0xd9, 0xd0, 0xe8, 0xb9, 0x28, 0x4e, 0x5c, 0xe3, 0xa7,
	0x5e, 0xb4, 0xfb, 0x56, 0x0d, 0x24, 0xfb, 0x1d, 0x05, 0x9b, 0x63, 0x17, 0xb7, 0x27, 0xdf, 0x60,
	0xe1, 0x84, 0xee, 0x9b, 0x0a, 0xa5, 0x9c, 0x81, 0x5a, 0xc2, 0xb8, 0x63, 0x36, 0x14, 0x28, 0x1d,
	0xa5, 0xea, 0x02, 0xa6, 0x3f, 0x70, 0x43, 0x2e, 0x20, 0xc7, 0x88, 0x05, 0x9f, 0xe7, 0x1f, 0xb0,
	0xa4, 0xbf, 0xc2, 0x9e, 0x6d, 0x81, 0xa6, 0x2d, 0x2c, 0x5a, 0xa7, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x37, 0x9e, 0xab, 0x1a, 0xb9, 0x01, 0x00, 0x00,
}
