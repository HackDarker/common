// Code generated by protoc-gen-go. DO NOT EDIT.
// source: erddz_base.proto

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_req_kickout from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_req_upload_location from common_client.proto

// Ignoring public import of common_bc_leaveTimeout from common_client.proto

// Ignoring public import of common_desk_by_agent from common_client.proto

// Ignoring public import of common_req_list_coin_desk from common_client.proto

// Ignoring public import of common_ack_list_coin_desk from common_client.proto

// Ignoring public import of CommonCoinDeskInfo from common_client.proto

// Ignoring public import of common_req_list_coin_info from common_client.proto

// Ignoring public import of common_ack_list_coin_info from common_client.proto

// Ignoring public import of CommonCoinLevelInfo from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type ErddzEnumProtoId int32

const (
	// //////////////////////////////////
	//
	ErddzEnumProtoId_ERDDZ_PID_HEARTBEAT      ErddzEnumProtoId = 0
	ErddzEnumProtoId_ERDDZ_PID_QUICK_CONN     ErddzEnumProtoId = 1
	ErddzEnumProtoId_ERDDZ_PID_QUICK_CONN_ACK ErddzEnumProtoId = 2
	ErddzEnumProtoId_ERDDZ_PID_GAME_LOGIN     ErddzEnumProtoId = 3
	ErddzEnumProtoId_ERDDZ_PID_GAME_LOGIN_ACK ErddzEnumProtoId = 4
	ErddzEnumProtoId_ERDDZ_PID_CREATEROOM     ErddzEnumProtoId = 5
	ErddzEnumProtoId_ERDDZ_PID_CREATEROOM_ACK ErddzEnumProtoId = 6
	ErddzEnumProtoId_ERDDZ_PID_ENTER_ROOM     ErddzEnumProtoId = 7
	ErddzEnumProtoId_ERDDZ_PID_ENTER_ROOM_ACK ErddzEnumProtoId = 8
	ErddzEnumProtoId_ERDDZ_PID_SEND_GAMEINFO  ErddzEnumProtoId = 9
	ErddzEnumProtoId_ERDDZ_PID_READY          ErddzEnumProtoId = 10
	ErddzEnumProtoId_ERDDZ_PID_READY_ACK      ErddzEnumProtoId = 11
	ErddzEnumProtoId_ERDDZ_PID_OPENING        ErddzEnumProtoId = 12
	ErddzEnumProtoId_ERDDZ_PID_DEAL_CARDS     ErddzEnumProtoId = 13
	ErddzEnumProtoId_ERDDZ_PID_JIAO_DIZHU     ErddzEnumProtoId = 14
	ErddzEnumProtoId_ERDDZ_PID_JIAO_DIZHU_ACK ErddzEnumProtoId = 15
	ErddzEnumProtoId_ERDDZ_PID_ROB_DIZHU      ErddzEnumProtoId = 16
	ErddzEnumProtoId_ERDDZ_PID_ROB_DIZHU_ACK  ErddzEnumProtoId = 17
	ErddzEnumProtoId_ERDDZ_PID_RANG_CARDS     ErddzEnumProtoId = 18
	ErddzEnumProtoId_ERDDZ_PID_RANG_CARDS_ACK ErddzEnumProtoId = 19
	ErddzEnumProtoId_ERDDZ_PID_DOUBLE         ErddzEnumProtoId = 20
	ErddzEnumProtoId_ERDDZ_PID_DOUBLE_ACK     ErddzEnumProtoId = 21
	// //////////////////////////////////////////
	ErddzEnumProtoId_ERDDZ_PID_OUT_CARDS     ErddzEnumProtoId = 22
	ErddzEnumProtoId_ERDDZ_PID_OUT_CARDS_ACK ErddzEnumProtoId = 23
	ErddzEnumProtoId_ERDDZ_PID_ACT_GUO       ErddzEnumProtoId = 24
	ErddzEnumProtoId_ERDDZ_PID_ACT_GUO_ACK   ErddzEnumProtoId = 25
	// //////////////////////////////////////////
	ErddzEnumProtoId_ERDDZ_PID_START_PLAY     ErddzEnumProtoId = 26
	ErddzEnumProtoId_ERDDZ_PID_OVERTURN       ErddzEnumProtoId = 27
	ErddzEnumProtoId_ERDDZ_PID_CURRENTRESULT  ErddzEnumProtoId = 28
	ErddzEnumProtoId_ERDDZ_PID_SENDENDLOTTERY ErddzEnumProtoId = 29
	// //////////////////////////////////////////
	ErddzEnumProtoId_ERDDZ_PID_DISSOLVE_DESK           ErddzEnumProtoId = 30
	ErddzEnumProtoId_ERDDZ_PID_DISSOLVE_DESK_ACK       ErddzEnumProtoId = 31
	ErddzEnumProtoId_ERDDZ_PID_LEAVE_DESK              ErddzEnumProtoId = 32
	ErddzEnumProtoId_ERDDZ_PID_LEAVE_DESK_ACK          ErddzEnumProtoId = 33
	ErddzEnumProtoId_ERDDZ_PID_MESSAGE                 ErddzEnumProtoId = 34
	ErddzEnumProtoId_ERDDZ_PID_SEND_MESSAGE            ErddzEnumProtoId = 35
	ErddzEnumProtoId_ERDDZ_PID_GAME_ENTERAGENTMODE     ErddzEnumProtoId = 36
	ErddzEnumProtoId_ERDDZ_PID_GAME_ENTERAGENTMODE_ACK ErddzEnumProtoId = 37
	ErddzEnumProtoId_ERDDZ_PID_GAME_QUITAGENTMODE      ErddzEnumProtoId = 38
	ErddzEnumProtoId_ERDDZ_PID_GAME_QUITAGENTMODE_ACK  ErddzEnumProtoId = 39
	ErddzEnumProtoId_ERDDZ_PID_ONLINEWARD_REQ          ErddzEnumProtoId = 40
	ErddzEnumProtoId_ERDDZ_PID_ONLINEWARD_ACK          ErddzEnumProtoId = 41
	ErddzEnumProtoId_ERDDZ_PID_REG_REQ                 ErddzEnumProtoId = 42
	ErddzEnumProtoId_ERDDZ_PID_REG_ACK                 ErddzEnumProtoId = 43
	ErddzEnumProtoId_ERDDZ_PID_ALLOWANCE_REQ           ErddzEnumProtoId = 44
	ErddzEnumProtoId_ERDDZ_PID_ALLOWANCE_ACK           ErddzEnumProtoId = 45
	ErddzEnumProtoId_ERDDZ_PID_KICKOUT_BC              ErddzEnumProtoId = 46
	ErddzEnumProtoId_ERDDZ_PID_APPLYDISSOVLE_REQ       ErddzEnumProtoId = 47
	ErddzEnumProtoId_ERDDZ_PID_APPLYDISSOVLE_BC        ErddzEnumProtoId = 48
	ErddzEnumProtoId_ERDDZ_PID_APPLYDISSOVLE_BACK_REQ  ErddzEnumProtoId = 49
	ErddzEnumProtoId_ERDDZ_PID_APPLYDISSOVLE_BACK_ACK  ErddzEnumProtoId = 50
	ErddzEnumProtoId_ERDDZ_PID_TIMEOUT                 ErddzEnumProtoId = 51
	ErddzEnumProtoId_ERDDZ_PID_USERBREAK               ErddzEnumProtoId = 52
)

var ErddzEnumProtoId_name = map[int32]string{
	0:  "ERDDZ_PID_HEARTBEAT",
	1:  "ERDDZ_PID_QUICK_CONN",
	2:  "ERDDZ_PID_QUICK_CONN_ACK",
	3:  "ERDDZ_PID_GAME_LOGIN",
	4:  "ERDDZ_PID_GAME_LOGIN_ACK",
	5:  "ERDDZ_PID_CREATEROOM",
	6:  "ERDDZ_PID_CREATEROOM_ACK",
	7:  "ERDDZ_PID_ENTER_ROOM",
	8:  "ERDDZ_PID_ENTER_ROOM_ACK",
	9:  "ERDDZ_PID_SEND_GAMEINFO",
	10: "ERDDZ_PID_READY",
	11: "ERDDZ_PID_READY_ACK",
	12: "ERDDZ_PID_OPENING",
	13: "ERDDZ_PID_DEAL_CARDS",
	14: "ERDDZ_PID_JIAO_DIZHU",
	15: "ERDDZ_PID_JIAO_DIZHU_ACK",
	16: "ERDDZ_PID_ROB_DIZHU",
	17: "ERDDZ_PID_ROB_DIZHU_ACK",
	18: "ERDDZ_PID_RANG_CARDS",
	19: "ERDDZ_PID_RANG_CARDS_ACK",
	20: "ERDDZ_PID_DOUBLE",
	21: "ERDDZ_PID_DOUBLE_ACK",
	22: "ERDDZ_PID_OUT_CARDS",
	23: "ERDDZ_PID_OUT_CARDS_ACK",
	24: "ERDDZ_PID_ACT_GUO",
	25: "ERDDZ_PID_ACT_GUO_ACK",
	26: "ERDDZ_PID_START_PLAY",
	27: "ERDDZ_PID_OVERTURN",
	28: "ERDDZ_PID_CURRENTRESULT",
	29: "ERDDZ_PID_SENDENDLOTTERY",
	30: "ERDDZ_PID_DISSOLVE_DESK",
	31: "ERDDZ_PID_DISSOLVE_DESK_ACK",
	32: "ERDDZ_PID_LEAVE_DESK",
	33: "ERDDZ_PID_LEAVE_DESK_ACK",
	34: "ERDDZ_PID_MESSAGE",
	35: "ERDDZ_PID_SEND_MESSAGE",
	36: "ERDDZ_PID_GAME_ENTERAGENTMODE",
	37: "ERDDZ_PID_GAME_ENTERAGENTMODE_ACK",
	38: "ERDDZ_PID_GAME_QUITAGENTMODE",
	39: "ERDDZ_PID_GAME_QUITAGENTMODE_ACK",
	40: "ERDDZ_PID_ONLINEWARD_REQ",
	41: "ERDDZ_PID_ONLINEWARD_ACK",
	42: "ERDDZ_PID_REG_REQ",
	43: "ERDDZ_PID_REG_ACK",
	44: "ERDDZ_PID_ALLOWANCE_REQ",
	45: "ERDDZ_PID_ALLOWANCE_ACK",
	46: "ERDDZ_PID_KICKOUT_BC",
	47: "ERDDZ_PID_APPLYDISSOVLE_REQ",
	48: "ERDDZ_PID_APPLYDISSOVLE_BC",
	49: "ERDDZ_PID_APPLYDISSOVLE_BACK_REQ",
	50: "ERDDZ_PID_APPLYDISSOVLE_BACK_ACK",
	51: "ERDDZ_PID_TIMEOUT",
	52: "ERDDZ_PID_USERBREAK",
}
var ErddzEnumProtoId_value = map[string]int32{
	"ERDDZ_PID_HEARTBEAT":               0,
	"ERDDZ_PID_QUICK_CONN":              1,
	"ERDDZ_PID_QUICK_CONN_ACK":          2,
	"ERDDZ_PID_GAME_LOGIN":              3,
	"ERDDZ_PID_GAME_LOGIN_ACK":          4,
	"ERDDZ_PID_CREATEROOM":              5,
	"ERDDZ_PID_CREATEROOM_ACK":          6,
	"ERDDZ_PID_ENTER_ROOM":              7,
	"ERDDZ_PID_ENTER_ROOM_ACK":          8,
	"ERDDZ_PID_SEND_GAMEINFO":           9,
	"ERDDZ_PID_READY":                   10,
	"ERDDZ_PID_READY_ACK":               11,
	"ERDDZ_PID_OPENING":                 12,
	"ERDDZ_PID_DEAL_CARDS":              13,
	"ERDDZ_PID_JIAO_DIZHU":              14,
	"ERDDZ_PID_JIAO_DIZHU_ACK":          15,
	"ERDDZ_PID_ROB_DIZHU":               16,
	"ERDDZ_PID_ROB_DIZHU_ACK":           17,
	"ERDDZ_PID_RANG_CARDS":              18,
	"ERDDZ_PID_RANG_CARDS_ACK":          19,
	"ERDDZ_PID_DOUBLE":                  20,
	"ERDDZ_PID_DOUBLE_ACK":              21,
	"ERDDZ_PID_OUT_CARDS":               22,
	"ERDDZ_PID_OUT_CARDS_ACK":           23,
	"ERDDZ_PID_ACT_GUO":                 24,
	"ERDDZ_PID_ACT_GUO_ACK":             25,
	"ERDDZ_PID_START_PLAY":              26,
	"ERDDZ_PID_OVERTURN":                27,
	"ERDDZ_PID_CURRENTRESULT":           28,
	"ERDDZ_PID_SENDENDLOTTERY":          29,
	"ERDDZ_PID_DISSOLVE_DESK":           30,
	"ERDDZ_PID_DISSOLVE_DESK_ACK":       31,
	"ERDDZ_PID_LEAVE_DESK":              32,
	"ERDDZ_PID_LEAVE_DESK_ACK":          33,
	"ERDDZ_PID_MESSAGE":                 34,
	"ERDDZ_PID_SEND_MESSAGE":            35,
	"ERDDZ_PID_GAME_ENTERAGENTMODE":     36,
	"ERDDZ_PID_GAME_ENTERAGENTMODE_ACK": 37,
	"ERDDZ_PID_GAME_QUITAGENTMODE":      38,
	"ERDDZ_PID_GAME_QUITAGENTMODE_ACK":  39,
	"ERDDZ_PID_ONLINEWARD_REQ":          40,
	"ERDDZ_PID_ONLINEWARD_ACK":          41,
	"ERDDZ_PID_REG_REQ":                 42,
	"ERDDZ_PID_REG_ACK":                 43,
	"ERDDZ_PID_ALLOWANCE_REQ":           44,
	"ERDDZ_PID_ALLOWANCE_ACK":           45,
	"ERDDZ_PID_KICKOUT_BC":              46,
	"ERDDZ_PID_APPLYDISSOVLE_REQ":       47,
	"ERDDZ_PID_APPLYDISSOVLE_BC":        48,
	"ERDDZ_PID_APPLYDISSOVLE_BACK_REQ":  49,
	"ERDDZ_PID_APPLYDISSOVLE_BACK_ACK":  50,
	"ERDDZ_PID_TIMEOUT":                 51,
	"ERDDZ_PID_USERBREAK":               52,
}

func (x ErddzEnumProtoId) Enum() *ErddzEnumProtoId {
	p := new(ErddzEnumProtoId)
	*p = x
	return p
}
func (x ErddzEnumProtoId) String() string {
	return proto.EnumName(ErddzEnumProtoId_name, int32(x))
}
func (x *ErddzEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumProtoId_value, data, "ErddzEnumProtoId")
	if err != nil {
		return err
	}
	*x = ErddzEnumProtoId(value)
	return nil
}
func (ErddzEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{0} }

type ErddzEnumErrorCode int32

const (
	ErddzEnumErrorCode_ERDDZ_EC_SUCCESS ErddzEnumErrorCode = 0
	// -101   -200	游戏异常
	ErddzEnumErrorCode_ERDDZ_EC_CREATE_DESK_DIAMOND_NOTENOUGH ErddzEnumErrorCode = -101
	ErddzEnumErrorCode_ERDDZ_EC_CREATE_DESK_USER_NOTFOUND     ErddzEnumErrorCode = -102
	ErddzEnumErrorCode_ERDDZ_EC_INTO_DESK_NOTFOUND            ErddzEnumErrorCode = -103
	ErddzEnumErrorCode_ERDDZ_EC_INTO_DESK_ISFULL              ErddzEnumErrorCode = -104
	ErddzEnumErrorCode_ERDDZ_EC_GAME_READY_REPEAT             ErddzEnumErrorCode = -110
	ErddzEnumErrorCode_ERDDZ_EC_GAME_READY_CHIP_NOT_ENOUGH    ErddzEnumErrorCode = -111
)

var ErddzEnumErrorCode_name = map[int32]string{
	0:    "ERDDZ_EC_SUCCESS",
	-101: "ERDDZ_EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "ERDDZ_EC_CREATE_DESK_USER_NOTFOUND",
	-103: "ERDDZ_EC_INTO_DESK_NOTFOUND",
	-104: "ERDDZ_EC_INTO_DESK_ISFULL",
	-110: "ERDDZ_EC_GAME_READY_REPEAT",
	-111: "ERDDZ_EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var ErddzEnumErrorCode_value = map[string]int32{
	"ERDDZ_EC_SUCCESS":                       0,
	"ERDDZ_EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"ERDDZ_EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"ERDDZ_EC_INTO_DESK_NOTFOUND":            -103,
	"ERDDZ_EC_INTO_DESK_ISFULL":              -104,
	"ERDDZ_EC_GAME_READY_REPEAT":             -110,
	"ERDDZ_EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x ErddzEnumErrorCode) Enum() *ErddzEnumErrorCode {
	p := new(ErddzEnumErrorCode)
	*p = x
	return p
}
func (x ErddzEnumErrorCode) String() string {
	return proto.EnumName(ErddzEnumErrorCode_name, int32(x))
}
func (x *ErddzEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumErrorCode_value, data, "ErddzEnumErrorCode")
	if err != nil {
		return err
	}
	*x = ErddzEnumErrorCode(value)
	return nil
}
func (ErddzEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{1} }

// 牌型
type ErddzEnumPaiType int32

const (
	ErddzEnumPaiType_ERDDZ_ERRORCARD          ErddzEnumPaiType = 0
	ErddzEnumPaiType_ERDDZ_SINGLECARD         ErddzEnumPaiType = 1
	ErddzEnumPaiType_ERDDZ_DOUBLECARD         ErddzEnumPaiType = 2
	ErddzEnumPaiType_ERDDZ_THREECARD          ErddzEnumPaiType = 3
	ErddzEnumPaiType_ERDDZ_BOMBCARD           ErddzEnumPaiType = 4
	ErddzEnumPaiType_ERDDZ_THREEONECARD       ErddzEnumPaiType = 5
	ErddzEnumPaiType_ERDDZ_THREETWOCARD       ErddzEnumPaiType = 6
	ErddzEnumPaiType_ERDDZ_BOMBTWOCARD        ErddzEnumPaiType = 7
	ErddzEnumPaiType_ERDDZ_BOMBTWOOOCARD      ErddzEnumPaiType = 8
	ErddzEnumPaiType_ERDDZ_CONNECTCARD        ErddzEnumPaiType = 9
	ErddzEnumPaiType_ERDDZ_COMPANYCARD        ErddzEnumPaiType = 10
	ErddzEnumPaiType_ERDDZ_AIRCRAFTCARD       ErddzEnumPaiType = 11
	ErddzEnumPaiType_ERDDZ_AIRCRAFTSINGLECARD ErddzEnumPaiType = 12
	ErddzEnumPaiType_ERDDZ_AIRCRAFTDOUBLECARD ErddzEnumPaiType = 13
	ErddzEnumPaiType_ERDDZ_SUPERBOMB          ErddzEnumPaiType = 14
	ErddzEnumPaiType_ERDDZ_FOURWITHONEDOUBLE  ErddzEnumPaiType = 15
)

var ErddzEnumPaiType_name = map[int32]string{
	0:  "ERDDZ_ERRORCARD",
	1:  "ERDDZ_SINGLECARD",
	2:  "ERDDZ_DOUBLECARD",
	3:  "ERDDZ_THREECARD",
	4:  "ERDDZ_BOMBCARD",
	5:  "ERDDZ_THREEONECARD",
	6:  "ERDDZ_THREETWOCARD",
	7:  "ERDDZ_BOMBTWOCARD",
	8:  "ERDDZ_BOMBTWOOOCARD",
	9:  "ERDDZ_CONNECTCARD",
	10: "ERDDZ_COMPANYCARD",
	11: "ERDDZ_AIRCRAFTCARD",
	12: "ERDDZ_AIRCRAFTSINGLECARD",
	13: "ERDDZ_AIRCRAFTDOUBLECARD",
	14: "ERDDZ_SUPERBOMB",
	15: "ERDDZ_FOURWITHONEDOUBLE",
}
var ErddzEnumPaiType_value = map[string]int32{
	"ERDDZ_ERRORCARD":          0,
	"ERDDZ_SINGLECARD":         1,
	"ERDDZ_DOUBLECARD":         2,
	"ERDDZ_THREECARD":          3,
	"ERDDZ_BOMBCARD":           4,
	"ERDDZ_THREEONECARD":       5,
	"ERDDZ_THREETWOCARD":       6,
	"ERDDZ_BOMBTWOCARD":        7,
	"ERDDZ_BOMBTWOOOCARD":      8,
	"ERDDZ_CONNECTCARD":        9,
	"ERDDZ_COMPANYCARD":        10,
	"ERDDZ_AIRCRAFTCARD":       11,
	"ERDDZ_AIRCRAFTSINGLECARD": 12,
	"ERDDZ_AIRCRAFTDOUBLECARD": 13,
	"ERDDZ_SUPERBOMB":          14,
	"ERDDZ_FOURWITHONEDOUBLE":  15,
}

func (x ErddzEnumPaiType) Enum() *ErddzEnumPaiType {
	p := new(ErddzEnumPaiType)
	*p = x
	return p
}
func (x ErddzEnumPaiType) String() string {
	return proto.EnumName(ErddzEnumPaiType_name, int32(x))
}
func (x *ErddzEnumPaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumPaiType_value, data, "ErddzEnumPaiType")
	if err != nil {
		return err
	}
	*x = ErddzEnumPaiType(value)
	return nil
}
func (ErddzEnumPaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{2} }

// 轮到玩家操作时：可执行何种操作
type ErddzEnumActType int32

const (
	ErddzEnumActType_ERDDZ_T_NORMAL_ACT ErddzEnumActType = 1
	ErddzEnumActType_ERDDZ_T_JIAO_DIZHU ErddzEnumActType = 2
	ErddzEnumActType_ERDDZ_T_ROB_DIZHU  ErddzEnumActType = 3
	ErddzEnumActType_ERDDZ_T_RANG_CARDS ErddzEnumActType = 4
	ErddzEnumActType_ERDDZ_T_DOUBLE     ErddzEnumActType = 5
)

var ErddzEnumActType_name = map[int32]string{
	1: "ERDDZ_T_NORMAL_ACT",
	2: "ERDDZ_T_JIAO_DIZHU",
	3: "ERDDZ_T_ROB_DIZHU",
	4: "ERDDZ_T_RANG_CARDS",
	5: "ERDDZ_T_DOUBLE",
}
var ErddzEnumActType_value = map[string]int32{
	"ERDDZ_T_NORMAL_ACT": 1,
	"ERDDZ_T_JIAO_DIZHU": 2,
	"ERDDZ_T_ROB_DIZHU":  3,
	"ERDDZ_T_RANG_CARDS": 4,
	"ERDDZ_T_DOUBLE":     5,
}

func (x ErddzEnumActType) Enum() *ErddzEnumActType {
	p := new(ErddzEnumActType)
	*p = x
	return p
}
func (x ErddzEnumActType) String() string {
	return proto.EnumName(ErddzEnumActType_name, int32(x))
}
func (x *ErddzEnumActType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumActType_value, data, "ErddzEnumActType")
	if err != nil {
		return err
	}
	*x = ErddzEnumActType(value)
	return nil
}
func (ErddzEnumActType) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{3} }

// 桌子当前状态的枚举 DS == desk status
type ErddzEnumDeskStatus int32

const (
	ErddzEnumDeskStatus_ERDDZ_DS_CREATED     ErddzEnumDeskStatus = 0
	ErddzEnumDeskStatus_ERDDZ_DS_READY       ErddzEnumDeskStatus = 1
	ErddzEnumDeskStatus_ERDDZ_DS_INITED      ErddzEnumDeskStatus = 2
	ErddzEnumDeskStatus_ERDDZ_DS_JIAO_DIZHU  ErddzEnumDeskStatus = 3
	ErddzEnumDeskStatus_ERDDZ_DS_QIANG_DIZHU ErddzEnumDeskStatus = 4
	ErddzEnumDeskStatus_ERDDZ_DS_RANG_CARDS  ErddzEnumDeskStatus = 5
	ErddzEnumDeskStatus_ERDDZ_DS_JIABEI      ErddzEnumDeskStatus = 6
	ErddzEnumDeskStatus_ERDDZ_DS_DAPAI       ErddzEnumDeskStatus = 7
	ErddzEnumDeskStatus_ERDDZ_DS_LOTTERY     ErddzEnumDeskStatus = 8
	ErddzEnumDeskStatus_ERDDZ_DS_END         ErddzEnumDeskStatus = 9
)

var ErddzEnumDeskStatus_name = map[int32]string{
	0: "ERDDZ_DS_CREATED",
	1: "ERDDZ_DS_READY",
	2: "ERDDZ_DS_INITED",
	3: "ERDDZ_DS_JIAO_DIZHU",
	4: "ERDDZ_DS_QIANG_DIZHU",
	5: "ERDDZ_DS_RANG_CARDS",
	6: "ERDDZ_DS_JIABEI",
	7: "ERDDZ_DS_DAPAI",
	8: "ERDDZ_DS_LOTTERY",
	9: "ERDDZ_DS_END",
}
var ErddzEnumDeskStatus_value = map[string]int32{
	"ERDDZ_DS_CREATED":     0,
	"ERDDZ_DS_READY":       1,
	"ERDDZ_DS_INITED":      2,
	"ERDDZ_DS_JIAO_DIZHU":  3,
	"ERDDZ_DS_QIANG_DIZHU": 4,
	"ERDDZ_DS_RANG_CARDS":  5,
	"ERDDZ_DS_JIABEI":      6,
	"ERDDZ_DS_DAPAI":       7,
	"ERDDZ_DS_LOTTERY":     8,
	"ERDDZ_DS_END":         9,
}

func (x ErddzEnumDeskStatus) Enum() *ErddzEnumDeskStatus {
	p := new(ErddzEnumDeskStatus)
	*p = x
	return p
}
func (x ErddzEnumDeskStatus) String() string {
	return proto.EnumName(ErddzEnumDeskStatus_name, int32(x))
}
func (x *ErddzEnumDeskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumDeskStatus_value, data, "ErddzEnumDeskStatus")
	if err != nil {
		return err
	}
	*x = ErddzEnumDeskStatus(value)
	return nil
}
func (ErddzEnumDeskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{4} }

// 玩家当前状态 PS == player status
type ErddzEnumPlayerStatus int32

const (
	ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_DEFAULT   ErddzEnumPlayerStatus = 0
	ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_ENTERDESK ErddzEnumPlayerStatus = 1
	ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_READY     ErddzEnumPlayerStatus = 2
	ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_DAPAI     ErddzEnumPlayerStatus = 3
	ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_LOTTERY   ErddzEnumPlayerStatus = 4
	ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_END       ErddzEnumPlayerStatus = 5
	ErddzEnumPlayerStatus_ERDDZ_PS_JIAO_NOACT       ErddzEnumPlayerStatus = 6
	ErddzEnumPlayerStatus_ERDDZ_PS_JIAO_JIAO        ErddzEnumPlayerStatus = 7
	ErddzEnumPlayerStatus_ERDDZ_PS_JIAO_BUJIAO      ErddzEnumPlayerStatus = 8
	ErddzEnumPlayerStatus_ERDDZ_PS_QIANG_NOACT      ErddzEnumPlayerStatus = 9
	ErddzEnumPlayerStatus_ERDDZ_PS_QIANG_QIANG      ErddzEnumPlayerStatus = 10
	ErddzEnumPlayerStatus_ERDDZ_PS_QIANG_BUQIANG    ErddzEnumPlayerStatus = 11
	ErddzEnumPlayerStatus_ERDDZ_PS_RANG_NOACT       ErddzEnumPlayerStatus = 12
	ErddzEnumPlayerStatus_ERDDZ_PS_RANG_ONE         ErddzEnumPlayerStatus = 13
	ErddzEnumPlayerStatus_ERDDZ_PS_RANG_TWO         ErddzEnumPlayerStatus = 14
	ErddzEnumPlayerStatus_ERDDZ_PS_JB_NOACT         ErddzEnumPlayerStatus = 15
	ErddzEnumPlayerStatus_ERDDZ_PS_JB_JIABEI        ErddzEnumPlayerStatus = 16
	ErddzEnumPlayerStatus_ERDDZ_PS_JB_BUJIABEI      ErddzEnumPlayerStatus = 17
)

var ErddzEnumPlayerStatus_name = map[int32]string{
	0:  "ERDDZ_PS_NORMAL_DEFAULT",
	1:  "ERDDZ_PS_NORMAL_ENTERDESK",
	2:  "ERDDZ_PS_NORMAL_READY",
	3:  "ERDDZ_PS_NORMAL_DAPAI",
	4:  "ERDDZ_PS_NORMAL_LOTTERY",
	5:  "ERDDZ_PS_NORMAL_END",
	6:  "ERDDZ_PS_JIAO_NOACT",
	7:  "ERDDZ_PS_JIAO_JIAO",
	8:  "ERDDZ_PS_JIAO_BUJIAO",
	9:  "ERDDZ_PS_QIANG_NOACT",
	10: "ERDDZ_PS_QIANG_QIANG",
	11: "ERDDZ_PS_QIANG_BUQIANG",
	12: "ERDDZ_PS_RANG_NOACT",
	13: "ERDDZ_PS_RANG_ONE",
	14: "ERDDZ_PS_RANG_TWO",
	15: "ERDDZ_PS_JB_NOACT",
	16: "ERDDZ_PS_JB_JIABEI",
	17: "ERDDZ_PS_JB_BUJIABEI",
}
var ErddzEnumPlayerStatus_value = map[string]int32{
	"ERDDZ_PS_NORMAL_DEFAULT":   0,
	"ERDDZ_PS_NORMAL_ENTERDESK": 1,
	"ERDDZ_PS_NORMAL_READY":     2,
	"ERDDZ_PS_NORMAL_DAPAI":     3,
	"ERDDZ_PS_NORMAL_LOTTERY":   4,
	"ERDDZ_PS_NORMAL_END":       5,
	"ERDDZ_PS_JIAO_NOACT":       6,
	"ERDDZ_PS_JIAO_JIAO":        7,
	"ERDDZ_PS_JIAO_BUJIAO":      8,
	"ERDDZ_PS_QIANG_NOACT":      9,
	"ERDDZ_PS_QIANG_QIANG":      10,
	"ERDDZ_PS_QIANG_BUQIANG":    11,
	"ERDDZ_PS_RANG_NOACT":       12,
	"ERDDZ_PS_RANG_ONE":         13,
	"ERDDZ_PS_RANG_TWO":         14,
	"ERDDZ_PS_JB_NOACT":         15,
	"ERDDZ_PS_JB_JIABEI":        16,
	"ERDDZ_PS_JB_BUJIABEI":      17,
}

func (x ErddzEnumPlayerStatus) Enum() *ErddzEnumPlayerStatus {
	p := new(ErddzEnumPlayerStatus)
	*p = x
	return p
}
func (x ErddzEnumPlayerStatus) String() string {
	return proto.EnumName(ErddzEnumPlayerStatus_name, int32(x))
}
func (x *ErddzEnumPlayerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumPlayerStatus_value, data, "ErddzEnumPlayerStatus")
	if err != nil {
		return err
	}
	*x = ErddzEnumPlayerStatus(value)
	return nil
}
func (ErddzEnumPlayerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{5} }

//
type ErddzEnumRoomType int32

const (
	ErddzEnumRoomType_ERDDZ_FRIEND ErddzEnumRoomType = 1
	ErddzEnumRoomType_ERDDZ_COIN   ErddzEnumRoomType = 2
)

var ErddzEnumRoomType_name = map[int32]string{
	1: "ERDDZ_FRIEND",
	2: "ERDDZ_COIN",
}
var ErddzEnumRoomType_value = map[string]int32{
	"ERDDZ_FRIEND": 1,
	"ERDDZ_COIN":   2,
}

func (x ErddzEnumRoomType) Enum() *ErddzEnumRoomType {
	p := new(ErddzEnumRoomType)
	*p = x
	return p
}
func (x ErddzEnumRoomType) String() string {
	return proto.EnumName(ErddzEnumRoomType_name, int32(x))
}
func (x *ErddzEnumRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumRoomType_value, data, "ErddzEnumRoomType")
	if err != nil {
		return err
	}
	*x = ErddzEnumRoomType(value)
	return nil
}
func (ErddzEnumRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{6} }

type ErddzEnumCoinRoomLevel int32

const (
	ErddzEnumCoinRoomLevel_ERDDZ_LV1 ErddzEnumCoinRoomLevel = 1
	ErddzEnumCoinRoomLevel_ERDDZ_LV2 ErddzEnumCoinRoomLevel = 2
	ErddzEnumCoinRoomLevel_ERDDZ_LV3 ErddzEnumCoinRoomLevel = 3
	ErddzEnumCoinRoomLevel_ERDDZ_LV4 ErddzEnumCoinRoomLevel = 4
)

var ErddzEnumCoinRoomLevel_name = map[int32]string{
	1: "ERDDZ_LV1",
	2: "ERDDZ_LV2",
	3: "ERDDZ_LV3",
	4: "ERDDZ_LV4",
}
var ErddzEnumCoinRoomLevel_value = map[string]int32{
	"ERDDZ_LV1": 1,
	"ERDDZ_LV2": 2,
	"ERDDZ_LV3": 3,
	"ERDDZ_LV4": 4,
}

func (x ErddzEnumCoinRoomLevel) Enum() *ErddzEnumCoinRoomLevel {
	p := new(ErddzEnumCoinRoomLevel)
	*p = x
	return p
}
func (x ErddzEnumCoinRoomLevel) String() string {
	return proto.EnumName(ErddzEnumCoinRoomLevel_name, int32(x))
}
func (x *ErddzEnumCoinRoomLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErddzEnumCoinRoomLevel_value, data, "ErddzEnumCoinRoomLevel")
	if err != nil {
		return err
	}
	*x = ErddzEnumCoinRoomLevel(value)
	return nil
}
func (ErddzEnumCoinRoomLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{7} }

type ErddzBaseRoomTypeInfo struct {
	BoardsCount      *int32                  `protobuf:"varint,2,opt,name=boardsCount" json:"boardsCount,omitempty"`
	CapMax           *int64                  `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	BaseValue        *int64                  `protobuf:"varint,4,opt,name=baseValue" json:"baseValue,omitempty"`
	UserMinCoin      *int64                  `protobuf:"varint,6,opt,name=userMinCoin" json:"userMinCoin,omitempty"`
	UserMaxCoin      *int64                  `protobuf:"varint,7,opt,name=userMaxCoin" json:"userMaxCoin,omitempty"`
	CoinTicket       *int64                  `protobuf:"varint,8,opt,name=coinTicket" json:"coinTicket,omitempty"`
	RoomLv           *ErddzEnumCoinRoomLevel `protobuf:"varint,9,opt,name=roomLv,enum=ddproto.ErddzEnumCoinRoomLevel" json:"roomLv,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ErddzBaseRoomTypeInfo) Reset()                    { *m = ErddzBaseRoomTypeInfo{} }
func (m *ErddzBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*ErddzBaseRoomTypeInfo) ProtoMessage()               {}
func (*ErddzBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{0} }

func (m *ErddzBaseRoomTypeInfo) GetBoardsCount() int32 {
	if m != nil && m.BoardsCount != nil {
		return *m.BoardsCount
	}
	return 0
}

func (m *ErddzBaseRoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *ErddzBaseRoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *ErddzBaseRoomTypeInfo) GetUserMinCoin() int64 {
	if m != nil && m.UserMinCoin != nil {
		return *m.UserMinCoin
	}
	return 0
}

func (m *ErddzBaseRoomTypeInfo) GetUserMaxCoin() int64 {
	if m != nil && m.UserMaxCoin != nil {
		return *m.UserMaxCoin
	}
	return 0
}

func (m *ErddzBaseRoomTypeInfo) GetCoinTicket() int64 {
	if m != nil && m.CoinTicket != nil {
		return *m.CoinTicket
	}
	return 0
}

func (m *ErddzBaseRoomTypeInfo) GetRoomLv() ErddzEnumCoinRoomLevel {
	if m != nil && m.RoomLv != nil {
		return *m.RoomLv
	}
	return ErddzEnumCoinRoomLevel_ERDDZ_LV1
}

type ErddzBasePlayerInfo struct {
	IsDiZhu          *bool                    `protobuf:"varint,1,opt,name=isDiZhu" json:"isDiZhu,omitempty"`
	PlayerPokers     []*ClientBasePoker       `protobuf:"bytes,2,rep,name=playerPokers" json:"playerPokers,omitempty"`
	Coin             *int64                   `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string                  `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32                   `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32                  `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool                    `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32                   `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	Status           *ErddzEnumPlayerStatus   `protobuf:"varint,9,opt,name=status,enum=ddproto.ErddzEnumPlayerStatus" json:"status,omitempty"`
	WxInfo           *WeixinInfo              `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	OnlineStatus     *int32                   `protobuf:"varint,11,opt,name=onlineStatus" json:"onlineStatus,omitempty"`
	RemainPaiCount   *int32                   `protobuf:"varint,13,opt,name=remainPaiCount" json:"remainPaiCount,omitempty"`
	OutPais          []*ClientBasePoker       `protobuf:"bytes,14,rep,name=outPais" json:"outPais,omitempty"`
	OutPaiType       *ErddzEnumPaiType        `protobuf:"varint,15,opt,name=outPaiType,enum=ddproto.ErddzEnumPaiType" json:"outPaiType,omitempty"`
	PlayerRateInfo   *ErddzBasePlayerRateInfo `protobuf:"bytes,17,opt,name=playerRateInfo" json:"playerRateInfo,omitempty"`
	RoomCard         *int64                   `protobuf:"varint,18,opt,name=roomCard" json:"roomCard,omitempty"`
	AllOutPais       []*ClientBasePoker       `protobuf:"bytes,19,rep,name=allOutPais" json:"allOutPais,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *ErddzBasePlayerInfo) Reset()                    { *m = ErddzBasePlayerInfo{} }
func (m *ErddzBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*ErddzBasePlayerInfo) ProtoMessage()               {}
func (*ErddzBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{1} }

func (m *ErddzBasePlayerInfo) GetIsDiZhu() bool {
	if m != nil && m.IsDiZhu != nil {
		return *m.IsDiZhu
	}
	return false
}

func (m *ErddzBasePlayerInfo) GetPlayerPokers() []*ClientBasePoker {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

func (m *ErddzBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *ErddzBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *ErddzBasePlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetStatus() ErddzEnumPlayerStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ErddzEnumPlayerStatus_ERDDZ_PS_NORMAL_DEFAULT
}

func (m *ErddzBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *ErddzBasePlayerInfo) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetRemainPaiCount() int32 {
	if m != nil && m.RemainPaiCount != nil {
		return *m.RemainPaiCount
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetOutPais() []*ClientBasePoker {
	if m != nil {
		return m.OutPais
	}
	return nil
}

func (m *ErddzBasePlayerInfo) GetOutPaiType() ErddzEnumPaiType {
	if m != nil && m.OutPaiType != nil {
		return *m.OutPaiType
	}
	return ErddzEnumPaiType_ERDDZ_ERRORCARD
}

func (m *ErddzBasePlayerInfo) GetPlayerRateInfo() *ErddzBasePlayerRateInfo {
	if m != nil {
		return m.PlayerRateInfo
	}
	return nil
}

func (m *ErddzBasePlayerInfo) GetRoomCard() int64 {
	if m != nil && m.RoomCard != nil {
		return *m.RoomCard
	}
	return 0
}

func (m *ErddzBasePlayerInfo) GetAllOutPais() []*ClientBasePoker {
	if m != nil {
		return m.AllOutPais
	}
	return nil
}

type ErddzBasePlayerRateInfo struct {
	TotalRate        *int32                   `protobuf:"varint,1,opt,name=totalRate" json:"totalRate,omitempty"`
	CommonRateInfo   *ErddzBaseCommonRateInfo `protobuf:"bytes,2,opt,name=commonRateInfo" json:"commonRateInfo,omitempty"`
	DizhuJBRate      *int32                   `protobuf:"varint,3,opt,name=dizhuJBRate" json:"dizhuJBRate,omitempty"`
	FamerJBRate      *int32                   `protobuf:"varint,4,opt,name=famerJBRate" json:"famerJBRate,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *ErddzBasePlayerRateInfo) Reset()                    { *m = ErddzBasePlayerRateInfo{} }
func (m *ErddzBasePlayerRateInfo) String() string            { return proto.CompactTextString(m) }
func (*ErddzBasePlayerRateInfo) ProtoMessage()               {}
func (*ErddzBasePlayerRateInfo) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{2} }

func (m *ErddzBasePlayerRateInfo) GetTotalRate() int32 {
	if m != nil && m.TotalRate != nil {
		return *m.TotalRate
	}
	return 0
}

func (m *ErddzBasePlayerRateInfo) GetCommonRateInfo() *ErddzBaseCommonRateInfo {
	if m != nil {
		return m.CommonRateInfo
	}
	return nil
}

func (m *ErddzBasePlayerRateInfo) GetDizhuJBRate() int32 {
	if m != nil && m.DizhuJBRate != nil {
		return *m.DizhuJBRate
	}
	return 0
}

func (m *ErddzBasePlayerRateInfo) GetFamerJBRate() int32 {
	if m != nil && m.FamerJBRate != nil {
		return *m.FamerJBRate
	}
	return 0
}

type ErddzBaseCommonRateInfo struct {
	InitPlayRate     *int32 `protobuf:"varint,1,opt,name=initPlayRate" json:"initPlayRate,omitempty"`
	SeeCardsRate     *int32 `protobuf:"varint,2,opt,name=seeCardsRate" json:"seeCardsRate,omitempty"`
	JrDizhuRate      *int32 `protobuf:"varint,3,opt,name=jrDizhuRate" json:"jrDizhuRate,omitempty"`
	FootRate         *int32 `protobuf:"varint,4,opt,name=footRate" json:"footRate,omitempty"`
	BoomRate         *int32 `protobuf:"varint,5,opt,name=boomRate" json:"boomRate,omitempty"`
	SpringRate       *int32 `protobuf:"varint,6,opt,name=springRate" json:"springRate,omitempty"`
	TotalRate        *int32 `protobuf:"varint,7,opt,name=totalRate" json:"totalRate,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ErddzBaseCommonRateInfo) Reset()                    { *m = ErddzBaseCommonRateInfo{} }
func (m *ErddzBaseCommonRateInfo) String() string            { return proto.CompactTextString(m) }
func (*ErddzBaseCommonRateInfo) ProtoMessage()               {}
func (*ErddzBaseCommonRateInfo) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{3} }

func (m *ErddzBaseCommonRateInfo) GetInitPlayRate() int32 {
	if m != nil && m.InitPlayRate != nil {
		return *m.InitPlayRate
	}
	return 0
}

func (m *ErddzBaseCommonRateInfo) GetSeeCardsRate() int32 {
	if m != nil && m.SeeCardsRate != nil {
		return *m.SeeCardsRate
	}
	return 0
}

func (m *ErddzBaseCommonRateInfo) GetJrDizhuRate() int32 {
	if m != nil && m.JrDizhuRate != nil {
		return *m.JrDizhuRate
	}
	return 0
}

func (m *ErddzBaseCommonRateInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *ErddzBaseCommonRateInfo) GetBoomRate() int32 {
	if m != nil && m.BoomRate != nil {
		return *m.BoomRate
	}
	return 0
}

func (m *ErddzBaseCommonRateInfo) GetSpringRate() int32 {
	if m != nil && m.SpringRate != nil {
		return *m.SpringRate
	}
	return 0
}

func (m *ErddzBaseCommonRateInfo) GetTotalRate() int32 {
	if m != nil && m.TotalRate != nil {
		return *m.TotalRate
	}
	return 0
}

// 定时信息
type ErddzBaseTimerInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	RemainSec        *int32  `protobuf:"varint,2,opt,name=remainSec" json:"remainSec,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ErddzBaseTimerInfo) Reset()                    { *m = ErddzBaseTimerInfo{} }
func (m *ErddzBaseTimerInfo) String() string            { return proto.CompactTextString(m) }
func (*ErddzBaseTimerInfo) ProtoMessage()               {}
func (*ErddzBaseTimerInfo) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{4} }

func (m *ErddzBaseTimerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ErddzBaseTimerInfo) GetRemainSec() int32 {
	if m != nil && m.RemainSec != nil {
		return *m.RemainSec
	}
	return 0
}

type ErddzBaseDeskInfo struct {
	Status           *ErddzEnumDeskStatus   `protobuf:"varint,1,opt,name=status,enum=ddproto.ErddzEnumDeskStatus" json:"status,omitempty"`
	RoomTypeInfo     *ErddzBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32                 `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32                `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	CurrPlayCount    *int32                 `protobuf:"varint,5,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32                 `protobuf:"varint,6,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string                `protobuf:"bytes,7,opt,name=roomNumber" json:"roomNumber,omitempty"`
	DiZhuUserId      *uint32                `protobuf:"varint,8,opt,name=diZhuUserId" json:"diZhuUserId,omitempty"`
	FootPokers       []*ClientBasePoker     `protobuf:"bytes,9,rep,name=footPokers" json:"footPokers,omitempty"`
	FootRate         *int32                 `protobuf:"varint,10,opt,name=footRate" json:"footRate,omitempty"`
	RoomType         *ErddzEnumRoomType     `protobuf:"varint,11,opt,name=roomType,enum=ddproto.ErddzEnumRoomType" json:"roomType,omitempty"`
	CoinTicket       *int64                 `protobuf:"varint,12,opt,name=coinTicket" json:"coinTicket,omitempty"`
	TimerInfo        *ErddzBaseTimerInfo    `protobuf:"bytes,13,opt,name=timerInfo" json:"timerInfo,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ErddzBaseDeskInfo) Reset()                    { *m = ErddzBaseDeskInfo{} }
func (m *ErddzBaseDeskInfo) String() string            { return proto.CompactTextString(m) }
func (*ErddzBaseDeskInfo) ProtoMessage()               {}
func (*ErddzBaseDeskInfo) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{5} }

func (m *ErddzBaseDeskInfo) GetStatus() ErddzEnumDeskStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ErddzEnumDeskStatus_ERDDZ_DS_CREATED
}

func (m *ErddzBaseDeskInfo) GetRoomTypeInfo() *ErddzBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *ErddzBaseDeskInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *ErddzBaseDeskInfo) GetDiZhuUserId() uint32 {
	if m != nil && m.DiZhuUserId != nil {
		return *m.DiZhuUserId
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetFootPokers() []*ClientBasePoker {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *ErddzBaseDeskInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetRoomType() ErddzEnumRoomType {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return ErddzEnumRoomType_ERDDZ_FRIEND
}

func (m *ErddzBaseDeskInfo) GetCoinTicket() int64 {
	if m != nil && m.CoinTicket != nil {
		return *m.CoinTicket
	}
	return 0
}

func (m *ErddzBaseDeskInfo) GetTimerInfo() *ErddzBaseTimerInfo {
	if m != nil {
		return m.TimerInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ErddzBaseRoomTypeInfo)(nil), "ddproto.erddz_base_roomTypeInfo")
	proto.RegisterType((*ErddzBasePlayerInfo)(nil), "ddproto.erddz_base_playerInfo")
	proto.RegisterType((*ErddzBasePlayerRateInfo)(nil), "ddproto.erddz_base_playerRateInfo")
	proto.RegisterType((*ErddzBaseCommonRateInfo)(nil), "ddproto.erddz_base_commonRateInfo")
	proto.RegisterType((*ErddzBaseTimerInfo)(nil), "ddproto.erddz_base_timerInfo")
	proto.RegisterType((*ErddzBaseDeskInfo)(nil), "ddproto.erddz_base_deskInfo")
	proto.RegisterEnum("ddproto.ErddzEnumProtoId", ErddzEnumProtoId_name, ErddzEnumProtoId_value)
	proto.RegisterEnum("ddproto.ErddzEnumErrorCode", ErddzEnumErrorCode_name, ErddzEnumErrorCode_value)
	proto.RegisterEnum("ddproto.ErddzEnumPaiType", ErddzEnumPaiType_name, ErddzEnumPaiType_value)
	proto.RegisterEnum("ddproto.ErddzEnumActType", ErddzEnumActType_name, ErddzEnumActType_value)
	proto.RegisterEnum("ddproto.ErddzEnumDeskStatus", ErddzEnumDeskStatus_name, ErddzEnumDeskStatus_value)
	proto.RegisterEnum("ddproto.ErddzEnumPlayerStatus", ErddzEnumPlayerStatus_name, ErddzEnumPlayerStatus_value)
	proto.RegisterEnum("ddproto.ErddzEnumRoomType", ErddzEnumRoomType_name, ErddzEnumRoomType_value)
	proto.RegisterEnum("ddproto.ErddzEnumCoinRoomLevel", ErddzEnumCoinRoomLevel_name, ErddzEnumCoinRoomLevel_value)
}

func init() { proto.RegisterFile("erddz_base.proto", fileDescriptor22) }

var fileDescriptor22 = []byte{
	// 2010 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x58, 0x4d, 0x73, 0xdb, 0xc6,
	0x19, 0x36, 0x48, 0x8a, 0x12, 0x97, 0x92, 0xbc, 0x5e, 0xf9, 0x03, 0x96, 0x65, 0x87, 0x66, 0x1c,
	0x47, 0x55, 0x5a, 0x27, 0x91, 0x3d, 0x6d, 0xda, 0xcc, 0x74, 0x06, 0x04, 0x56, 0x14, 0x2c, 0x10,
	0xa0, 0x17, 0x80, 0x34, 0xf2, 0x05, 0x03, 0x91, 0x70, 0x8d, 0x5a, 0x24, 0x34, 0xfc, 0x70, 0xe4,
	0xfc, 0x81, 0x5e, 0xdb, 0x9c, 0xfa, 0xf1, 0x63, 0x7a, 0xec, 0xf4, 0xde, 0x5f, 0xd1, 0xe9, 0xad,
	0xc7, 0x1e, 0x9a, 0xd9, 0x5d, 0x00, 0xbb, 0x4b, 0x51, 0xb1, 0x0f, 0x1e, 0xee, 0xf3, 0x3e, 0xef,
	0xee, 0xfb, 0xfd, 0x52, 0x04, 0x30, 0x99, 0x0c, 0x87, 0xdf, 0x47, 0x67, 0xf1, 0x34, 0x79, 0x76,
	0x31, 0xc9, 0x66, 0x19, 0x5a, 0x1d, 0x0e, 0xd9, 0x87, 0xed, 0xad, 0x41, 0x36, 0x1a, 0x65, 0xe3,
	0x68, 0x70, 0x9e, 0x26, 0xe3, 0x19, 0x97, 0xb6, 0xff, 0x58, 0x01, 0xf7, 0x84, 0x4a, 0x34, 0xc9,
	0xb2, 0x51, 0xf0, 0xe1, 0x22, 0xb1, 0xc7, 0x6f, 0x32, 0xd4, 0x02, 0xcd, 0xb3, 0x2c, 0x9e, 0x0c,
	0xa7, 0x66, 0x36, 0x1f, 0xcf, 0xf4, 0x4a, 0x4b, 0xdb, 0x5d, 0x21, 0x32, 0x84, 0xee, 0x82, 0xfa,
	0x20, 0xbe, 0xe8, 0xc5, 0x97, 0x7a, 0xb5, 0xa5, 0xed, 0x56, 0x49, 0x7e, 0x42, 0x3b, 0xa0, 0x41,
	0xaf, 0x3b, 0x8e, 0xcf, 0xe7, 0x89, 0x5e, 0x63, 0x22, 0x01, 0xd0, 0x7b, 0xe7, 0xd3, 0x64, 0xd2,
	0x4b, 0xc7, 0x66, 0x96, 0x8e, 0xf5, 0x3a, 0x93, 0xcb, 0x50, 0xc9, 0x88, 0x2f, 0x19, 0x63, 0x55,
	0x62, 0x70, 0x08, 0x3d, 0x02, 0x60, 0x90, 0xa5, 0xe3, 0x20, 0x1d, 0xbc, 0x4b, 0x66, 0xfa, 0x1a,
	0x23, 0x48, 0x08, 0xfa, 0x35, 0xa8, 0x53, 0x5f, 0x9c, 0xf7, 0x7a, 0xa3, 0xa5, 0xed, 0x6e, 0xee,
	0x3f, 0x7e, 0x96, 0x87, 0xe1, 0x19, 0xf7, 0x36, 0x19, 0xcf, 0x47, 0x11, 0xe5, 0x13, 0xca, 0x4a,
	0xde, 0x27, 0xe7, 0x24, 0x57, 0x68, 0xff, 0x63, 0x05, 0xdc, 0x91, 0x42, 0x72, 0x71, 0x1e, 0x7f,
	0x48, 0x26, 0x2c, 0x20, 0x3a, 0x58, 0x4d, 0xa7, 0x56, 0xfa, 0xfa, 0xed, 0x5c, 0xd7, 0x5a, 0xda,
	0xee, 0x1a, 0x29, 0x8e, 0xe8, 0xb7, 0x60, 0x9d, 0xf3, 0xfa, 0xd9, 0xbb, 0x64, 0x32, 0xd5, 0x2b,
	0xad, 0xea, 0x6e, 0x73, 0x7f, 0xbb, 0x7c, 0x94, 0xc7, 0x3c, 0xbf, 0x90, 0x52, 0x88, 0xc2, 0x47,
	0x08, 0xd4, 0xa8, 0x31, 0x79, 0x18, 0xd9, 0x67, 0xb4, 0x0d, 0xd6, 0xc6, 0xe9, 0xe0, 0x9d, 0x1b,
	0x8f, 0x78, 0x0c, 0x1b, 0xa4, 0x3c, 0x23, 0x08, 0xaa, 0xd3, 0xe4, 0x52, 0x5f, 0x61, 0x29, 0xa1,
	0x1f, 0x69, 0x2a, 0x68, 0x7c, 0xec, 0x21, 0x8b, 0xe7, 0x06, 0xc9, 0x4f, 0xdc, 0x66, 0xef, 0xbb,
	0x71, 0x32, 0x61, 0x61, 0x64, 0x36, 0xb3, 0x23, 0xd5, 0x38, 0x23, 0x49, 0x3c, 0xfc, 0xc0, 0xc2,
	0xb7, 0x42, 0xf2, 0x13, 0xfa, 0x06, 0xd4, 0xa7, 0xb3, 0x78, 0x36, 0x9f, 0xe6, 0xa1, 0x6b, 0x2d,
	0x0b, 0x1d, 0xb7, 0xde, 0x67, 0x3c, 0x92, 0xf3, 0xd1, 0x17, 0xa0, 0xfe, 0xdd, 0x25, 0x8d, 0x94,
	0x0e, 0x5a, 0xda, 0x6e, 0x73, 0x7f, 0xab, 0xd4, 0x3c, 0x49, 0xd2, 0xcb, 0x74, 0x4c, 0x45, 0x24,
	0xa7, 0xa0, 0x36, 0x58, 0xcf, 0xc6, 0xe7, 0xe9, 0x38, 0xe1, 0x97, 0xe8, 0x4d, 0x66, 0x84, 0x82,
	0xa1, 0xa7, 0x60, 0x73, 0x92, 0x8c, 0xe2, 0x74, 0xdc, 0x8f, 0x53, 0x5e, 0x84, 0x1b, 0x8c, 0xb5,
	0x80, 0xa2, 0x17, 0x60, 0x35, 0x9b, 0xcf, 0xfa, 0x71, 0x3a, 0xd5, 0x37, 0x3f, 0x1a, 0xf9, 0x82,
	0x8a, 0xbe, 0x05, 0x80, 0x7f, 0xa4, 0x15, 0xaf, 0xdf, 0x64, 0xce, 0x3e, 0x58, 0xea, 0x2c, 0xa7,
	0x10, 0x89, 0x8e, 0x5e, 0x82, 0x4d, 0x1e, 0x03, 0x12, 0xcf, 0x58, 0xbb, 0xe8, 0xb7, 0x98, 0xcf,
	0xed, 0x85, 0x0b, 0xa4, 0x1a, 0x2a, 0x98, 0x64, 0x41, 0x93, 0x66, 0x9a, 0xd6, 0x9e, 0x19, 0x4f,
	0x86, 0x3a, 0x62, 0x15, 0x50, 0x9e, 0xd1, 0x6f, 0x00, 0x88, 0xcf, 0xcf, 0xbd, 0xdc, 0xbb, 0xad,
	0x8f, 0x7a, 0x27, 0xb1, 0xdb, 0xff, 0xd4, 0xc0, 0xfd, 0x6b, 0xad, 0xa0, 0x4d, 0x3a, 0xcb, 0x66,
	0xf1, 0x39, 0x05, 0x58, 0x3d, 0xaf, 0x10, 0x01, 0x50, 0xff, 0xf8, 0xbc, 0x28, 0xfd, 0xab, 0x5c,
	0xef, 0x9f, 0xca, 0x24, 0x0b, 0x9a, 0xb4, 0x9d, 0x87, 0xe9, 0xf7, 0x6f, 0xe7, 0x2f, 0x3b, 0xec,
	0xad, 0x2a, 0x1f, 0x24, 0x12, 0x44, 0x19, 0x6f, 0xe2, 0x51, 0x32, 0xc9, 0x19, 0x35, 0xce, 0x90,
	0xa0, 0xf6, 0xff, 0x54, 0x5f, 0x16, 0x5e, 0x68, 0x83, 0xf5, 0x74, 0x9c, 0xce, 0xfa, 0xe7, 0xf1,
	0x07, 0xc9, 0x1d, 0x05, 0xa3, 0x9c, 0x69, 0x92, 0xd0, 0xa0, 0x4e, 0x19, 0x87, 0xcf, 0x33, 0x05,
	0xa3, 0x76, 0xfc, 0x7e, 0x62, 0x51, 0xc3, 0x64, 0x4b, 0x25, 0x88, 0xe6, 0xea, 0x4d, 0x96, 0xcd,
	0x24, 0x33, 0xcb, 0x33, 0x95, 0x9d, 0x65, 0xd9, 0x88, 0xc9, 0x78, 0x6b, 0x96, 0x67, 0x3a, 0xb0,
	0xa6, 0x17, 0x93, 0x74, 0xfc, 0x3b, 0x26, 0xad, 0x33, 0xa9, 0x84, 0xa8, 0xd9, 0x58, 0x5d, 0xc8,
	0x46, 0xdb, 0x01, 0xb7, 0x25, 0xe7, 0x67, 0xe9, 0x28, 0x9f, 0x48, 0xa2, 0xeb, 0x35, 0xa5, 0xeb,
	0x77, 0x40, 0x83, 0xb7, 0x88, 0x9f, 0x0c, 0x72, 0x47, 0x05, 0xd0, 0xfe, 0x57, 0x0d, 0x6c, 0x49,
	0xd7, 0x0d, 0x93, 0xe9, 0x3b, 0x76, 0xdb, 0x2f, 0xcb, 0xce, 0xd7, 0x58, 0x33, 0x3c, 0x5a, 0xd6,
	0x0c, 0x94, 0xbd, 0xd0, 0xf7, 0x16, 0x58, 0x97, 0x17, 0x47, 0x5e, 0x29, 0xad, 0x65, 0x95, 0x22,
	0xf3, 0x88, 0xa2, 0x45, 0x6d, 0xe6, 0x15, 0xea, 0xce, 0x47, 0x79, 0xe4, 0x05, 0x40, 0xb3, 0x17,
	0x0f, 0x66, 0xe9, 0xfb, 0x24, 0xe4, 0xfe, 0xd6, 0x98, 0xbf, 0x0a, 0x86, 0x9e, 0x80, 0x8d, 0xc1,
	0x7c, 0x32, 0xa1, 0x19, 0xe7, 0xd3, 0x82, 0x27, 0x41, 0x05, 0xe9, 0x50, 0x61, 0x81, 0x15, 0x34,
	0x9e, 0x8d, 0x05, 0x94, 0x66, 0x8c, 0xda, 0xe7, 0xce, 0x47, 0x67, 0xf9, 0xf0, 0x6c, 0x10, 0x09,
	0xe1, 0x55, 0xfd, 0xfa, 0xed, 0x3c, 0x37, 0x68, 0x8d, 0x19, 0x24, 0x43, 0xb4, 0x77, 0x69, 0x6d,
	0xe4, 0x3b, 0xa1, 0xf1, 0xf1, 0xde, 0x15, 0x6c, 0xa5, 0xce, 0xc0, 0x42, 0x9d, 0x7d, 0xc3, 0xe7,
	0x05, 0x1b, 0x5b, 0x4d, 0x96, 0xa9, 0x9d, 0x65, 0x99, 0x2a, 0x38, 0xa4, 0x64, 0x2f, 0xac, 0xcd,
	0xf5, 0x2b, 0x6b, 0xf3, 0x5b, 0xd0, 0x28, 0x8b, 0x8b, 0xcd, 0xda, 0xe6, 0xfe, 0xc3, 0x65, 0x69,
	0x2c, 0x49, 0x44, 0xf0, 0xf7, 0xfe, 0xdd, 0x04, 0x48, 0x9e, 0x9a, 0x54, 0xc9, 0x1e, 0xa2, 0x7b,
	0x60, 0x0b, 0x13, 0xcb, 0x7a, 0x1d, 0xf5, 0x6d, 0x2b, 0x3a, 0xc4, 0x06, 0x09, 0x3a, 0xd8, 0x08,
	0xe0, 0x0d, 0xa4, 0x83, 0xdb, 0x42, 0xf0, 0x2a, 0xb4, 0xcd, 0xa3, 0xc8, 0xf4, 0x5c, 0x17, 0x6a,
	0x68, 0x07, 0xe8, 0xcb, 0x24, 0x91, 0x61, 0x1e, 0xc1, 0x8a, 0xaa, 0xd7, 0x35, 0x7a, 0x38, 0x72,
	0xbc, 0xae, 0xed, 0xc2, 0xaa, 0xaa, 0x27, 0x24, 0x4c, 0xaf, 0xa6, 0xea, 0x99, 0x04, 0x1b, 0x01,
	0x26, 0x9e, 0xd7, 0x83, 0x2b, 0xaa, 0x9e, 0x90, 0x30, 0xbd, 0xba, 0xaa, 0x87, 0xdd, 0x00, 0x93,
	0x88, 0xe9, 0xad, 0xaa, 0x7a, 0x42, 0xc2, 0xf4, 0xd6, 0xd0, 0x03, 0x70, 0x4f, 0x48, 0x7d, 0xec,
	0x72, 0x93, 0x6c, 0xf7, 0xc0, 0x83, 0x0d, 0xb4, 0x05, 0x6e, 0x0a, 0x21, 0xc1, 0x86, 0x75, 0x0a,
	0x81, 0x1a, 0x2a, 0x06, 0xb2, 0xab, 0x9a, 0xe8, 0x0e, 0xb8, 0x25, 0x04, 0x5e, 0x1f, 0xbb, 0xb6,
	0xdb, 0x85, 0xeb, 0xaa, 0x65, 0x16, 0x36, 0x9c, 0xc8, 0x34, 0x88, 0xe5, 0xc3, 0x0d, 0x55, 0xf2,
	0xd2, 0x36, 0xbc, 0xc8, 0xb2, 0x5f, 0x1f, 0x86, 0x70, 0x53, 0xb5, 0x59, 0x48, 0xd8, 0x43, 0x37,
	0x17, 0x2c, 0xf0, 0x3a, 0xb9, 0x1a, 0x54, 0x9d, 0x29, 0x05, 0x4c, 0xeb, 0x96, 0xfa, 0x1a, 0x31,
	0xdc, 0x6e, 0x6e, 0x07, 0x52, 0x5f, 0x13, 0x12, 0xa6, 0xb7, 0x85, 0x6e, 0x03, 0x28, 0xd9, 0xef,
	0x85, 0x1d, 0x07, 0xc3, 0xdb, 0x0b, 0x5e, 0x31, 0x94, 0xf1, 0xef, 0xa8, 0xd6, 0x79, 0x61, 0x90,
	0x3f, 0x73, 0x57, 0xb5, 0xae, 0x14, 0x30, 0xad, 0x7b, 0x6a, 0xf0, 0x0c, 0x33, 0x88, 0xba, 0xa1,
	0x07, 0x75, 0x74, 0x1f, 0xdc, 0xb9, 0x02, 0x33, 0x8d, 0xfb, 0xaa, 0x05, 0x7e, 0x60, 0x90, 0x20,
	0xea, 0x3b, 0xc6, 0x29, 0xdc, 0x46, 0x77, 0x01, 0x92, 0x1e, 0x3a, 0xc6, 0x24, 0x08, 0x89, 0x0b,
	0x1f, 0xa8, 0x06, 0x98, 0x21, 0x21, 0xd8, 0x0d, 0x08, 0xf6, 0x43, 0x27, 0x80, 0x3b, 0x6a, 0x10,
	0x68, 0x21, 0x60, 0xd7, 0x72, 0xbc, 0x20, 0xc0, 0xe4, 0x14, 0x3e, 0x54, 0x55, 0x2d, 0xdb, 0xf7,
	0x3d, 0xe7, 0x18, 0x47, 0x16, 0xf6, 0x8f, 0xe0, 0x23, 0xf4, 0x09, 0x78, 0x70, 0x8d, 0x90, 0x99,
	0xfa, 0x89, 0x6a, 0xaa, 0x83, 0x8d, 0x42, 0xb5, 0xa5, 0xbe, 0x2a, 0x24, 0x4c, 0xef, 0xb1, 0x1a,
	0x94, 0x1e, 0xf6, 0x7d, 0xa3, 0x8b, 0x61, 0x1b, 0x6d, 0x83, 0xbb, 0x0b, 0x35, 0x5b, 0xc8, 0x3e,
	0x45, 0x8f, 0xc1, 0xc3, 0x85, 0xee, 0x62, 0x25, 0x6f, 0x74, 0xb1, 0x1b, 0xf4, 0x3c, 0x0b, 0xc3,
	0x27, 0xe8, 0x33, 0xf0, 0xf8, 0x27, 0x29, 0xec, 0xf1, 0xcf, 0x50, 0x0b, 0xec, 0x2c, 0xd0, 0x5e,
	0x85, 0x76, 0x20, 0x2e, 0x7a, 0x8a, 0x9e, 0x80, 0xd6, 0x4f, 0x31, 0xd8, 0x3d, 0x9f, 0xab, 0x2e,
	0x7a, 0xae, 0x63, 0xbb, 0xf8, 0xc4, 0x20, 0xb4, 0x75, 0x5e, 0xc1, 0xdd, 0x6b, 0xa5, 0x54, 0xf7,
	0x67, 0x6a, 0x00, 0x08, 0xee, 0x32, 0xa5, 0xbd, 0xab, 0x30, 0x65, 0x7f, 0xa1, 0x26, 0xc9, 0x70,
	0x1c, 0xef, 0xc4, 0x70, 0x4d, 0xcc, 0x74, 0x7e, 0x7e, 0x9d, 0x90, 0x6a, 0xfe, 0x42, 0x4d, 0xd0,
	0x91, 0x6d, 0x1e, 0xd1, 0xf2, 0xec, 0x98, 0xf0, 0x99, 0x9a, 0x5b, 0xa3, 0xdf, 0x77, 0x4e, 0x59,
	0x82, 0x8f, 0x1d, 0x7e, 0xef, 0x97, 0xe8, 0x11, 0xd8, 0xbe, 0x8e, 0xd0, 0x31, 0xe1, 0x57, 0x6a,
	0x90, 0x16, 0xe4, 0x86, 0x79, 0xc4, 0x6e, 0xf9, 0xfa, 0xa3, 0x2c, 0x6a, 0xe6, 0xbe, 0xea, 0x77,
	0x60, 0xf7, 0xb0, 0x17, 0x06, 0xf0, 0xb9, 0xda, 0x71, 0xa1, 0x8f, 0x49, 0x87, 0x60, 0xe3, 0x08,
	0xbe, 0xd8, 0xfb, 0x7b, 0xa5, 0xf8, 0x4a, 0xc2, 0x86, 0x7d, 0x32, 0x99, 0x64, 0x13, 0x33, 0x1b,
	0x26, 0xa2, 0xa7, 0xb1, 0x19, 0xf9, 0xa1, 0x69, 0x62, 0xdf, 0x87, 0x37, 0xd0, 0x73, 0xf0, 0xb4,
	0x44, 0xf9, 0x80, 0xe5, 0xc5, 0x68, 0xd9, 0x46, 0xcf, 0x73, 0xad, 0xc8, 0xf5, 0x02, 0xec, 0x7a,
	0x61, 0xf7, 0x10, 0xfe, 0xed, 0xff, 0xf9, 0x3f, 0x0d, 0x7d, 0x09, 0xda, 0x4b, 0x95, 0xa8, 0x1d,
	0x54, 0xe3, 0xc0, 0x0b, 0x5d, 0x0b, 0xfe, 0x55, 0x28, 0xec, 0x16, 0x11, 0xc5, 0x66, 0x64, 0xbb,
	0x81, 0xc7, 0xe9, 0x25, 0xf3, 0x2f, 0x82, 0xf9, 0x14, 0xdc, 0x5f, 0xc2, 0xb4, 0xfd, 0x83, 0xd0,
	0x71, 0xe0, 0x9f, 0x05, 0xef, 0xf3, 0x22, 0x05, 0xd8, 0xe4, 0x65, 0xc8, 0xa7, 0x32, 0xc1, 0x7d,
	0xba, 0xc3, 0x7e, 0x10, 0xc4, 0xaf, 0xc0, 0xa7, 0xcb, 0x88, 0xe6, 0xa1, 0xdd, 0xa7, 0x06, 0x44,
	0xb9, 0x77, 0x7f, 0x2a, 0x35, 0xf6, 0x7e, 0xa8, 0xaa, 0xeb, 0x32, 0xff, 0xc3, 0xa2, 0x5c, 0x0c,
	0x98, 0x10, 0x8f, 0xd0, 0x39, 0x06, 0x6f, 0x88, 0xa0, 0xfa, 0xb6, 0xdb, 0x75, 0x30, 0x43, 0x35,
	0x81, 0xf2, 0x21, 0xc9, 0xd0, 0x8a, 0xb8, 0x20, 0x38, 0x24, 0x98, 0x83, 0x55, 0x84, 0xc0, 0x26,
	0x07, 0x3b, 0x5e, 0xaf, 0xc3, 0xb0, 0x9a, 0x98, 0x65, 0x8c, 0xe8, 0xb9, 0x9c, 0xbb, 0xb2, 0x80,
	0x07, 0x27, 0x1e, 0xc3, 0xeb, 0xa2, 0x44, 0xe8, 0x1d, 0x05, 0xbc, 0x2a, 0x4a, 0x24, 0x87, 0x3d,
	0x2e, 0x58, 0x13, 0x7c, 0xba, 0xbb, 0xb1, 0x19, 0x30, 0xb8, 0x21, 0xc3, 0xbd, 0xbe, 0xe1, 0x9e,
	0x32, 0x18, 0x88, 0x57, 0x0d, 0x9b, 0x98, 0xc4, 0x38, 0xe0, 0xf4, 0xa6, 0xe8, 0xe2, 0x02, 0x97,
	0x42, 0xb0, 0x7e, 0x55, 0x2a, 0x85, 0x62, 0x43, 0x84, 0xc2, 0x0f, 0xfb, 0x98, 0x50, 0xfb, 0xe0,
	0xa6, 0xe8, 0xd6, 0x03, 0x2f, 0x24, 0x27, 0x76, 0x70, 0xe8, 0xb9, 0x38, 0xdf, 0x3d, 0x37, 0xf7,
	0xfe, 0xa0, 0x29, 0x49, 0x89, 0x07, 0x33, 0x96, 0x14, 0x11, 0x92, 0xc8, 0xf5, 0x48, 0xcf, 0x70,
	0xe8, 0xc2, 0x80, 0x9a, 0x8c, 0x4b, 0x4b, 0xb6, 0x22, 0x7c, 0x0c, 0xa4, 0x25, 0x5a, 0x95, 0xe9,
	0xd2, 0x96, 0xac, 0x89, 0xec, 0x04, 0xc5, 0x16, 0x5c, 0xd9, 0xfb, 0xaf, 0x56, 0xfc, 0x0c, 0xb1,
	0xf0, 0xb5, 0x5b, 0x4a, 0xbb, 0x9f, 0xb7, 0x05, 0x2d, 0x91, 0xf2, 0x0e, 0xcb, 0xcf, 0xbf, 0x4f,
	0x68, 0xc2, 0x7f, 0xcb, 0x8f, 0x6c, 0xd7, 0xa6, 0xc4, 0x8a, 0xc8, 0x97, 0xe5, 0xcb, 0x46, 0x57,
	0xc5, 0xa4, 0xb2, 0xfc, 0xe8, 0x95, 0x4d, 0xed, 0xe3, 0x92, 0x9a, 0xa2, 0x22, 0x19, 0xbe, 0xa2,
	0x3c, 0xf0, 0xd2, 0x36, 0x3a, 0xd8, 0x86, 0x75, 0xc5, 0x12, 0xcb, 0xe8, 0x1b, 0x36, 0x5c, 0x55,
	0x6c, 0x2e, 0x56, 0xdf, 0x1a, 0x82, 0x60, 0xbd, 0x44, 0xb1, 0x6b, 0xc1, 0xc6, 0xde, 0x7f, 0xaa,
	0xc5, 0xef, 0x51, 0x57, 0x7e, 0x66, 0x90, 0xc6, 0xac, 0x5f, 0x64, 0xc1, 0xc2, 0x07, 0x06, 0xdd,
	0xb1, 0x37, 0xd0, 0xc3, 0xa2, 0xa1, 0x85, 0x90, 0xad, 0x1e, 0xb6, 0x0c, 0x35, 0x69, 0xd9, 0x97,
	0x62, 0x1e, 0xa4, 0xca, 0x32, 0x11, 0xb7, 0xba, 0xba, 0xec, 0xc5, 0xc2, 0x78, 0x29, 0x28, 0xf2,
	0x8b, 0xb4, 0x7f, 0x64, 0x01, 0x0b, 0xb0, 0xeb, 0xd1, 0x6a, 0xa9, 0x4b, 0x5f, 0x1e, 0x72, 0x01,
	0xfd, 0x0f, 0xae, 0x4a, 0x2b, 0x22, 0xc7, 0x3b, 0x21, 0x93, 0xac, 0x29, 0x12, 0x9e, 0x12, 0x7e,
	0x57, 0x63, 0x89, 0x84, 0xfd, 0x0f, 0x81, 0xb4, 0xc2, 0x0b, 0x49, 0x27, 0xe4, 0xb2, 0xa6, 0x62,
	0x1a, 0x11, 0xd7, 0xad, 0x4b, 0xe3, 0x3f, 0x17, 0x78, 0x2e, 0x86, 0x1b, 0x57, 0xe1, 0xe0, 0xc4,
	0x83, 0x9b, 0x0a, 0xfc, 0xb2, 0x93, 0x5f, 0x72, 0x53, 0xf5, 0xaf, 0x53, 0x14, 0x04, 0x54, 0xfd,
	0xeb, 0x70, 0xef, 0xa8, 0xe4, 0xd6, 0xde, 0xaf, 0x8a, 0x3f, 0x44, 0x95, 0x3f, 0x58, 0x44, 0x5d,
	0x1c, 0x10, 0x9b, 0xc6, 0x54, 0x43, 0x9b, 0x00, 0x14, 0x43, 0xc3, 0x76, 0x61, 0x65, 0xef, 0x18,
	0xe8, 0xd7, 0xfd, 0x90, 0x87, 0x36, 0x40, 0x83, 0x73, 0x9d, 0xe3, 0xaf, 0xa1, 0x26, 0x1f, 0xf7,
	0x61, 0x45, 0x3e, 0x3e, 0x87, 0x55, 0xf9, 0xf8, 0x02, 0xd6, 0xfa, 0x37, 0x7e, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0x01, 0xb3, 0x58, 0x42, 0x15, 0x00, 0x00,
}
