// Code generated by protoc-gen-go.
// source: hall_data.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HallEnumProtoId int32

const (
	HallEnumProtoId_HALL_PID_HEARTBEAT                   HallEnumProtoId = 0
	HallEnumProtoId_HALL_PID_QUICK_CONN                  HallEnumProtoId = 1
	HallEnumProtoId_HALL_PID_QUICK_CONN_ACK              HallEnumProtoId = 2
	HallEnumProtoId_HALL_PID_GAME_LOGIN                  HallEnumProtoId = 3
	HallEnumProtoId_HALL_PID_GAME_LOGIN_ACK              HallEnumProtoId = 4
	HallEnumProtoId_HALL_PID_WXPAYUNIFIEDORDER_REQ       HallEnumProtoId = 5
	HallEnumProtoId_HALL_PID_WXPAYUNIFIEDORDER_ACK       HallEnumProtoId = 6
	HallEnumProtoId_HALL_PID_WXPAYSYNCCHECKER_REQ        HallEnumProtoId = 7
	HallEnumProtoId_HALL_PID_WXPAYSYNCCHECKER_ACK        HallEnumProtoId = 8
	HallEnumProtoId_HALL_PID_USER_DATA                   HallEnumProtoId = 9
	HallEnumProtoId_HALL_PID_USER_DATA_ACK               HallEnumProtoId = 10
	HallEnumProtoId_HALL_PID_DRAW_LOTTERY                HallEnumProtoId = 11
	HallEnumProtoId_HALL_PID_DRAW_LOTTERY_ACK            HallEnumProtoId = 12
	HallEnumProtoId_HALL_PID_DS_LOTTERY_INFO_ACK         HallEnumProtoId = 13
	HallEnumProtoId_HALL_PID_ONLINEWARD_REQ              HallEnumProtoId = 14
	HallEnumProtoId_HALL_PID_ONLINEWARD_ACK              HallEnumProtoId = 15
	HallEnumProtoId_HALL_PID_EVENT_REQ                   HallEnumProtoId = 16
	HallEnumProtoId_HALL_PID_EVENT_ACK                   HallEnumProtoId = 17
	HallEnumProtoId_HALL_PID_GOODS_LIST_REQ              HallEnumProtoId = 18
	HallEnumProtoId_HALL_PID_GOODS_LIST_ACK              HallEnumProtoId = 19
	HallEnumProtoId_HALL_PID_HOTUPDATEVERSIONINFO_REQ    HallEnumProtoId = 20
	HallEnumProtoId_HALL_PID_HOTUPDATEVERSIONINFO_ACK    HallEnumProtoId = 21
	HallEnumProtoId_HALL_PID_BAG_ITEMS_REQ               HallEnumProtoId = 22
	HallEnumProtoId_HALL_PID_BAG_ITEMS_ACK               HallEnumProtoId = 23
	HallEnumProtoId_HALL_PID_HOTUPDATEGAMEASSETSINFO_REQ HallEnumProtoId = 24
	HallEnumProtoId_HALL_PID_HOTUPDATEGAMEASSETSINFO_ACK HallEnumProtoId = 25
	HallEnumProtoId_HALL_PID_APPLE_PAY_CB_REQ            HallEnumProtoId = 26
	HallEnumProtoId_HALL_PID_HOTUPDATEASSETSINFO_REQ     HallEnumProtoId = 27
	HallEnumProtoId_HALL_PID_HOTUPDATEASSETSINFO_ACK     HallEnumProtoId = 28
	HallEnumProtoId_HALL_PID_MAIL_LIST_REQ               HallEnumProtoId = 29
	HallEnumProtoId_HALL_PID_MAIL_LIST_ACK               HallEnumProtoId = 30
	HallEnumProtoId_HALL_PID_HALL_DSLOTTERYINFO_REQ      HallEnumProtoId = 31
	HallEnumProtoId_HALL_PID_FRIENDS_LIST_REQ            HallEnumProtoId = 32
	HallEnumProtoId_HALL_PID_FRIENDS_LIST_ACK            HallEnumProtoId = 33
	HallEnumProtoId_HALL_PID_RANK_REQ                    HallEnumProtoId = 34
	HallEnumProtoId_HALL_PID_RANK_ACK                    HallEnumProtoId = 35
	HallEnumProtoId_HALL_PID_STRONGBOX_INFO_REQ          HallEnumProtoId = 36
	HallEnumProtoId_HALL_PID_STRONGBOX_INFO_ACK          HallEnumProtoId = 37
	HallEnumProtoId_HALL_PID_STRONGBOX_ACCESS_REQ        HallEnumProtoId = 38
	HallEnumProtoId_HALL_PID_STRONGBOX_ACCESS_ACK        HallEnumProtoId = 39
	HallEnumProtoId_HALL_PID_FRIEND_ADD_REQ              HallEnumProtoId = 40
	HallEnumProtoId_HALL_PID_FRIEND_ADD_ACK              HallEnumProtoId = 41
	HallEnumProtoId_HALL_PID_FRIEND_DEL_REQ              HallEnumProtoId = 42
	HallEnumProtoId_HALL_PID_FRIEND_DEL_ACK              HallEnumProtoId = 43
	HallEnumProtoId_HALL_PID_FRIENDS_SEARCH_REQ          HallEnumProtoId = 44
	HallEnumProtoId_HALL_PID_FRIENDS_SEARCH_ACK          HallEnumProtoId = 45
	HallEnumProtoId_HALL_PID_REG_REQ                     HallEnumProtoId = 46
	HallEnumProtoId_HALL_PID_REG_ACK                     HallEnumProtoId = 47
	HallEnumProtoId_HALL_PID_TASK_LIST_REQ               HallEnumProtoId = 48
	HallEnumProtoId_HALL_PID_TASK_LIST_ACK               HallEnumProtoId = 49
	HallEnumProtoId_HALL_PID_APPLE_PAY_CB_ACK            HallEnumProtoId = 50
	HallEnumProtoId_HALL_PID_ONLINEWARD_INFO_REQ         HallEnumProtoId = 51
	HallEnumProtoId_HALL_PID_ONLINEWARD_INFO_ACK         HallEnumProtoId = 52
	HallEnumProtoId_HALL_PID_GOODS_BUY_REQ               HallEnumProtoId = 53
	HallEnumProtoId_HALL_PID_GOODS_BUY_ACK               HallEnumProtoId = 54
	HallEnumProtoId_HALL_PID_ALLOWANCE_REQ               HallEnumProtoId = 55
	HallEnumProtoId_HALL_PID_ALLOWANCE_ACK               HallEnumProtoId = 56
)

var HallEnumProtoId_name = map[int32]string{
	0:  "HALL_PID_HEARTBEAT",
	1:  "HALL_PID_QUICK_CONN",
	2:  "HALL_PID_QUICK_CONN_ACK",
	3:  "HALL_PID_GAME_LOGIN",
	4:  "HALL_PID_GAME_LOGIN_ACK",
	5:  "HALL_PID_WXPAYUNIFIEDORDER_REQ",
	6:  "HALL_PID_WXPAYUNIFIEDORDER_ACK",
	7:  "HALL_PID_WXPAYSYNCCHECKER_REQ",
	8:  "HALL_PID_WXPAYSYNCCHECKER_ACK",
	9:  "HALL_PID_USER_DATA",
	10: "HALL_PID_USER_DATA_ACK",
	11: "HALL_PID_DRAW_LOTTERY",
	12: "HALL_PID_DRAW_LOTTERY_ACK",
	13: "HALL_PID_DS_LOTTERY_INFO_ACK",
	14: "HALL_PID_ONLINEWARD_REQ",
	15: "HALL_PID_ONLINEWARD_ACK",
	16: "HALL_PID_EVENT_REQ",
	17: "HALL_PID_EVENT_ACK",
	18: "HALL_PID_GOODS_LIST_REQ",
	19: "HALL_PID_GOODS_LIST_ACK",
	20: "HALL_PID_HOTUPDATEVERSIONINFO_REQ",
	21: "HALL_PID_HOTUPDATEVERSIONINFO_ACK",
	22: "HALL_PID_BAG_ITEMS_REQ",
	23: "HALL_PID_BAG_ITEMS_ACK",
	24: "HALL_PID_HOTUPDATEGAMEASSETSINFO_REQ",
	25: "HALL_PID_HOTUPDATEGAMEASSETSINFO_ACK",
	26: "HALL_PID_APPLE_PAY_CB_REQ",
	27: "HALL_PID_HOTUPDATEASSETSINFO_REQ",
	28: "HALL_PID_HOTUPDATEASSETSINFO_ACK",
	29: "HALL_PID_MAIL_LIST_REQ",
	30: "HALL_PID_MAIL_LIST_ACK",
	31: "HALL_PID_HALL_DSLOTTERYINFO_REQ",
	32: "HALL_PID_FRIENDS_LIST_REQ",
	33: "HALL_PID_FRIENDS_LIST_ACK",
	34: "HALL_PID_RANK_REQ",
	35: "HALL_PID_RANK_ACK",
	36: "HALL_PID_STRONGBOX_INFO_REQ",
	37: "HALL_PID_STRONGBOX_INFO_ACK",
	38: "HALL_PID_STRONGBOX_ACCESS_REQ",
	39: "HALL_PID_STRONGBOX_ACCESS_ACK",
	40: "HALL_PID_FRIEND_ADD_REQ",
	41: "HALL_PID_FRIEND_ADD_ACK",
	42: "HALL_PID_FRIEND_DEL_REQ",
	43: "HALL_PID_FRIEND_DEL_ACK",
	44: "HALL_PID_FRIENDS_SEARCH_REQ",
	45: "HALL_PID_FRIENDS_SEARCH_ACK",
	46: "HALL_PID_REG_REQ",
	47: "HALL_PID_REG_ACK",
	48: "HALL_PID_TASK_LIST_REQ",
	49: "HALL_PID_TASK_LIST_ACK",
	50: "HALL_PID_APPLE_PAY_CB_ACK",
	51: "HALL_PID_ONLINEWARD_INFO_REQ",
	52: "HALL_PID_ONLINEWARD_INFO_ACK",
	53: "HALL_PID_GOODS_BUY_REQ",
	54: "HALL_PID_GOODS_BUY_ACK",
	55: "HALL_PID_ALLOWANCE_REQ",
	56: "HALL_PID_ALLOWANCE_ACK",
}
var HallEnumProtoId_value = map[string]int32{
	"HALL_PID_HEARTBEAT":                   0,
	"HALL_PID_QUICK_CONN":                  1,
	"HALL_PID_QUICK_CONN_ACK":              2,
	"HALL_PID_GAME_LOGIN":                  3,
	"HALL_PID_GAME_LOGIN_ACK":              4,
	"HALL_PID_WXPAYUNIFIEDORDER_REQ":       5,
	"HALL_PID_WXPAYUNIFIEDORDER_ACK":       6,
	"HALL_PID_WXPAYSYNCCHECKER_REQ":        7,
	"HALL_PID_WXPAYSYNCCHECKER_ACK":        8,
	"HALL_PID_USER_DATA":                   9,
	"HALL_PID_USER_DATA_ACK":               10,
	"HALL_PID_DRAW_LOTTERY":                11,
	"HALL_PID_DRAW_LOTTERY_ACK":            12,
	"HALL_PID_DS_LOTTERY_INFO_ACK":         13,
	"HALL_PID_ONLINEWARD_REQ":              14,
	"HALL_PID_ONLINEWARD_ACK":              15,
	"HALL_PID_EVENT_REQ":                   16,
	"HALL_PID_EVENT_ACK":                   17,
	"HALL_PID_GOODS_LIST_REQ":              18,
	"HALL_PID_GOODS_LIST_ACK":              19,
	"HALL_PID_HOTUPDATEVERSIONINFO_REQ":    20,
	"HALL_PID_HOTUPDATEVERSIONINFO_ACK":    21,
	"HALL_PID_BAG_ITEMS_REQ":               22,
	"HALL_PID_BAG_ITEMS_ACK":               23,
	"HALL_PID_HOTUPDATEGAMEASSETSINFO_REQ": 24,
	"HALL_PID_HOTUPDATEGAMEASSETSINFO_ACK": 25,
	"HALL_PID_APPLE_PAY_CB_REQ":            26,
	"HALL_PID_HOTUPDATEASSETSINFO_REQ":     27,
	"HALL_PID_HOTUPDATEASSETSINFO_ACK":     28,
	"HALL_PID_MAIL_LIST_REQ":               29,
	"HALL_PID_MAIL_LIST_ACK":               30,
	"HALL_PID_HALL_DSLOTTERYINFO_REQ":      31,
	"HALL_PID_FRIENDS_LIST_REQ":            32,
	"HALL_PID_FRIENDS_LIST_ACK":            33,
	"HALL_PID_RANK_REQ":                    34,
	"HALL_PID_RANK_ACK":                    35,
	"HALL_PID_STRONGBOX_INFO_REQ":          36,
	"HALL_PID_STRONGBOX_INFO_ACK":          37,
	"HALL_PID_STRONGBOX_ACCESS_REQ":        38,
	"HALL_PID_STRONGBOX_ACCESS_ACK":        39,
	"HALL_PID_FRIEND_ADD_REQ":              40,
	"HALL_PID_FRIEND_ADD_ACK":              41,
	"HALL_PID_FRIEND_DEL_REQ":              42,
	"HALL_PID_FRIEND_DEL_ACK":              43,
	"HALL_PID_FRIENDS_SEARCH_REQ":          44,
	"HALL_PID_FRIENDS_SEARCH_ACK":          45,
	"HALL_PID_REG_REQ":                     46,
	"HALL_PID_REG_ACK":                     47,
	"HALL_PID_TASK_LIST_REQ":               48,
	"HALL_PID_TASK_LIST_ACK":               49,
	"HALL_PID_APPLE_PAY_CB_ACK":            50,
	"HALL_PID_ONLINEWARD_INFO_REQ":         51,
	"HALL_PID_ONLINEWARD_INFO_ACK":         52,
	"HALL_PID_GOODS_BUY_REQ":               53,
	"HALL_PID_GOODS_BUY_ACK":               54,
	"HALL_PID_ALLOWANCE_REQ":               55,
	"HALL_PID_ALLOWANCE_ACK":               56,
}

func (x HallEnumProtoId) Enum() *HallEnumProtoId {
	p := new(HallEnumProtoId)
	*p = x
	return p
}
func (x HallEnumProtoId) String() string {
	return proto.EnumName(HallEnumProtoId_name, int32(x))
}
func (x *HallEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumProtoId_value, data, "HallEnumProtoId")
	if err != nil {
		return err
	}
	*x = HallEnumProtoId(value)
	return nil
}
func (HallEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

// 货币与商品类型
type HallEnumTradeType int32

const (
	// 0-50 货币类型与增值服务
	HallEnumTradeType_TRADE_COIN    HallEnumTradeType = 1
	HallEnumTradeType_TRADE_DIAMOND HallEnumTradeType = 2
	HallEnumTradeType_TRADE_BONUS   HallEnumTradeType = 3
	HallEnumTradeType_TRADE_RMB     HallEnumTradeType = 5
	HallEnumTradeType_TRADE_TICKET  HallEnumTradeType = 7
	// 50-100  增值服务
	HallEnumTradeType_SERVER_VIP HallEnumTradeType = 51
	// 100-200 虚拟道具
	HallEnumTradeType_PROPS_FANGKA HallEnumTradeType = 101
	HallEnumTradeType_PROPS_DALABA HallEnumTradeType = 102
	// 300-400 实物礼品
	HallEnumTradeType_REAL_PHONE_CARD_10 HallEnumTradeType = 301
	HallEnumTradeType_REAL_PHONE_CARD_50 HallEnumTradeType = 302
	HallEnumTradeType_REAL_SHOP_CARD_100 HallEnumTradeType = 303
	HallEnumTradeType_REAL_PHONE_IPHONE7 HallEnumTradeType = 304
	HallEnumTradeType_REAL_PC_MACBOOK    HallEnumTradeType = 305
)

var HallEnumTradeType_name = map[int32]string{
	1:   "TRADE_COIN",
	2:   "TRADE_DIAMOND",
	3:   "TRADE_BONUS",
	5:   "TRADE_RMB",
	7:   "TRADE_TICKET",
	51:  "SERVER_VIP",
	101: "PROPS_FANGKA",
	102: "PROPS_DALABA",
	301: "REAL_PHONE_CARD_10",
	302: "REAL_PHONE_CARD_50",
	303: "REAL_SHOP_CARD_100",
	304: "REAL_PHONE_IPHONE7",
	305: "REAL_PC_MACBOOK",
}
var HallEnumTradeType_value = map[string]int32{
	"TRADE_COIN":         1,
	"TRADE_DIAMOND":      2,
	"TRADE_BONUS":        3,
	"TRADE_RMB":          5,
	"TRADE_TICKET":       7,
	"SERVER_VIP":         51,
	"PROPS_FANGKA":       101,
	"PROPS_DALABA":       102,
	"REAL_PHONE_CARD_10": 301,
	"REAL_PHONE_CARD_50": 302,
	"REAL_SHOP_CARD_100": 303,
	"REAL_PHONE_IPHONE7": 304,
	"REAL_PC_MACBOOK":    305,
}

func (x HallEnumTradeType) Enum() *HallEnumTradeType {
	p := new(HallEnumTradeType)
	*p = x
	return p
}
func (x HallEnumTradeType) String() string {
	return proto.EnumName(HallEnumTradeType_name, int32(x))
}
func (x *HallEnumTradeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumTradeType_value, data, "HallEnumTradeType")
	if err != nil {
		return err
	}
	*x = HallEnumTradeType(value)
	return nil
}
func (HallEnumTradeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

// 活动类型
type HallEnumEvent int32

const (
	HallEnumEvent_TYPE_TIME HallEnumEvent = 1
	HallEnumEvent_TYPE_NEW  HallEnumEvent = 2
	HallEnumEvent_TYPE_NULL HallEnumEvent = 3
)

var HallEnumEvent_name = map[int32]string{
	1: "TYPE_TIME",
	2: "TYPE_NEW",
	3: "TYPE_NULL",
}
var HallEnumEvent_value = map[string]int32{
	"TYPE_TIME": 1,
	"TYPE_NEW":  2,
	"TYPE_NULL": 3,
}

func (x HallEnumEvent) Enum() *HallEnumEvent {
	p := new(HallEnumEvent)
	*p = x
	return p
}
func (x HallEnumEvent) String() string {
	return proto.EnumName(HallEnumEvent_name, int32(x))
}
func (x *HallEnumEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumEvent_value, data, "HallEnumEvent")
	if err != nil {
		return err
	}
	*x = HallEnumEvent(value)
	return nil
}
func (HallEnumEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

// 活动奖品
type HallEnum_Reward int32

const (
	HallEnum_Reward_RE_EXP  HallEnum_Reward = 1
	HallEnum_Reward_RE_GIFT HallEnum_Reward = 2
)

var HallEnum_Reward_name = map[int32]string{
	1: "RE_EXP",
	2: "RE_GIFT",
}
var HallEnum_Reward_value = map[string]int32{
	"RE_EXP":  1,
	"RE_GIFT": 2,
}

func (x HallEnum_Reward) Enum() *HallEnum_Reward {
	p := new(HallEnum_Reward)
	*p = x
	return p
}
func (x HallEnum_Reward) String() string {
	return proto.EnumName(HallEnum_Reward_name, int32(x))
}
func (x *HallEnum_Reward) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnum_Reward_value, data, "HallEnum_Reward")
	if err != nil {
		return err
	}
	*x = HallEnum_Reward(value)
	return nil
}
func (HallEnum_Reward) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

// 邮件类型
type HallEnumMailType int32

const (
	HallEnumMailType_SYSTEM     HallEnumMailType = 1
	HallEnumMailType_FRIEND_ADD HallEnumMailType = 2
)

var HallEnumMailType_name = map[int32]string{
	1: "SYSTEM",
	2: "FRIEND_ADD",
}
var HallEnumMailType_value = map[string]int32{
	"SYSTEM":     1,
	"FRIEND_ADD": 2,
}

func (x HallEnumMailType) Enum() *HallEnumMailType {
	p := new(HallEnumMailType)
	*p = x
	return p
}
func (x HallEnumMailType) String() string {
	return proto.EnumName(HallEnumMailType_name, int32(x))
}
func (x *HallEnumMailType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumMailType_value, data, "HallEnumMailType")
	if err != nil {
		return err
	}
	*x = HallEnumMailType(value)
	return nil
}
func (HallEnumMailType) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

// 奖励物品类型
type HallLotteryItemType int32

const (
	HallLotteryItemType_L_ROOM_TICKET HallLotteryItemType = 1
	HallLotteryItemType_L_FILL_SIGN   HallLotteryItemType = 2
	HallLotteryItemType_L_DIAMOND     HallLotteryItemType = 3
	HallLotteryItemType_L_COIN        HallLotteryItemType = 4
)

var HallLotteryItemType_name = map[int32]string{
	1: "L_ROOM_TICKET",
	2: "L_FILL_SIGN",
	3: "L_DIAMOND",
	4: "L_COIN",
}
var HallLotteryItemType_value = map[string]int32{
	"L_ROOM_TICKET": 1,
	"L_FILL_SIGN":   2,
	"L_DIAMOND":     3,
	"L_COIN":        4,
}

func (x HallLotteryItemType) Enum() *HallLotteryItemType {
	p := new(HallLotteryItemType)
	*p = x
	return p
}
func (x HallLotteryItemType) String() string {
	return proto.EnumName(HallLotteryItemType_name, int32(x))
}
func (x *HallLotteryItemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallLotteryItemType_value, data, "HallLotteryItemType")
	if err != nil {
		return err
	}
	*x = HallLotteryItemType(value)
	return nil
}
func (HallLotteryItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

// 任务类型
type HallEnumTaskType int32

const (
	HallEnumTaskType_TYPE_MJ  HallEnumTaskType = 1
	HallEnumTaskType_TYPE_DDZ HallEnumTaskType = 2
	HallEnumTaskType_TYPE_ZJH HallEnumTaskType = 3
)

var HallEnumTaskType_name = map[int32]string{
	1: "TYPE_MJ",
	2: "TYPE_DDZ",
	3: "TYPE_ZJH",
}
var HallEnumTaskType_value = map[string]int32{
	"TYPE_MJ":  1,
	"TYPE_DDZ": 2,
	"TYPE_ZJH": 3,
}

func (x HallEnumTaskType) Enum() *HallEnumTaskType {
	p := new(HallEnumTaskType)
	*p = x
	return p
}
func (x HallEnumTaskType) String() string {
	return proto.EnumName(HallEnumTaskType_name, int32(x))
}
func (x *HallEnumTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumTaskType_value, data, "HallEnumTaskType")
	if err != nil {
		return err
	}
	*x = HallEnumTaskType(value)
	return nil
}
func (HallEnumTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

// vip等级
type HallUser_VIP int32

const (
	HallUser_VIP_LV_1 HallUser_VIP = 1
	HallUser_VIP_LV_2 HallUser_VIP = 2
	HallUser_VIP_LV_3 HallUser_VIP = 3
	HallUser_VIP_LV_4 HallUser_VIP = 4
	HallUser_VIP_LV_5 HallUser_VIP = 5
	HallUser_VIP_LV_6 HallUser_VIP = 6
)

var HallUser_VIP_name = map[int32]string{
	1: "LV_1",
	2: "LV_2",
	3: "LV_3",
	4: "LV_4",
	5: "LV_5",
	6: "LV_6",
}
var HallUser_VIP_value = map[string]int32{
	"LV_1": 1,
	"LV_2": 2,
	"LV_3": 3,
	"LV_4": 4,
	"LV_5": 5,
	"LV_6": 6,
}

func (x HallUser_VIP) Enum() *HallUser_VIP {
	p := new(HallUser_VIP)
	*p = x
	return p
}
func (x HallUser_VIP) String() string {
	return proto.EnumName(HallUser_VIP_name, int32(x))
}
func (x *HallUser_VIP) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallUser_VIP_value, data, "HallUser_VIP")
	if err != nil {
		return err
	}
	*x = HallUser_VIP(value)
	return nil
}
func (HallUser_VIP) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

// 单个活动
type HallItemEvent struct {
	Id               *int32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             *HallEnumEvent   `protobuf:"varint,2,opt,name=type,enum=ddproto.HallEnumEvent" json:"type,omitempty"`
	Reward           *HallEnum_Reward `protobuf:"varint,3,opt,name=reward,enum=ddproto.HallEnum_Reward" json:"reward,omitempty"`
	RichText         []string         `protobuf:"bytes,5,rep,name=richText" json:"richText,omitempty"`
	Title            *string          `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *HallItemEvent) Reset()                    { *m = HallItemEvent{} }
func (m *HallItemEvent) String() string            { return proto.CompactTextString(m) }
func (*HallItemEvent) ProtoMessage()               {}
func (*HallItemEvent) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *HallItemEvent) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HallItemEvent) GetType() HallEnumEvent {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HallEnumEvent_TYPE_TIME
}

func (m *HallItemEvent) GetReward() HallEnum_Reward {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return HallEnum_Reward_RE_EXP
}

func (m *HallItemEvent) GetRichText() []string {
	if m != nil {
		return m.RichText
	}
	return nil
}

func (m *HallItemEvent) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

// 单个邮件
type HallMailItem struct {
	Id               *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type             *HallEnumMailType `protobuf:"varint,2,opt,name=type,enum=ddproto.HallEnumMailType" json:"type,omitempty"`
	Title            *string           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content          *string           `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	IsWatch          *bool             `protobuf:"varint,5,opt,name=isWatch" json:"isWatch,omitempty"`
	IsCheck          *bool             `protobuf:"varint,6,opt,name=isCheck" json:"isCheck,omitempty"`
	Attach           []*HallBagItem    `protobuf:"bytes,7,rep,name=attach" json:"attach,omitempty"`
	Date             *int64            `protobuf:"varint,8,opt,name=date" json:"date,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *HallMailItem) Reset()                    { *m = HallMailItem{} }
func (m *HallMailItem) String() string            { return proto.CompactTextString(m) }
func (*HallMailItem) ProtoMessage()               {}
func (*HallMailItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *HallMailItem) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *HallMailItem) GetType() HallEnumMailType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HallEnumMailType_SYSTEM
}

func (m *HallMailItem) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *HallMailItem) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *HallMailItem) GetIsWatch() bool {
	if m != nil && m.IsWatch != nil {
		return *m.IsWatch
	}
	return false
}

func (m *HallMailItem) GetIsCheck() bool {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return false
}

func (m *HallMailItem) GetAttach() []*HallBagItem {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *HallMailItem) GetDate() int64 {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return 0
}

// 背包单个道具
type HallBagItem struct {
	Type             *HallEnumTradeType `protobuf:"varint,1,opt,name=type,enum=ddproto.HallEnumTradeType" json:"type,omitempty"`
	Amount           *int32             `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *HallBagItem) Reset()                    { *m = HallBagItem{} }
func (m *HallBagItem) String() string            { return proto.CompactTextString(m) }
func (*HallBagItem) ProtoMessage()               {}
func (*HallBagItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *HallBagItem) GetType() HallEnumTradeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HallEnumTradeType_TRADE_COIN
}

func (m *HallBagItem) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// 单个任务
type HallItemTask struct {
	TaskId           *int32         `protobuf:"varint,1,opt,name=task_id" json:"task_id,omitempty"`
	Title            *string        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description      *string        `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Addion           []*HallBagItem `protobuf:"bytes,4,rep,name=addion" json:"addion,omitempty"`
	TaskSum          *int32         `protobuf:"varint,5,opt,name=task_sum" json:"task_sum,omitempty"`
	SumNo            *int32         `protobuf:"varint,6,opt,name=sum_no" json:"sum_no,omitempty"`
	IsDone           *bool          `protobuf:"varint,7,opt,name=is_done" json:"is_done,omitempty"`
	IsCheck          *bool          `protobuf:"varint,8,opt,name=is_check" json:"is_check,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *HallItemTask) Reset()                    { *m = HallItemTask{} }
func (m *HallItemTask) String() string            { return proto.CompactTextString(m) }
func (*HallItemTask) ProtoMessage()               {}
func (*HallItemTask) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *HallItemTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *HallItemTask) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *HallItemTask) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *HallItemTask) GetAddion() []*HallBagItem {
	if m != nil {
		return m.Addion
	}
	return nil
}

func (m *HallItemTask) GetTaskSum() int32 {
	if m != nil && m.TaskSum != nil {
		return *m.TaskSum
	}
	return 0
}

func (m *HallItemTask) GetSumNo() int32 {
	if m != nil && m.SumNo != nil {
		return *m.SumNo
	}
	return 0
}

func (m *HallItemTask) GetIsDone() bool {
	if m != nil && m.IsDone != nil {
		return *m.IsDone
	}
	return false
}

func (m *HallItemTask) GetIsCheck() bool {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return false
}

// 个人信息
type HallUserData struct {
	UserName          *string       `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	UserId            *int32        `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	NiceValue         *int64        `protobuf:"varint,3,opt,name=niceValue" json:"niceValue,omitempty"`
	EvilValue         *int64        `protobuf:"varint,4,opt,name=evilValue" json:"evilValue,omitempty"`
	UserLevel         *int32        `protobuf:"varint,5,opt,name=userLevel" json:"userLevel,omitempty"`
	UserVIP           *bool         `protobuf:"varint,6,opt,name=userVIP" json:"userVIP,omitempty"`
	UserVIPLv         *HallUser_VIP `protobuf:"varint,7,opt,name=userVIPLv,enum=ddproto.HallUser_VIP" json:"userVIPLv,omitempty"`
	UserMoney         *int64        `protobuf:"varint,8,opt,name=userMoney" json:"userMoney,omitempty"`
	UserDiamond       *int64        `protobuf:"varint,9,opt,name=userDiamond" json:"userDiamond,omitempty"`
	UserRedBag        *string       `protobuf:"bytes,10,opt,name=userRedBag" json:"userRedBag,omitempty"`
	UserLotteryTicket *int64        `protobuf:"varint,11,opt,name=userLotteryTicket" json:"userLotteryTicket,omitempty"`
	Sex               *bool         `protobuf:"varint,12,opt,name=sex" json:"sex,omitempty"`
	XXX_unrecognized  []byte        `json:"-"`
}

func (m *HallUserData) Reset()                    { *m = HallUserData{} }
func (m *HallUserData) String() string            { return proto.CompactTextString(m) }
func (*HallUserData) ProtoMessage()               {}
func (*HallUserData) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *HallUserData) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *HallUserData) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *HallUserData) GetNiceValue() int64 {
	if m != nil && m.NiceValue != nil {
		return *m.NiceValue
	}
	return 0
}

func (m *HallUserData) GetEvilValue() int64 {
	if m != nil && m.EvilValue != nil {
		return *m.EvilValue
	}
	return 0
}

func (m *HallUserData) GetUserLevel() int32 {
	if m != nil && m.UserLevel != nil {
		return *m.UserLevel
	}
	return 0
}

func (m *HallUserData) GetUserVIP() bool {
	if m != nil && m.UserVIP != nil {
		return *m.UserVIP
	}
	return false
}

func (m *HallUserData) GetUserVIPLv() HallUser_VIP {
	if m != nil && m.UserVIPLv != nil {
		return *m.UserVIPLv
	}
	return HallUser_VIP_LV_1
}

func (m *HallUserData) GetUserMoney() int64 {
	if m != nil && m.UserMoney != nil {
		return *m.UserMoney
	}
	return 0
}

func (m *HallUserData) GetUserDiamond() int64 {
	if m != nil && m.UserDiamond != nil {
		return *m.UserDiamond
	}
	return 0
}

func (m *HallUserData) GetUserRedBag() string {
	if m != nil && m.UserRedBag != nil {
		return *m.UserRedBag
	}
	return ""
}

func (m *HallUserData) GetUserLotteryTicket() int64 {
	if m != nil && m.UserLotteryTicket != nil {
		return *m.UserLotteryTicket
	}
	return 0
}

func (m *HallUserData) GetSex() bool {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return false
}

// 排行信息
type HallRankItem struct {
	Placing          *int32  `protobuf:"varint,1,opt,name=placing" json:"placing,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	NickName         *string `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	RankInfo         *string `protobuf:"bytes,4,opt,name=rankInfo" json:"rankInfo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HallRankItem) Reset()                    { *m = HallRankItem{} }
func (m *HallRankItem) String() string            { return proto.CompactTextString(m) }
func (*HallRankItem) ProtoMessage()               {}
func (*HallRankItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *HallRankItem) GetPlacing() int32 {
	if m != nil && m.Placing != nil {
		return *m.Placing
	}
	return 0
}

func (m *HallRankItem) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *HallRankItem) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *HallRankItem) GetRankInfo() string {
	if m != nil && m.RankInfo != nil {
		return *m.RankInfo
	}
	return ""
}

// 金币专区
type CoinZone struct {
	Pay              []*GoodsItem `protobuf:"bytes,1,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CoinZone) Reset()                    { *m = CoinZone{} }
func (m *CoinZone) String() string            { return proto.CompactTextString(m) }
func (*CoinZone) ProtoMessage()               {}
func (*CoinZone) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *CoinZone) GetPay() []*GoodsItem {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 钻石专区
type DiamondZone struct {
	Pay              []*GoodsItem `protobuf:"bytes,1,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DiamondZone) Reset()                    { *m = DiamondZone{} }
func (m *DiamondZone) String() string            { return proto.CompactTextString(m) }
func (*DiamondZone) ProtoMessage()               {}
func (*DiamondZone) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *DiamondZone) GetPay() []*GoodsItem {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 兑换专区
type ExchangeZone struct {
	Money            []*GoodsItem `protobuf:"bytes,1,rep,name=money" json:"money,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ExchangeZone) Reset()                    { *m = ExchangeZone{} }
func (m *ExchangeZone) String() string            { return proto.CompactTextString(m) }
func (*ExchangeZone) ProtoMessage()               {}
func (*ExchangeZone) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

func (m *ExchangeZone) GetMoney() []*GoodsItem {
	if m != nil {
		return m.Money
	}
	return nil
}

// 购买专区
type BuyZone struct {
	Pay              []*GoodsItem `protobuf:"bytes,1,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *BuyZone) Reset()                    { *m = BuyZone{} }
func (m *BuyZone) String() string            { return proto.CompactTextString(m) }
func (*BuyZone) ProtoMessage()               {}
func (*BuyZone) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *BuyZone) GetPay() []*GoodsItem {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 商品类型
type GoodsItem struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Money            *int32  `protobuf:"varint,2,opt,name=money" json:"money,omitempty"`
	Img              *string `protobuf:"bytes,3,opt,name=img" json:"img,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoodsItem) Reset()                    { *m = GoodsItem{} }
func (m *GoodsItem) String() string            { return proto.CompactTextString(m) }
func (*GoodsItem) ProtoMessage()               {}
func (*GoodsItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *GoodsItem) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GoodsItem) GetMoney() int32 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *GoodsItem) GetImg() string {
	if m != nil && m.Img != nil {
		return *m.Img
	}
	return ""
}

// 保险箱数据
type HallStrongboxInfo struct {
	BoxCoin          *int64 `protobuf:"varint,2,opt,name=boxCoin" json:"boxCoin,omitempty"`
	UserCoin         *int64 `protobuf:"varint,3,opt,name=userCoin" json:"userCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HallStrongboxInfo) Reset()                    { *m = HallStrongboxInfo{} }
func (m *HallStrongboxInfo) String() string            { return proto.CompactTextString(m) }
func (*HallStrongboxInfo) ProtoMessage()               {}
func (*HallStrongboxInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{11} }

func (m *HallStrongboxInfo) GetBoxCoin() int64 {
	if m != nil && m.BoxCoin != nil {
		return *m.BoxCoin
	}
	return 0
}

func (m *HallStrongboxInfo) GetUserCoin() int64 {
	if m != nil && m.UserCoin != nil {
		return *m.UserCoin
	}
	return 0
}

func init() {
	proto.RegisterType((*HallItemEvent)(nil), "ddproto.hall_item_event")
	proto.RegisterType((*HallMailItem)(nil), "ddproto.hall_mail_item")
	proto.RegisterType((*HallBagItem)(nil), "ddproto.hall_bag_item")
	proto.RegisterType((*HallItemTask)(nil), "ddproto.hall_item_task")
	proto.RegisterType((*HallUserData)(nil), "ddproto.hall_userData")
	proto.RegisterType((*HallRankItem)(nil), "ddproto.hall_rank_item")
	proto.RegisterType((*CoinZone)(nil), "ddproto.CoinZone")
	proto.RegisterType((*DiamondZone)(nil), "ddproto.DiamondZone")
	proto.RegisterType((*ExchangeZone)(nil), "ddproto.ExchangeZone")
	proto.RegisterType((*BuyZone)(nil), "ddproto.BuyZone")
	proto.RegisterType((*GoodsItem)(nil), "ddproto.GoodsItem")
	proto.RegisterType((*HallStrongboxInfo)(nil), "ddproto.hall_strongbox_info")
	proto.RegisterEnum("ddproto.HallEnumProtoId", HallEnumProtoId_name, HallEnumProtoId_value)
	proto.RegisterEnum("ddproto.HallEnumTradeType", HallEnumTradeType_name, HallEnumTradeType_value)
	proto.RegisterEnum("ddproto.HallEnumEvent", HallEnumEvent_name, HallEnumEvent_value)
	proto.RegisterEnum("ddproto.HallEnum_Reward", HallEnum_Reward_name, HallEnum_Reward_value)
	proto.RegisterEnum("ddproto.HallEnumMailType", HallEnumMailType_name, HallEnumMailType_value)
	proto.RegisterEnum("ddproto.HallLotteryItemType", HallLotteryItemType_name, HallLotteryItemType_value)
	proto.RegisterEnum("ddproto.HallEnumTaskType", HallEnumTaskType_name, HallEnumTaskType_value)
	proto.RegisterEnum("ddproto.HallUser_VIP", HallUser_VIP_name, HallUser_VIP_value)
}

var fileDescriptor15 = []byte{
	// 1539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0xcb, 0x5a, 0xdb, 0x48,
	0x13, 0xfd, 0x7d, 0x03, 0xbb, 0x8d, 0x41, 0x88, 0x84, 0x98, 0x24, 0x24, 0xc4, 0xb9, 0xfc, 0xc4,
	0xcc, 0x30, 0x40, 0xae, 0x9b, 0x59, 0xc8, 0x92, 0x30, 0x8a, 0x65, 0xc9, 0x91, 0x64, 0x08, 0xd9,
	0xe8, 0x53, 0x2c, 0x05, 0xf4, 0x61, 0x2c, 0x3e, 0x5b, 0x64, 0xe0, 0x15, 0x66, 0x37, 0xcb, 0x79,
	0x88, 0xb9, 0x3e, 0xc1, 0x3c, 0xc8, 0x3c, 0xcc, 0x54, 0x75, 0xcb, 0xb2, 0x05, 0x36, 0xc9, 0xca,
	0xad, 0xaa, 0x3a, 0xd5, 0xa7, 0x4e, 0x95, 0xd4, 0x6d, 0xb2, 0x70, 0xec, 0x74, 0xbb, 0xb6, 0xeb,
	0x84, 0xce, 0xe6, 0x59, 0x3f, 0x08, 0x03, 0x7e, 0xd6, 0x75, 0xe9, 0xa2, 0xf2, 0x4b, 0x2a, 0x72,
	0xfa, 0xa1, 0x77, 0x6a, 0x7b, 0x5f, 0xbc, 0x5e, 0xc8, 0x13, 0x92, 0xf6, 0xdd, 0x72, 0x6a, 0x2d,
	0xb5, 0x9e, 0xe3, 0x9f, 0x91, 0x6c, 0x78, 0x79, 0xe6, 0x95, 0xd3, 0xf0, 0x34, 0xbf, 0x53, 0xde,
	0x8c, 0x70, 0x9b, 0x14, 0xe3, 0xf5, 0xce, 0x87, 0x98, 0xe7, 0x64, 0xa6, 0xef, 0xfd, 0xe4, 0xf4,
	0xdd, 0x72, 0x86, 0x46, 0xae, 0x4c, 0x88, 0x34, 0x68, 0x00, 0xcf, 0x91, 0x7c, 0xdf, 0xef, 0x1c,
	0x5b, 0xde, 0x45, 0x58, 0xce, 0xad, 0x65, 0xd6, 0x0b, 0x7c, 0x89, 0xe4, 0x42, 0x3f, 0xec, 0x7a,
	0xe5, 0x19, 0xc0, 0x16, 0x2a, 0xff, 0xa4, 0xc8, 0x3c, 0x45, 0x9d, 0x3a, 0x3e, 0x23, 0x36, 0x46,
	0xa9, 0xc0, 0x57, 0x13, 0x94, 0xee, 0x4f, 0xd8, 0x88, 0xe2, 0x30, 0x66, 0x94, 0x39, 0x43, 0xa1,
	0x0b, 0x64, 0xb6, 0x13, 0xf4, 0x42, 0x20, 0x5c, 0xce, 0x0e, 0x0d, 0xfe, 0xe0, 0xc0, 0x09, 0x3b,
	0xc7, 0x40, 0x25, 0xb5, 0x9e, 0x67, 0x06, 0xf1, 0xd8, 0xeb, 0x9c, 0x50, 0x32, 0x79, 0x10, 0x60,
	0xc6, 0x09, 0x43, 0x07, 0x02, 0x66, 0x81, 0x6b, 0x71, 0x67, 0x39, 0xb9, 0xdf, 0x27, 0xe7, 0x88,
	0x31, 0x9c, 0x23, 0x59, 0xd0, 0xd7, 0x2b, 0xe7, 0x01, 0x95, 0xa9, 0xa8, 0xa4, 0x94, 0x74, 0x6f,
	0x44, 0xa4, 0x53, 0x94, 0xf4, 0xea, 0x04, 0xd2, 0x61, 0xdf, 0x71, 0x3d, 0xc6, 0x7a, 0x1e, 0xf6,
	0x3c, 0x0d, 0xce, 0x81, 0x25, 0xd6, 0x98, 0xab, 0xfc, 0x3d, 0x14, 0x84, 0x36, 0x29, 0x74, 0x06,
	0x27, 0xc8, 0x13, 0x7f, 0xed, 0xb8, 0x51, 0x71, 0xa5, 0x69, 0x5a, 0xd8, 0x12, 0x29, 0xba, 0xde,
	0xa0, 0xd3, 0xf7, 0xcf, 0x42, 0x3f, 0xe8, 0x45, 0xe5, 0x63, 0x2d, 0xae, 0x8b, 0xcf, 0xd9, 0x1b,
	0x6b, 0x81, 0x0e, 0xd1, 0xe4, 0x83, 0xf3, 0x53, 0x2a, 0x4b, 0x0e, 0x19, 0xc1, 0x83, 0xdd, 0x0b,
	0xa8, 0x2a, 0x39, 0x26, 0x93, 0xed, 0x06, 0x3d, 0x0f, 0x64, 0x41, 0x99, 0x00, 0x02, 0x86, 0x0e,
	0x15, 0x0e, 0x25, 0xc8, 0x57, 0x7e, 0x4e, 0x47, 0x1a, 0x9c, 0x0f, 0xbc, 0xbe, 0x04, 0xa3, 0x87,
	0x31, 0xb8, 0xd6, 0x9c, 0x53, 0x2f, 0x6a, 0x25, 0xa4, 0x45, 0x8b, 0xe2, 0xb2, 0x42, 0xf9, 0x45,
	0x52, 0xe8, 0xf9, 0x1d, 0x6f, 0xdf, 0xe9, 0x9e, 0xb3, 0x96, 0x65, 0xd0, 0xe4, 0x7d, 0xf1, 0xbb,
	0xcc, 0x94, 0x1d, 0x9a, 0x10, 0xa5, 0xc2, 0xe4, 0x75, 0x23, 0x7e, 0xc0, 0x07, 0x4d, 0xfb, 0x4a,
	0x2b, 0x6a, 0xdb, 0x73, 0x16, 0x03, 0x06, 0xf5, 0x0b, 0xa5, 0x38, 0x7f, 0xb5, 0x5a, 0x74, 0xdb,
	0xe0, 0x1f, 0xa6, 0x6b, 0x42, 0x31, 0x97, 0xac, 0x7d, 0xa8, 0x1e, 0x65, 0xed, 0x43, 0x1b, 0x7a,
	0x6e, 0xb9, 0x40, 0x8d, 0x30, 0x84, 0x68, 0x34, 0x3c, 0xb7, 0xe6, 0x1c, 0x95, 0x09, 0x2d, 0x60,
	0x85, 0x2c, 0x52, 0x2a, 0x41, 0x18, 0x7a, 0xfd, 0x4b, 0xcb, 0xef, 0x9c, 0x78, 0x61, 0xb9, 0x48,
	0xc3, 0x8b, 0x24, 0x33, 0xf0, 0x2e, 0xca, 0x73, 0x54, 0x8c, 0x76, 0xd4, 0xc0, 0xbe, 0xd3, 0x3b,
	0x61, 0x1a, 0x03, 0xe3, 0xb3, 0xae, 0xd3, 0xf1, 0x7b, 0x47, 0x51, 0x03, 0x93, 0x5a, 0x94, 0x50,
	0x2d, 0xd0, 0xe2, 0x84, 0xaa, 0xc5, 0xda, 0x87, 0x2f, 0x0e, 0xe0, 0x95, 0xde, 0xe7, 0x80, 0x8d,
	0x6f, 0x65, 0x83, 0xe4, 0xc5, 0xc0, 0xef, 0x7d, 0x04, 0xea, 0xfc, 0x43, 0x92, 0x39, 0x73, 0x2e,
	0x21, 0x19, 0x76, 0x96, 0x8f, 0x6b, 0xad, 0x07, 0x81, 0x3b, 0x50, 0x60, 0xc7, 0xca, 0x26, 0x29,
	0x46, 0x05, 0x7d, 0x5b, 0xfc, 0x36, 0x99, 0x93, 0x2f, 0x3a, 0xc7, 0x4e, 0xef, 0xc8, 0xa3, 0x80,
	0x47, 0x24, 0x77, 0x4a, 0x35, 0x9a, 0x0e, 0xa9, 0x92, 0xd9, 0xda, 0xf9, 0xe5, 0xb7, 0xa5, 0x7f,
	0x41, 0x0a, 0xf1, 0x43, 0xe2, 0x93, 0x53, 0x1a, 0xee, 0xc3, 0x66, 0x02, 0x74, 0xf4, 0x4f, 0x8f,
	0x98, 0x04, 0x95, 0xb7, 0x64, 0x89, 0xea, 0x38, 0x08, 0xfb, 0x41, 0xef, 0xe8, 0x53, 0x70, 0x61,
	0xfb, 0xa0, 0x06, 0x8a, 0x09, 0x6b, 0x94, 0x82, 0x82, 0x32, 0xc3, 0x51, 0xa3, 0x16, 0x3a, 0x47,
	0xd5, 0x7f, 0x4b, 0x64, 0x71, 0xf4, 0xb2, 0x51, 0x32, 0x8a, 0xcb, 0x2f, 0x13, 0x7e, 0x4f, 0x50,
	0x55, 0xbb, 0xa5, 0x48, 0xf6, 0x9e, 0x2c, 0x18, 0x56, 0x4d, 0x16, 0x2c, 0xee, 0x7f, 0xfc, 0x1d,
	0xb2, 0x14, 0xdb, 0xdf, 0xb7, 0x15, 0xb1, 0x61, 0x8b, 0xba, 0xa6, 0x71, 0x29, 0xfe, 0x1e, 0xb9,
	0x33, 0xc1, 0x61, 0x0b, 0x62, 0x83, 0x4b, 0x27, 0x50, 0x75, 0xa1, 0x29, 0xdb, 0xaa, 0x5e, 0x57,
	0x34, 0x2e, 0x93, 0x40, 0x8d, 0x1c, 0x14, 0x95, 0xe5, 0x2b, 0xe4, 0x41, 0xec, 0x3c, 0xf8, 0xd0,
	0x12, 0x0e, 0xdb, 0x9a, 0xb2, 0xab, 0xc8, 0x92, 0x6e, 0x48, 0xb2, 0x61, 0x1b, 0xf2, 0x7b, 0x2e,
	0xf7, 0x95, 0x18, 0xcc, 0x33, 0x03, 0xfd, 0x59, 0x4d, 0xc6, 0x98, 0x87, 0x9a, 0x28, 0xee, 0xc9,
	0x62, 0x23, 0x4a, 0x33, 0x7b, 0x73, 0x08, 0x66, 0xc9, 0x27, 0x14, 0x69, 0x9b, 0x60, 0x96, 0x04,
	0x4b, 0xe0, 0x0a, 0xfc, 0x5d, 0xb2, 0x7c, 0xdd, 0x4e, 0x31, 0x04, 0xde, 0x82, 0xdb, 0xb1, 0x4f,
	0x32, 0x84, 0x03, 0x28, 0xcf, 0xb2, 0x64, 0xe3, 0x90, 0x2b, 0xf2, 0xab, 0x64, 0x65, 0xa2, 0x8b,
	0x22, 0xe7, 0xf8, 0x35, 0x72, 0x7f, 0xe4, 0x36, 0x63, 0xa7, 0xa2, 0xed, 0xea, 0x34, 0xa2, 0x94,
	0x90, 0x4e, 0xd7, 0x54, 0x45, 0x93, 0x0f, 0x04, 0x43, 0xa2, 0xf5, 0xcc, 0x4f, 0x73, 0x22, 0x72,
	0x21, 0x51, 0x89, 0xbc, 0x2f, 0x6b, 0x16, 0x05, 0x71, 0x13, 0xec, 0x18, 0xbf, 0x98, 0x6c, 0x92,
	0xae, 0x23, 0x1d, 0xc5, 0x64, 0x20, 0x7e, 0x9a, 0x13, 0x91, 0x4b, 0xfc, 0x53, 0xf2, 0x68, 0x34,
	0x45, 0xba, 0xd5, 0x6e, 0x81, 0x36, 0x90, 0xd9, 0x30, 0x15, 0x5d, 0xa3, 0xa5, 0x60, 0x8e, 0x5b,
	0x5f, 0x0f, 0xc3, 0x6c, 0xb7, 0x13, 0x4a, 0xd7, 0x84, 0xba, 0xad, 0x58, 0x72, 0xd3, 0xa4, 0x29,
	0x96, 0xa7, 0xf8, 0x10, 0x77, 0x87, 0x5f, 0x27, 0x4f, 0xae, 0xa7, 0xc7, 0x69, 0x13, 0x4c, 0x53,
	0xb6, 0xcc, 0x98, 0x48, 0xf9, 0x9b, 0x22, 0x31, 0xe7, 0x4a, 0xa2, 0x7d, 0x42, 0xab, 0xa5, 0xca,
	0x36, 0x0c, 0x8d, 0x2d, 0xd6, 0x68, 0xa2, 0xbb, 0xfc, 0x13, 0xb2, 0x76, 0x3d, 0xd1, 0x95, 0xed,
	0xee, 0x7d, 0x35, 0x0a, 0xb7, 0xba, 0x9f, 0x28, 0xad, 0x29, 0x28, 0xea, 0x48, 0xfd, 0xd5, 0x29,
	0x3e, 0xc4, 0x3d, 0xe0, 0x1f, 0x93, 0x87, 0xa3, 0xec, 0xb8, 0x90, 0xcc, 0x68, 0x8c, 0x62, 0x0a,
	0x0f, 0x13, 0x75, 0xec, 0x1a, 0x8a, 0xac, 0x8d, 0x77, 0x77, 0x6d, 0xba, 0x1b, 0xb7, 0x78, 0xc4,
	0xdf, 0x26, 0x8b, 0xb1, 0xdb, 0x10, 0xb4, 0x06, 0x45, 0x55, 0xae, 0x9b, 0x31, 0xfa, 0x31, 0x7c,
	0xf9, 0xee, 0xc5, 0x66, 0xd3, 0x32, 0x74, 0xad, 0x5e, 0xd3, 0x3f, 0xd8, 0x31, 0x99, 0x27, 0x37,
	0x05, 0x60, 0x86, 0xa7, 0x89, 0xd7, 0x74, 0x14, 0x20, 0x88, 0xa2, 0x6c, 0xb2, 0x41, 0x78, 0x76,
	0x73, 0x08, 0x66, 0xf9, 0x7f, 0x62, 0x64, 0x59, 0x51, 0xb6, 0x20, 0xb1, 0x37, 0x67, 0x7d, 0x9a,
	0x13, 0x91, 0xcf, 0x27, 0x39, 0x25, 0x59, 0xa5, 0xc8, 0xea, 0x34, 0x27, 0x22, 0x37, 0x12, 0xa5,
	0x0d, 0x85, 0x34, 0xe1, 0xbb, 0x2a, 0xee, 0x51, 0xf4, 0x77, 0x37, 0x05, 0x60, 0x86, 0xef, 0xf9,
	0x5b, 0x84, 0x1b, 0x89, 0x2a, 0xd7, 0x29, 0x6c, 0xf3, 0x9a, 0x15, 0x63, 0x7f, 0x48, 0x8c, 0x85,
	0x25, 0x98, 0x8d, 0x51, 0x4b, 0xb7, 0xa6, 0xf8, 0x10, 0xb7, 0x3d, 0x7d, 0xaa, 0xd1, 0xbd, 0x93,
	0xf8, 0x28, 0x8d, 0x7d, 0x55, 0xe2, 0x0e, 0xbe, 0xb8, 0x31, 0x02, 0x73, 0xbc, 0x4c, 0x6c, 0xcf,
	0xbe, 0x17, 0xb5, 0xf6, 0x21, 0x45, 0xbf, 0x9a, 0xe2, 0x43, 0xdc, 0xeb, 0x84, 0x0f, 0x7e, 0xf5,
	0x03, 0x41, 0x13, 0x65, 0x8a, 0x7b, 0x33, 0xc5, 0x87, 0xb8, 0xb7, 0xd5, 0x5f, 0xd3, 0xe4, 0xd6,
	0x94, 0xbb, 0x24, 0xb1, 0x0c, 0x41, 0x92, 0xe1, 0x9c, 0x52, 0xf0, 0x00, 0x5b, 0x24, 0x25, 0xf6,
	0x2c, 0x29, 0x42, 0x53, 0xd7, 0x24, 0x38, 0xb6, 0x16, 0x48, 0x91, 0x99, 0x6a, 0xba, 0xd6, 0x36,
	0xe1, 0xb8, 0x2a, 0x91, 0x02, 0x33, 0x18, 0xcd, 0x1a, 0x1c, 0x3e, 0x1c, 0x99, 0x63, 0x8f, 0x16,
	0x9c, 0x77, 0xb2, 0x05, 0xe7, 0x08, 0x24, 0x85, 0x23, 0x00, 0x3e, 0x5d, 0x78, 0x81, 0x02, 0x3d,
	0x20, 0xa2, 0x65, 0xe8, 0x2d, 0xd3, 0xde, 0x15, 0xb4, 0x7a, 0x43, 0xe0, 0xbc, 0x91, 0x45, 0x12,
	0x54, 0xa1, 0x26, 0x70, 0x9f, 0xe1, 0x70, 0xe4, 0x0d, 0x59, 0x00, 0xf6, 0x7b, 0xba, 0x06, 0x6c,
	0x50, 0xaf, 0xed, 0x2d, 0xee, 0xb7, 0xf4, 0x24, 0xc7, 0xab, 0x2d, 0xee, 0xf7, 0x91, 0xc3, 0xdc,
	0xd3, 0x5b, 0x43, 0xc0, 0x16, 0xf7, 0xc7, 0x55, 0x84, 0x42, 0x7f, 0xde, 0x70, 0x7f, 0xa6, 0x61,
	0x4c, 0x16, 0x98, 0x43, 0x84, 0xcf, 0x84, 0x58, 0xd3, 0xf5, 0x06, 0xf7, 0x57, 0xba, 0xfa, 0x63,
	0xf4, 0x17, 0x67, 0xec, 0xef, 0x0a, 0x56, 0x78, 0xd8, 0xc2, 0x8a, 0x9a, 0x32, 0x88, 0x32, 0x47,
	0xf2, 0xf4, 0x11, 0xfa, 0x08, 0x7a, 0x0c, 0x9d, 0x5a, 0x5b, 0x55, 0xb9, 0x4c, 0x75, 0x83, 0x70,
	0xd7, 0xfe, 0xc3, 0x10, 0x32, 0x63, 0xc8, 0xb6, 0xfc, 0xa1, 0x05, 0xe0, 0x22, 0x99, 0x85, 0x75,
	0x5d, 0xd9, 0xb5, 0xb8, 0x74, 0x75, 0x3b, 0xba, 0xa0, 0x5c, 0xf9, 0x1f, 0x02, 0xf1, 0xe6, 0xa1,
	0x09, 0x1f, 0x6b, 0x88, 0x07, 0xf1, 0x46, 0x6f, 0x1c, 0x40, 0x0e, 0xc8, 0x32, 0x85, 0x74, 0xd9,
	0x25, 0x32, 0xba, 0xe4, 0x23, 0x0a, 0x7a, 0x05, 0x6f, 0x9d, 0xae, 0x37, 0x87, 0xca, 0xa7, 0xb0,
	0x57, 0xaa, 0xbd, 0xab, 0xc0, 0x14, 0x98, 0x4a, 0x5d, 0x63, 0x64, 0xd5, 0xb8, 0x97, 0x19, 0xdc,
	0x48, 0x65, 0xad, 0xce, 0x42, 0xdd, 0xfc, 0xd8, 0x48, 0xc0, 0x85, 0xde, 0xc2, 0xa4, 0x40, 0x97,
	0x56, 0xd7, 0x7c, 0x37, 0x56, 0xb8, 0x24, 0x7d, 0x84, 0x5c, 0xc3, 0xa7, 0x8f, 0xef, 0xf6, 0xa0,
	0xee, 0xc6, 0xd8, 0xfd, 0x9d, 0x5e, 0x94, 0xf3, 0x24, 0xab, 0xee, 0xdb, 0xdb, 0x00, 0x63, 0xab,
	0x1d, 0x80, 0xb0, 0xd5, 0x0b, 0xd8, 0x99, 0xad, 0x5e, 0xc2, 0x85, 0x86, 0xad, 0x5e, 0xc1, 0xe4,
	0xb0, 0xd5, 0x6b, 0x6e, 0xe6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x7a, 0x43, 0x3c, 0x82,
	0x0e, 0x00, 0x00,
}
