// Code generated by protoc-gen-go.
// source: hall_data.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_req_kickout from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_req_upload_location from common_client.proto

// Ignoring public import of common_bc_leaveTimeout from common_client.proto

// Ignoring public import of common_desk_by_agent from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type HallEnumProtoId int32

const (
	HallEnumProtoId_HALL_PID_HEARTBEAT                   HallEnumProtoId = 0
	HallEnumProtoId_HALL_PID_QUICK_CONN                  HallEnumProtoId = 1
	HallEnumProtoId_HALL_PID_QUICK_CONN_ACK              HallEnumProtoId = 2
	HallEnumProtoId_HALL_PID_GAME_LOGIN                  HallEnumProtoId = 3
	HallEnumProtoId_HALL_PID_GAME_LOGIN_ACK              HallEnumProtoId = 4
	HallEnumProtoId_HALL_PID_WXPAYUNIFIEDORDER_REQ       HallEnumProtoId = 5
	HallEnumProtoId_HALL_PID_WXPAYUNIFIEDORDER_ACK       HallEnumProtoId = 6
	HallEnumProtoId_HALL_PID_WXPAYSYNCCHECKER_REQ        HallEnumProtoId = 7
	HallEnumProtoId_HALL_PID_WXPAYSYNCCHECKER_ACK        HallEnumProtoId = 8
	HallEnumProtoId_HALL_PID_USER_DATA                   HallEnumProtoId = 9
	HallEnumProtoId_HALL_PID_USER_DATA_ACK               HallEnumProtoId = 10
	HallEnumProtoId_HALL_PID_DRAW_LOTTERY                HallEnumProtoId = 11
	HallEnumProtoId_HALL_PID_DRAW_LOTTERY_ACK            HallEnumProtoId = 12
	HallEnumProtoId_HALL_PID_DS_LOTTERY_INFO_ACK         HallEnumProtoId = 13
	HallEnumProtoId_HALL_PID_ONLINEWARD_REQ              HallEnumProtoId = 14
	HallEnumProtoId_HALL_PID_ONLINEWARD_ACK              HallEnumProtoId = 15
	HallEnumProtoId_HALL_PID_EVENT_REQ                   HallEnumProtoId = 16
	HallEnumProtoId_HALL_PID_EVENT_ACK                   HallEnumProtoId = 17
	HallEnumProtoId_HALL_PID_GOODS_LIST_REQ              HallEnumProtoId = 18
	HallEnumProtoId_HALL_PID_GOODS_LIST_ACK              HallEnumProtoId = 19
	HallEnumProtoId_HALL_PID_HOTUPDATEVERSIONINFO_REQ    HallEnumProtoId = 20
	HallEnumProtoId_HALL_PID_HOTUPDATEVERSIONINFO_ACK    HallEnumProtoId = 21
	HallEnumProtoId_HALL_PID_BAG_ITEMS_REQ               HallEnumProtoId = 22
	HallEnumProtoId_HALL_PID_BAG_ITEMS_ACK               HallEnumProtoId = 23
	HallEnumProtoId_HALL_PID_HOTUPDATEGAMEASSETSINFO_REQ HallEnumProtoId = 24
	HallEnumProtoId_HALL_PID_HOTUPDATEGAMEASSETSINFO_ACK HallEnumProtoId = 25
	HallEnumProtoId_HALL_PID_APPLE_PAY_CB_REQ            HallEnumProtoId = 26
	HallEnumProtoId_HALL_PID_HOTUPDATEASSETSINFO_REQ     HallEnumProtoId = 27
	HallEnumProtoId_HALL_PID_HOTUPDATEASSETSINFO_ACK     HallEnumProtoId = 28
	HallEnumProtoId_HALL_PID_MAIL_LIST_REQ               HallEnumProtoId = 29
	HallEnumProtoId_HALL_PID_MAIL_LIST_ACK               HallEnumProtoId = 30
	HallEnumProtoId_HALL_PID_HALL_DSLOTTERYINFO_REQ      HallEnumProtoId = 31
	HallEnumProtoId_HALL_PID_FRIENDS_LIST_REQ            HallEnumProtoId = 32
	HallEnumProtoId_HALL_PID_FRIENDS_LIST_ACK            HallEnumProtoId = 33
	HallEnumProtoId_HALL_PID_RANK_REQ                    HallEnumProtoId = 34
	HallEnumProtoId_HALL_PID_RANK_ACK                    HallEnumProtoId = 35
	HallEnumProtoId_HALL_PID_STRONGBOX_INFO_REQ          HallEnumProtoId = 36
	HallEnumProtoId_HALL_PID_STRONGBOX_INFO_ACK          HallEnumProtoId = 37
	HallEnumProtoId_HALL_PID_STRONGBOX_ACCESS_REQ        HallEnumProtoId = 38
	HallEnumProtoId_HALL_PID_STRONGBOX_ACCESS_ACK        HallEnumProtoId = 39
	HallEnumProtoId_HALL_PID_FRIEND_ADD_REQ              HallEnumProtoId = 40
	HallEnumProtoId_HALL_PID_FRIEND_ADD_ACK              HallEnumProtoId = 41
	HallEnumProtoId_HALL_PID_FRIEND_DEL_REQ              HallEnumProtoId = 42
	HallEnumProtoId_HALL_PID_FRIEND_DEL_ACK              HallEnumProtoId = 43
	HallEnumProtoId_HALL_PID_FRIENDS_SEARCH_REQ          HallEnumProtoId = 44
	HallEnumProtoId_HALL_PID_FRIENDS_SEARCH_ACK          HallEnumProtoId = 45
	HallEnumProtoId_HALL_PID_REG_REQ                     HallEnumProtoId = 46
	HallEnumProtoId_HALL_PID_REG_ACK                     HallEnumProtoId = 47
	HallEnumProtoId_HALL_PID_TASK_LIST_REQ               HallEnumProtoId = 48
	HallEnumProtoId_HALL_PID_TASK_LIST_ACK               HallEnumProtoId = 49
	HallEnumProtoId_HALL_PID_APPLE_PAY_CB_ACK            HallEnumProtoId = 50
	HallEnumProtoId_HALL_PID_ONLINEWARD_INFO_REQ         HallEnumProtoId = 51
	HallEnumProtoId_HALL_PID_ONLINEWARD_INFO_ACK         HallEnumProtoId = 52
	HallEnumProtoId_HALL_PID_GOODS_BUY_REQ               HallEnumProtoId = 53
	HallEnumProtoId_HALL_PID_GOODS_BUY_ACK               HallEnumProtoId = 54
	HallEnumProtoId_HALL_PID_ALLOWANCE_REQ               HallEnumProtoId = 55
	HallEnumProtoId_HALL_PID_ALLOWANCE_ACK               HallEnumProtoId = 56
	HallEnumProtoId_HALL_PID_CHECK_TASK_REQ              HallEnumProtoId = 57
	HallEnumProtoId_HALL_PID_CHECK_TASK_ACK              HallEnumProtoId = 58
	HallEnumProtoId_HALL_PID_RECOMMEND_USER_LIST_REQ     HallEnumProtoId = 59
	HallEnumProtoId_HALL_PID_RECOMMEND_USER_LIST_ACK     HallEnumProtoId = 60
	HallEnumProtoId_HALL_PID_GAME_STATE_REQ              HallEnumProtoId = 61
	HallEnumProtoId_HALL_PID_GAME_STATE_ACK              HallEnumProtoId = 62
	HallEnumProtoId_HALL_PID_TASK_SUM_REQ                HallEnumProtoId = 63
	HallEnumProtoId_HALL_PID_TASK_SUM_ACK                HallEnumProtoId = 64
	HallEnumProtoId_HALL_PID_CHECK_BONUS_REQ             HallEnumProtoId = 65
	HallEnumProtoId_HALL_PID_CHECK_BONUS_ACK             HallEnumProtoId = 66
	HallEnumProtoId_HALL_PID_UPDATE_REAL_DATA_REQ        HallEnumProtoId = 67
	HallEnumProtoId_HALL_PID_UPDATE_REAL_DATA_ACK        HallEnumProtoId = 68
	HallEnumProtoId_HALL_PID_PUSH_REQ                    HallEnumProtoId = 69
	HallEnumProtoId_HALL_PID_REQ_COMMONCLICKSTATISTIC    HallEnumProtoId = 70
	HallEnumProtoId_HALL_PID_REQ_AWARDGETNEWUSER         HallEnumProtoId = 71
	HallEnumProtoId_HALL_PID_ACK_AWARDGETNEWUSER         HallEnumProtoId = 72
	HallEnumProtoId_HALL_PID_PUSH_GAME_COUNT             HallEnumProtoId = 73
	HallEnumProtoId_HALL_PID_QRLOGIN_GETCODE_REQ         HallEnumProtoId = 74
	HallEnumProtoId_HALL_PID_QRLOGIN_GETCODE_ACK         HallEnumProtoId = 75
	HallEnumProtoId_HALL_PID_QRLOGIN_WXINFO_REQ          HallEnumProtoId = 76
	HallEnumProtoId_HALL_PID_QRLOGIN_WXINFO_ACK          HallEnumProtoId = 77
	HallEnumProtoId_HALL_PID_GAME_LOGIN_VIA_INPUT        HallEnumProtoId = 78
	HallEnumProtoId_HALL_PID_REG_REQ_VIA_INPUT           HallEnumProtoId = 79
	HallEnumProtoId_HALL_PID_GAME_GAMERECORD             HallEnumProtoId = 80
	HallEnumProtoId_HALL_PID_GAME_ACKGAMERECORD          HallEnumProtoId = 81
	HallEnumProtoId_HALL_PID_PLAYBACKREQPAGE             HallEnumProtoId = 82
	HallEnumProtoId_HALL_PID_PLAYBACKACKPAGE             HallEnumProtoId = 83
	HallEnumProtoId_HALL_PID_PLAYBACKREQPAGEBYGID        HallEnumProtoId = 84
	HallEnumProtoId_HALL_PID_PLAYBACKPDKACKPAGE          HallEnumProtoId = 85
	HallEnumProtoId_HALL_PID_COMMON_REQ_UPLOAD_LOCATION  HallEnumProtoId = 86
	HallEnumProtoId_HALL_PID_FRIEND_LOTTERY_LIST_REQ     HallEnumProtoId = 87
	HallEnumProtoId_HALL_PID_FRIEND_LOTTERY_LIST_ACK     HallEnumProtoId = 88
	HallEnumProtoId_HALL_PID_FRIEND_LOTTERY_DRAW_REQ     HallEnumProtoId = 89
	HallEnumProtoId_HALL_PID_FRIEND_LOTTERY_DRAW_ACK     HallEnumProtoId = 90
	HallEnumProtoId_HALL_PID_NOTICE_REQ                  HallEnumProtoId = 91
	HallEnumProtoId_HALL_PID_NOTICE_ACK                  HallEnumProtoId = 92
	HallEnumProtoId_HALL_PID_REQ_DISTANCE_MATCHED        HallEnumProtoId = 93
	HallEnumProtoId_HALL_PID_ACK_DISTANCE_MATCHED        HallEnumProtoId = 94
	HallEnumProtoId_HALL_PID_REQ_AGENT_ROOM_GAMING_LIST  HallEnumProtoId = 95
	HallEnumProtoId_HALL_PID_ACK_AGENT_ROOM_GAMING_LIST  HallEnumProtoId = 96
	HallEnumProtoId_HALL_PID_REQ_AGENT_ROOM_HISTORY_LIST HallEnumProtoId = 97
	HallEnumProtoId_HALL_PID_ACK_AGENT_ROOM_HISTORY_LIST HallEnumProtoId = 98
)

var HallEnumProtoId_name = map[int32]string{
	0:  "HALL_PID_HEARTBEAT",
	1:  "HALL_PID_QUICK_CONN",
	2:  "HALL_PID_QUICK_CONN_ACK",
	3:  "HALL_PID_GAME_LOGIN",
	4:  "HALL_PID_GAME_LOGIN_ACK",
	5:  "HALL_PID_WXPAYUNIFIEDORDER_REQ",
	6:  "HALL_PID_WXPAYUNIFIEDORDER_ACK",
	7:  "HALL_PID_WXPAYSYNCCHECKER_REQ",
	8:  "HALL_PID_WXPAYSYNCCHECKER_ACK",
	9:  "HALL_PID_USER_DATA",
	10: "HALL_PID_USER_DATA_ACK",
	11: "HALL_PID_DRAW_LOTTERY",
	12: "HALL_PID_DRAW_LOTTERY_ACK",
	13: "HALL_PID_DS_LOTTERY_INFO_ACK",
	14: "HALL_PID_ONLINEWARD_REQ",
	15: "HALL_PID_ONLINEWARD_ACK",
	16: "HALL_PID_EVENT_REQ",
	17: "HALL_PID_EVENT_ACK",
	18: "HALL_PID_GOODS_LIST_REQ",
	19: "HALL_PID_GOODS_LIST_ACK",
	20: "HALL_PID_HOTUPDATEVERSIONINFO_REQ",
	21: "HALL_PID_HOTUPDATEVERSIONINFO_ACK",
	22: "HALL_PID_BAG_ITEMS_REQ",
	23: "HALL_PID_BAG_ITEMS_ACK",
	24: "HALL_PID_HOTUPDATEGAMEASSETSINFO_REQ",
	25: "HALL_PID_HOTUPDATEGAMEASSETSINFO_ACK",
	26: "HALL_PID_APPLE_PAY_CB_REQ",
	27: "HALL_PID_HOTUPDATEASSETSINFO_REQ",
	28: "HALL_PID_HOTUPDATEASSETSINFO_ACK",
	29: "HALL_PID_MAIL_LIST_REQ",
	30: "HALL_PID_MAIL_LIST_ACK",
	31: "HALL_PID_HALL_DSLOTTERYINFO_REQ",
	32: "HALL_PID_FRIENDS_LIST_REQ",
	33: "HALL_PID_FRIENDS_LIST_ACK",
	34: "HALL_PID_RANK_REQ",
	35: "HALL_PID_RANK_ACK",
	36: "HALL_PID_STRONGBOX_INFO_REQ",
	37: "HALL_PID_STRONGBOX_INFO_ACK",
	38: "HALL_PID_STRONGBOX_ACCESS_REQ",
	39: "HALL_PID_STRONGBOX_ACCESS_ACK",
	40: "HALL_PID_FRIEND_ADD_REQ",
	41: "HALL_PID_FRIEND_ADD_ACK",
	42: "HALL_PID_FRIEND_DEL_REQ",
	43: "HALL_PID_FRIEND_DEL_ACK",
	44: "HALL_PID_FRIENDS_SEARCH_REQ",
	45: "HALL_PID_FRIENDS_SEARCH_ACK",
	46: "HALL_PID_REG_REQ",
	47: "HALL_PID_REG_ACK",
	48: "HALL_PID_TASK_LIST_REQ",
	49: "HALL_PID_TASK_LIST_ACK",
	50: "HALL_PID_APPLE_PAY_CB_ACK",
	51: "HALL_PID_ONLINEWARD_INFO_REQ",
	52: "HALL_PID_ONLINEWARD_INFO_ACK",
	53: "HALL_PID_GOODS_BUY_REQ",
	54: "HALL_PID_GOODS_BUY_ACK",
	55: "HALL_PID_ALLOWANCE_REQ",
	56: "HALL_PID_ALLOWANCE_ACK",
	57: "HALL_PID_CHECK_TASK_REQ",
	58: "HALL_PID_CHECK_TASK_ACK",
	59: "HALL_PID_RECOMMEND_USER_LIST_REQ",
	60: "HALL_PID_RECOMMEND_USER_LIST_ACK",
	61: "HALL_PID_GAME_STATE_REQ",
	62: "HALL_PID_GAME_STATE_ACK",
	63: "HALL_PID_TASK_SUM_REQ",
	64: "HALL_PID_TASK_SUM_ACK",
	65: "HALL_PID_CHECK_BONUS_REQ",
	66: "HALL_PID_CHECK_BONUS_ACK",
	67: "HALL_PID_UPDATE_REAL_DATA_REQ",
	68: "HALL_PID_UPDATE_REAL_DATA_ACK",
	69: "HALL_PID_PUSH_REQ",
	70: "HALL_PID_REQ_COMMONCLICKSTATISTIC",
	71: "HALL_PID_REQ_AWARDGETNEWUSER",
	72: "HALL_PID_ACK_AWARDGETNEWUSER",
	73: "HALL_PID_PUSH_GAME_COUNT",
	74: "HALL_PID_QRLOGIN_GETCODE_REQ",
	75: "HALL_PID_QRLOGIN_GETCODE_ACK",
	76: "HALL_PID_QRLOGIN_WXINFO_REQ",
	77: "HALL_PID_QRLOGIN_WXINFO_ACK",
	78: "HALL_PID_GAME_LOGIN_VIA_INPUT",
	79: "HALL_PID_REG_REQ_VIA_INPUT",
	80: "HALL_PID_GAME_GAMERECORD",
	81: "HALL_PID_GAME_ACKGAMERECORD",
	82: "HALL_PID_PLAYBACKREQPAGE",
	83: "HALL_PID_PLAYBACKACKPAGE",
	84: "HALL_PID_PLAYBACKREQPAGEBYGID",
	85: "HALL_PID_PLAYBACKPDKACKPAGE",
	86: "HALL_PID_COMMON_REQ_UPLOAD_LOCATION",
	87: "HALL_PID_FRIEND_LOTTERY_LIST_REQ",
	88: "HALL_PID_FRIEND_LOTTERY_LIST_ACK",
	89: "HALL_PID_FRIEND_LOTTERY_DRAW_REQ",
	90: "HALL_PID_FRIEND_LOTTERY_DRAW_ACK",
	91: "HALL_PID_NOTICE_REQ",
	92: "HALL_PID_NOTICE_ACK",
	93: "HALL_PID_REQ_DISTANCE_MATCHED",
	94: "HALL_PID_ACK_DISTANCE_MATCHED",
	95: "HALL_PID_REQ_AGENT_ROOM_GAMING_LIST",
	96: "HALL_PID_ACK_AGENT_ROOM_GAMING_LIST",
	97: "HALL_PID_REQ_AGENT_ROOM_HISTORY_LIST",
	98: "HALL_PID_ACK_AGENT_ROOM_HISTORY_LIST",
}
var HallEnumProtoId_value = map[string]int32{
	"HALL_PID_HEARTBEAT":                   0,
	"HALL_PID_QUICK_CONN":                  1,
	"HALL_PID_QUICK_CONN_ACK":              2,
	"HALL_PID_GAME_LOGIN":                  3,
	"HALL_PID_GAME_LOGIN_ACK":              4,
	"HALL_PID_WXPAYUNIFIEDORDER_REQ":       5,
	"HALL_PID_WXPAYUNIFIEDORDER_ACK":       6,
	"HALL_PID_WXPAYSYNCCHECKER_REQ":        7,
	"HALL_PID_WXPAYSYNCCHECKER_ACK":        8,
	"HALL_PID_USER_DATA":                   9,
	"HALL_PID_USER_DATA_ACK":               10,
	"HALL_PID_DRAW_LOTTERY":                11,
	"HALL_PID_DRAW_LOTTERY_ACK":            12,
	"HALL_PID_DS_LOTTERY_INFO_ACK":         13,
	"HALL_PID_ONLINEWARD_REQ":              14,
	"HALL_PID_ONLINEWARD_ACK":              15,
	"HALL_PID_EVENT_REQ":                   16,
	"HALL_PID_EVENT_ACK":                   17,
	"HALL_PID_GOODS_LIST_REQ":              18,
	"HALL_PID_GOODS_LIST_ACK":              19,
	"HALL_PID_HOTUPDATEVERSIONINFO_REQ":    20,
	"HALL_PID_HOTUPDATEVERSIONINFO_ACK":    21,
	"HALL_PID_BAG_ITEMS_REQ":               22,
	"HALL_PID_BAG_ITEMS_ACK":               23,
	"HALL_PID_HOTUPDATEGAMEASSETSINFO_REQ": 24,
	"HALL_PID_HOTUPDATEGAMEASSETSINFO_ACK": 25,
	"HALL_PID_APPLE_PAY_CB_REQ":            26,
	"HALL_PID_HOTUPDATEASSETSINFO_REQ":     27,
	"HALL_PID_HOTUPDATEASSETSINFO_ACK":     28,
	"HALL_PID_MAIL_LIST_REQ":               29,
	"HALL_PID_MAIL_LIST_ACK":               30,
	"HALL_PID_HALL_DSLOTTERYINFO_REQ":      31,
	"HALL_PID_FRIENDS_LIST_REQ":            32,
	"HALL_PID_FRIENDS_LIST_ACK":            33,
	"HALL_PID_RANK_REQ":                    34,
	"HALL_PID_RANK_ACK":                    35,
	"HALL_PID_STRONGBOX_INFO_REQ":          36,
	"HALL_PID_STRONGBOX_INFO_ACK":          37,
	"HALL_PID_STRONGBOX_ACCESS_REQ":        38,
	"HALL_PID_STRONGBOX_ACCESS_ACK":        39,
	"HALL_PID_FRIEND_ADD_REQ":              40,
	"HALL_PID_FRIEND_ADD_ACK":              41,
	"HALL_PID_FRIEND_DEL_REQ":              42,
	"HALL_PID_FRIEND_DEL_ACK":              43,
	"HALL_PID_FRIENDS_SEARCH_REQ":          44,
	"HALL_PID_FRIENDS_SEARCH_ACK":          45,
	"HALL_PID_REG_REQ":                     46,
	"HALL_PID_REG_ACK":                     47,
	"HALL_PID_TASK_LIST_REQ":               48,
	"HALL_PID_TASK_LIST_ACK":               49,
	"HALL_PID_APPLE_PAY_CB_ACK":            50,
	"HALL_PID_ONLINEWARD_INFO_REQ":         51,
	"HALL_PID_ONLINEWARD_INFO_ACK":         52,
	"HALL_PID_GOODS_BUY_REQ":               53,
	"HALL_PID_GOODS_BUY_ACK":               54,
	"HALL_PID_ALLOWANCE_REQ":               55,
	"HALL_PID_ALLOWANCE_ACK":               56,
	"HALL_PID_CHECK_TASK_REQ":              57,
	"HALL_PID_CHECK_TASK_ACK":              58,
	"HALL_PID_RECOMMEND_USER_LIST_REQ":     59,
	"HALL_PID_RECOMMEND_USER_LIST_ACK":     60,
	"HALL_PID_GAME_STATE_REQ":              61,
	"HALL_PID_GAME_STATE_ACK":              62,
	"HALL_PID_TASK_SUM_REQ":                63,
	"HALL_PID_TASK_SUM_ACK":                64,
	"HALL_PID_CHECK_BONUS_REQ":             65,
	"HALL_PID_CHECK_BONUS_ACK":             66,
	"HALL_PID_UPDATE_REAL_DATA_REQ":        67,
	"HALL_PID_UPDATE_REAL_DATA_ACK":        68,
	"HALL_PID_PUSH_REQ":                    69,
	"HALL_PID_REQ_COMMONCLICKSTATISTIC":    70,
	"HALL_PID_REQ_AWARDGETNEWUSER":         71,
	"HALL_PID_ACK_AWARDGETNEWUSER":         72,
	"HALL_PID_PUSH_GAME_COUNT":             73,
	"HALL_PID_QRLOGIN_GETCODE_REQ":         74,
	"HALL_PID_QRLOGIN_GETCODE_ACK":         75,
	"HALL_PID_QRLOGIN_WXINFO_REQ":          76,
	"HALL_PID_QRLOGIN_WXINFO_ACK":          77,
	"HALL_PID_GAME_LOGIN_VIA_INPUT":        78,
	"HALL_PID_REG_REQ_VIA_INPUT":           79,
	"HALL_PID_GAME_GAMERECORD":             80,
	"HALL_PID_GAME_ACKGAMERECORD":          81,
	"HALL_PID_PLAYBACKREQPAGE":             82,
	"HALL_PID_PLAYBACKACKPAGE":             83,
	"HALL_PID_PLAYBACKREQPAGEBYGID":        84,
	"HALL_PID_PLAYBACKPDKACKPAGE":          85,
	"HALL_PID_COMMON_REQ_UPLOAD_LOCATION":  86,
	"HALL_PID_FRIEND_LOTTERY_LIST_REQ":     87,
	"HALL_PID_FRIEND_LOTTERY_LIST_ACK":     88,
	"HALL_PID_FRIEND_LOTTERY_DRAW_REQ":     89,
	"HALL_PID_FRIEND_LOTTERY_DRAW_ACK":     90,
	"HALL_PID_NOTICE_REQ":                  91,
	"HALL_PID_NOTICE_ACK":                  92,
	"HALL_PID_REQ_DISTANCE_MATCHED":        93,
	"HALL_PID_ACK_DISTANCE_MATCHED":        94,
	"HALL_PID_REQ_AGENT_ROOM_GAMING_LIST":  95,
	"HALL_PID_ACK_AGENT_ROOM_GAMING_LIST":  96,
	"HALL_PID_REQ_AGENT_ROOM_HISTORY_LIST": 97,
	"HALL_PID_ACK_AGENT_ROOM_HISTORY_LIST": 98,
}

func (x HallEnumProtoId) Enum() *HallEnumProtoId {
	p := new(HallEnumProtoId)
	*p = x
	return p
}
func (x HallEnumProtoId) String() string {
	return proto.EnumName(HallEnumProtoId_name, int32(x))
}
func (x *HallEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumProtoId_value, data, "HallEnumProtoId")
	if err != nil {
		return err
	}
	*x = HallEnumProtoId(value)
	return nil
}
func (HallEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{0} }

// 货币与商品类型
type HallEnumTradeType int32

const (
	// 0-50 货币类型与增值服务
	HallEnumTradeType_TRADE_COIN    HallEnumTradeType = 1
	HallEnumTradeType_TRADE_DIAMOND HallEnumTradeType = 2
	HallEnumTradeType_TRADE_BONUS   HallEnumTradeType = 3
	HallEnumTradeType_TRADE_RMB     HallEnumTradeType = 5
	HallEnumTradeType_TRADE_TICKET  HallEnumTradeType = 7
	// 50-100  增值服务
	HallEnumTradeType_SERVER_VIP HallEnumTradeType = 51
	// 100-200 虚拟道具
	HallEnumTradeType_PROPS_FANGKA   HallEnumTradeType = 101
	HallEnumTradeType_PROPS_DALABA   HallEnumTradeType = 102
	HallEnumTradeType_PROPS_BUQIANKA HallEnumTradeType = 103
	// 300-400 实物礼品
	HallEnumTradeType_REAL_PHONE_CARD_10 HallEnumTradeType = 301
	HallEnumTradeType_REAL_PHONE_CARD_50 HallEnumTradeType = 302
	HallEnumTradeType_REAL_SHOP_CARD_100 HallEnumTradeType = 303
	HallEnumTradeType_REAL_PHONE_IPHONE7 HallEnumTradeType = 304
	HallEnumTradeType_REAL_PC_MACBOOK    HallEnumTradeType = 305
	HallEnumTradeType_REAL_PHONE_CARD_30 HallEnumTradeType = 306
	// 其他奖励
	HallEnumTradeType_OTHER_XIEXIE_CANYU HallEnumTradeType = 401
	HallEnumTradeType_OTHER_ZAILAI_YICI  HallEnumTradeType = 402
)

var HallEnumTradeType_name = map[int32]string{
	1:   "TRADE_COIN",
	2:   "TRADE_DIAMOND",
	3:   "TRADE_BONUS",
	5:   "TRADE_RMB",
	7:   "TRADE_TICKET",
	51:  "SERVER_VIP",
	101: "PROPS_FANGKA",
	102: "PROPS_DALABA",
	103: "PROPS_BUQIANKA",
	301: "REAL_PHONE_CARD_10",
	302: "REAL_PHONE_CARD_50",
	303: "REAL_SHOP_CARD_100",
	304: "REAL_PHONE_IPHONE7",
	305: "REAL_PC_MACBOOK",
	306: "REAL_PHONE_CARD_30",
	401: "OTHER_XIEXIE_CANYU",
	402: "OTHER_ZAILAI_YICI",
}
var HallEnumTradeType_value = map[string]int32{
	"TRADE_COIN":         1,
	"TRADE_DIAMOND":      2,
	"TRADE_BONUS":        3,
	"TRADE_RMB":          5,
	"TRADE_TICKET":       7,
	"SERVER_VIP":         51,
	"PROPS_FANGKA":       101,
	"PROPS_DALABA":       102,
	"PROPS_BUQIANKA":     103,
	"REAL_PHONE_CARD_10": 301,
	"REAL_PHONE_CARD_50": 302,
	"REAL_SHOP_CARD_100": 303,
	"REAL_PHONE_IPHONE7": 304,
	"REAL_PC_MACBOOK":    305,
	"REAL_PHONE_CARD_30": 306,
	"OTHER_XIEXIE_CANYU": 401,
	"OTHER_ZAILAI_YICI":  402,
}

func (x HallEnumTradeType) Enum() *HallEnumTradeType {
	p := new(HallEnumTradeType)
	*p = x
	return p
}
func (x HallEnumTradeType) String() string {
	return proto.EnumName(HallEnumTradeType_name, int32(x))
}
func (x *HallEnumTradeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumTradeType_value, data, "HallEnumTradeType")
	if err != nil {
		return err
	}
	*x = HallEnumTradeType(value)
	return nil
}
func (HallEnumTradeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{1} }

// 活动类型
type HallEnumEvent int32

const (
	HallEnumEvent_TYPE_TIME HallEnumEvent = 1
	HallEnumEvent_TYPE_NEW  HallEnumEvent = 2
	HallEnumEvent_TYPE_NULL HallEnumEvent = 3
)

var HallEnumEvent_name = map[int32]string{
	1: "TYPE_TIME",
	2: "TYPE_NEW",
	3: "TYPE_NULL",
}
var HallEnumEvent_value = map[string]int32{
	"TYPE_TIME": 1,
	"TYPE_NEW":  2,
	"TYPE_NULL": 3,
}

func (x HallEnumEvent) Enum() *HallEnumEvent {
	p := new(HallEnumEvent)
	*p = x
	return p
}
func (x HallEnumEvent) String() string {
	return proto.EnumName(HallEnumEvent_name, int32(x))
}
func (x *HallEnumEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumEvent_value, data, "HallEnumEvent")
	if err != nil {
		return err
	}
	*x = HallEnumEvent(value)
	return nil
}
func (HallEnumEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{2} }

// 活动奖品
type HallEnum_Reward int32

const (
	HallEnum_Reward_RE_EXP  HallEnum_Reward = 1
	HallEnum_Reward_RE_GIFT HallEnum_Reward = 2
)

var HallEnum_Reward_name = map[int32]string{
	1: "RE_EXP",
	2: "RE_GIFT",
}
var HallEnum_Reward_value = map[string]int32{
	"RE_EXP":  1,
	"RE_GIFT": 2,
}

func (x HallEnum_Reward) Enum() *HallEnum_Reward {
	p := new(HallEnum_Reward)
	*p = x
	return p
}
func (x HallEnum_Reward) String() string {
	return proto.EnumName(HallEnum_Reward_name, int32(x))
}
func (x *HallEnum_Reward) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnum_Reward_value, data, "HallEnum_Reward")
	if err != nil {
		return err
	}
	*x = HallEnum_Reward(value)
	return nil
}
func (HallEnum_Reward) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{3} }

// 邮件类型
type HallEnumMailType int32

const (
	HallEnumMailType_SYSTEM     HallEnumMailType = 1
	HallEnumMailType_FRIEND_ADD HallEnumMailType = 2
)

var HallEnumMailType_name = map[int32]string{
	1: "SYSTEM",
	2: "FRIEND_ADD",
}
var HallEnumMailType_value = map[string]int32{
	"SYSTEM":     1,
	"FRIEND_ADD": 2,
}

func (x HallEnumMailType) Enum() *HallEnumMailType {
	p := new(HallEnumMailType)
	*p = x
	return p
}
func (x HallEnumMailType) String() string {
	return proto.EnumName(HallEnumMailType_name, int32(x))
}
func (x *HallEnumMailType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumMailType_value, data, "HallEnumMailType")
	if err != nil {
		return err
	}
	*x = HallEnumMailType(value)
	return nil
}
func (HallEnumMailType) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{4} }

// 奖励物品类型
type HallLotteryItemType int32

const (
	HallLotteryItemType_L_COIN          HallLotteryItemType = 1
	HallLotteryItemType_L_DIAMOND       HallLotteryItemType = 2
	HallLotteryItemType_L_RED_PACKET    HallLotteryItemType = 3
	HallLotteryItemType_L_COUPON        HallLotteryItemType = 7
	HallLotteryItemType_L_ROOM_TICKET   HallLotteryItemType = 101
	HallLotteryItemType_L_FILL_SIGN     HallLotteryItemType = 103
	HallLotteryItemType_L_PHONE_CARD_10 HallLotteryItemType = 301
	HallLotteryItemType_L_PHONE_CARD_30 HallLotteryItemType = 306
	HallLotteryItemType_L_PHONE_CARD_50 HallLotteryItemType = 302
	HallLotteryItemType_L_XIEXIE_CANYU  HallLotteryItemType = 401
	HallLotteryItemType_L_ZAILAI_YICI   HallLotteryItemType = 402
)

var HallLotteryItemType_name = map[int32]string{
	1:   "L_COIN",
	2:   "L_DIAMOND",
	3:   "L_RED_PACKET",
	7:   "L_COUPON",
	101: "L_ROOM_TICKET",
	103: "L_FILL_SIGN",
	301: "L_PHONE_CARD_10",
	306: "L_PHONE_CARD_30",
	302: "L_PHONE_CARD_50",
	401: "L_XIEXIE_CANYU",
	402: "L_ZAILAI_YICI",
}
var HallLotteryItemType_value = map[string]int32{
	"L_COIN":          1,
	"L_DIAMOND":       2,
	"L_RED_PACKET":    3,
	"L_COUPON":        7,
	"L_ROOM_TICKET":   101,
	"L_FILL_SIGN":     103,
	"L_PHONE_CARD_10": 301,
	"L_PHONE_CARD_30": 306,
	"L_PHONE_CARD_50": 302,
	"L_XIEXIE_CANYU":  401,
	"L_ZAILAI_YICI":   402,
}

func (x HallLotteryItemType) Enum() *HallLotteryItemType {
	p := new(HallLotteryItemType)
	*p = x
	return p
}
func (x HallLotteryItemType) String() string {
	return proto.EnumName(HallLotteryItemType_name, int32(x))
}
func (x *HallLotteryItemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallLotteryItemType_value, data, "HallLotteryItemType")
	if err != nil {
		return err
	}
	*x = HallLotteryItemType(value)
	return nil
}
func (HallLotteryItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{5} }

// 任务类型
type HallEnumTaskType int32

const (
	HallEnumTaskType_TYPE_HALL HallEnumTaskType = 0
	HallEnumTaskType_TYPE_MJ   HallEnumTaskType = 1
	HallEnumTaskType_TYPE_DDZ  HallEnumTaskType = 2
	HallEnumTaskType_TYPE_ZJH  HallEnumTaskType = 3
)

var HallEnumTaskType_name = map[int32]string{
	0: "TYPE_HALL",
	1: "TYPE_MJ",
	2: "TYPE_DDZ",
	3: "TYPE_ZJH",
}
var HallEnumTaskType_value = map[string]int32{
	"TYPE_HALL": 0,
	"TYPE_MJ":   1,
	"TYPE_DDZ":  2,
	"TYPE_ZJH":  3,
}

func (x HallEnumTaskType) Enum() *HallEnumTaskType {
	p := new(HallEnumTaskType)
	*p = x
	return p
}
func (x HallEnumTaskType) String() string {
	return proto.EnumName(HallEnumTaskType_name, int32(x))
}
func (x *HallEnumTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallEnumTaskType_value, data, "HallEnumTaskType")
	if err != nil {
		return err
	}
	*x = HallEnumTaskType(value)
	return nil
}
func (HallEnumTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{6} }

// vip等级
type HallUser_VIP int32

const (
	HallUser_VIP_LV_1 HallUser_VIP = 1
	HallUser_VIP_LV_2 HallUser_VIP = 2
	HallUser_VIP_LV_3 HallUser_VIP = 3
	HallUser_VIP_LV_4 HallUser_VIP = 4
	HallUser_VIP_LV_5 HallUser_VIP = 5
	HallUser_VIP_LV_6 HallUser_VIP = 6
)

var HallUser_VIP_name = map[int32]string{
	1: "LV_1",
	2: "LV_2",
	3: "LV_3",
	4: "LV_4",
	5: "LV_5",
	6: "LV_6",
}
var HallUser_VIP_value = map[string]int32{
	"LV_1": 1,
	"LV_2": 2,
	"LV_3": 3,
	"LV_4": 4,
	"LV_5": 5,
	"LV_6": 6,
}

func (x HallUser_VIP) Enum() *HallUser_VIP {
	p := new(HallUser_VIP)
	*p = x
	return p
}
func (x HallUser_VIP) String() string {
	return proto.EnumName(HallUser_VIP_name, int32(x))
}
func (x *HallUser_VIP) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HallUser_VIP_value, data, "HallUser_VIP")
	if err != nil {
		return err
	}
	*x = HallUser_VIP(value)
	return nil
}
func (HallUser_VIP) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{7} }

// 单个活动
type HallItemEvent struct {
	Id               *int32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             *HallEnumEvent   `protobuf:"varint,2,opt,name=type,enum=ddproto.HallEnumEvent" json:"type,omitempty"`
	Reward           *HallEnum_Reward `protobuf:"varint,3,opt,name=reward,enum=ddproto.HallEnum_Reward" json:"reward,omitempty"`
	RichText         []string         `protobuf:"bytes,5,rep,name=richText" json:"richText,omitempty"`
	Title            *string          `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *HallItemEvent) Reset()                    { *m = HallItemEvent{} }
func (m *HallItemEvent) String() string            { return proto.CompactTextString(m) }
func (*HallItemEvent) ProtoMessage()               {}
func (*HallItemEvent) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{0} }

func (m *HallItemEvent) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HallItemEvent) GetType() HallEnumEvent {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HallEnumEvent_TYPE_TIME
}

func (m *HallItemEvent) GetReward() HallEnum_Reward {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return HallEnum_Reward_RE_EXP
}

func (m *HallItemEvent) GetRichText() []string {
	if m != nil {
		return m.RichText
	}
	return nil
}

func (m *HallItemEvent) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

// 单个邮件
type HallMailItem struct {
	Id               *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type             *HallEnumMailType `protobuf:"varint,2,opt,name=type,enum=ddproto.HallEnumMailType" json:"type,omitempty"`
	Title            *string           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content          *string           `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	IsWatch          *bool             `protobuf:"varint,5,opt,name=isWatch" json:"isWatch,omitempty"`
	IsCheck          *bool             `protobuf:"varint,6,opt,name=isCheck" json:"isCheck,omitempty"`
	Attach           []*HallBagItem    `protobuf:"bytes,7,rep,name=attach" json:"attach,omitempty"`
	Date             *int64            `protobuf:"varint,8,opt,name=date" json:"date,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *HallMailItem) Reset()                    { *m = HallMailItem{} }
func (m *HallMailItem) String() string            { return proto.CompactTextString(m) }
func (*HallMailItem) ProtoMessage()               {}
func (*HallMailItem) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{1} }

func (m *HallMailItem) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *HallMailItem) GetType() HallEnumMailType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HallEnumMailType_SYSTEM
}

func (m *HallMailItem) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *HallMailItem) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *HallMailItem) GetIsWatch() bool {
	if m != nil && m.IsWatch != nil {
		return *m.IsWatch
	}
	return false
}

func (m *HallMailItem) GetIsCheck() bool {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return false
}

func (m *HallMailItem) GetAttach() []*HallBagItem {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *HallMailItem) GetDate() int64 {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return 0
}

// 背包单个道具
type HallBagItem struct {
	Type             *HallEnumTradeType `protobuf:"varint,1,opt,name=type,enum=ddproto.HallEnumTradeType" json:"type,omitempty"`
	Amount           *float64           `protobuf:"fixed64,2,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *HallBagItem) Reset()                    { *m = HallBagItem{} }
func (m *HallBagItem) String() string            { return proto.CompactTextString(m) }
func (*HallBagItem) ProtoMessage()               {}
func (*HallBagItem) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{2} }

func (m *HallBagItem) GetType() HallEnumTradeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HallEnumTradeType_TRADE_COIN
}

func (m *HallBagItem) GetAmount() float64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// 单个任务
type HallItemTask struct {
	TaskId           *int32         `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Title            *string        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description      *string        `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Addion           []*HallBagItem `protobuf:"bytes,4,rep,name=addion" json:"addion,omitempty"`
	TaskSum          *int32         `protobuf:"varint,5,opt,name=task_sum,json=taskSum" json:"task_sum,omitempty"`
	SumNo            *int32         `protobuf:"varint,6,opt,name=sum_no,json=sumNo" json:"sum_no,omitempty"`
	IsDone           *bool          `protobuf:"varint,7,opt,name=is_done,json=isDone" json:"is_done,omitempty"`
	IsCheck          *bool          `protobuf:"varint,8,opt,name=is_check,json=isCheck" json:"is_check,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *HallItemTask) Reset()                    { *m = HallItemTask{} }
func (m *HallItemTask) String() string            { return proto.CompactTextString(m) }
func (*HallItemTask) ProtoMessage()               {}
func (*HallItemTask) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{3} }

func (m *HallItemTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *HallItemTask) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *HallItemTask) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *HallItemTask) GetAddion() []*HallBagItem {
	if m != nil {
		return m.Addion
	}
	return nil
}

func (m *HallItemTask) GetTaskSum() int32 {
	if m != nil && m.TaskSum != nil {
		return *m.TaskSum
	}
	return 0
}

func (m *HallItemTask) GetSumNo() int32 {
	if m != nil && m.SumNo != nil {
		return *m.SumNo
	}
	return 0
}

func (m *HallItemTask) GetIsDone() bool {
	if m != nil && m.IsDone != nil {
		return *m.IsDone
	}
	return false
}

func (m *HallItemTask) GetIsCheck() bool {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return false
}

// 个人信息
type HallUserData struct {
	UserName          *string       `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	UserId            *int32        `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	NiceValue         *int64        `protobuf:"varint,3,opt,name=niceValue" json:"niceValue,omitempty"`
	EvilValue         *int64        `protobuf:"varint,4,opt,name=evilValue" json:"evilValue,omitempty"`
	UserLevel         *int32        `protobuf:"varint,5,opt,name=userLevel" json:"userLevel,omitempty"`
	UserVIP           *bool         `protobuf:"varint,6,opt,name=userVIP" json:"userVIP,omitempty"`
	UserVIPLv         *HallUser_VIP `protobuf:"varint,7,opt,name=userVIPLv,enum=ddproto.HallUser_VIP" json:"userVIPLv,omitempty"`
	UserMoney         *int64        `protobuf:"varint,8,opt,name=userMoney" json:"userMoney,omitempty"`
	UserDiamond       *int64        `protobuf:"varint,9,opt,name=userDiamond" json:"userDiamond,omitempty"`
	UserRedBag        *float64      `protobuf:"fixed64,10,opt,name=userRedBag" json:"userRedBag,omitempty"`
	UserLotteryTicket *int64        `protobuf:"varint,11,opt,name=userLotteryTicket" json:"userLotteryTicket,omitempty"`
	Sex               *bool         `protobuf:"varint,12,opt,name=sex" json:"sex,omitempty"`
	HeadUrl           *string       `protobuf:"bytes,13,opt,name=headUrl" json:"headUrl,omitempty"`
	IsFriend          *bool         `protobuf:"varint,14,opt,name=isFriend" json:"isFriend,omitempty"`
	RoomCard          *int64        `protobuf:"varint,15,opt,name=roomCard" json:"roomCard,omitempty"`
	LastIp            *string       `protobuf:"bytes,16,opt,name=lastIp" json:"lastIp,omitempty"`
	LastTime          *int64        `protobuf:"varint,17,opt,name=lastTime" json:"lastTime,omitempty"`
	// 用户兑换信息
	RealName         *string `protobuf:"bytes,18,opt,name=realName" json:"realName,omitempty"`
	PhoneNumber      *string `protobuf:"bytes,19,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	WxNumber         *string `protobuf:"bytes,20,opt,name=wxNumber" json:"wxNumber,omitempty"`
	RealAddress      *string `protobuf:"bytes,21,opt,name=realAddress" json:"realAddress,omitempty"`
	Address          *string `protobuf:"bytes,23,opt,name=address" json:"address,omitempty"`
	Distance         *string `protobuf:"bytes,24,opt,name=distance" json:"distance,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HallUserData) Reset()                    { *m = HallUserData{} }
func (m *HallUserData) String() string            { return proto.CompactTextString(m) }
func (*HallUserData) ProtoMessage()               {}
func (*HallUserData) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{4} }

func (m *HallUserData) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *HallUserData) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *HallUserData) GetNiceValue() int64 {
	if m != nil && m.NiceValue != nil {
		return *m.NiceValue
	}
	return 0
}

func (m *HallUserData) GetEvilValue() int64 {
	if m != nil && m.EvilValue != nil {
		return *m.EvilValue
	}
	return 0
}

func (m *HallUserData) GetUserLevel() int32 {
	if m != nil && m.UserLevel != nil {
		return *m.UserLevel
	}
	return 0
}

func (m *HallUserData) GetUserVIP() bool {
	if m != nil && m.UserVIP != nil {
		return *m.UserVIP
	}
	return false
}

func (m *HallUserData) GetUserVIPLv() HallUser_VIP {
	if m != nil && m.UserVIPLv != nil {
		return *m.UserVIPLv
	}
	return HallUser_VIP_LV_1
}

func (m *HallUserData) GetUserMoney() int64 {
	if m != nil && m.UserMoney != nil {
		return *m.UserMoney
	}
	return 0
}

func (m *HallUserData) GetUserDiamond() int64 {
	if m != nil && m.UserDiamond != nil {
		return *m.UserDiamond
	}
	return 0
}

func (m *HallUserData) GetUserRedBag() float64 {
	if m != nil && m.UserRedBag != nil {
		return *m.UserRedBag
	}
	return 0
}

func (m *HallUserData) GetUserLotteryTicket() int64 {
	if m != nil && m.UserLotteryTicket != nil {
		return *m.UserLotteryTicket
	}
	return 0
}

func (m *HallUserData) GetSex() bool {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return false
}

func (m *HallUserData) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *HallUserData) GetIsFriend() bool {
	if m != nil && m.IsFriend != nil {
		return *m.IsFriend
	}
	return false
}

func (m *HallUserData) GetRoomCard() int64 {
	if m != nil && m.RoomCard != nil {
		return *m.RoomCard
	}
	return 0
}

func (m *HallUserData) GetLastIp() string {
	if m != nil && m.LastIp != nil {
		return *m.LastIp
	}
	return ""
}

func (m *HallUserData) GetLastTime() int64 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

func (m *HallUserData) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *HallUserData) GetPhoneNumber() string {
	if m != nil && m.PhoneNumber != nil {
		return *m.PhoneNumber
	}
	return ""
}

func (m *HallUserData) GetWxNumber() string {
	if m != nil && m.WxNumber != nil {
		return *m.WxNumber
	}
	return ""
}

func (m *HallUserData) GetRealAddress() string {
	if m != nil && m.RealAddress != nil {
		return *m.RealAddress
	}
	return ""
}

func (m *HallUserData) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *HallUserData) GetDistance() string {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return ""
}

// 排行信息
type HallRankItem struct {
	Placing          *int32  `protobuf:"varint,1,opt,name=placing" json:"placing,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	NickName         *string `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	RankInfo         *string `protobuf:"bytes,4,opt,name=rankInfo" json:"rankInfo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HallRankItem) Reset()                    { *m = HallRankItem{} }
func (m *HallRankItem) String() string            { return proto.CompactTextString(m) }
func (*HallRankItem) ProtoMessage()               {}
func (*HallRankItem) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{5} }

func (m *HallRankItem) GetPlacing() int32 {
	if m != nil && m.Placing != nil {
		return *m.Placing
	}
	return 0
}

func (m *HallRankItem) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *HallRankItem) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *HallRankItem) GetRankInfo() string {
	if m != nil && m.RankInfo != nil {
		return *m.RankInfo
	}
	return ""
}

// 金币专区
type CoinZone struct {
	Pay              []*GoodsItem `protobuf:"bytes,1,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CoinZone) Reset()                    { *m = CoinZone{} }
func (m *CoinZone) String() string            { return proto.CompactTextString(m) }
func (*CoinZone) ProtoMessage()               {}
func (*CoinZone) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{6} }

func (m *CoinZone) GetPay() []*GoodsItem {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 钻石专区
type DiamondZone struct {
	Pay              []*GoodsItem `protobuf:"bytes,1,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DiamondZone) Reset()                    { *m = DiamondZone{} }
func (m *DiamondZone) String() string            { return proto.CompactTextString(m) }
func (*DiamondZone) ProtoMessage()               {}
func (*DiamondZone) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{7} }

func (m *DiamondZone) GetPay() []*GoodsItem {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 兑换专区
type ExchangeZone struct {
	Money            []*GoodsItem `protobuf:"bytes,1,rep,name=money" json:"money,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ExchangeZone) Reset()                    { *m = ExchangeZone{} }
func (m *ExchangeZone) String() string            { return proto.CompactTextString(m) }
func (*ExchangeZone) ProtoMessage()               {}
func (*ExchangeZone) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{8} }

func (m *ExchangeZone) GetMoney() []*GoodsItem {
	if m != nil {
		return m.Money
	}
	return nil
}

// 购买专区
type BuyZone struct {
	Pay              []*GoodsItem `protobuf:"bytes,1,rep,name=pay" json:"pay,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *BuyZone) Reset()                    { *m = BuyZone{} }
func (m *BuyZone) String() string            { return proto.CompactTextString(m) }
func (*BuyZone) ProtoMessage()               {}
func (*BuyZone) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{9} }

func (m *BuyZone) GetPay() []*GoodsItem {
	if m != nil {
		return m.Pay
	}
	return nil
}

// 商品类型
type GoodsItem struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Money            *int32  `protobuf:"varint,2,opt,name=money" json:"money,omitempty"`
	Img              *string `protobuf:"bytes,3,opt,name=img" json:"img,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoodsItem) Reset()                    { *m = GoodsItem{} }
func (m *GoodsItem) String() string            { return proto.CompactTextString(m) }
func (*GoodsItem) ProtoMessage()               {}
func (*GoodsItem) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{10} }

func (m *GoodsItem) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GoodsItem) GetMoney() int32 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *GoodsItem) GetImg() string {
	if m != nil && m.Img != nil {
		return *m.Img
	}
	return ""
}

// 保险箱数据
type HallStrongboxInfo struct {
	BoxCoin          *int64 `protobuf:"varint,2,opt,name=boxCoin" json:"boxCoin,omitempty"`
	UserCoin         *int64 `protobuf:"varint,3,opt,name=userCoin" json:"userCoin,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HallStrongboxInfo) Reset()                    { *m = HallStrongboxInfo{} }
func (m *HallStrongboxInfo) String() string            { return proto.CompactTextString(m) }
func (*HallStrongboxInfo) ProtoMessage()               {}
func (*HallStrongboxInfo) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{11} }

func (m *HallStrongboxInfo) GetBoxCoin() int64 {
	if m != nil && m.BoxCoin != nil {
		return *m.BoxCoin
	}
	return 0
}

func (m *HallStrongboxInfo) GetUserCoin() int64 {
	if m != nil && m.UserCoin != nil {
		return *m.UserCoin
	}
	return 0
}

// 创建房间列表
type HallReqNewRoomList struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	HallGameId       *int32       `protobuf:"varint,2,opt,name=hall_gameId,json=hallGameId" json:"hall_gameId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *HallReqNewRoomList) Reset()                    { *m = HallReqNewRoomList{} }
func (m *HallReqNewRoomList) String() string            { return proto.CompactTextString(m) }
func (*HallReqNewRoomList) ProtoMessage()               {}
func (*HallReqNewRoomList) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{12} }

func (m *HallReqNewRoomList) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallReqNewRoomList) GetHallGameId() int32 {
	if m != nil && m.HallGameId != nil {
		return *m.HallGameId
	}
	return 0
}

type HallAckNewRoomList struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	HallName         *string           `protobuf:"bytes,2,opt,name=hall_name,json=hallName" json:"hall_name,omitempty"`
	HallMoney        *int64            `protobuf:"varint,3,opt,name=hall_money,json=hallMoney" json:"hall_money,omitempty"`
	HallNum          *int32            `protobuf:"varint,4,opt,name=hall_num,json=hallNum" json:"hall_num,omitempty"`
	Roomlist         *HallNewRoom_List `protobuf:"bytes,5,opt,name=roomlist" json:"roomlist,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *HallAckNewRoomList) Reset()                    { *m = HallAckNewRoomList{} }
func (m *HallAckNewRoomList) String() string            { return proto.CompactTextString(m) }
func (*HallAckNewRoomList) ProtoMessage()               {}
func (*HallAckNewRoomList) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{13} }

func (m *HallAckNewRoomList) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallAckNewRoomList) GetHallName() string {
	if m != nil && m.HallName != nil {
		return *m.HallName
	}
	return ""
}

func (m *HallAckNewRoomList) GetHallMoney() int64 {
	if m != nil && m.HallMoney != nil {
		return *m.HallMoney
	}
	return 0
}

func (m *HallAckNewRoomList) GetHallNum() int32 {
	if m != nil && m.HallNum != nil {
		return *m.HallNum
	}
	return 0
}

func (m *HallAckNewRoomList) GetRoomlist() *HallNewRoom_List {
	if m != nil {
		return m.Roomlist
	}
	return nil
}

type HallNewRoom_List struct {
	Header            *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	FangJianType      *string      `protobuf:"bytes,2,opt,name=fangJianType" json:"fangJianType,omitempty"`
	FangJianId        *int32       `protobuf:"varint,3,opt,name=fangJianId" json:"fangJianId,omitempty"`
	FangJianTitle     *string      `protobuf:"bytes,4,opt,name=fangJianTitle" json:"fangJianTitle,omitempty"`
	FangJianEnterCoin *int64       `protobuf:"varint,5,opt,name=fangJianEnterCoin" json:"fangJianEnterCoin,omitempty"`
	FangJianRenShu    *int64       `protobuf:"varint,6,opt,name=fangJianRenShu" json:"fangJianRenShu,omitempty"`
	FangJianDesc      *string      `protobuf:"bytes,7,opt,name=fangJianDesc" json:"fangJianDesc,omitempty"`
	FangJianJiangLi   *string      `protobuf:"bytes,8,opt,name=fangJianJiangLi" json:"fangJianJiangLi,omitempty"`
	XXX_unrecognized  []byte       `json:"-"`
}

func (m *HallNewRoom_List) Reset()                    { *m = HallNewRoom_List{} }
func (m *HallNewRoom_List) String() string            { return proto.CompactTextString(m) }
func (*HallNewRoom_List) ProtoMessage()               {}
func (*HallNewRoom_List) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{14} }

func (m *HallNewRoom_List) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallNewRoom_List) GetFangJianType() string {
	if m != nil && m.FangJianType != nil {
		return *m.FangJianType
	}
	return ""
}

func (m *HallNewRoom_List) GetFangJianId() int32 {
	if m != nil && m.FangJianId != nil {
		return *m.FangJianId
	}
	return 0
}

func (m *HallNewRoom_List) GetFangJianTitle() string {
	if m != nil && m.FangJianTitle != nil {
		return *m.FangJianTitle
	}
	return ""
}

func (m *HallNewRoom_List) GetFangJianEnterCoin() int64 {
	if m != nil && m.FangJianEnterCoin != nil {
		return *m.FangJianEnterCoin
	}
	return 0
}

func (m *HallNewRoom_List) GetFangJianRenShu() int64 {
	if m != nil && m.FangJianRenShu != nil {
		return *m.FangJianRenShu
	}
	return 0
}

func (m *HallNewRoom_List) GetFangJianDesc() string {
	if m != nil && m.FangJianDesc != nil {
		return *m.FangJianDesc
	}
	return ""
}

func (m *HallNewRoom_List) GetFangJianJiangLi() string {
	if m != nil && m.FangJianJiangLi != nil {
		return *m.FangJianJiangLi
	}
	return ""
}

func init() {
	proto.RegisterType((*HallItemEvent)(nil), "ddproto.hall_item_event")
	proto.RegisterType((*HallMailItem)(nil), "ddproto.hall_mail_item")
	proto.RegisterType((*HallBagItem)(nil), "ddproto.hall_bag_item")
	proto.RegisterType((*HallItemTask)(nil), "ddproto.hall_item_task")
	proto.RegisterType((*HallUserData)(nil), "ddproto.hall_userData")
	proto.RegisterType((*HallRankItem)(nil), "ddproto.hall_rank_item")
	proto.RegisterType((*CoinZone)(nil), "ddproto.CoinZone")
	proto.RegisterType((*DiamondZone)(nil), "ddproto.DiamondZone")
	proto.RegisterType((*ExchangeZone)(nil), "ddproto.ExchangeZone")
	proto.RegisterType((*BuyZone)(nil), "ddproto.BuyZone")
	proto.RegisterType((*GoodsItem)(nil), "ddproto.GoodsItem")
	proto.RegisterType((*HallStrongboxInfo)(nil), "ddproto.hall_strongbox_info")
	proto.RegisterType((*HallReqNewRoomList)(nil), "ddproto.hall_req_new_room_list")
	proto.RegisterType((*HallAckNewRoomList)(nil), "ddproto.hall_ack_new_room_list")
	proto.RegisterType((*HallNewRoom_List)(nil), "ddproto.hall_new_room_List")
	proto.RegisterEnum("ddproto.HallEnumProtoId", HallEnumProtoId_name, HallEnumProtoId_value)
	proto.RegisterEnum("ddproto.HallEnumTradeType", HallEnumTradeType_name, HallEnumTradeType_value)
	proto.RegisterEnum("ddproto.HallEnumEvent", HallEnumEvent_name, HallEnumEvent_value)
	proto.RegisterEnum("ddproto.HallEnum_Reward", HallEnum_Reward_name, HallEnum_Reward_value)
	proto.RegisterEnum("ddproto.HallEnumMailType", HallEnumMailType_name, HallEnumMailType_value)
	proto.RegisterEnum("ddproto.HallLotteryItemType", HallLotteryItemType_name, HallLotteryItemType_value)
	proto.RegisterEnum("ddproto.HallEnumTaskType", HallEnumTaskType_name, HallEnumTaskType_value)
	proto.RegisterEnum("ddproto.HallUser_VIP", HallUser_VIP_name, HallUser_VIP_value)
}

var fileDescriptor27 = []byte{
	// 2576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x49, 0x77, 0xdb, 0xc8,
	0x11, 0x1e, 0x92, 0xa2, 0x96, 0xd6, 0xe2, 0x56, 0x5b, 0xb6, 0xe1, 0x5d, 0xc3, 0xf1, 0xcc, 0x28,
	0x1a, 0xc7, 0x23, 0xdb, 0xb3, 0x65, 0x99, 0x24, 0x20, 0x00, 0x51, 0x30, 0x41, 0x80, 0x6a, 0x80,
	0x5a, 0x9c, 0x05, 0x81, 0x49, 0x58, 0xc2, 0x93, 0x08, 0x2a, 0x24, 0xe4, 0xb1, 0xf3, 0x2f, 0x92,
	0xff, 0x91, 0xf5, 0xe5, 0x2f, 0xe4, 0x9e, 0x53, 0x2e, 0xb9, 0xe5, 0x4f, 0xcc, 0x7b, 0x39, 0xe5,
	0x55, 0x35, 0x00, 0xb2, 0x29, 0x52, 0xca, 0xbc, 0x1c, 0x2c, 0x75, 0xd5, 0xf7, 0x55, 0x75, 0x55,
	0x75, 0x75, 0x01, 0x86, 0xc8, 0xb5, 0xe3, 0xe0, 0xf4, 0xd4, 0xef, 0x04, 0x49, 0xf0, 0xe4, 0xac,
	0xdf, 0x4b, 0x7a, 0x6c, 0xae, 0xd3, 0xc1, 0xc5, 0x9d, 0xeb, 0xed, 0x5e, 0xb7, 0xdb, 0x8b, 0xfd,
	0xf6, 0x69, 0x14, 0xc6, 0x89, 0x40, 0x2b, 0x7f, 0x2b, 0xa4, 0x16, 0x51, 0x12, 0x76, 0xfd, 0xf0,
	0x4d, 0x18, 0x27, 0x6c, 0x85, 0x14, 0xa3, 0x8e, 0x52, 0x58, 0x2f, 0x6c, 0x94, 0x79, 0x31, 0xea,
	0xb0, 0xc7, 0x64, 0x26, 0x79, 0x77, 0x16, 0x2a, 0xc5, 0xf5, 0xc2, 0xc6, 0xca, 0x33, 0xe5, 0x49,
	0xea, 0xf0, 0x09, 0xda, 0x85, 0xf1, 0x79, 0x6a, 0xc7, 0x91, 0xc5, 0x9e, 0x92, 0xd9, 0x7e, 0xf8,
	0x4d, 0xd0, 0xef, 0x28, 0x25, 0xe4, 0xdf, 0x9e, 0xc0, 0xe7, 0x48, 0xe0, 0x29, 0x91, 0xdd, 0x21,
	0xf3, 0xfd, 0xa8, 0x7d, 0xec, 0x85, 0x6f, 0x13, 0xa5, 0xbc, 0x5e, 0xda, 0x58, 0xe0, 0xb9, 0xcc,
	0xd6, 0x48, 0x39, 0x89, 0x92, 0xd3, 0x50, 0x99, 0x5d, 0x2f, 0x6c, 0x2c, 0x70, 0x21, 0x54, 0xfe,
	0x53, 0x20, 0x2b, 0xe8, 0xae, 0x1b, 0x44, 0x22, 0xf6, 0x91, 0xa8, 0x17, 0x30, 0xea, 0x2d, 0x29,
	0xea, 0x7b, 0x13, 0xa2, 0x40, 0x5b, 0xe0, 0xa4, 0x91, 0xe7, 0x5b, 0x95, 0x46, 0xb6, 0x62, 0x0a,
	0x99, 0x6b, 0xf7, 0xe2, 0x24, 0x8c, 0x13, 0x65, 0x06, 0xf5, 0x99, 0x08, 0x48, 0x34, 0xd8, 0x0f,
	0x92, 0xf6, 0xb1, 0x52, 0x5e, 0x2f, 0x6c, 0xcc, 0xf3, 0x4c, 0x14, 0x88, 0x76, 0x1c, 0xb6, 0x4f,
	0x30, 0x6c, 0x44, 0x50, 0x64, 0x4f, 0xc8, 0x6c, 0x90, 0x24, 0x41, 0xfb, 0x58, 0x99, 0x5b, 0x2f,
	0x6d, 0x2c, 0x3e, 0xbb, 0x29, 0xc7, 0xf5, 0x2a, 0x38, 0xc2, 0x6c, 0x78, 0xca, 0x62, 0x8c, 0xcc,
	0x74, 0x82, 0x24, 0x54, 0xe6, 0xd7, 0x0b, 0x1b, 0x25, 0x8e, 0xeb, 0xca, 0x4b, 0xb2, 0x2c, 0x91,
	0xd9, 0xd3, 0x34, 0xd5, 0x02, 0xa6, 0x7a, 0x7f, 0x42, 0xaa, 0x49, 0x3f, 0xe8, 0x84, 0xa3, 0xb9,
	0xde, 0x24, 0xb3, 0x41, 0xb7, 0x77, 0x1e, 0x27, 0x58, 0x9f, 0x02, 0x4f, 0xa5, 0xca, 0xb7, 0x59,
	0x61, 0xb1, 0x1f, 0x92, 0x60, 0x70, 0xc2, 0x6e, 0x91, 0x39, 0xf8, 0xed, 0xe7, 0x3d, 0x31, 0x0b,
	0xa2, 0xd9, 0x19, 0xd6, 0xab, 0x38, 0x5a, 0xaf, 0x75, 0xb2, 0xd8, 0x09, 0x07, 0xed, 0x7e, 0x74,
	0x96, 0x44, 0xbd, 0x38, 0xad, 0xe5, 0xa8, 0x0a, 0x6b, 0xd0, 0xe9, 0x00, 0x38, 0x73, 0x45, 0x0d,
	0x90, 0xc5, 0x6e, 0x93, 0x79, 0x0c, 0x60, 0x70, 0xde, 0xc5, 0x42, 0x97, 0x39, 0x06, 0xe4, 0x9e,
	0x77, 0xd9, 0x0d, 0x32, 0x3b, 0x38, 0xef, 0xfa, 0x71, 0x0f, 0xeb, 0x5c, 0xe6, 0xe5, 0xc1, 0x79,
	0xd7, 0xee, 0x41, 0xc8, 0xd1, 0xc0, 0xef, 0xf4, 0xe2, 0x50, 0x99, 0xc3, 0xfa, 0xcf, 0x46, 0x03,
	0xbd, 0x17, 0x87, 0xe0, 0x2a, 0x1a, 0xf8, 0x6d, 0x3c, 0x99, 0x79, 0xe9, 0x64, 0x2a, 0x7f, 0x2f,
	0xa7, 0x65, 0x3d, 0x1f, 0x84, 0x7d, 0x3d, 0x48, 0x02, 0x68, 0x4b, 0x58, 0xdb, 0x41, 0x37, 0x4c,
	0xfb, 0x2a, 0x97, 0xa1, 0x7e, 0xb0, 0x36, 0x3b, 0x98, 0x7c, 0x99, 0xa7, 0x12, 0xbb, 0x47, 0x16,
	0xe2, 0xa8, 0x1d, 0xee, 0x05, 0xa7, 0xe7, 0xa2, 0x8f, 0x4a, 0x7c, 0xa8, 0x00, 0x34, 0x7c, 0x13,
	0x9d, 0x0a, 0x74, 0x46, 0xa0, 0xb9, 0x02, 0x50, 0xf0, 0x62, 0x85, 0x6f, 0xc2, 0xd3, 0x34, 0xd1,
	0xa1, 0x02, 0x7a, 0x0a, 0x84, 0x3d, 0xb3, 0x99, 0xf5, 0x54, 0x2a, 0xb2, 0xcf, 0x84, 0xdd, 0x9e,
	0xd9, 0xb4, 0xde, 0x60, 0xbe, 0x2b, 0xe3, 0x25, 0x05, 0xd8, 0xdf, 0x33, 0x9b, 0x7c, 0x48, 0xcc,
	0x76, 0x6b, 0xf4, 0xe2, 0xf0, 0x5d, 0xda, 0x5e, 0x43, 0x05, 0x9c, 0x22, 0xd6, 0x21, 0x0a, 0xba,
	0xbd, 0xb8, 0xa3, 0x2c, 0x20, 0x3e, 0xaa, 0x62, 0x0f, 0x08, 0x01, 0x91, 0x87, 0x9d, 0x6a, 0x70,
	0xa4, 0x10, 0xec, 0xa2, 0x11, 0x0d, 0x7b, 0x4c, 0x56, 0x31, 0xf8, 0x5e, 0x92, 0x84, 0xfd, 0x77,
	0x5e, 0xd4, 0x3e, 0x09, 0x13, 0x65, 0x11, 0xfd, 0x5c, 0x04, 0x18, 0x25, 0xa5, 0x41, 0xf8, 0x56,
	0x59, 0xc2, 0xcc, 0x60, 0x09, 0xf9, 0x1e, 0x87, 0x41, 0xa7, 0xd5, 0x3f, 0x55, 0x96, 0xc5, 0xbd,
	0x4b, 0x45, 0x38, 0x97, 0x68, 0xb0, 0xdd, 0x8f, 0xc2, 0xb8, 0xa3, 0xac, 0xa0, 0x41, 0x2e, 0xe3,
	0x28, 0xe9, 0xf5, 0xba, 0x1a, 0xcc, 0x9f, 0x6b, 0xb8, 0x59, 0x2e, 0xc3, 0x99, 0x9d, 0x06, 0x83,
	0xc4, 0x3c, 0x53, 0x28, 0x3a, 0x4c, 0x25, 0xb0, 0x81, 0x95, 0x17, 0x75, 0x43, 0x65, 0x55, 0xd8,
	0x64, 0x32, 0xfa, 0x0b, 0x83, 0x53, 0xec, 0x01, 0x26, 0x7a, 0x20, 0x93, 0xa1, 0x46, 0x67, 0xc7,
	0xbd, 0x38, 0xb4, 0xcf, 0xbb, 0xaf, 0xc2, 0xbe, 0x72, 0x5d, 0x74, 0xfa, 0x88, 0x0a, 0xac, 0xbf,
	0x79, 0x9b, 0xc2, 0x6b, 0xc2, 0x3a, 0x93, 0xc1, 0x1a, 0x3c, 0xa9, 0x9d, 0x4e, 0x3f, 0x1c, 0x0c,
	0x94, 0x1b, 0xc2, 0x7a, 0x44, 0x05, 0x15, 0x08, 0x52, 0xf4, 0x96, 0xa8, 0x40, 0x2a, 0x82, 0xdf,
	0x4e, 0x34, 0x48, 0x82, 0xb8, 0x1d, 0x2a, 0x8a, 0xf0, 0x9b, 0xc9, 0x95, 0xdf, 0xa6, 0x17, 0xb8,
	0x1f, 0xc4, 0x27, 0x62, 0x3c, 0x28, 0x64, 0xee, 0xec, 0x34, 0x68, 0x47, 0xf1, 0x51, 0x7a, 0x81,
	0x33, 0x71, 0xac, 0x8b, 0x97, 0xf3, 0x2e, 0xbe, 0x43, 0xe6, 0xe3, 0xa8, 0x7d, 0x82, 0x59, 0x8b,
	0x0b, 0x9c, 0xcb, 0x58, 0x91, 0x20, 0x3e, 0x31, 0xe3, 0xd7, 0xbd, 0x74, 0x20, 0xe6, 0x72, 0x65,
	0x8b, 0xcc, 0x6b, 0xbd, 0x28, 0x7e, 0x09, 0x57, 0xed, 0x11, 0x29, 0x9d, 0x05, 0xef, 0x94, 0x02,
	0x5e, 0x71, 0x96, 0xf7, 0x63, 0xad, 0xd7, 0xeb, 0x0c, 0x4c, 0xb8, 0xde, 0x00, 0x57, 0x9e, 0x93,
	0xc5, 0xb4, 0xa1, 0xbe, 0x83, 0xd1, 0x57, 0x64, 0xc9, 0x78, 0xdb, 0x3e, 0x0e, 0xe2, 0xa3, 0x10,
	0xad, 0x36, 0x48, 0xb9, 0x8b, 0x6d, 0x3c, 0xdd, 0x4e, 0x10, 0x2a, 0x9f, 0x92, 0xb9, 0xea, 0xf9,
	0xbb, 0xef, 0xb0, 0x95, 0x46, 0x16, 0x72, 0xcd, 0x85, 0x07, 0xe3, 0x5a, 0xb6, 0xaf, 0x98, 0x01,
	0x42, 0x80, 0x56, 0x8e, 0xba, 0x47, 0x69, 0xdd, 0x60, 0x59, 0xa9, 0x93, 0xeb, 0x78, 0x24, 0x83,
	0xa4, 0xdf, 0x8b, 0x8f, 0x5e, 0xf5, 0xde, 0xfa, 0x51, 0xfc, 0xba, 0x07, 0xe7, 0xf2, 0xaa, 0xf7,
	0x16, 0x0a, 0x86, 0x0e, 0x4a, 0x3c, 0x13, 0xb3, 0xc9, 0x83, 0x90, 0x18, 0x22, 0xb9, 0x5c, 0x39,
	0x22, 0x37, 0xc5, 0xf9, 0x86, 0xbf, 0xf1, 0xe3, 0xf0, 0x1b, 0x1f, 0xda, 0xdb, 0x3f, 0x8d, 0x06,
	0x09, 0x7b, 0x4c, 0x66, 0xe1, 0x8a, 0x84, 0x7d, 0x0c, 0x71, 0xf1, 0xd9, 0x5a, 0x9e, 0x54, 0x13,
	0x7e, 0xee, 0x20, 0xc6, 0x53, 0x0e, 0x7b, 0x48, 0x16, 0xd1, 0xcf, 0x51, 0xd0, 0x0d, 0xf3, 0x31,
	0x46, 0x40, 0x55, 0x43, 0x4d, 0xe5, 0x9f, 0x85, 0x74, 0xa7, 0xa0, 0x7d, 0xf2, 0x7f, 0xed, 0x74,
	0x97, 0x2c, 0xa0, 0x9f, 0x18, 0xda, 0x49, 0x3c, 0x2b, 0xe6, 0x41, 0x81, 0xed, 0x74, 0x9f, 0x10,
	0xf1, 0x20, 0xc7, 0x42, 0xa6, 0x13, 0x13, 0x34, 0x62, 0x0e, 0xdd, 0x26, 0xf3, 0xc2, 0xf6, 0xbc,
	0x8b, 0xdd, 0x56, 0xe6, 0x73, 0x68, 0x7a, 0xde, 0x65, 0x5f, 0x8a, 0xab, 0x0e, 0x01, 0xe1, 0xb4,
	0x5c, 0x7c, 0x76, 0x57, 0x9e, 0x7a, 0x79, 0xcc, 0x56, 0x34, 0x48, 0x78, 0x4e, 0xae, 0xfc, 0xa3,
	0x48, 0xd8, 0x45, 0xc2, 0x77, 0x4c, 0xaa, 0x42, 0x96, 0x5e, 0x07, 0xf1, 0xd1, 0x8b, 0x28, 0x88,
	0xbd, 0xec, 0x35, 0x63, 0x81, 0x4b, 0x3a, 0x18, 0x91, 0x99, 0x6c, 0x8a, 0xd7, 0xa1, 0x32, 0x1f,
	0xd1, 0xb0, 0x47, 0x64, 0x39, 0xe7, 0xe3, 0x83, 0x54, 0xdc, 0x27, 0x59, 0x09, 0x83, 0x34, 0x53,
	0x18, 0x71, 0x92, 0x76, 0x45, 0x59, 0x0c, 0xd2, 0x0b, 0x00, 0xfb, 0x88, 0xac, 0x64, 0x4a, 0x1e,
	0xc6, 0xee, 0xf1, 0x39, 0x3e, 0x2d, 0x4a, 0x7c, 0x4c, 0x3b, 0x1a, 0xbf, 0x1e, 0x0e, 0xda, 0xf8,
	0xdc, 0x18, 0x89, 0x1f, 0x74, 0x6c, 0x83, 0x5c, 0xcb, 0x64, 0xf8, 0x77, 0x64, 0x45, 0xf8, 0xa0,
	0x58, 0xe0, 0xe3, 0xea, 0xcd, 0x7f, 0x29, 0x64, 0x75, 0xf8, 0xb6, 0x81, 0x55, 0x33, 0x61, 0xe0,
	0xb2, 0x1d, 0xd5, 0xb2, 0xfc, 0xa6, 0xa9, 0xfb, 0x3b, 0x86, 0xca, 0xbd, 0xaa, 0xa1, 0x7a, 0xf4,
	0x3d, 0x76, 0x8b, 0x5c, 0xcf, 0xf5, 0xbb, 0x2d, 0x53, 0xab, 0xfb, 0x9a, 0x63, 0xdb, 0xb4, 0xc0,
	0xee, 0x92, 0x5b, 0x13, 0x00, 0x5f, 0xd5, 0xea, 0xb4, 0x28, 0x59, 0xd5, 0xd4, 0x86, 0xe1, 0x5b,
	0x4e, 0xcd, 0xb4, 0x69, 0x49, 0xb2, 0x1a, 0x02, 0x68, 0x35, 0xc3, 0x2a, 0xe4, 0x41, 0x0e, 0xee,
	0x1f, 0x34, 0xd5, 0xc3, 0x96, 0x6d, 0x6e, 0x9b, 0x86, 0xee, 0x70, 0xdd, 0xe0, 0x3e, 0x37, 0x76,
	0x69, 0xf9, 0x0a, 0x0e, 0xf8, 0x99, 0x65, 0xef, 0x93, 0xfb, 0x32, 0xc7, 0x3d, 0xb4, 0x35, 0x6d,
	0xc7, 0xd0, 0xea, 0xa9, 0x9b, 0xb9, 0xcb, 0x29, 0xe0, 0x65, 0x5e, 0xaa, 0x48, 0xcb, 0x35, 0xb8,
	0xaf, 0xab, 0x9e, 0x4a, 0x17, 0xd8, 0x1d, 0x72, 0xf3, 0xa2, 0x1e, 0x6d, 0x08, 0xbb, 0x4d, 0x6e,
	0xe4, 0x98, 0xce, 0xd5, 0x7d, 0xdf, 0x72, 0x3c, 0xcf, 0xe0, 0x87, 0x74, 0x91, 0xdd, 0x27, 0xb7,
	0x27, 0x42, 0x68, 0xb9, 0xc4, 0xd6, 0xc9, 0xbd, 0x21, 0xec, 0xe6, 0xa0, 0x69, 0x6f, 0x3b, 0xc8,
	0x58, 0x96, 0x4a, 0xe7, 0xd8, 0x96, 0x69, 0x1b, 0xfb, 0x2a, 0xd7, 0x31, 0x9f, 0x95, 0x69, 0x20,
	0x58, 0x5e, 0x93, 0x32, 0x31, 0xf6, 0x0c, 0xdb, 0x43, 0x23, 0x3a, 0x41, 0x0f, 0xfc, 0x55, 0xf9,
	0x90, 0x1c, 0x07, 0xc2, 0x31, 0x5d, 0x61, 0xc4, 0xa6, 0x81, 0x60, 0x79, 0x9d, 0x7d, 0x48, 0xde,
	0x1f, 0x76, 0x91, 0xe3, 0xb5, 0x9a, 0xba, 0xea, 0x19, 0x7b, 0x06, 0x77, 0x4d, 0xc7, 0xc6, 0x54,
	0xc0, 0xc7, 0xda, 0xd5, 0x34, 0xf0, 0x76, 0x43, 0xaa, 0x74, 0x55, 0xad, 0xf9, 0xa6, 0x67, 0x34,
	0x5c, 0x74, 0x71, 0x73, 0x0a, 0x06, 0x76, 0xb7, 0xd8, 0x06, 0x79, 0x74, 0xd1, 0x3d, 0x74, 0x9b,
	0xea, 0xba, 0x86, 0xe7, 0xe6, 0x81, 0x28, 0xff, 0x13, 0x13, 0x7c, 0xde, 0x96, 0x8e, 0x4f, 0x6d,
	0x36, 0x2d, 0xc3, 0x6f, 0xaa, 0x87, 0xbe, 0x56, 0x45, 0x47, 0x77, 0xd8, 0x23, 0xb2, 0x7e, 0xd1,
	0xd1, 0xd8, 0x76, 0x77, 0xaf, 0x64, 0xc1, 0x56, 0xf7, 0xa4, 0xd4, 0x1a, 0xaa, 0x69, 0x0d, 0xab,
	0x7f, 0x7f, 0x0a, 0x06, 0x76, 0x0f, 0xd8, 0x07, 0xe4, 0xe1, 0xd0, 0x3b, 0x2c, 0x74, 0x37, 0x6d,
	0xa3, 0x3c, 0x84, 0x87, 0x52, 0x1e, 0xdb, 0xdc, 0x34, 0xec, 0xd1, 0xd3, 0x5d, 0x9f, 0x0e, 0xc3,
	0x16, 0xef, 0xb3, 0x1b, 0x64, 0x35, 0x87, 0xb9, 0x6a, 0xd7, 0xd1, 0xaa, 0x72, 0x51, 0x0d, 0xec,
	0x0f, 0xd8, 0x43, 0x72, 0x37, 0x57, 0xbb, 0x1e, 0x77, 0xec, 0x5a, 0xd5, 0x39, 0xf0, 0xf3, 0x60,
	0x1e, 0x5d, 0x46, 0x00, 0x0f, 0x1f, 0x4a, 0xd7, 0x74, 0x48, 0x50, 0x35, 0xcd, 0x70, 0x45, 0x23,
	0x7c, 0x74, 0x39, 0x05, 0xbc, 0x7c, 0x2c, 0xb5, 0xac, 0x48, 0xca, 0x57, 0x75, 0x71, 0x73, 0x36,
	0xa6, 0x81, 0x60, 0xf9, 0xbd, 0x49, 0xa0, 0x6e, 0x58, 0x68, 0xb9, 0x39, 0x0d, 0x04, 0xcb, 0x4f,
	0xa4, 0xd4, 0xb2, 0x42, 0xba, 0x86, 0xca, 0xb5, 0x1d, 0xb4, 0x7e, 0x7c, 0x19, 0x01, 0x3c, 0x7c,
	0x9f, 0xad, 0x11, 0x3a, 0x2c, 0xaa, 0x51, 0x43, 0xb3, 0x27, 0x17, 0xb4, 0xc0, 0xfd, 0x54, 0x6a,
	0x0b, 0x4f, 0x75, 0xeb, 0xc3, 0x23, 0xdd, 0x9a, 0x82, 0x81, 0xdd, 0xd3, 0xe9, 0x5d, 0x0d, 0xf0,
	0x33, 0x69, 0x28, 0x8d, 0x4c, 0x95, 0xfc, 0x04, 0x9f, 0x5f, 0xca, 0x00, 0x1f, 0x9f, 0x49, 0xdb,
	0x8b, 0x79, 0x51, 0x6d, 0x1d, 0xa2, 0xf5, 0xe7, 0x53, 0x30, 0xb0, 0xfb, 0x42, 0xc2, 0x54, 0xcb,
	0x72, 0xf6, 0x55, 0x5b, 0x33, 0xd0, 0xee, 0xcb, 0x29, 0x18, 0xd8, 0x7d, 0x25, 0x9d, 0x0a, 0x0e,
	0x74, 0x91, 0x34, 0x18, 0xfe, 0x60, 0x1a, 0x08, 0x96, 0x3f, 0x94, 0x6e, 0x27, 0x37, 0x34, 0xa7,
	0xd1, 0x80, 0x23, 0xc5, 0x11, 0x9f, 0x97, 0xf3, 0x47, 0x57, 0xb2, 0xc0, 0xd7, 0x8f, 0x2f, 0x3e,
	0xe7, 0x5c, 0x4f, 0xf5, 0x44, 0xf8, 0x5f, 0x4f, 0x03, 0xc1, 0xf2, 0x27, 0xd2, 0x23, 0x04, 0x83,
	0x73, 0x5b, 0x0d, 0xb4, 0xfb, 0xe9, 0x64, 0x08, 0xac, 0x7e, 0xc6, 0xee, 0x11, 0x65, 0x2c, 0xb1,
	0xaa, 0x63, 0xb7, 0xc4, 0x1d, 0x51, 0xa7, 0xa2, 0x60, 0x5b, 0x95, 0x6e, 0x90, 0x18, 0x49, 0x3e,
	0x37, 0x54, 0x4b, 0x3c, 0xd7, 0xc0, 0x81, 0x76, 0x39, 0x05, 0xbc, 0xe8, 0xd2, 0x0c, 0x68, 0xb6,
	0x5c, 0xd1, 0xe6, 0x86, 0x34, 0xea, 0xb9, 0xb1, 0xeb, 0x43, 0xc1, 0x1c, 0x5b, 0xb3, 0x4c, 0xad,
	0x0e, 0x59, 0x9b, 0xae, 0x67, 0x6a, 0x74, 0x5b, 0xea, 0x23, 0xa0, 0xa9, 0xd0, 0x46, 0x35, 0xc3,
	0xb3, 0x8d, 0x7d, 0x28, 0x2d, 0xad, 0x49, 0x0c, 0x55, 0xab, 0x5f, 0x60, 0xec, 0x48, 0x59, 0x62,
	0x04, 0x58, 0x5b, 0xcd, 0x69, 0xd9, 0x1e, 0x35, 0x25, 0xfb, 0x5d, 0x2e, 0x5e, 0x3b, 0x6a, 0x86,
	0xa7, 0x39, 0xba, 0x38, 0x96, 0x17, 0x97, 0x32, 0x20, 0xc7, 0xba, 0x74, 0x67, 0x33, 0xc6, 0xfe,
	0x41, 0x7e, 0x1d, 0xac, 0xcb, 0x08, 0xe0, 0xa1, 0x21, 0x15, 0x72, 0xe4, 0xfd, 0x67, 0xcf, 0x54,
	0x7d, 0xd3, 0x6e, 0xb6, 0x3c, 0x6a, 0xb3, 0x07, 0xe4, 0xce, 0xf8, 0xbd, 0x1f, 0xc1, 0x1d, 0x29,
	0x4d, 0x74, 0x01, 0x3f, 0xa0, 0x13, 0xb9, 0x4e, 0x9b, 0x52, 0x04, 0x88, 0xaa, 0x5a, 0x7d, 0x84,
	0xb0, 0x2b, 0x57, 0xc9, 0x52, 0x0f, 0xab, 0xaa, 0x56, 0xe7, 0xc6, 0x6e, 0x53, 0xad, 0x19, 0x94,
	0x4f, 0x44, 0x55, 0xad, 0x8e, 0xa8, 0x2b, 0x45, 0x3f, 0x66, 0x5b, 0x3d, 0xac, 0x99, 0x3a, 0xf5,
	0xa4, 0xfd, 0x33, 0x4a, 0x53, 0xcf, 0x7d, 0xb4, 0xd8, 0xc7, 0xe4, 0x83, 0x61, 0x2f, 0x62, 0x33,
	0x60, 0x86, 0xad, 0xa6, 0xe5, 0xa8, 0xba, 0x6f, 0x39, 0x9a, 0xea, 0x99, 0x8e, 0x4d, 0xf7, 0xa4,
	0x8b, 0x96, 0x8e, 0xd7, 0xec, 0xad, 0x28, 0xbf, 0x8e, 0xfb, 0x57, 0xb2, 0xa0, 0xec, 0x07, 0x97,
	0xb1, 0xf0, 0x5d, 0x0c, 0x7c, 0x1d, 0x5e, 0xc9, 0x02, 0x5f, 0x2f, 0xa5, 0x77, 0x5b, 0xdb, 0xf1,
	0xcc, 0x74, 0x2a, 0xfd, 0x7c, 0x12, 0x00, 0x16, 0xbf, 0x90, 0xca, 0x06, 0xb9, 0xea, 0xa6, 0xeb,
	0xe1, 0xc4, 0x6a, 0xa8, 0x9e, 0xb6, 0x63, 0xe8, 0xf4, 0x97, 0x12, 0x05, 0xba, 0xfb, 0x02, 0xe5,
	0x57, 0x52, 0xe1, 0xf0, 0x8a, 0xd4, 0xf0, 0x4d, 0xce, 0x71, 0x1a, 0x70, 0xd0, 0xa6, 0x5d, 0xc3,
	0x84, 0xa9, 0x2f, 0x11, 0xf1, 0xa6, 0x4c, 0x26, 0xfe, 0x5a, 0x7a, 0xfb, 0x19, 0xf3, 0xb8, 0x63,
	0xba, 0x9e, 0x93, 0xd6, 0x90, 0x06, 0x12, 0x73, 0xcc, 0xa5, 0xc4, 0x7c, 0xb5, 0xf9, 0x6d, 0x91,
	0xac, 0x4d, 0xfa, 0x96, 0xc9, 0x56, 0x08, 0xf1, 0xb8, 0xaa, 0xc3, 0x85, 0x34, 0xe1, 0xff, 0x0f,
	0xab, 0x64, 0x59, 0xc8, 0xba, 0xa9, 0x36, 0x1c, 0x5b, 0xa7, 0x45, 0x76, 0x8d, 0x2c, 0x0a, 0x15,
	0x4e, 0x27, 0x5a, 0x62, 0xcb, 0x64, 0x41, 0x28, 0x78, 0xa3, 0x4a, 0xcb, 0x8c, 0x92, 0x25, 0x21,
	0x7a, 0xa6, 0x56, 0x37, 0x3c, 0x3a, 0x07, 0x4e, 0x5d, 0x83, 0xef, 0x19, 0xdc, 0xdf, 0x33, 0x9b,
	0xf4, 0x39, 0x30, 0x9a, 0xdc, 0x69, 0xba, 0xfe, 0xb6, 0x6a, 0xd7, 0xea, 0x2a, 0x0d, 0x87, 0x1a,
	0x5d, 0xb5, 0xd4, 0xaa, 0x4a, 0x5f, 0x33, 0x46, 0x56, 0x84, 0xa6, 0xda, 0xda, 0x35, 0x55, 0xbb,
	0xae, 0xd2, 0x23, 0x76, 0x8b, 0x30, 0x9c, 0x67, 0xcd, 0x1d, 0xc7, 0x36, 0x7c, 0x0d, 0x1e, 0x61,
	0x4f, 0xb7, 0xe8, 0x1f, 0x8a, 0x93, 0x80, 0xcf, 0xb7, 0xe8, 0x1f, 0x87, 0x80, 0xbb, 0xe3, 0x34,
	0x33, 0x83, 0x2d, 0xfa, 0xa7, 0x71, 0x0b, 0x13, 0x7f, 0x7d, 0x49, 0xff, 0x5c, 0x64, 0x6b, 0xe4,
	0x9a, 0x00, 0x34, 0xbf, 0xa1, 0x6a, 0x55, 0xc7, 0xa9, 0xd3, 0xbf, 0x4c, 0xdc, 0xe0, 0xf9, 0x16,
	0xfd, 0x2b, 0x02, 0x8e, 0xb7, 0x63, 0x70, 0xff, 0xc0, 0x34, 0x0e, 0x4c, 0x80, 0xec, 0xc3, 0x16,
	0xfd, 0x5d, 0x89, 0xdd, 0x24, 0xab, 0x02, 0x78, 0xa9, 0x9a, 0x96, 0x6a, 0xfa, 0x87, 0xa6, 0x66,
	0xd2, 0xdf, 0x97, 0x36, 0xbf, 0x4e, 0xff, 0x3a, 0x30, 0xfc, 0xca, 0x8f, 0xf5, 0x3b, 0x6c, 0x42,
	0xbd, 0x1a, 0x06, 0x2d, 0xb0, 0x25, 0x32, 0x8f, 0xa2, 0x6d, 0xec, 0xd3, 0x62, 0x0e, 0xda, 0x2d,
	0xcb, 0xa2, 0xa5, 0xcd, 0x4f, 0x08, 0x1d, 0xff, 0xe8, 0xcf, 0x08, 0x99, 0xe5, 0x86, 0x6f, 0x1c,
	0x34, 0x69, 0x81, 0x2d, 0x92, 0x39, 0x6e, 0xf8, 0x35, 0x73, 0xdb, 0xa3, 0xc5, 0xcd, 0xa7, 0xe9,
	0x57, 0x12, 0xf9, 0xdb, 0x3c, 0xf0, 0xdd, 0x43, 0xd7, 0x33, 0x1a, 0xb4, 0x00, 0x47, 0x33, 0x7c,
	0x9d, 0xa2, 0xc5, 0xcd, 0x7f, 0x67, 0x9f, 0x28, 0x4e, 0xc5, 0xc7, 0xc4, 0xf4, 0xab, 0x75, 0x6a,
	0x66, 0x65, 0x6d, 0xb1, 0x4c, 0x16, 0xac, 0x91, 0x96, 0xa0, 0x64, 0x09, 0x5e, 0xb7, 0x74, 0xbf,
	0xa9, 0xe2, 0x91, 0x97, 0x20, 0x09, 0x20, 0xb7, 0x9a, 0x8e, 0x4d, 0xe7, 0xa0, 0x8b, 0x2c, 0xd1,
	0x87, 0x69, 0x4f, 0x84, 0xd0, 0x45, 0x96, 0xbf, 0x6d, 0x5a, 0x96, 0xef, 0x9a, 0x35, 0x9b, 0x1e,
	0x41, 0xe1, 0x27, 0x9c, 0xec, 0xb8, 0x56, 0x54, 0x7d, 0x5c, 0x2b, 0x0e, 0xfb, 0x3a, 0x59, 0xb1,
	0x2e, 0x9c, 0x03, 0x83, 0xad, 0xc7, 0xce, 0xc0, 0x4a, 0xbf, 0x56, 0x88, 0xe6, 0x0f, 0x06, 0x27,
	0xf8, 0x6d, 0x21, 0xab, 0x34, 0x5c, 0x21, 0xfa, 0x1e, 0x54, 0x12, 0xc5, 0xc6, 0x8b, 0x91, 0x33,
	0xd1, 0xf5, 0x97, 0xb4, 0x98, 0x4b, 0x2f, 0x5f, 0xec, 0xd0, 0xd2, 0x66, 0x7d, 0xe4, 0x2b, 0x37,
	0x34, 0x38, 0x9b, 0x27, 0x33, 0xd6, 0x9e, 0xff, 0x94, 0x16, 0xd2, 0xd5, 0x33, 0x5a, 0x4c, 0x57,
	0xcf, 0x69, 0x29, 0x5d, 0x7d, 0x46, 0x67, 0xd2, 0xd5, 0xe7, 0xb4, 0x9c, 0xae, 0xbe, 0xa0, 0xb3,
	0xcd, 0xf7, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xda, 0x0b, 0x54, 0x81, 0x6f, 0x1a, 0x00, 0x00,
}
