// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base.proto

/*
Package mjproto is a generated protocol buffer package.

It is generated from these files:
	base.proto
	mahjong_desk.proto
	mahjong_hall.proto
	mahjong_play.proto
	rpc_sjh.proto
	rpc_zzhz.proto

It has these top-level messages:
	ProtoHeader
	Heartbeat
	WeixinInfo
	CardInfo
	PlayOptions
	ChangShaPlayOptions
	BaiShanPlayOptions
	ZhuanZhuanPlayOptions
	HaiNanPlayOptions
	RoomTypeInfo
	ComposeCard
	PlayerCard
	GangBean
	PlayerInfo
	DeskGameInfo
	Game_DissolveDesk
	Game_AckDissolveDesk
	Game_ReqDissolveDesk
	Game_AckReqDissolveDesk
	Game_Ready
	Game_AckReady
	BirdInfo
	WinCoinInfo
	EndLotteryInfo
	Game_SendCurrentResult
	Game_SendEndLottery
	ServerInfo
	Game_QuickConn
	Game_AckQuickConn
	Game_Login
	Game_AckLogin
	Game_Notice
	Game_AckNotice
	Game_GameRecord
	BeanUserRecord
	BeanGameRecord
	Game_AckGameRecord
	Game_Feedback
	Game_CreateRoom
	Game_AckCreateRoom
	Game_EnterRoom
	Game_AckEnterRoom
	UserCoinBean
	Game_Opening
	Game_DealCards
	Game_ExchangeCards
	Game_DealHaiDiCards
	Game_ReqDealHaiDiCards
	Game_AckDealHaiDiCards
	Game_AckExchangeCards
	Game_ExchangeCardsEnd
	Game_DingQue
	DingQueEndBean
	Game_DingQueEnd
	Game_BroadcastBeginDingQue
	Game_BroadcastBeginExchange
	Game_GetInCard
	Game_SendOutCard
	Game_AckSendOutCard
	Game_ActPeng
	Game_AckActPeng
	Game_ActChi
	Game_AckActChi
	Game_ActGang
	Game_AckActGang
	Game_ChangShaActGang
	Game_ChangShaAckActGang
	Game_ActHu
	Game_AckActHu
	Game_ActChangShaQiShouHu
	Game_AckActChangShaQiShouHu
	Game_AckActHuChangSha
	Game_ActGuo
	Game_AckActGuo
	Game_ChangShaOverTurnAfterGang
	Game_ChangshQiShouHuOverTurn
	Game_OverTurn
	ChiOverTurn
	JiaoInfo
	JiaoPaiInfo
	Game_SendGameInfo
	GameReqBuxiazi
	GameAckBuxiazi
	GameBcBaoting
	GameReqBaoting
	GameAckBaoting
	GameBcFenzhang
	GameBcPiao
	GameReqPiao
	GameAckPiao
	GameBcBenjin
	GameReqFly
	GameAckFly
	GameReqTi
	GameAckTi
	GameAckJiaoinfos
	GameAckTinginfos
	GameReqGang
	GameAckGang
	GameAckBuhua
	GameBcShangga
	GameReqShangga
	GameAckShangga
*/
package mjproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EProtoId int32

const (
	EProtoId_PID_QUICK_CONN                     EProtoId = 1
	EProtoId_PID_QUICK_CONN_ACK                 EProtoId = 2
	EProtoId_PID_GAME_LOGIN                     EProtoId = 3
	EProtoId_PID_GAME_LOGIN_ACK                 EProtoId = 4
	EProtoId_PID_CREATEROOM                     EProtoId = 5
	EProtoId_PID_CREATEROOM_ACK                 EProtoId = 6
	EProtoId_PID_ENTER_ROOM                     EProtoId = 7
	EProtoId_PID_ENTER_ROOM_ACK                 EProtoId = 8
	EProtoId_PID_SEND_GAMEINFO                  EProtoId = 9
	EProtoId_PID_READY                          EProtoId = 10
	EProtoId_PID_READY_ACK                      EProtoId = 11
	EProtoId_PID_EXCHANGECARDS                  EProtoId = 12
	EProtoId_PID_EXCHANGECARDS_ACK              EProtoId = 13
	EProtoId_PID_DINGQUE                        EProtoId = 14
	EProtoId_PID_OPENING                        EProtoId = 15
	EProtoId_PID_DEAL_CARDS                     EProtoId = 16
	EProtoId_PID_GET_IN_CARD                    EProtoId = 17
	EProtoId_PID_SEND_OUT_CARD                  EProtoId = 18
	EProtoId_PID_SEND_OUT_CARD_ACK              EProtoId = 19
	EProtoId_PID_PENG_CARD                      EProtoId = 20
	EProtoId_PID_PENG_CARD_ACK                  EProtoId = 21
	EProtoId_PID_GANG_CARD                      EProtoId = 22
	EProtoId_PID_GANG_CARD_ACK                  EProtoId = 23
	EProtoId_PID_GUO_CARD                       EProtoId = 24
	EProtoId_PID_GUO_CARD_ACK                   EProtoId = 25
	EProtoId_PID_HU_CARD                        EProtoId = 26
	EProtoId_PID_HU_CARD_ACK                    EProtoId = 27
	EProtoId_PID_BROADCAST_BEGIN_DINGQUE        EProtoId = 28
	EProtoId_PID_BROADCAST_BEGIN_EXCHANGE       EProtoId = 29
	EProtoId_PID_OVERTURN                       EProtoId = 30
	EProtoId_PID_CURRENTRESULT                  EProtoId = 31
	EProtoId_PID_SENDENDLOTTERY                 EProtoId = 32
	EProtoId_PID_DISSOLVE_DESK                  EProtoId = 33
	EProtoId_PID_DISSOLVE_DESK_ACK              EProtoId = 34
	EProtoId_PID_LEAVE_DESK                     EProtoId = 35
	EProtoId_PID_LEAVE_DESK_ACK                 EProtoId = 36
	EProtoId_PID_MESSAGE                        EProtoId = 37
	EProtoId_PID_SEND_MESSAGE                   EProtoId = 38
	EProtoId_PID_GAME_DINGQUEEND                EProtoId = 39
	EProtoId_PID_GAME_GAMERECORD                EProtoId = 40
	EProtoId_PID_GAME_ACKGAMERECORD             EProtoId = 41
	EProtoId_PID_GAME_ACKGAMERECORDEDN          EProtoId = 42
	EProtoId_PID_GAME_NOTICE                    EProtoId = 43
	EProtoId_PID_GAME_ACKNOTICE                 EProtoId = 44
	EProtoId_PID_LOGOUT_REQ                     EProtoId = 45
	EProtoId_PID_LOGOUT_ACK                     EProtoId = 46
	EProtoId_PID_AWARD_ONLINE_REQ               EProtoId = 47
	EProtoId_PID_AWARD_ONLINE_ACK               EProtoId = 48
	EProtoId_PID_HALL_TASK_REQ                  EProtoId = 49
	EProtoId_PID_HALL_TASK_ACK                  EProtoId = 50
	EProtoId_PID_ENTER_AGENTMODE_REQ            EProtoId = 51
	EProtoId_PID_ENTER_AGENTMODE_ACK            EProtoId = 52
	EProtoId_PID_QUIT_AGENTMODE_REQ             EProtoId = 53
	EProtoId_PID_QUIT_AGENTMODE_ACK             EProtoId = 54
	EProtoId_PID_REG_REQ                        EProtoId = 55
	EProtoId_PID_REG_ACK                        EProtoId = 56
	EProtoId_PID_GAMESTATE_REQ                  EProtoId = 57
	EProtoId_PID_GAMESTATE_ACK                  EProtoId = 58
	EProtoId_PID_FEEDBACK_REQ                   EProtoId = 59
	EProtoId_PID_APPLYDISSOLVE_REQ              EProtoId = 60
	EProtoId_PID_APPLYDISSOLVE_ACK              EProtoId = 61
	EProtoId_PID_APPLYDISSOLVEBACK_REQ          EProtoId = 62
	EProtoId_PID_APPLYDISSOLVEBACK_ACK          EProtoId = 63
	EProtoId_PID_COMMONBCKICKOUT                EProtoId = 64
	EProtoId_PID_ACTCHI_REQ                     EProtoId = 65
	EProtoId_PID_ACTCHI_ACK                     EProtoId = 66
	EProtoId_PID_CHANGSHA_GANG_CARD_ACK         EProtoId = 67
	EProtoId_PID_ACTCHANGSHAQISHOUHU            EProtoId = 68
	EProtoId_PID_ACTCHANGSHAQISHOUHU_ACK        EProtoId = 69
	EProtoId_PID_GAME_CHANGSHQISHOUHUOVERTURN   EProtoId = 70
	EProtoId_PID_GAME_CHANGSHAOVERTURNAFTERGANG EProtoId = 71
	EProtoId_PID_GAME_ACKACTHUCHANGSHA          EProtoId = 72
	EProtoId_PID_GAME_DEALHAIDICARDS            EProtoId = 73
	EProtoId_PID_GAME_REQDEALHAIDICARDS         EProtoId = 74
	EProtoId_PID_GAME_ACKDEALHAIDICARDS         EProtoId = 75
	EProtoId_PID_COMMONBCUSERBREAK              EProtoId = 76
	EProtoId_PID_COMMONREQRECONNECT             EProtoId = 77
	EProtoId_PID_GAMEREQBUXIAZI                 EProtoId = 78
	EProtoId_PID_GAMEACKBUXIAZI                 EProtoId = 79
	EProtoId_PID_OFFLINE_REQ                    EProtoId = 80
	EProtoId_PID_RECONNECT_ACK                  EProtoId = 81
	EProtoId_PID_BC_BAOTING                     EProtoId = 82
	EProtoId_PID_REQ_BAOTING                    EProtoId = 83
	EProtoId_PID_ACK_BAOTING                    EProtoId = 84
	EProtoId_PID_BC_FENZHANG                    EProtoId = 85
	// 宜宾麻将
	EProtoId_PID_BC_PIAO            EProtoId = 86
	EProtoId_PID_REQ_PIAO           EProtoId = 87
	EProtoId_PID_ACK_PIAO           EProtoId = 88
	EProtoId_PID_REQ_FLY            EProtoId = 89
	EProtoId_PID_ACK_FLY            EProtoId = 90
	EProtoId_PID_REQ_TI             EProtoId = 91
	EProtoId_PID_ACK_TI             EProtoId = 92
	EProtoId_PID_BC_LEAVE_TIMEOUT   EProtoId = 93
	EProtoId_PID_ACK_JIAOINFOS      EProtoId = 94
	EProtoId_PID_REQ_GANG           EProtoId = 95
	EProtoId_PID_ACK_GANG           EProtoId = 96
	EProtoId_PID_REQ_KICKOUT        EProtoId = 97
	EProtoId_PID_ACK_TINGINFOS      EProtoId = 98
	EProtoId_PID_ACK_BUHUA          EProtoId = 99
	EProtoId_PID_BC_SHANGGA         EProtoId = 100
	EProtoId_PID_REQ_SHANGGA        EProtoId = 101
	EProtoId_PID_ACK_SHANGGA        EProtoId = 102
	EProtoId_PID_REQ_LIST_COIN_DESK EProtoId = 103
	EProtoId_PID_ACK_LIST_COIN_DESK EProtoId = 104
)

var EProtoId_name = map[int32]string{
	1:   "PID_QUICK_CONN",
	2:   "PID_QUICK_CONN_ACK",
	3:   "PID_GAME_LOGIN",
	4:   "PID_GAME_LOGIN_ACK",
	5:   "PID_CREATEROOM",
	6:   "PID_CREATEROOM_ACK",
	7:   "PID_ENTER_ROOM",
	8:   "PID_ENTER_ROOM_ACK",
	9:   "PID_SEND_GAMEINFO",
	10:  "PID_READY",
	11:  "PID_READY_ACK",
	12:  "PID_EXCHANGECARDS",
	13:  "PID_EXCHANGECARDS_ACK",
	14:  "PID_DINGQUE",
	15:  "PID_OPENING",
	16:  "PID_DEAL_CARDS",
	17:  "PID_GET_IN_CARD",
	18:  "PID_SEND_OUT_CARD",
	19:  "PID_SEND_OUT_CARD_ACK",
	20:  "PID_PENG_CARD",
	21:  "PID_PENG_CARD_ACK",
	22:  "PID_GANG_CARD",
	23:  "PID_GANG_CARD_ACK",
	24:  "PID_GUO_CARD",
	25:  "PID_GUO_CARD_ACK",
	26:  "PID_HU_CARD",
	27:  "PID_HU_CARD_ACK",
	28:  "PID_BROADCAST_BEGIN_DINGQUE",
	29:  "PID_BROADCAST_BEGIN_EXCHANGE",
	30:  "PID_OVERTURN",
	31:  "PID_CURRENTRESULT",
	32:  "PID_SENDENDLOTTERY",
	33:  "PID_DISSOLVE_DESK",
	34:  "PID_DISSOLVE_DESK_ACK",
	35:  "PID_LEAVE_DESK",
	36:  "PID_LEAVE_DESK_ACK",
	37:  "PID_MESSAGE",
	38:  "PID_SEND_MESSAGE",
	39:  "PID_GAME_DINGQUEEND",
	40:  "PID_GAME_GAMERECORD",
	41:  "PID_GAME_ACKGAMERECORD",
	42:  "PID_GAME_ACKGAMERECORDEDN",
	43:  "PID_GAME_NOTICE",
	44:  "PID_GAME_ACKNOTICE",
	45:  "PID_LOGOUT_REQ",
	46:  "PID_LOGOUT_ACK",
	47:  "PID_AWARD_ONLINE_REQ",
	48:  "PID_AWARD_ONLINE_ACK",
	49:  "PID_HALL_TASK_REQ",
	50:  "PID_HALL_TASK_ACK",
	51:  "PID_ENTER_AGENTMODE_REQ",
	52:  "PID_ENTER_AGENTMODE_ACK",
	53:  "PID_QUIT_AGENTMODE_REQ",
	54:  "PID_QUIT_AGENTMODE_ACK",
	55:  "PID_REG_REQ",
	56:  "PID_REG_ACK",
	57:  "PID_GAMESTATE_REQ",
	58:  "PID_GAMESTATE_ACK",
	59:  "PID_FEEDBACK_REQ",
	60:  "PID_APPLYDISSOLVE_REQ",
	61:  "PID_APPLYDISSOLVE_ACK",
	62:  "PID_APPLYDISSOLVEBACK_REQ",
	63:  "PID_APPLYDISSOLVEBACK_ACK",
	64:  "PID_COMMONBCKICKOUT",
	65:  "PID_ACTCHI_REQ",
	66:  "PID_ACTCHI_ACK",
	67:  "PID_CHANGSHA_GANG_CARD_ACK",
	68:  "PID_ACTCHANGSHAQISHOUHU",
	69:  "PID_ACTCHANGSHAQISHOUHU_ACK",
	70:  "PID_GAME_CHANGSHQISHOUHUOVERTURN",
	71:  "PID_GAME_CHANGSHAOVERTURNAFTERGANG",
	72:  "PID_GAME_ACKACTHUCHANGSHA",
	73:  "PID_GAME_DEALHAIDICARDS",
	74:  "PID_GAME_REQDEALHAIDICARDS",
	75:  "PID_GAME_ACKDEALHAIDICARDS",
	76:  "PID_COMMONBCUSERBREAK",
	77:  "PID_COMMONREQRECONNECT",
	78:  "PID_GAMEREQBUXIAZI",
	79:  "PID_GAMEACKBUXIAZI",
	80:  "PID_OFFLINE_REQ",
	81:  "PID_RECONNECT_ACK",
	82:  "PID_BC_BAOTING",
	83:  "PID_REQ_BAOTING",
	84:  "PID_ACK_BAOTING",
	85:  "PID_BC_FENZHANG",
	86:  "PID_BC_PIAO",
	87:  "PID_REQ_PIAO",
	88:  "PID_ACK_PIAO",
	89:  "PID_REQ_FLY",
	90:  "PID_ACK_FLY",
	91:  "PID_REQ_TI",
	92:  "PID_ACK_TI",
	93:  "PID_BC_LEAVE_TIMEOUT",
	94:  "PID_ACK_JIAOINFOS",
	95:  "PID_REQ_GANG",
	96:  "PID_ACK_GANG",
	97:  "PID_REQ_KICKOUT",
	98:  "PID_ACK_TINGINFOS",
	99:  "PID_ACK_BUHUA",
	100: "PID_BC_SHANGGA",
	101: "PID_REQ_SHANGGA",
	102: "PID_ACK_SHANGGA",
	103: "PID_REQ_LIST_COIN_DESK",
	104: "PID_ACK_LIST_COIN_DESK",
}
var EProtoId_value = map[string]int32{
	"PID_QUICK_CONN":                     1,
	"PID_QUICK_CONN_ACK":                 2,
	"PID_GAME_LOGIN":                     3,
	"PID_GAME_LOGIN_ACK":                 4,
	"PID_CREATEROOM":                     5,
	"PID_CREATEROOM_ACK":                 6,
	"PID_ENTER_ROOM":                     7,
	"PID_ENTER_ROOM_ACK":                 8,
	"PID_SEND_GAMEINFO":                  9,
	"PID_READY":                          10,
	"PID_READY_ACK":                      11,
	"PID_EXCHANGECARDS":                  12,
	"PID_EXCHANGECARDS_ACK":              13,
	"PID_DINGQUE":                        14,
	"PID_OPENING":                        15,
	"PID_DEAL_CARDS":                     16,
	"PID_GET_IN_CARD":                    17,
	"PID_SEND_OUT_CARD":                  18,
	"PID_SEND_OUT_CARD_ACK":              19,
	"PID_PENG_CARD":                      20,
	"PID_PENG_CARD_ACK":                  21,
	"PID_GANG_CARD":                      22,
	"PID_GANG_CARD_ACK":                  23,
	"PID_GUO_CARD":                       24,
	"PID_GUO_CARD_ACK":                   25,
	"PID_HU_CARD":                        26,
	"PID_HU_CARD_ACK":                    27,
	"PID_BROADCAST_BEGIN_DINGQUE":        28,
	"PID_BROADCAST_BEGIN_EXCHANGE":       29,
	"PID_OVERTURN":                       30,
	"PID_CURRENTRESULT":                  31,
	"PID_SENDENDLOTTERY":                 32,
	"PID_DISSOLVE_DESK":                  33,
	"PID_DISSOLVE_DESK_ACK":              34,
	"PID_LEAVE_DESK":                     35,
	"PID_LEAVE_DESK_ACK":                 36,
	"PID_MESSAGE":                        37,
	"PID_SEND_MESSAGE":                   38,
	"PID_GAME_DINGQUEEND":                39,
	"PID_GAME_GAMERECORD":                40,
	"PID_GAME_ACKGAMERECORD":             41,
	"PID_GAME_ACKGAMERECORDEDN":          42,
	"PID_GAME_NOTICE":                    43,
	"PID_GAME_ACKNOTICE":                 44,
	"PID_LOGOUT_REQ":                     45,
	"PID_LOGOUT_ACK":                     46,
	"PID_AWARD_ONLINE_REQ":               47,
	"PID_AWARD_ONLINE_ACK":               48,
	"PID_HALL_TASK_REQ":                  49,
	"PID_HALL_TASK_ACK":                  50,
	"PID_ENTER_AGENTMODE_REQ":            51,
	"PID_ENTER_AGENTMODE_ACK":            52,
	"PID_QUIT_AGENTMODE_REQ":             53,
	"PID_QUIT_AGENTMODE_ACK":             54,
	"PID_REG_REQ":                        55,
	"PID_REG_ACK":                        56,
	"PID_GAMESTATE_REQ":                  57,
	"PID_GAMESTATE_ACK":                  58,
	"PID_FEEDBACK_REQ":                   59,
	"PID_APPLYDISSOLVE_REQ":              60,
	"PID_APPLYDISSOLVE_ACK":              61,
	"PID_APPLYDISSOLVEBACK_REQ":          62,
	"PID_APPLYDISSOLVEBACK_ACK":          63,
	"PID_COMMONBCKICKOUT":                64,
	"PID_ACTCHI_REQ":                     65,
	"PID_ACTCHI_ACK":                     66,
	"PID_CHANGSHA_GANG_CARD_ACK":         67,
	"PID_ACTCHANGSHAQISHOUHU":            68,
	"PID_ACTCHANGSHAQISHOUHU_ACK":        69,
	"PID_GAME_CHANGSHQISHOUHUOVERTURN":   70,
	"PID_GAME_CHANGSHAOVERTURNAFTERGANG": 71,
	"PID_GAME_ACKACTHUCHANGSHA":          72,
	"PID_GAME_DEALHAIDICARDS":            73,
	"PID_GAME_REQDEALHAIDICARDS":         74,
	"PID_GAME_ACKDEALHAIDICARDS":         75,
	"PID_COMMONBCUSERBREAK":              76,
	"PID_COMMONREQRECONNECT":             77,
	"PID_GAMEREQBUXIAZI":                 78,
	"PID_GAMEACKBUXIAZI":                 79,
	"PID_OFFLINE_REQ":                    80,
	"PID_RECONNECT_ACK":                  81,
	"PID_BC_BAOTING":                     82,
	"PID_REQ_BAOTING":                    83,
	"PID_ACK_BAOTING":                    84,
	"PID_BC_FENZHANG":                    85,
	"PID_BC_PIAO":                        86,
	"PID_REQ_PIAO":                       87,
	"PID_ACK_PIAO":                       88,
	"PID_REQ_FLY":                        89,
	"PID_ACK_FLY":                        90,
	"PID_REQ_TI":                         91,
	"PID_ACK_TI":                         92,
	"PID_BC_LEAVE_TIMEOUT":               93,
	"PID_ACK_JIAOINFOS":                  94,
	"PID_REQ_GANG":                       95,
	"PID_ACK_GANG":                       96,
	"PID_REQ_KICKOUT":                    97,
	"PID_ACK_TINGINFOS":                  98,
	"PID_ACK_BUHUA":                      99,
	"PID_BC_SHANGGA":                     100,
	"PID_REQ_SHANGGA":                    101,
	"PID_ACK_SHANGGA":                    102,
	"PID_REQ_LIST_COIN_DESK":             103,
	"PID_ACK_LIST_COIN_DESK":             104,
}

func (x EProtoId) Enum() *EProtoId {
	p := new(EProtoId)
	*p = x
	return p
}
func (x EProtoId) String() string {
	return proto.EnumName(EProtoId_name, int32(x))
}
func (x *EProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoId_value, data, "EProtoId")
	if err != nil {
		return err
	}
	*x = EProtoId(value)
	return nil
}
func (EProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrorCode int32

const (
	ErrorCode_EC_SUCCESS ErrorCode = 0
	// -101   -200	游戏异常
	ErrorCode_EC_CREATE_DESK_DIAMOND_NOTENOUGH ErrorCode = -101
	ErrorCode_EC_CREATE_DESK_USER_NOTFOUND     ErrorCode = -102
	ErrorCode_EC_INTO_DESK_NOTFOUND            ErrorCode = -103
	ErrorCode_EC_GAME_READY_REPEAT             ErrorCode = -110
	ErrorCode_EC_GAME_READY_CHIP_NOT_ENOUGH    ErrorCode = -111
)

var ErrorCode_name = map[int32]string{
	0:    "EC_SUCCESS",
	-101: "EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "EC_CREATE_DESK_USER_NOTFOUND",
	-103: "EC_INTO_DESK_NOTFOUND",
	-110: "EC_GAME_READY_REPEAT",
	-111: "EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var ErrorCode_value = map[string]int32{
	"EC_SUCCESS":                       0,
	"EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"EC_INTO_DESK_NOTFOUND":            -103,
	"EC_GAME_READY_REPEAT":             -110,
	"EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MJOption int32

const (
	MJOption_EXCHANGE_CARDS       MJOption = 1
	MJOption_ZIMO_JIA_DI          MJOption = 2
	MJOption_ZIMO_JIA_FAN         MJOption = 3
	MJOption_DIANGANG_HUA_DIANPAO MJOption = 4
	MJOption_DIANGANG_HUA_ZIMO    MJOption = 5
	MJOption_YAOJIU_JIANGDUI      MJOption = 6
	MJOption_MENQING_MID_CARD     MJOption = 7
	MJOption_TIAN_DI_HU           MJOption = 8
	MJOption_KA_ER_TIAO           MJOption = 9
	// 三人两房牌
	MJOption_DIANPAO_CAN_HU MJOption = 10
	MJOption_DUIDUIHU_2_FAN MJOption = 11
	MJOption_JIA_XIN_WU     MJOption = 12
	// 倒倒胡
	MJOption_DDH_QIDUI_HU   MJOption = 13
	MJOption_DDH_ZIMO_HU    MJOption = 14
	MJOption_DDH_DIANPAO_HU MJOption = 15
)

var MJOption_name = map[int32]string{
	1:  "EXCHANGE_CARDS",
	2:  "ZIMO_JIA_DI",
	3:  "ZIMO_JIA_FAN",
	4:  "DIANGANG_HUA_DIANPAO",
	5:  "DIANGANG_HUA_ZIMO",
	6:  "YAOJIU_JIANGDUI",
	7:  "MENQING_MID_CARD",
	8:  "TIAN_DI_HU",
	9:  "KA_ER_TIAO",
	10: "DIANPAO_CAN_HU",
	11: "DUIDUIHU_2_FAN",
	12: "JIA_XIN_WU",
	13: "DDH_QIDUI_HU",
	14: "DDH_ZIMO_HU",
	15: "DDH_DIANPAO_HU",
}
var MJOption_value = map[string]int32{
	"EXCHANGE_CARDS":       1,
	"ZIMO_JIA_DI":          2,
	"ZIMO_JIA_FAN":         3,
	"DIANGANG_HUA_DIANPAO": 4,
	"DIANGANG_HUA_ZIMO":    5,
	"YAOJIU_JIANGDUI":      6,
	"MENQING_MID_CARD":     7,
	"TIAN_DI_HU":           8,
	"KA_ER_TIAO":           9,
	"DIANPAO_CAN_HU":       10,
	"DUIDUIHU_2_FAN":       11,
	"JIA_XIN_WU":           12,
	"DDH_QIDUI_HU":         13,
	"DDH_ZIMO_HU":          14,
	"DDH_DIANPAO_HU":       15,
}

func (x MJOption) Enum() *MJOption {
	p := new(MJOption)
	*p = x
	return p
}
func (x MJOption) String() string {
	return proto.EnumName(MJOption_name, int32(x))
}
func (x *MJOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJOption_value, data, "MJOption")
	if err != nil {
		return err
	}
	*x = MJOption(value)
	return nil
}
func (MJOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type MJRoomType int32

const (
	MJRoomType_roomType_xueZhanDaoDi      MJRoomType = 0
	MJRoomType_roomType_sanRenLiangFang   MJRoomType = 1
	MJRoomType_roomType_siRenLiangFang    MJRoomType = 2
	MJRoomType_roomType_deYangMaJiang     MJRoomType = 3
	MJRoomType_roomType_daoDaoHu          MJRoomType = 4
	MJRoomType_roomType_xueLiuChengHe     MJRoomType = 5
	MJRoomType_roomType_liangRenLiangFang MJRoomType = 6
	MJRoomType_roomType_liangRenSanFang   MJRoomType = 7
	MJRoomType_roomType_sanRenSanFang     MJRoomType = 8
	MJRoomType_roomType_changSha          MJRoomType = 9
	MJRoomType_roomType_zhuoxiazi         MJRoomType = 10
	MJRoomType_roomType_mj_baishan        MJRoomType = 12
	MJRoomType_roomType_mj_songjianghe    MJRoomType = 13
	MJRoomType_roomType_mj_zhuanzhuan     MJRoomType = 14
	MJRoomType_roomType_mj_hongzhong      MJRoomType = 15
	MJRoomType_roomType_mj_hainan         MJRoomType = 16
)

var MJRoomType_name = map[int32]string{
	0:  "roomType_xueZhanDaoDi",
	1:  "roomType_sanRenLiangFang",
	2:  "roomType_siRenLiangFang",
	3:  "roomType_deYangMaJiang",
	4:  "roomType_daoDaoHu",
	5:  "roomType_xueLiuChengHe",
	6:  "roomType_liangRenLiangFang",
	7:  "roomType_liangRenSanFang",
	8:  "roomType_sanRenSanFang",
	9:  "roomType_changSha",
	10: "roomType_zhuoxiazi",
	12: "roomType_mj_baishan",
	13: "roomType_mj_songjianghe",
	14: "roomType_mj_zhuanzhuan",
	15: "roomType_mj_hongzhong",
	16: "roomType_mj_hainan",
}
var MJRoomType_value = map[string]int32{
	"roomType_xueZhanDaoDi":      0,
	"roomType_sanRenLiangFang":   1,
	"roomType_siRenLiangFang":    2,
	"roomType_deYangMaJiang":     3,
	"roomType_daoDaoHu":          4,
	"roomType_xueLiuChengHe":     5,
	"roomType_liangRenLiangFang": 6,
	"roomType_liangRenSanFang":   7,
	"roomType_sanRenSanFang":     8,
	"roomType_changSha":          9,
	"roomType_zhuoxiazi":         10,
	"roomType_mj_baishan":        12,
	"roomType_mj_songjianghe":    13,
	"roomType_mj_zhuanzhuan":     14,
	"roomType_mj_hongzhong":      15,
	"roomType_mj_hainan":         16,
}

func (x MJRoomType) Enum() *MJRoomType {
	p := new(MJRoomType)
	*p = x
	return p
}
func (x MJRoomType) String() string {
	return proto.EnumName(MJRoomType_name, int32(x))
}
func (x *MJRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJRoomType_value, data, "MJRoomType")
	if err != nil {
		return err
	}
	*x = MJRoomType(value)
	return nil
}
func (MJRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 麻将花色
type MahjongColor int32

const (
	MahjongColor_WAN  MahjongColor = 1
	MahjongColor_TIAO MahjongColor = 2
	MahjongColor_TONG MahjongColor = 3
)

var MahjongColor_name = map[int32]string{
	1: "WAN",
	2: "TIAO",
	3: "TONG",
}
var MahjongColor_value = map[string]int32{
	"WAN":  1,
	"TIAO": 2,
	"TONG": 3,
}

func (x MahjongColor) Enum() *MahjongColor {
	p := new(MahjongColor)
	*p = x
	return p
}
func (x MahjongColor) String() string {
	return proto.EnumName(MahjongColor_name, int32(x))
}
func (x *MahjongColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MahjongColor_value, data, "MahjongColor")
	if err != nil {
		return err
	}
	*x = MahjongColor(value)
	return nil
}
func (MahjongColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 杠的类型
type GangType int32

const (
	GangType_G_MINGGANG GangType = 1
	GangType_G_BAGANG   GangType = 2
	GangType_G_ANGANG   GangType = 3
)

var GangType_name = map[int32]string{
	1: "G_MINGGANG",
	2: "G_BAGANG",
	3: "G_ANGANG",
}
var GangType_value = map[string]int32{
	"G_MINGGANG": 1,
	"G_BAGANG":   2,
	"G_ANGANG":   3,
}

func (x GangType) Enum() *GangType {
	p := new(GangType)
	*p = x
	return p
}
func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (x *GangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GangType_value, data, "GangType")
	if err != nil {
		return err
	}
	*x = GangType(value)
	return nil
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 碰杠类型(客户端显示用)
type ComposeCardType int32

const (
	ComposeCardType_C_MINGGANG ComposeCardType = 1
	ComposeCardType_C_BAGANG   ComposeCardType = 2
	ComposeCardType_C_ANGANG   ComposeCardType = 3
	ComposeCardType_C_PENG     ComposeCardType = 4
	ComposeCardType_C_CHI      ComposeCardType = 5
)

var ComposeCardType_name = map[int32]string{
	1: "C_MINGGANG",
	2: "C_BAGANG",
	3: "C_ANGANG",
	4: "C_PENG",
	5: "C_CHI",
}
var ComposeCardType_value = map[string]int32{
	"C_MINGGANG": 1,
	"C_BAGANG":   2,
	"C_ANGANG":   3,
	"C_PENG":     4,
	"C_CHI":      5,
}

func (x ComposeCardType) Enum() *ComposeCardType {
	p := new(ComposeCardType)
	*p = x
	return p
}
func (x ComposeCardType) String() string {
	return proto.EnumName(ComposeCardType_name, int32(x))
}
func (x *ComposeCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComposeCardType_value, data, "ComposeCardType")
	if err != nil {
		return err
	}
	*x = ComposeCardType(value)
	return nil
}
func (ComposeCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 胡牌的类型
type HuType int32

const (
	HuType_H_NORMAL HuType = 0
	// 附加番数(特定操作)
	HuType_H_TianHu            HuType = 1
	HuType_H_DiHu              HuType = 2
	HuType_H_GangShangHua      HuType = 3
	HuType_H_GangShangPao      HuType = 4
	HuType_H_QiangGang         HuType = 5
	HuType_H_HaiDiLao          HuType = 6
	HuType_H_HaiDiPao          HuType = 7
	HuType_H_HaidiGangShangHua HuType = 8
	HuType_H_HaidiGangShangPao HuType = 9
	//
	HuType_H_JinGouDiao HuType = 10
	// 可选附加玩法
	HuType_H_ZiMoJiaFan        HuType = 11
	HuType_H_ZiMoJiaDi         HuType = 12
	HuType_H_changsha_qishouhu HuType = 13
)

var HuType_name = map[int32]string{
	0:  "H_NORMAL",
	1:  "H_TianHu",
	2:  "H_DiHu",
	3:  "H_GangShangHua",
	4:  "H_GangShangPao",
	5:  "H_QiangGang",
	6:  "H_HaiDiLao",
	7:  "H_HaiDiPao",
	8:  "H_HaidiGangShangHua",
	9:  "H_HaidiGangShangPao",
	10: "H_JinGouDiao",
	11: "H_ZiMoJiaFan",
	12: "H_ZiMoJiaDi",
	13: "H_changsha_qishouhu",
}
var HuType_value = map[string]int32{
	"H_NORMAL":            0,
	"H_TianHu":            1,
	"H_DiHu":              2,
	"H_GangShangHua":      3,
	"H_GangShangPao":      4,
	"H_QiangGang":         5,
	"H_HaiDiLao":          6,
	"H_HaiDiPao":          7,
	"H_HaidiGangShangHua": 8,
	"H_HaidiGangShangPao": 9,
	"H_JinGouDiao":        10,
	"H_ZiMoJiaFan":        11,
	"H_ZiMoJiaDi":         12,
	"H_changsha_qishouhu": 13,
}

func (x HuType) Enum() *HuType {
	p := new(HuType)
	*p = x
	return p
}
func (x HuType) String() string {
	return proto.EnumName(HuType_name, int32(x))
}
func (x *HuType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HuType_value, data, "HuType")
	if err != nil {
		return err
	}
	*x = HuType(value)
	return nil
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type PaiType int32

const (
	PaiType_H_DuiDuiHu   PaiType = 1
	PaiType_H_QingYiSe   PaiType = 2
	PaiType_H_QiDui      PaiType = 3
	PaiType_H_DaiYaoJiu  PaiType = 4
	PaiType_H_LongQiDui  PaiType = 5
	PaiType_H_JiangDui   PaiType = 6
	PaiType_H_MenQing    PaiType = 7
	PaiType_H_ZhongZhang PaiType = 8
	// (内江麻将)
	PaiType_H_KaErTiao PaiType = 9
	// (德阳麻将)
	PaiType_H_JiaXin5       PaiType = 10
	PaiType_H_QingLongQiDui PaiType = 11
	PaiType_H_QingQiDui     PaiType = 12
	PaiType_H_PingHu        PaiType = 13
	// 长沙麻将
	PaiType_H_CHANGSHA_DAXISI                  PaiType = 14
	PaiType_H_CHANGSHA_BANBANHU                PaiType = 15
	PaiType_H_CHANGSHA_QUEYISE                 PaiType = 16
	PaiType_H_CHANGSHA_LIULIUSHUN              PaiType = 17
	PaiType_H_CHANGSHA_PINGHU                  PaiType = 18
	PaiType_H_CHANGSHA_PENGPENGHU              PaiType = 19
	PaiType_H_CHANGSHA_JIANGJIANGHU            PaiType = 20
	PaiType_H_CHANGSHA_QINGYISE                PaiType = 21
	PaiType_H_CHANGSHA_QIXIAODUI               PaiType = 22
	PaiType_H_CHANGSHA_QIXIAODUI_HAOHUA        PaiType = 23
	PaiType_H_CHANGSHA_QIXIAODUI_HAOHUA_DOUBLE PaiType = 24
	PaiType_H_CHANGSHA_QUANQIUREN              PaiType = 25
)

var PaiType_name = map[int32]string{
	1:  "H_DuiDuiHu",
	2:  "H_QingYiSe",
	3:  "H_QiDui",
	4:  "H_DaiYaoJiu",
	5:  "H_LongQiDui",
	6:  "H_JiangDui",
	7:  "H_MenQing",
	8:  "H_ZhongZhang",
	9:  "H_KaErTiao",
	10: "H_JiaXin5",
	11: "H_QingLongQiDui",
	12: "H_QingQiDui",
	13: "H_PingHu",
	14: "H_CHANGSHA_DAXISI",
	15: "H_CHANGSHA_BANBANHU",
	16: "H_CHANGSHA_QUEYISE",
	17: "H_CHANGSHA_LIULIUSHUN",
	18: "H_CHANGSHA_PINGHU",
	19: "H_CHANGSHA_PENGPENGHU",
	20: "H_CHANGSHA_JIANGJIANGHU",
	21: "H_CHANGSHA_QINGYISE",
	22: "H_CHANGSHA_QIXIAODUI",
	23: "H_CHANGSHA_QIXIAODUI_HAOHUA",
	24: "H_CHANGSHA_QIXIAODUI_HAOHUA_DOUBLE",
	25: "H_CHANGSHA_QUANQIUREN",
}
var PaiType_value = map[string]int32{
	"H_DuiDuiHu":                         1,
	"H_QingYiSe":                         2,
	"H_QiDui":                            3,
	"H_DaiYaoJiu":                        4,
	"H_LongQiDui":                        5,
	"H_JiangDui":                         6,
	"H_MenQing":                          7,
	"H_ZhongZhang":                       8,
	"H_KaErTiao":                         9,
	"H_JiaXin5":                          10,
	"H_QingLongQiDui":                    11,
	"H_QingQiDui":                        12,
	"H_PingHu":                           13,
	"H_CHANGSHA_DAXISI":                  14,
	"H_CHANGSHA_BANBANHU":                15,
	"H_CHANGSHA_QUEYISE":                 16,
	"H_CHANGSHA_LIULIUSHUN":              17,
	"H_CHANGSHA_PINGHU":                  18,
	"H_CHANGSHA_PENGPENGHU":              19,
	"H_CHANGSHA_JIANGJIANGHU":            20,
	"H_CHANGSHA_QINGYISE":                21,
	"H_CHANGSHA_QIXIAODUI":               22,
	"H_CHANGSHA_QIXIAODUI_HAOHUA":        23,
	"H_CHANGSHA_QIXIAODUI_HAOHUA_DOUBLE": 24,
	"H_CHANGSHA_QUANQIUREN":              25,
}

func (x PaiType) Enum() *PaiType {
	p := new(PaiType)
	*p = x
	return p
}
func (x PaiType) String() string {
	return proto.EnumName(PaiType_name, int32(x))
}
func (x *PaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaiType_value, data, "PaiType")
	if err != nil {
		return err
	}
	*x = PaiType(value)
	return nil
}
func (PaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type MJUserGameStatus int32

const (
	MJUserGameStatus_U_INIT     MJUserGameStatus = 0
	MJUserGameStatus_U_DINGQUE  MJUserGameStatus = 1
	MJUserGameStatus_U_EXCHANGE MJUserGameStatus = 2
	MJUserGameStatus_U_PLAYING  MJUserGameStatus = 3
	MJUserGameStatus_U_FINISH   MJUserGameStatus = 4
)

var MJUserGameStatus_name = map[int32]string{
	0: "U_INIT",
	1: "U_DINGQUE",
	2: "U_EXCHANGE",
	3: "U_PLAYING",
	4: "U_FINISH",
}
var MJUserGameStatus_value = map[string]int32{
	"U_INIT":     0,
	"U_DINGQUE":  1,
	"U_EXCHANGE": 2,
	"U_PLAYING":  3,
	"U_FINISH":   4,
}

func (x MJUserGameStatus) Enum() *MJUserGameStatus {
	p := new(MJUserGameStatus)
	*p = x
	return p
}
func (x MJUserGameStatus) String() string {
	return proto.EnumName(MJUserGameStatus_name, int32(x))
}
func (x *MJUserGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJUserGameStatus_value, data, "MJUserGameStatus")
	if err != nil {
		return err
	}
	*x = MJUserGameStatus(value)
	return nil
}
func (MJUserGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DeskGameStatus int32

const (
	DeskGameStatus_INIT     DeskGameStatus = 0
	DeskGameStatus_FAPAI    DeskGameStatus = 1
	DeskGameStatus_EXCHANGE DeskGameStatus = 2
	DeskGameStatus_DINGQUE  DeskGameStatus = 3
	DeskGameStatus_PLAYING  DeskGameStatus = 4
	DeskGameStatus_FINISH   DeskGameStatus = 5
	DeskGameStatus_PIAO     DeskGameStatus = 6
)

var DeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "FAPAI",
	2: "EXCHANGE",
	3: "DINGQUE",
	4: "PLAYING",
	5: "FINISH",
	6: "PIAO",
}
var DeskGameStatus_value = map[string]int32{
	"INIT":     0,
	"FAPAI":    1,
	"EXCHANGE": 2,
	"DINGQUE":  3,
	"PLAYING":  4,
	"FINISH":   5,
	"PIAO":     6,
}

func (x DeskGameStatus) Enum() *DeskGameStatus {
	p := new(DeskGameStatus)
	*p = x
	return p
}
func (x DeskGameStatus) String() string {
	return proto.EnumName(DeskGameStatus_name, int32(x))
}
func (x *DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeskGameStatus_value, data, "DeskGameStatus")
	if err != nil {
		return err
	}
	*x = DeskGameStatus(value)
	return nil
}
func (DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// ProtoHeader 需要在每个 Message 中作为第一个字段
type ProtoHeader struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Code             *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProtoHeader) Reset()                    { *m = ProtoHeader{} }
func (m *ProtoHeader) String() string            { return proto.CompactTextString(m) }
func (*ProtoHeader) ProtoMessage()               {}
func (*ProtoHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoHeader) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ProtoHeader) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ProtoHeader) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ProtoHeader) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type Heartbeat struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Heartbeat) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 微信信息
type WeixinInfo struct {
	OpenId           *string `protobuf:"bytes,1,opt,name=openId" json:"openId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	HeadUrl          *string `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Sex              *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	City             *string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UnionId          *string `protobuf:"bytes,6,opt,name=unionId" json:"unionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WeixinInfo) Reset()                    { *m = WeixinInfo{} }
func (m *WeixinInfo) String() string            { return proto.CompactTextString(m) }
func (*WeixinInfo) ProtoMessage()               {}
func (*WeixinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WeixinInfo) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *WeixinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WeixinInfo) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WeixinInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *WeixinInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WeixinInfo) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

// 麻将牌
type CardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *PlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *PlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *PlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

// 长沙麻将的配置
type ChangShaPlayOptions struct {
	PlayerCount      *int32 `protobuf:"varint,1,opt,name=playerCount" json:"playerCount,omitempty"`
	IgnoreBank       *bool  `protobuf:"varint,2,opt,name=ignoreBank" json:"ignoreBank,omitempty"`
	BirdCount        *int32 `protobuf:"varint,3,opt,name=birdCount" json:"birdCount,omitempty"`
	BirdMultiple     *int32 `protobuf:"varint,4,opt,name=birdMultiple" json:"birdMultiple,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangShaPlayOptions) Reset()                    { *m = ChangShaPlayOptions{} }
func (m *ChangShaPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*ChangShaPlayOptions) ProtoMessage()               {}
func (*ChangShaPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChangShaPlayOptions) GetPlayerCount() int32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *ChangShaPlayOptions) GetIgnoreBank() bool {
	if m != nil && m.IgnoreBank != nil {
		return *m.IgnoreBank
	}
	return false
}

func (m *ChangShaPlayOptions) GetBirdCount() int32 {
	if m != nil && m.BirdCount != nil {
		return *m.BirdCount
	}
	return 0
}

func (m *ChangShaPlayOptions) GetBirdMultiple() int32 {
	if m != nil && m.BirdMultiple != nil {
		return *m.BirdMultiple
	}
	return 0
}

// 白山麻将的配置
type BaiShanPlayOptions struct {
	DianPaoBaoFen    *bool  `protobuf:"varint,1,opt,name=dianPaoBaoFen" json:"dianPaoBaoFen,omitempty"`
	PaymentOption    *int32 `protobuf:"varint,2,opt,name=paymentOption" json:"paymentOption,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BaiShanPlayOptions) Reset()                    { *m = BaiShanPlayOptions{} }
func (m *BaiShanPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*BaiShanPlayOptions) ProtoMessage()               {}
func (*BaiShanPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BaiShanPlayOptions) GetDianPaoBaoFen() bool {
	if m != nil && m.DianPaoBaoFen != nil {
		return *m.DianPaoBaoFen
	}
	return false
}

func (m *BaiShanPlayOptions) GetPaymentOption() int32 {
	if m != nil && m.PaymentOption != nil {
		return *m.PaymentOption
	}
	return 0
}

// 转转麻将的配置
type ZhuanZhuanPlayOptions struct {
	ZhaMa            *int32 `protobuf:"varint,1,opt,name=zhaMa" json:"zhaMa,omitempty"`
	IsZhaMaJiaBei    *bool  `protobuf:"varint,2,opt,name=isZhaMaJiaBei" json:"isZhaMaJiaBei,omitempty"`
	CanJiePaoHu      *bool  `protobuf:"varint,3,opt,name=canJiePaoHu" json:"canJiePaoHu,omitempty"`
	IsBaHongZhong    *bool  `protobuf:"varint,4,opt,name=isBaHongZhong" json:"isBaHongZhong,omitempty"`
	IsGoldBird       *bool  `protobuf:"varint,5,opt,name=isGoldBird" json:"isGoldBird,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ZhuanZhuanPlayOptions) Reset()                    { *m = ZhuanZhuanPlayOptions{} }
func (m *ZhuanZhuanPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*ZhuanZhuanPlayOptions) ProtoMessage()               {}
func (*ZhuanZhuanPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ZhuanZhuanPlayOptions) GetZhaMa() int32 {
	if m != nil && m.ZhaMa != nil {
		return *m.ZhaMa
	}
	return 0
}

func (m *ZhuanZhuanPlayOptions) GetIsZhaMaJiaBei() bool {
	if m != nil && m.IsZhaMaJiaBei != nil {
		return *m.IsZhaMaJiaBei
	}
	return false
}

func (m *ZhuanZhuanPlayOptions) GetCanJiePaoHu() bool {
	if m != nil && m.CanJiePaoHu != nil {
		return *m.CanJiePaoHu
	}
	return false
}

func (m *ZhuanZhuanPlayOptions) GetIsBaHongZhong() bool {
	if m != nil && m.IsBaHongZhong != nil {
		return *m.IsBaHongZhong
	}
	return false
}

func (m *ZhuanZhuanPlayOptions) GetIsGoldBird() bool {
	if m != nil && m.IsGoldBird != nil {
		return *m.IsGoldBird
	}
	return false
}

// 海南麻将的配置
type HaiNanPlayOptions struct {
	IsYouFan         *bool  `protobuf:"varint,1,opt,name=isYouFan" json:"isYouFan,omitempty"`
	IsZhuangXian     *bool  `protobuf:"varint,2,opt,name=isZhuangXian" json:"isZhuangXian,omitempty"`
	IsLianZhuang     *bool  `protobuf:"varint,3,opt,name=isLianZhuang" json:"isLianZhuang,omitempty"`
	IsShangGa        *bool  `protobuf:"varint,4,opt,name=isShangGa" json:"isShangGa,omitempty"`
	IsShangGaFree    *bool  `protobuf:"varint,5,opt,name=isShangGaFree" json:"isShangGaFree,omitempty"`
	IsLiuJuSuanFen   *bool  `protobuf:"varint,6,opt,name=isLiuJuSuanFen" json:"isLiuJuSuanFen,omitempty"`
	IsHuaHu          *bool  `protobuf:"varint,7,opt,name=isHuaHu" json:"isHuaHu,omitempty"`
	IsFangGouJiao    *bool  `protobuf:"varint,8,opt,name=isFangGouJiao" json:"isFangGouJiao,omitempty"`
	IsHaiDiBaoPai    *bool  `protobuf:"varint,9,opt,name=isHaiDiBaoPai" json:"isHaiDiBaoPai,omitempty"`
	IsAAPayRC        *bool  `protobuf:"varint,10,opt,name=isAAPayRC" json:"isAAPayRC,omitempty"`
	IsWuFengPai      *bool  `protobuf:"varint,11,opt,name=isWuFengPai" json:"isWuFengPai,omitempty"`
	IsJiaoLing       *bool  `protobuf:"varint,12,opt,name=isJiaoLing" json:"isJiaoLing,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HaiNanPlayOptions) Reset()                    { *m = HaiNanPlayOptions{} }
func (m *HaiNanPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*HaiNanPlayOptions) ProtoMessage()               {}
func (*HaiNanPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HaiNanPlayOptions) GetIsYouFan() bool {
	if m != nil && m.IsYouFan != nil {
		return *m.IsYouFan
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsZhuangXian() bool {
	if m != nil && m.IsZhuangXian != nil {
		return *m.IsZhuangXian
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsLianZhuang() bool {
	if m != nil && m.IsLianZhuang != nil {
		return *m.IsLianZhuang
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsShangGa() bool {
	if m != nil && m.IsShangGa != nil {
		return *m.IsShangGa
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsShangGaFree() bool {
	if m != nil && m.IsShangGaFree != nil {
		return *m.IsShangGaFree
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsLiuJuSuanFen() bool {
	if m != nil && m.IsLiuJuSuanFen != nil {
		return *m.IsLiuJuSuanFen
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsHuaHu() bool {
	if m != nil && m.IsHuaHu != nil {
		return *m.IsHuaHu
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsFangGouJiao() bool {
	if m != nil && m.IsFangGouJiao != nil {
		return *m.IsFangGouJiao
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsHaiDiBaoPai() bool {
	if m != nil && m.IsHaiDiBaoPai != nil {
		return *m.IsHaiDiBaoPai
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsAAPayRC() bool {
	if m != nil && m.IsAAPayRC != nil {
		return *m.IsAAPayRC
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsWuFengPai() bool {
	if m != nil && m.IsWuFengPai != nil {
		return *m.IsWuFengPai
	}
	return false
}

func (m *HaiNanPlayOptions) GetIsJiaoLing() bool {
	if m != nil && m.IsJiaoLing != nil {
		return *m.IsJiaoLing
	}
	return false
}

type RoomTypeInfo struct {
	MjRoomType            *MJRoomType            `protobuf:"varint,1,opt,name=mjRoomType,enum=mjproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout            *int32                 `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax                *int64                 `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions           *PlayOptions           `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum              *int32                 `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement            *int32                 `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue             *int64                 `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	PlayerCount           *int32                 `protobuf:"varint,8,opt,name=playerCount" json:"playerCount,omitempty"`
	ChangShaPlayOptions   *ChangShaPlayOptions   `protobuf:"bytes,9,opt,name=changShaPlayOptions" json:"changShaPlayOptions,omitempty"`
	BaiShanPlayOptions    *BaiShanPlayOptions    `protobuf:"bytes,10,opt,name=baiShanPlayOptions" json:"baiShanPlayOptions,omitempty"`
	ZhuanzhuanPlayOptions *ZhuanZhuanPlayOptions `protobuf:"bytes,11,opt,name=zhuanzhuanPlayOptions" json:"zhuanzhuanPlayOptions,omitempty"`
	HainanPlayOptions     *HaiNanPlayOptions     `protobuf:"bytes,12,opt,name=hainanPlayOptions" json:"hainanPlayOptions,omitempty"`
	IsPiaoFen             *bool                  `protobuf:"varint,13,opt,name=isPiaoFen" json:"isPiaoFen,omitempty"`
	IsPiaoFenFree         *bool                  `protobuf:"varint,14,opt,name=isPiaoFenFree" json:"isPiaoFenFree,omitempty"`
	IsCoinDesk            *bool                  `protobuf:"varint,15,opt,name=isCoinDesk" json:"isCoinDesk,omitempty"`
	CoinLimitEnter        *int64                 `protobuf:"varint,16,opt,name=coinLimitEnter" json:"coinLimitEnter,omitempty"`
	IsPrivated            *bool                  `protobuf:"varint,17,opt,name=isPrivated" json:"isPrivated,omitempty"`
	CoinRoundFee          *int64                 `protobuf:"varint,18,opt,name=coinRoundFee" json:"coinRoundFee,omitempty"`
	XXX_unrecognized      []byte                 `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *RoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayerCount() int32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *RoomTypeInfo) GetChangShaPlayOptions() *ChangShaPlayOptions {
	if m != nil {
		return m.ChangShaPlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetBaiShanPlayOptions() *BaiShanPlayOptions {
	if m != nil {
		return m.BaiShanPlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetZhuanzhuanPlayOptions() *ZhuanZhuanPlayOptions {
	if m != nil {
		return m.ZhuanzhuanPlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetHainanPlayOptions() *HaiNanPlayOptions {
	if m != nil {
		return m.HainanPlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetIsPiaoFen() bool {
	if m != nil && m.IsPiaoFen != nil {
		return *m.IsPiaoFen
	}
	return false
}

func (m *RoomTypeInfo) GetIsPiaoFenFree() bool {
	if m != nil && m.IsPiaoFenFree != nil {
		return *m.IsPiaoFenFree
	}
	return false
}

func (m *RoomTypeInfo) GetIsCoinDesk() bool {
	if m != nil && m.IsCoinDesk != nil {
		return *m.IsCoinDesk
	}
	return false
}

func (m *RoomTypeInfo) GetCoinLimitEnter() int64 {
	if m != nil && m.CoinLimitEnter != nil {
		return *m.CoinLimitEnter
	}
	return 0
}

func (m *RoomTypeInfo) GetIsPrivated() bool {
	if m != nil && m.IsPrivated != nil {
		return *m.IsPrivated
	}
	return false
}

func (m *RoomTypeInfo) GetCoinRoundFee() int64 {
	if m != nil && m.CoinRoundFee != nil {
		return *m.CoinRoundFee
	}
	return 0
}

type ComposeCard struct {
	Value            *int32  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	ChiValue         []int32 `protobuf:"varint,3,rep,name=chiValue" json:"chiValue,omitempty"`
	SendUserId       *uint32 `protobuf:"varint,4,opt,name=sendUserId" json:"sendUserId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ComposeCard) Reset()                    { *m = ComposeCard{} }
func (m *ComposeCard) String() string            { return proto.CompactTextString(m) }
func (*ComposeCard) ProtoMessage()               {}
func (*ComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ComposeCard) GetChiValue() []int32 {
	if m != nil {
		return m.ChiValue
	}
	return nil
}

func (m *ComposeCard) GetSendUserId() uint32 {
	if m != nil && m.SendUserId != nil {
		return *m.SendUserId
	}
	return 0
}

type PlayerCard struct {
	HandCard         []*CardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*ComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []*CardInfo    `protobuf:"bytes,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           []*CardInfo    `protobuf:"bytes,4,rep,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32        `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	HandCardCount    *int32         `protobuf:"varint,6,opt,name=handCardCount" json:"handCardCount,omitempty"`
	IsQianNiu        *bool          `protobuf:"varint,7,opt,name=isQianNiu" json:"isQianNiu,omitempty"`
	GangBeans        []*GangBean    `protobuf:"bytes,8,rep,name=gangBeans" json:"gangBeans,omitempty"`
	BuHuaCardIds     []int32        `protobuf:"varint,9,rep,name=buHuaCardIds" json:"buHuaCardIds,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerCard) Reset()                    { *m = PlayerCard{} }
func (m *PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PlayerCard) ProtoMessage()               {}
func (*PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PlayerCard) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PlayerCard) GetComposeCard() []*ComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *PlayerCard) GetOutCard() []*CardInfo {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *PlayerCard) GetHuCard() []*CardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerCard) GetHandCardCount() int32 {
	if m != nil && m.HandCardCount != nil {
		return *m.HandCardCount
	}
	return 0
}

func (m *PlayerCard) GetIsQianNiu() bool {
	if m != nil && m.IsQianNiu != nil {
		return *m.IsQianNiu
	}
	return false
}

func (m *PlayerCard) GetGangBeans() []*GangBean {
	if m != nil {
		return m.GangBeans
	}
	return nil
}

func (m *PlayerCard) GetBuHuaCardIds() []int32 {
	if m != nil {
		return m.BuHuaCardIds
	}
	return nil
}

// 一组能杠的牌
type GangBean struct {
	Type             *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Cards            []int32 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GangBean) Reset()                    { *m = GangBean{} }
func (m *GangBean) String() string            { return proto.CompactTextString(m) }
func (*GangBean) ProtoMessage()               {}
func (*GangBean) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GangBean) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GangBean) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type PlayerInfo struct {
	IsBanker         *bool       `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64      `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string     `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32      `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32     `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool       `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32      `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	BDingQue         *int32      `protobuf:"varint,9,opt,name=bDingQue" json:"bDingQue,omitempty"`
	BExchanged       *int32      `protobuf:"varint,10,opt,name=bExchanged" json:"bExchanged,omitempty"`
	NHuPai           *int32      `protobuf:"varint,11,opt,name=nHuPai" json:"nHuPai,omitempty"`
	QuePai           *int32      `protobuf:"varint,12,opt,name=quePai" json:"quePai,omitempty"`
	WxInfo           *WeixinInfo `protobuf:"bytes,13,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32      `protobuf:"varint,14,opt,name=GameStatus" json:"GameStatus,omitempty"`
	AgentMode        *bool       `protobuf:"varint,15,opt,name=agentMode" json:"agentMode,omitempty"`
	Ip               *string     `protobuf:"bytes,16,opt,name=ip" json:"ip,omitempty"`
	XiaCount         *int32      `protobuf:"varint,17,opt,name=xiaCount" json:"xiaCount,omitempty"`
	IsBaoTing        *bool       `protobuf:"varint,18,opt,name=isBaoTing" json:"isBaoTing,omitempty"`
	IsQianniu        *bool       `protobuf:"varint,19,opt,name=isQianniu" json:"isQianniu,omitempty"`
	Address          *string     `protobuf:"bytes,20,opt,name=address" json:"address,omitempty"`
	Shangga          *int32      `protobuf:"varint,21,opt,name=shangga" json:"shangga,omitempty"`
	Piaofen          *int32      `protobuf:"varint,22,opt,name=piaofen" json:"piaofen,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *PlayerInfo) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *PlayerInfo) GetBDingQue() int32 {
	if m != nil && m.BDingQue != nil {
		return *m.BDingQue
	}
	return 0
}

func (m *PlayerInfo) GetBExchanged() int32 {
	if m != nil && m.BExchanged != nil {
		return *m.BExchanged
	}
	return 0
}

func (m *PlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *PlayerInfo) GetQuePai() int32 {
	if m != nil && m.QuePai != nil {
		return *m.QuePai
	}
	return 0
}

func (m *PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *PlayerInfo) GetAgentMode() bool {
	if m != nil && m.AgentMode != nil {
		return *m.AgentMode
	}
	return false
}

func (m *PlayerInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *PlayerInfo) GetXiaCount() int32 {
	if m != nil && m.XiaCount != nil {
		return *m.XiaCount
	}
	return 0
}

func (m *PlayerInfo) GetIsBaoTing() bool {
	if m != nil && m.IsBaoTing != nil {
		return *m.IsBaoTing
	}
	return false
}

func (m *PlayerInfo) GetIsQianniu() bool {
	if m != nil && m.IsQianniu != nil {
		return *m.IsQianniu
	}
	return false
}

func (m *PlayerInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *PlayerInfo) GetShangga() int32 {
	if m != nil && m.Shangga != nil {
		return *m.Shangga
	}
	return 0
}

func (m *PlayerInfo) GetPiaofen() int32 {
	if m != nil && m.Piaofen != nil {
		return *m.Piaofen
	}
	return 0
}

type DeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32        `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32        `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32        `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32       `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	Dong             *uint32       `protobuf:"varint,15,opt,name=Dong" json:"Dong,omitempty"`
	CurrJiaoLing     *int32        `protobuf:"varint,16,opt,name=currJiaoLing" json:"currJiaoLing,omitempty"`
	DeskId           *int32        `protobuf:"varint,17,opt,name=deskId" json:"deskId,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeskGameInfo) Reset()                    { *m = DeskGameInfo{} }
func (m *DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DeskGameInfo) ProtoMessage()               {}
func (*DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *DeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

func (m *DeskGameInfo) GetDong() uint32 {
	if m != nil && m.Dong != nil {
		return *m.Dong
	}
	return 0
}

func (m *DeskGameInfo) GetCurrJiaoLing() int32 {
	if m != nil && m.CurrJiaoLing != nil {
		return *m.CurrJiaoLing
	}
	return 0
}

func (m *DeskGameInfo) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func init() {
	proto.RegisterType((*ProtoHeader)(nil), "mjproto.ProtoHeader")
	proto.RegisterType((*Heartbeat)(nil), "mjproto.Heartbeat")
	proto.RegisterType((*WeixinInfo)(nil), "mjproto.WeixinInfo")
	proto.RegisterType((*CardInfo)(nil), "mjproto.CardInfo")
	proto.RegisterType((*PlayOptions)(nil), "mjproto.PlayOptions")
	proto.RegisterType((*ChangShaPlayOptions)(nil), "mjproto.ChangShaPlayOptions")
	proto.RegisterType((*BaiShanPlayOptions)(nil), "mjproto.BaiShanPlayOptions")
	proto.RegisterType((*ZhuanZhuanPlayOptions)(nil), "mjproto.ZhuanZhuanPlayOptions")
	proto.RegisterType((*HaiNanPlayOptions)(nil), "mjproto.HaiNanPlayOptions")
	proto.RegisterType((*RoomTypeInfo)(nil), "mjproto.RoomTypeInfo")
	proto.RegisterType((*ComposeCard)(nil), "mjproto.ComposeCard")
	proto.RegisterType((*PlayerCard)(nil), "mjproto.PlayerCard")
	proto.RegisterType((*GangBean)(nil), "mjproto.GangBean")
	proto.RegisterType((*PlayerInfo)(nil), "mjproto.PlayerInfo")
	proto.RegisterType((*DeskGameInfo)(nil), "mjproto.DeskGameInfo")
	proto.RegisterEnum("mjproto.EProtoId", EProtoId_name, EProtoId_value)
	proto.RegisterEnum("mjproto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("mjproto.MJOption", MJOption_name, MJOption_value)
	proto.RegisterEnum("mjproto.MJRoomType", MJRoomType_name, MJRoomType_value)
	proto.RegisterEnum("mjproto.MahjongColor", MahjongColor_name, MahjongColor_value)
	proto.RegisterEnum("mjproto.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("mjproto.ComposeCardType", ComposeCardType_name, ComposeCardType_value)
	proto.RegisterEnum("mjproto.HuType", HuType_name, HuType_value)
	proto.RegisterEnum("mjproto.PaiType", PaiType_name, PaiType_value)
	proto.RegisterEnum("mjproto.MJUserGameStatus", MJUserGameStatus_name, MJUserGameStatus_value)
	proto.RegisterEnum("mjproto.DeskGameStatus", DeskGameStatus_name, DeskGameStatus_value)
}

func init() { proto.RegisterFile("base.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x59, 0x5f, 0x73, 0xe3, 0x46,
	0x72, 0xb7, 0x44, 0x52, 0xa2, 0x86, 0x92, 0x76, 0x16, 0x2b, 0xad, 0xe9, 0xf5, 0xda, 0xa7, 0x63,
	0x1c, 0x67, 0x2d, 0x9f, 0x7d, 0xc9, 0xde, 0x9d, 0x13, 0xe7, 0x3f, 0x08, 0x80, 0x04, 0x24, 0x12,
	0x20, 0x87, 0x80, 0x77, 0xa5, 0xfc, 0xc1, 0x8d, 0x44, 0x98, 0x9c, 0x5d, 0x09, 0xd0, 0x91, 0x84,
	0x4f, 0xda, 0x6f, 0x90, 0x87, 0x3c, 0x24, 0x6f, 0x77, 0x79, 0xce, 0x43, 0xaa, 0xf2, 0x0d, 0x92,
	0xaa, 0x7c, 0x8c, 0x7c, 0x85, 0x7c, 0x82, 0x3c, 0xa5, 0x2a, 0xa9, 0xee, 0xc1, 0xe0, 0x0f, 0xa5,
	0xcd, 0x56, 0xad, 0x0a, 0xfd, 0xeb, 0x3f, 0xd3, 0xd3, 0xd3, 0xdd, 0xd3, 0x00, 0x09, 0xb9, 0xe0,
	0xcb, 0xe8, 0xeb, 0x9b, 0x45, 0xb2, 0x4a, 0xb4, 0xed, 0xeb, 0x37, 0xf8, 0xd0, 0x11, 0xa4, 0x35,
	0x82, 0x07, 0x3b, 0xe2, 0xd3, 0x68, 0xa1, 0xb5, 0xc9, 0xf6, 0x0f, 0xd1, 0x62, 0x29, 0x92, 0xb8,
	0xbd, 0x71, 0xb4, 0xf1, 0x62, 0x87, 0x29, 0x52, 0x7b, 0x4a, 0xb6, 0xd2, 0x65, 0xb4, 0x70, 0xa6,
	0xed, 0xcd, 0xa3, 0x8d, 0x17, 0x7b, 0x2c, 0xa3, 0x34, 0x8d, 0xd4, 0x2f, 0x93, 0x69, 0xd4, 0xae,
	0x1d, 0x6d, 0xbc, 0x68, 0x30, 0x7c, 0xd6, 0x0e, 0x48, 0x23, 0x5a, 0x2c, 0x92, 0x45, 0xbb, 0x8e,
	0x36, 0x24, 0xd1, 0xf9, 0x96, 0xec, 0xd8, 0x11, 0x5f, 0xac, 0x2e, 0x22, 0xbe, 0xd2, 0x7e, 0x42,
	0xb6, 0xe6, 0xb8, 0x24, 0xae, 0xd3, 0x7a, 0x79, 0xf0, 0x75, 0xe6, 0xd1, 0xd7, 0x25, 0x77, 0x58,
	0x26, 0xd3, 0xf9, 0xed, 0x06, 0x21, 0xaf, 0x22, 0x71, 0x2b, 0x62, 0x27, 0xfe, 0x3e, 0x01, 0x5f,
	0x92, 0x9b, 0x28, 0x76, 0xa6, 0x99, 0x93, 0x19, 0xa5, 0x3d, 0x23, 0xcd, 0x58, 0x5c, 0xbe, 0x75,
	0xf9, 0x75, 0x84, 0x5e, 0xee, 0xb0, 0x9c, 0x86, 0x9d, 0x81, 0xb1, 0x60, 0x71, 0x85, 0xae, 0xee,
	0x30, 0x45, 0x6a, 0x94, 0xd4, 0x96, 0xd1, 0x2d, 0xfa, 0xda, 0x60, 0xf0, 0x88, 0x7b, 0x12, 0xab,
	0xbb, 0x76, 0x03, 0x05, 0xf1, 0x19, 0xf4, 0xd3, 0x58, 0x24, 0xb0, 0xe8, 0x96, 0xd4, 0xcf, 0xc8,
	0x8e, 0x49, 0x9a, 0x06, 0x5f, 0x4c, 0xd1, 0x33, 0x8d, 0xd4, 0x57, 0x77, 0x37, 0x11, 0xfa, 0xd5,
	0x60, 0xf8, 0x0c, 0xd1, 0xf8, 0x81, 0x5f, 0xa5, 0xd2, 0xa5, 0x06, 0x93, 0x84, 0xb6, 0x4f, 0x36,
	0xc5, 0x34, 0x8b, 0xda, 0xa6, 0x98, 0x76, 0x7e, 0xb3, 0x41, 0x5a, 0xa3, 0x2b, 0x7e, 0xe7, 0xdd,
	0xac, 0x44, 0x12, 0x2f, 0xb5, 0xe7, 0x64, 0xe7, 0x9d, 0x18, 0x26, 0x8c, 0x4f, 0x45, 0x92, 0x99,
	0x2b, 0x00, 0xed, 0x98, 0xd0, 0xa9, 0xe0, 0x71, 0x9f, 0xc7, 0x33, 0x3b, 0xe5, 0x52, 0x48, 0x9a,
	0xbf, 0x87, 0x6b, 0x9f, 0x93, 0xfd, 0x64, 0x35, 0x8f, 0x16, 0x4b, 0x63, 0x1e, 0x5d, 0xbe, 0xed,
	0x26, 0xb7, 0xed, 0xda, 0x51, 0xed, 0x45, 0x83, 0xad, 0xa1, 0x18, 0xa1, 0x54, 0x9a, 0x92, 0xb1,
	0x50, 0x24, 0xf8, 0xf6, 0xc4, 0x98, 0xf3, 0x78, 0x36, 0x99, 0xf3, 0xb2, 0x8f, 0x47, 0xa4, 0x75,
	0x73, 0xc5, 0xef, 0xa2, 0x85, 0x91, 0xa4, 0xf1, 0x2a, 0xf3, 0xb2, 0x0c, 0x69, 0x9f, 0x12, 0x22,
	0x66, 0x71, 0xb2, 0x88, 0xba, 0x3c, 0x7e, 0x8b, 0x1e, 0x36, 0x59, 0x09, 0x81, 0x5d, 0x5e, 0x88,
	0xc5, 0x54, 0xea, 0xcb, 0x60, 0x14, 0x80, 0xd6, 0x21, 0xbb, 0x40, 0x0c, 0xd3, 0xab, 0x95, 0xb8,
	0xb9, 0x8a, 0x32, 0xb7, 0x2a, 0x58, 0xe7, 0x97, 0x44, 0xeb, 0x72, 0x31, 0x99, 0xf3, 0xb8, 0xec,
	0xd9, 0x67, 0x64, 0x0f, 0xe2, 0x30, 0xe2, 0x49, 0x97, 0x27, 0xbd, 0x48, 0x66, 0x73, 0x93, 0x55,
	0x41, 0x90, 0xba, 0xe1, 0x77, 0xd7, 0x51, 0xbc, 0x92, 0x7a, 0x59, 0x08, 0xab, 0x60, 0xe7, 0xdf,
	0x36, 0xc8, 0xe1, 0xf9, 0x3c, 0xe5, 0x31, 0xfe, 0x29, 0xaf, 0x72, 0x40, 0x1a, 0xef, 0xe6, 0x7c,
	0xc8, 0xb3, 0x9d, 0x4b, 0x02, 0xac, 0x8a, 0xe5, 0x39, 0x3c, 0x9e, 0x08, 0xde, 0x8d, 0x44, 0xb6,
	0xed, 0x2a, 0x08, 0xb1, 0xbb, 0xe4, 0xf1, 0x89, 0x88, 0x46, 0x3c, 0xb1, 0x53, 0xdc, 0x7b, 0x93,
	0x95, 0x21, 0x69, 0xa7, 0xcb, 0xed, 0x24, 0x9e, 0x9d, 0xcf, 0x93, 0x78, 0x86, 0xdb, 0x47, 0x3b,
	0x25, 0x10, 0x23, 0xbc, 0xec, 0x27, 0x57, 0xd3, 0xae, 0x58, 0x4c, 0x31, 0x63, 0x21, 0xc2, 0x39,
	0xd2, 0xf9, 0x97, 0x1a, 0x79, 0x6c, 0x73, 0xe1, 0x56, 0x3d, 0x7f, 0x46, 0x9a, 0x62, 0x79, 0x96,
	0xa4, 0x3d, 0xae, 0x42, 0x93, 0xd3, 0x10, 0x75, 0x70, 0x35, 0xe5, 0xf1, 0xec, 0xb5, 0xe0, 0x71,
	0xe6, 0x7e, 0x05, 0x93, 0x32, 0x03, 0x91, 0xc5, 0x64, 0x96, 0xb9, 0x5f, 0xc1, 0xe0, 0x6c, 0xc5,
	0x12, 0x0e, 0x66, 0xd6, 0xe7, 0x99, 0xef, 0x05, 0x20, 0x77, 0x97, 0x11, 0xbd, 0x45, 0x14, 0x65,
	0xae, 0x57, 0x41, 0xc8, 0x5d, 0xb0, 0x99, 0x9e, 0xa4, 0x93, 0x94, 0xc7, 0x70, 0x90, 0x5b, 0x28,
	0xb6, 0x86, 0x42, 0xee, 0x8a, 0xa5, 0x9d, 0x72, 0x3b, 0x6d, 0x6f, 0xa3, 0x80, 0x22, 0xe5, 0x3a,
	0x3d, 0xb0, 0x98, 0xa4, 0x27, 0x82, 0x27, 0xed, 0xa6, 0x5a, 0xa7, 0x04, 0x4a, 0x29, 0x9b, 0x0b,
	0x53, 0x74, 0x79, 0x32, 0xe2, 0xa2, 0xbd, 0xa3, 0xa4, 0x4a, 0xa0, 0xdc, 0x91, 0xae, 0x8f, 0xf8,
	0x1d, 0x33, 0xda, 0x44, 0xed, 0x28, 0x03, 0xe0, 0x44, 0xc5, 0xf2, 0x55, 0xda, 0x8b, 0xe2, 0x19,
	0x58, 0x68, 0xc9, 0x13, 0x2d, 0x41, 0xf2, 0xac, 0x60, 0xbd, 0x81, 0x88, 0x67, 0xed, 0x5d, 0x75,
	0x56, 0x0a, 0xe9, 0xfc, 0xfb, 0x16, 0xd9, 0x65, 0x49, 0x72, 0xed, 0xdf, 0xdd, 0x44, 0xd8, 0x4e,
	0x7e, 0x46, 0xc8, 0xf5, 0x1b, 0x85, 0xe0, 0x41, 0xed, 0xbf, 0x7c, 0x92, 0x77, 0xca, 0xe1, 0x89,
	0x62, 0xb1, 0x92, 0x18, 0xac, 0x72, 0x91, 0xf0, 0xc5, 0x74, 0x69, 0x24, 0xe9, 0x2a, 0x4b, 0xe9,
	0x12, 0x02, 0xdd, 0xf3, 0x92, 0xdf, 0x0c, 0xf9, 0x2d, 0x9e, 0x5a, 0x8d, 0x65, 0x94, 0xf6, 0x8d,
	0xac, 0xe6, 0x2c, 0x45, 0xf0, 0xc4, 0x2a, 0x7d, 0xb9, 0xe0, 0xb1, 0xb2, 0x20, 0xe4, 0xd2, 0x25,
	0x18, 0x77, 0xd3, 0x6b, 0x3c, 0xc4, 0x06, 0xcb, 0x69, 0xf0, 0x65, 0x19, 0xad, 0x56, 0x57, 0x11,
	0xd4, 0x13, 0x9e, 0x5d, 0x83, 0x95, 0x10, 0xac, 0x7f, 0xbe, 0x8c, 0xbe, 0xc3, 0xfe, 0xb8, 0x8d,
	0xee, 0x14, 0xc0, 0x7a, 0x7f, 0x69, 0xde, 0xef, 0x2f, 0x2e, 0x79, 0x72, 0x79, 0xbf, 0x31, 0xe1,
	0xe9, 0xb5, 0x5e, 0x3e, 0xcf, 0x7d, 0x7f, 0xa0, 0x79, 0xb1, 0x87, 0x14, 0xb5, 0x53, 0xa2, 0x5d,
	0xdc, 0xeb, 0x26, 0x78, 0xd4, 0xad, 0x97, 0x1f, 0xe7, 0xe6, 0xee, 0x37, 0x1c, 0xf6, 0x80, 0x9a,
	0xe6, 0x93, 0xc3, 0x77, 0x50, 0x0a, 0xef, 0xd6, 0xfa, 0x06, 0xa6, 0x46, 0xeb, 0xe5, 0xa7, 0xb9,
	0xbd, 0x07, 0xbb, 0x0b, 0x7b, 0x58, 0x59, 0xb3, 0xc9, 0xe3, 0x39, 0x17, 0x71, 0xd5, 0xe2, 0x2e,
	0x5a, 0x7c, 0x96, 0x5b, 0xbc, 0x57, 0xf1, 0xec, 0xbe, 0x92, 0x4c, 0xe7, 0x91, 0x90, 0x0d, 0x72,
	0x4f, 0xa5, 0x73, 0x06, 0xc8, 0x92, 0xc8, 0x08, 0x2c, 0xd0, 0x7d, 0x55, 0x12, 0x25, 0x50, 0xa6,
	0xb4, 0x91, 0x88, 0xd8, 0x8c, 0x96, 0x6f, 0xdb, 0x8f, 0x54, 0x4a, 0x2b, 0x04, 0x0a, 0xf8, 0x32,
	0x11, 0xf1, 0x40, 0x5c, 0x8b, 0x95, 0x15, 0xaf, 0xa2, 0x45, 0x9b, 0xe2, 0x29, 0xaf, 0xa1, 0xd2,
	0xce, 0x68, 0x21, 0x7e, 0xe0, 0xab, 0x68, 0xda, 0x7e, 0xac, 0xec, 0x28, 0x04, 0x1a, 0x0e, 0x68,
	0xb0, 0x24, 0x8d, 0xa7, 0xbd, 0x28, 0x6a, 0x6b, 0x68, 0xa5, 0x82, 0x75, 0x96, 0xa4, 0x65, 0x24,
	0xd7, 0x37, 0xc9, 0x32, 0x82, 0xfb, 0xb8, 0xb8, 0x77, 0x37, 0xca, 0xf7, 0xae, 0xba, 0xa1, 0x37,
	0x4b, 0x37, 0x34, 0x64, 0xf0, 0x5c, 0xc8, 0x24, 0x94, 0x77, 0x63, 0x4e, 0xcb, 0x0c, 0x8e, 0xa7,
	0x81, 0x9c, 0x7d, 0xea, 0x38, 0xfb, 0x94, 0x90, 0xce, 0xff, 0x6c, 0x12, 0x32, 0x92, 0x19, 0x09,
	0x8b, 0x7e, 0x45, 0x9a, 0x73, 0x1e, 0x4f, 0xe1, 0xb9, 0xbd, 0x71, 0x54, 0x7b, 0xd1, 0x7a, 0xf9,
	0xb8, 0xc8, 0xc2, 0x6c, 0x4a, 0x60, 0xb9, 0x08, 0xd4, 0xdc, 0x65, 0xe1, 0x72, 0x7b, 0x13, 0x35,
	0x8a, 0x9a, 0x2b, 0x6d, 0x87, 0x95, 0x05, 0xb5, 0x2f, 0xc9, 0x76, 0x92, 0xae, 0x50, 0xa7, 0xf6,
	0xbe, 0x55, 0x94, 0x84, 0xf6, 0x05, 0xd9, 0x9a, 0xa7, 0x28, 0x5b, 0x7f, 0x9f, 0x6c, 0x26, 0x00,
	0xbd, 0x21, 0xdb, 0x69, 0x43, 0x4e, 0x79, 0x92, 0x82, 0x64, 0x50, 0x3e, 0xcb, 0x5a, 0x94, 0xa5,
	0x5c, 0x05, 0x65, 0x42, 0x8d, 0x05, 0x8f, 0x5d, 0xa1, 0xfa, 0x70, 0x01, 0x68, 0x3f, 0x25, 0x3b,
	0x33, 0x1e, 0xcf, 0xba, 0x11, 0x8f, 0x97, 0xed, 0xe6, 0x9a, 0x27, 0xfd, 0x8c, 0xc3, 0x0a, 0x19,
	0xbc, 0xfe, 0x53, 0x3b, 0xe5, 0xe8, 0xe5, 0x14, 0xaa, 0xba, 0x86, 0xd7, 0x7f, 0x09, 0xeb, 0xfc,
	0x9c, 0x34, 0x95, 0xea, 0xfb, 0x86, 0x2f, 0x6c, 0x46, 0x18, 0xda, 0x06, 0x93, 0x44, 0xe7, 0xbf,
	0xeb, 0xea, 0xd0, 0xb0, 0xcd, 0xe2, 0x6d, 0x08, 0xf3, 0x48, 0x36, 0x8e, 0xe2, 0x6d, 0x28, 0x69,
	0x68, 0xc1, 0x37, 0xf9, 0xf1, 0x62, 0xd6, 0xb4, 0x4a, 0x2d, 0xb8, 0x38, 0x79, 0x56, 0x12, 0x93,
	0x43, 0xb1, 0x88, 0xb3, 0x06, 0x8b, 0xcf, 0x95, 0xe1, 0xb4, 0xbe, 0x36, 0x9c, 0x66, 0x23, 0x68,
	0xa3, 0x18, 0x41, 0x8b, 0x71, 0x7b, 0xab, 0x32, 0x6e, 0xe3, 0x45, 0xe7, 0xfd, 0x3a, 0x8e, 0x16,
	0xc5, 0x45, 0x87, 0x24, 0x68, 0x5c, 0xb0, 0x88, 0x4f, 0xef, 0xb2, 0x3e, 0x99, 0x51, 0xb0, 0xee,
	0x85, 0x29, 0xe2, 0xd9, 0x38, 0x8d, 0xb0, 0x2f, 0x36, 0x58, 0x4e, 0xe3, 0x55, 0x61, 0xdd, 0x62,
	0x23, 0x8c, 0xa6, 0xd8, 0xe6, 0xe0, 0xaa, 0xc8, 0x11, 0xb0, 0x19, 0xdb, 0xa9, 0xba, 0xcd, 0x1a,
	0x2c, 0xa3, 0x00, 0xff, 0x55, 0x1a, 0x01, 0xbe, 0x2b, 0x71, 0x49, 0x69, 0x5f, 0x92, 0xad, 0x5f,
	0xdf, 0x42, 0x48, 0xb1, 0x9d, 0x94, 0x03, 0x55, 0x4c, 0xef, 0x2c, 0x13, 0x81, 0xc5, 0xfb, 0xfc,
	0x3a, 0x9a, 0xac, 0xf8, 0x2a, 0x5d, 0x62, 0x77, 0x69, 0xb0, 0x12, 0x02, 0xd9, 0xc4, 0x67, 0x51,
	0xbc, 0x1a, 0xc2, 0xeb, 0x85, 0xec, 0x2c, 0x05, 0x80, 0xf3, 0xf3, 0x0d, 0x36, 0x93, 0x1d, 0xb6,
	0x29, 0x6e, 0x60, 0x9b, 0xb7, 0x82, 0xcb, 0xe4, 0x7c, 0x2c, 0xb7, 0xa9, 0x68, 0x99, 0x97, 0x5d,
	0x9e, 0xf8, 0x70, 0xed, 0x6a, 0x2a, 0x2f, 0x33, 0xa0, 0xc8, 0xda, 0x58, 0xa4, 0xed, 0x27, 0xe5,
	0xac, 0x8d, 0x45, 0x0a, 0x01, 0xe7, 0xd3, 0xe9, 0x22, 0x5a, 0x2e, 0xdb, 0x07, 0x72, 0xee, 0xcf,
	0x48, 0xe0, 0x2c, 0x21, 0x4e, 0x33, 0xde, 0x3e, 0x94, 0xf3, 0x72, 0x46, 0x02, 0xe7, 0x46, 0xf0,
	0xe4, 0xfb, 0x28, 0x6e, 0x3f, 0x95, 0x9c, 0x8c, 0xec, 0xfc, 0x67, 0x9d, 0xec, 0x42, 0x5f, 0x84,
	0x6d, 0x3e, 0x10, 0x84, 0x8d, 0x7b, 0x41, 0xf8, 0x96, 0xec, 0x2e, 0x4a, 0x13, 0x41, 0x96, 0x80,
	0x87, 0x79, 0x5c, 0xcb, 0xe3, 0x02, 0xab, 0x88, 0xc2, 0xbe, 0x64, 0x4a, 0xc2, 0xc5, 0x9c, 0xcd,
	0xd6, 0x39, 0x00, 0xc5, 0xc5, 0x2f, 0x57, 0xe2, 0x87, 0xa8, 0xd2, 0xd9, 0x2a, 0x18, 0x38, 0x07,
	0x74, 0x12, 0xfb, 0xe2, 0x3a, 0xca, 0xb2, 0xb3, 0x84, 0xc0, 0x0a, 0xd3, 0xe8, 0x8a, 0xdf, 0x21,
	0x5b, 0x76, 0x84, 0x02, 0xd0, 0x5e, 0x90, 0x47, 0xb1, 0x13, 0x8b, 0x95, 0x5e, 0x98, 0xd8, 0x46,
	0x99, 0x75, 0x18, 0x2e, 0x09, 0x84, 0xcc, 0xdc, 0x98, 0x4c, 0xe1, 0x35, 0x14, 0xa7, 0xce, 0x58,
	0xac, 0x60, 0xcf, 0x70, 0xc1, 0x60, 0x3a, 0xd7, 0x58, 0x05, 0x83, 0x4e, 0x75, 0x99, 0x2e, 0x16,
	0x50, 0x98, 0x32, 0x19, 0x64, 0x56, 0x57, 0x41, 0x58, 0x71, 0x95, 0xac, 0xf8, 0x55, 0x21, 0x26,
	0x13, 0x7c, 0x0d, 0x85, 0x08, 0x40, 0x4c, 0xdd, 0xf4, 0xfa, 0x22, 0x5a, 0x60, 0xb2, 0xef, 0xb0,
	0x12, 0x02, 0x13, 0xca, 0x22, 0xba, 0xe6, 0x22, 0x36, 0xb0, 0xc9, 0xec, 0xc9, 0x09, 0xa5, 0x04,
	0x41, 0xa9, 0x64, 0x9d, 0x65, 0x5f, 0x16, 0x72, 0xd6, 0x57, 0x34, 0x52, 0x37, 0x61, 0xa8, 0x7f,
	0x84, 0x28, 0x3e, 0xe3, 0x25, 0x97, 0x2e, 0x16, 0xf9, 0x84, 0x48, 0xe5, 0xfb, 0x4e, 0x19, 0x03,
	0x7b, 0xd3, 0x68, 0xf9, 0xd6, 0x99, 0x66, 0x59, 0x9e, 0x51, 0xc7, 0x7f, 0xff, 0x84, 0x34, 0x2d,
	0x7c, 0x77, 0xc6, 0x97, 0xf2, 0xfd, 0x91, 0x63, 0x86, 0xe3, 0xc0, 0x31, 0x4e, 0x43, 0xc3, 0x73,
	0x5d, 0xba, 0xa1, 0x3d, 0x25, 0x5a, 0x15, 0x0b, 0x75, 0xe3, 0x94, 0x6e, 0x2a, 0xd9, 0xbe, 0x3e,
	0xb4, 0xc2, 0x81, 0xd7, 0x77, 0x5c, 0x5a, 0x53, 0xb2, 0x05, 0x86, 0xb2, 0x75, 0x25, 0x6b, 0x30,
	0x4b, 0xf7, 0x2d, 0xe6, 0x79, 0x43, 0xda, 0x50, 0xb2, 0x05, 0x86, 0xb2, 0x5b, 0x4a, 0xd6, 0x72,
	0x7d, 0x8b, 0x85, 0x28, 0xbb, 0xad, 0x64, 0x0b, 0x0c, 0x65, 0x9b, 0xda, 0x21, 0x79, 0x0c, 0xf8,
	0xc4, 0x72, 0xe5, 0xa2, 0x8e, 0xdb, 0xf3, 0xe8, 0x8e, 0xb6, 0x47, 0x76, 0x00, 0x66, 0x96, 0x6e,
	0x9e, 0x51, 0xa2, 0x3d, 0x26, 0x7b, 0x39, 0x89, 0x8a, 0x2d, 0xa5, 0x68, 0xbd, 0x36, 0x6c, 0xdd,
	0xed, 0x5b, 0x86, 0xce, 0xcc, 0x09, 0xdd, 0xd5, 0x3e, 0x22, 0x87, 0xf7, 0x60, 0xd4, 0xd8, 0xd3,
	0x1e, 0x91, 0x16, 0xb0, 0x4c, 0xc7, 0xed, 0x8f, 0x03, 0x8b, 0xee, 0x2b, 0xc0, 0x1b, 0x59, 0xae,
	0xe3, 0xf6, 0xe9, 0x23, 0xe5, 0xb8, 0x69, 0xe9, 0x83, 0x50, 0x1a, 0xa4, 0xda, 0x13, 0xf2, 0x08,
	0x03, 0x62, 0xf9, 0xa1, 0xe3, 0x22, 0x4a, 0x1f, 0x57, 0xbc, 0xf6, 0x02, 0x5f, 0xc2, 0x9a, 0x5a,
	0xbc, 0x02, 0xe3, 0xe2, 0x4f, 0xd4, 0x0e, 0x46, 0x96, 0xdb, 0x97, 0xd2, 0x07, 0xca, 0x48, 0x0e,
	0xa1, 0xe4, 0xa1, 0x92, 0xec, 0xeb, 0x4a, 0xf2, 0xa9, 0x92, 0xcc, 0x21, 0x94, 0xfc, 0x50, 0xa3,
	0x64, 0x17, 0xe1, 0xc0, 0x93, 0x82, 0x6d, 0xed, 0x80, 0xd0, 0x32, 0x82, 0x72, 0x1f, 0xa9, 0x7d,
	0xda, 0x81, 0x14, 0x7b, 0xa6, 0xf6, 0x94, 0x01, 0x28, 0xf5, 0xb1, 0xf6, 0x23, 0xf2, 0x31, 0x80,
	0x5d, 0xe6, 0xe9, 0xa6, 0xa1, 0x4f, 0xfc, 0xb0, 0x6b, 0xc1, 0xf1, 0xab, 0x70, 0x3d, 0xd7, 0x8e,
	0xc8, 0xf3, 0x87, 0x04, 0x54, 0xa8, 0xe9, 0x27, 0xca, 0x21, 0xef, 0x3b, 0x8b, 0xf9, 0x01, 0x73,
	0xe9, 0xa7, 0xca, 0x73, 0x23, 0x60, 0xcc, 0x72, 0x7d, 0x66, 0x4d, 0x82, 0x81, 0x4f, 0x7f, 0xa4,
	0xb2, 0x01, 0x02, 0x65, 0xb9, 0xe6, 0xc0, 0xf3, 0x7d, 0x8b, 0x9d, 0xd1, 0x23, 0x25, 0x6e, 0x3a,
	0x93, 0x89, 0x37, 0xf8, 0xce, 0x0a, 0x4d, 0x6b, 0x72, 0x4a, 0x7f, 0xac, 0xe2, 0x5a, 0x81, 0xd1,
	0xeb, 0x8e, 0x3a, 0xb2, 0x81, 0xa5, 0x2b, 0xf1, 0xdf, 0x51, 0xd6, 0x0b, 0x0c, 0x65, 0x3f, 0x53,
	0x71, 0x18, 0x5a, 0x93, 0x89, 0xde, 0xb7, 0xe8, 0xef, 0xaa, 0x70, 0xe1, 0x79, 0x29, 0xf4, 0x73,
	0xed, 0x43, 0xf2, 0x24, 0x2f, 0x81, 0x6c, 0xf7, 0x96, 0x6b, 0xd2, 0xdf, 0xab, 0x30, 0xe0, 0x0f,
	0xb3, 0x0c, 0x8f, 0x99, 0xf4, 0x85, 0xf6, 0x8c, 0x3c, 0xcd, 0x19, 0xba, 0x71, 0x5a, 0xe2, 0x7d,
	0xa1, 0x7d, 0x42, 0x3e, 0x7a, 0x98, 0x67, 0x99, 0x2e, 0x3d, 0xce, 0xd3, 0x0b, 0xd8, 0xae, 0xe7,
	0x3b, 0x86, 0x45, 0xbf, 0xac, 0x14, 0xa1, 0x6e, 0x9c, 0x66, 0xf8, 0x4f, 0xf2, 0xcd, 0x7a, 0x7d,
	0xc8, 0x2e, 0x66, 0x8d, 0xe9, 0x57, 0x6b, 0x18, 0x6c, 0xf4, 0x6b, 0xad, 0x4d, 0x0e, 0x00, 0xd3,
	0x5f, 0xc1, 0xe9, 0x7a, 0xee, 0xc0, 0x71, 0x2d, 0x94, 0xfe, 0xe9, 0x83, 0x1c, 0xd0, 0xf9, 0x7d,
	0x15, 0x7a, 0x5b, 0x1f, 0x0c, 0x42, 0x5f, 0x9f, 0x9c, 0xa2, 0xc2, 0x1f, 0xdc, 0x87, 0x41, 0xfa,
	0xa5, 0xf6, 0x31, 0xf9, 0xb0, 0x28, 0x67, 0xbd, 0x6f, 0xb9, 0xfe, 0xd0, 0x33, 0xe5, 0x22, 0x3f,
	0x7b, 0x1f, 0x13, 0x34, 0x7f, 0xae, 0x62, 0x35, 0x0e, 0x1c, 0x7f, 0x4d, 0xf1, 0x17, 0xef, 0xe1,
	0x81, 0xde, 0x37, 0xea, 0xf0, 0x98, 0xd5, 0x47, 0xe1, 0x3f, 0x2c, 0x03, 0x20, 0xf1, 0x47, 0x45,
	0x95, 0x0c, 0xad, 0x89, 0xaf, 0xfb, 0xd2, 0xe8, 0xb7, 0xf7, 0x61, 0x90, 0xfe, 0x63, 0x75, 0xf6,
	0x3d, 0xcb, 0x32, 0xbb, 0xba, 0x21, 0xb7, 0xfb, 0x27, 0x2a, 0xd3, 0xf4, 0xd1, 0x68, 0x70, 0x96,
	0xa7, 0x1b, 0xb0, 0xfe, 0xf4, 0x61, 0x16, 0xd8, 0xfa, 0x33, 0x75, 0xc6, 0x15, 0x56, 0x6e, 0xf4,
	0xcf, 0xdf, 0xcf, 0x06, 0xed, 0xbf, 0x50, 0x69, 0x65, 0x78, 0xc3, 0xa1, 0xe7, 0x76, 0x8d, 0x53,
	0xc7, 0x38, 0xf5, 0x02, 0x9f, 0xfe, 0xa5, 0x3a, 0x5a, 0xdd, 0xf0, 0x0d, 0xdb, 0x41, 0x5b, 0xfa,
	0x1a, 0x06, 0x06, 0xba, 0xda, 0xa7, 0xe4, 0x19, 0x1a, 0x80, 0x32, 0x9c, 0xd8, 0xfa, 0x5a, 0x9f,
	0x30, 0xd4, 0x79, 0xa0, 0x8e, 0x14, 0x19, 0x3b, 0x13, 0xdb, 0x0b, 0xec, 0x80, 0x9a, 0xaa, 0xec,
	0x1f, 0x60, 0xa2, 0xb6, 0xa5, 0x7d, 0x46, 0x8e, 0xf2, 0x64, 0xcc, 0x44, 0x94, 0x44, 0x5e, 0xe8,
	0x3d, 0xed, 0x73, 0xd2, 0x59, 0x97, 0xd2, 0x15, 0x5b, 0xef, 0xf9, 0x16, 0x03, 0xa7, 0x68, 0x7f,
	0xbd, 0x1c, 0x74, 0xc3, 0xb7, 0x03, 0x25, 0x4f, 0x6d, 0xe5, 0xaa, 0xac, 0x3d, 0x4b, 0x1f, 0xd8,
	0xba, 0x63, 0x3a, 0xb2, 0x15, 0x3b, 0x6a, 0x9f, 0xc8, 0x64, 0xd6, 0x78, 0x8d, 0x7f, 0x52, 0xe1,
	0xeb, 0xc6, 0xe9, 0x1a, 0xff, 0x54, 0x9d, 0xa0, 0x0a, 0x74, 0x30, 0xb1, 0x58, 0x97, 0x59, 0xfa,
	0x29, 0x1d, 0xa8, 0xcc, 0x93, 0x2c, 0x66, 0x8d, 0xa1, 0x44, 0x5d, 0xd7, 0x32, 0x7c, 0x3a, 0x2c,
	0x57, 0x23, 0xb3, 0xc6, 0xdd, 0xe0, 0xb5, 0xa3, 0x9f, 0x3b, 0xd4, 0x2d, 0xe3, 0xba, 0x71, 0xaa,
	0x70, 0x4f, 0x95, 0xb4, 0xd7, 0xeb, 0xe5, 0x85, 0x37, 0x52, 0x59, 0x98, 0xdb, 0xc5, 0xe0, 0x8e,
	0xd5, 0x71, 0x76, 0x8d, 0xb0, 0xab, 0x7b, 0x3e, 0xdc, 0x42, 0x4c, 0xe9, 0x33, 0x6b, 0x9c, 0x83,
	0x13, 0x05, 0x42, 0xd6, 0x28, 0xd0, 0x57, 0x60, 0xd7, 0x08, 0x7b, 0x96, 0x7b, 0x0e, 0x51, 0xa4,
	0x81, 0xaa, 0x8b, 0xae, 0x11, 0x8e, 0x1c, 0xdd, 0xa3, 0xdf, 0xa9, 0xae, 0x0c, 0xf6, 0x10, 0x79,
	0xa5, 0x10, 0x30, 0x86, 0xc8, 0xeb, 0xa2, 0x98, 0xc6, 0x61, 0x6f, 0x70, 0x46, 0xcf, 0x14, 0x00,
	0x22, 0x00, 0x9c, 0x6b, 0xfb, 0x84, 0x28, 0x09, 0xdf, 0xa1, 0x7f, 0xa5, 0x68, 0x10, 0xf0, 0x1d,
	0xfa, 0xd7, 0xaa, 0xb3, 0x74, 0x8d, 0xac, 0xef, 0xfa, 0xce, 0xd0, 0x82, 0x34, 0xfe, 0x1b, 0xb5,
	0x75, 0x90, 0x3c, 0x71, 0x74, 0x0f, 0x6e, 0xf8, 0x09, 0xfd, 0xdb, 0xb2, 0x5b, 0x98, 0x1b, 0x61,
	0xd9, 0x2d, 0x44, 0x7e, 0x59, 0x0e, 0x85, 0x2a, 0x0b, 0x5e, 0xb6, 0x07, 0x71, 0x90, 0xf6, 0x2e,
	0xd4, 0xbd, 0x89, 0x11, 0x0a, 0xec, 0x40, 0xa7, 0x97, 0xa5, 0xe8, 0x4e, 0x20, 0x38, 0x7d, 0x9d,
	0x4e, 0xcb, 0x26, 0x15, 0x18, 0x95, 0xa3, 0xab, 0xc0, 0xef, 0x55, 0x4e, 0x80, 0xe4, 0xc0, 0x99,
	0xf8, 0xa1, 0xe1, 0xc1, 0x75, 0x08, 0x57, 0xcc, 0x4c, 0xf1, 0x40, 0x61, 0x8d, 0x37, 0x3f, 0xfe,
	0xaf, 0x0d, 0xb2, 0x63, 0x2d, 0x16, 0xc9, 0xc2, 0x90, 0x6f, 0x2b, 0xc4, 0x32, 0xc2, 0x49, 0x60,
	0x18, 0xd6, 0x64, 0x42, 0x3f, 0xd0, 0xbe, 0x22, 0x47, 0x96, 0x91, 0xcd, 0x4c, 0xf2, 0x72, 0x32,
	0x1d, 0x7d, 0xe8, 0xb9, 0x26, 0xb4, 0x7f, 0xcb, 0xf5, 0x82, 0xbe, 0x4d, 0xff, 0xe9, 0x7f, 0xb3,
	0x7f, 0x1b, 0xda, 0x17, 0xe4, 0xf9, 0x9a, 0x38, 0xa4, 0x2d, 0xc8, 0xf6, 0xbc, 0xc0, 0x35, 0xe9,
	0x6f, 0x0b, 0xd1, 0x0e, 0x39, 0xb4, 0x8c, 0xd0, 0x71, 0x7d, 0x4f, 0x0a, 0xe6, 0x32, 0xbf, 0x29,
	0x64, 0x7e, 0x4c, 0x0e, 0x2c, 0x43, 0x55, 0x10, 0x0c, 0x53, 0xcc, 0x1a, 0x59, 0xba, 0x4f, 0xff,
	0xb1, 0x10, 0x39, 0x26, 0x9f, 0x54, 0x45, 0x0c, 0xdb, 0x19, 0x81, 0xb1, 0x30, 0xf3, 0xee, 0x1f,
	0x72, 0xd9, 0xe3, 0x7f, 0xdd, 0x24, 0xcd, 0xe1, 0x89, 0xfc, 0xaa, 0x04, 0xd1, 0x56, 0xb3, 0x40,
	0x36, 0x3d, 0x6d, 0x40, 0x1a, 0x9d, 0x3b, 0x43, 0x0f, 0x0e, 0x3e, 0x34, 0x1d, 0xba, 0x09, 0x67,
	0x9c, 0x03, 0x3d, 0x1d, 0x26, 0xce, 0x36, 0x39, 0x30, 0x1d, 0xdd, 0xc5, 0xa6, 0x65, 0x07, 0x20,
	0xa6, 0xbb, 0x23, 0xdd, 0xa3, 0x75, 0x38, 0xe8, 0x0a, 0x07, 0x14, 0x69, 0x03, 0x0e, 0xeb, 0x4c,
	0xf7, 0x4e, 0x9c, 0x00, 0x8c, 0xb8, 0x7d, 0x33, 0x70, 0xe8, 0x16, 0xb4, 0xf3, 0xa1, 0xe5, 0x8e,
	0x1d, 0xb7, 0x1f, 0x0e, 0xa1, 0x90, 0x61, 0xd0, 0xd9, 0x86, 0xe0, 0xfb, 0x8e, 0x0e, 0x43, 0x4c,
	0x68, 0x07, 0xb4, 0x09, 0xf4, 0xa9, 0x1e, 0x5a, 0x2c, 0xf4, 0x21, 0xed, 0x77, 0xc0, 0xe5, 0x6c,
	0xb9, 0xd0, 0xd0, 0x5d, 0x90, 0x21, 0x88, 0x05, 0x8e, 0x19, 0x38, 0x76, 0x10, 0xbe, 0x44, 0x1f,
	0x5b, 0xa0, 0x07, 0x0e, 0xbf, 0x76, 0xdc, 0xf0, 0x55, 0x40, 0x77, 0x61, 0x17, 0xa6, 0x69, 0x87,
	0x63, 0x10, 0x03, 0x2d, 0x1c, 0x2e, 0x01, 0xc1, 0xbd, 0xd9, 0x01, 0xdd, 0x47, 0x33, 0xa6, 0xad,
	0x76, 0x03, 0xd8, 0xa3, 0xe3, 0xff, 0xa8, 0x11, 0x52, 0x7c, 0xba, 0x85, 0x7e, 0xa4, 0x5e, 0xdb,
	0xc2, 0xdb, 0x34, 0x3a, 0x9f, 0xf3, 0xd8, 0xe4, 0x89, 0x29, 0xe8, 0x07, 0xda, 0x73, 0xd2, 0xce,
	0x59, 0x4b, 0x1e, 0xb3, 0x28, 0x1e, 0x08, 0x1e, 0xcf, 0x7a, 0x3c, 0x9e, 0xd1, 0x0d, 0xe8, 0x92,
	0x05, 0x57, 0x54, 0x98, 0x9b, 0x90, 0x9a, 0x39, 0x73, 0x1a, 0x9d, 0xf1, 0x78, 0x86, 0xbf, 0x3c,
	0xc4, 0x33, 0x5a, 0x83, 0x88, 0x16, 0x3c, 0x9e, 0x98, 0x3c, 0xb1, 0x53, 0x5a, 0xaf, 0xa8, 0xdc,
	0xa6, 0xd1, 0x40, 0xa4, 0xc6, 0x3c, 0x8a, 0x67, 0x76, 0x44, 0x1b, 0xd0, 0x54, 0x73, 0xde, 0x15,
	0x98, 0xa9, 0x2c, 0xb7, 0x55, 0xf1, 0x54, 0xf1, 0x27, 0x3c, 0x46, 0xee, 0x76, 0xc5, 0xb2, 0xdc,
	0x87, 0xe2, 0x35, 0x2b, 0xce, 0xa8, 0x2f, 0xb2, 0x74, 0x07, 0xda, 0x6a, 0x0e, 0xbf, 0x9b, 0xa7,
	0xc9, 0xad, 0xe0, 0xef, 0x04, 0x25, 0x70, 0x4d, 0xe6, 0xf8, 0xf5, 0x9b, 0xf0, 0x82, 0x0b, 0x78,
	0xe9, 0xa6, 0xbb, 0x95, 0x68, 0x5c, 0xbf, 0x09, 0x97, 0x49, 0x3c, 0x7b, 0x03, 0x8e, 0xcc, 0x23,
	0xba, 0x57, 0x71, 0xe0, 0xfa, 0x4d, 0x58, 0x7c, 0x58, 0xa5, 0xfb, 0x95, 0xf8, 0x5f, 0xbf, 0x09,
	0xe7, 0x49, 0x3c, 0x7b, 0x07, 0x7f, 0xe8, 0xa3, 0x8a, 0x13, 0xc0, 0xc2, 0x2f, 0xa8, 0x94, 0x1e,
	0x7f, 0x49, 0x76, 0x87, 0x7c, 0xfe, 0x26, 0x89, 0x67, 0x46, 0x72, 0x95, 0x2c, 0xb4, 0x6d, 0x52,
	0x7b, 0xa5, 0xc3, 0x3b, 0x56, 0x93, 0xd4, 0x31, 0xa7, 0x36, 0xf1, 0xc9, 0x73, 0xfb, 0xb4, 0x76,
	0xfc, 0x8d, 0xfc, 0x42, 0x85, 0x67, 0xbd, 0x4f, 0x08, 0x64, 0x26, 0xb4, 0x16, 0xb7, 0x4f, 0x37,
	0xb4, 0x5d, 0xd2, 0xec, 0x87, 0x5d, 0x1d, 0xa9, 0x4d, 0x49, 0xc9, 0x4c, 0xa7, 0xb5, 0x63, 0x9f,
	0x3c, 0x2a, 0x7d, 0xfe, 0x53, 0xea, 0xc6, 0x9a, 0xba, 0x51, 0x51, 0x37, 0x72, 0x75, 0x8d, 0x90,
	0x2d, 0x03, 0xdf, 0x2a, 0x68, 0x5d, 0xdb, 0x21, 0x0d, 0x03, 0x0a, 0x98, 0x36, 0x8e, 0xff, 0x6e,
	0x93, 0x6c, 0xd9, 0x29, 0x5a, 0xdb, 0x25, 0x4d, 0x3b, 0x74, 0x3d, 0x36, 0xd4, 0x07, 0xf4, 0x03,
	0x49, 0xf9, 0x82, 0xc7, 0x76, 0x4a, 0x37, 0x40, 0xdb, 0x0e, 0x4d, 0x61, 0xa7, 0xf2, 0x05, 0xd1,
	0x0e, 0xfb, 0xf2, 0x64, 0xf0, 0x67, 0x45, 0x5a, 0x5b, 0xc3, 0x46, 0x3c, 0xa1, 0x75, 0x48, 0x7e,
	0x3b, 0x1c, 0x0b, 0xfc, 0xf1, 0x26, 0x9e, 0xd1, 0x06, 0xb8, 0x6b, 0x87, 0xf8, 0xfb, 0xc9, 0x80,
	0x27, 0x74, 0xab, 0x44, 0x83, 0xc2, 0x36, 0x9c, 0x25, 0xd2, 0x53, 0x51, 0xb1, 0xde, 0x7c, 0x88,
	0x01, 0x1a, 0x3b, 0x50, 0x71, 0x76, 0x78, 0x22, 0xe2, 0x7e, 0x92, 0x9a, 0x82, 0x27, 0x94, 0x48,
	0xe4, 0x5c, 0x0c, 0x93, 0x13, 0xc1, 0x7b, 0x3c, 0xa6, 0x2d, 0xe9, 0x46, 0x86, 0x98, 0x82, 0xee,
	0x4a, 0x6b, 0x98, 0x5a, 0xcb, 0x39, 0x0f, 0x7f, 0x25, 0x96, 0xf3, 0x24, 0x9d, 0xa7, 0x74, 0xef,
	0xf8, 0x9f, 0xeb, 0x64, 0x7b, 0xc4, 0x85, 0x0a, 0xad, 0x1d, 0x9a, 0xa9, 0x30, 0x53, 0x81, 0x01,
	0x40, 0x7a, 0x2c, 0xe2, 0xd9, 0x99, 0x98, 0x44, 0x74, 0x53, 0x6b, 0x91, 0x6d, 0xa0, 0xcd, 0x54,
	0xd0, 0x9a, 0x5c, 0xc2, 0xe4, 0xe2, 0x8c, 0x27, 0x27, 0x22, 0x55, 0x5b, 0x1f, 0x24, 0xf1, 0x4c,
	0x4a, 0x64, 0x5b, 0xc7, 0x7a, 0x03, 0x7a, 0x0b, 0xde, 0x64, 0xed, 0x70, 0x18, 0xc5, 0x60, 0x91,
	0x6e, 0x67, 0x5e, 0xcf, 0xf1, 0x47, 0x3c, 0x59, 0x06, 0xa8, 0x70, 0xca, 0xad, 0x85, 0x2f, 0x70,
	0xa7, 0xa8, 0x70, 0x22, 0xf8, 0x6b, 0x11, 0xff, 0x82, 0x12, 0xe8, 0x76, 0xd2, 0x9d, 0x62, 0x91,
	0x96, 0x0a, 0xb8, 0x02, 0x76, 0xe5, 0x19, 0x8e, 0x04, 0x84, 0x91, 0xee, 0x41, 0x65, 0xd9, 0xc5,
	0x38, 0x68, 0xea, 0xaf, 0x9d, 0x89, 0x43, 0xf7, 0x65, 0x38, 0x72, 0xb8, 0xab, 0xbb, 0x5d, 0xdd,
	0x85, 0xbe, 0x04, 0xd9, 0x5e, 0x62, 0x8c, 0x03, 0xeb, 0xcc, 0x99, 0x58, 0x94, 0x42, 0x81, 0x94,
	0xf0, 0x81, 0x13, 0x0c, 0x9c, 0x60, 0x62, 0x07, 0xae, 0x7c, 0x03, 0x2e, 0xb1, 0x46, 0x8e, 0xdb,
	0xb7, 0x03, 0xf9, 0x06, 0x5c, 0x86, 0x2d, 0xb7, 0x0f, 0xff, 0xed, 0x80, 0x3e, 0x81, 0x32, 0x2d,
	0xb1, 0xb0, 0x75, 0xe3, 0x1f, 0x3b, 0xa0, 0x07, 0x6b, 0xae, 0x41, 0x1b, 0x47, 0x17, 0x0e, 0xe1,
	0x76, 0xa8, 0x30, 0x5e, 0x3b, 0xba, 0x07, 0x1d, 0xff, 0x29, 0x0c, 0xae, 0x0f, 0x71, 0x42, 0x5b,
	0xf7, 0xe0, 0xf6, 0xff, 0x10, 0x46, 0xd2, 0xff, 0x47, 0x20, 0x34, 0xbd, 0xa0, 0x3b, 0xb0, 0x68,
	0x7b, 0xcd, 0xe7, 0x71, 0xa0, 0xbb, 0x63, 0x27, 0x60, 0x96, 0x4b, 0x3f, 0x3a, 0x3e, 0x27, 0x74,
	0x78, 0x12, 0x2c, 0xa3, 0x45, 0xe9, 0xbb, 0x1c, 0x21, 0x5b, 0x41, 0xe8, 0xb8, 0x8e, 0x4f, 0x3f,
	0x80, 0xb3, 0x0a, 0xf2, 0x37, 0x64, 0x4c, 0x9d, 0xa0, 0x78, 0x1f, 0xde, 0x94, 0xec, 0xd1, 0x40,
	0x3f, 0x73, 0xb0, 0x30, 0x77, 0x49, 0x33, 0x08, 0x7b, 0x8e, 0xeb, 0x4c, 0x6c, 0x5a, 0x3f, 0xbe,
	0x24, 0xfb, 0xea, 0x7b, 0x60, 0x66, 0xb9, 0x49, 0xea, 0x99, 0xdd, 0x1d, 0xd2, 0xe8, 0xe9, 0x23,
	0xdd, 0x91, 0x95, 0x5e, 0xb2, 0xd8, 0x22, 0xdb, 0x6a, 0xb9, 0x1a, 0x10, 0xca, 0x78, 0x1d, 0xdc,
	0xca, 0x4c, 0x37, 0xc0, 0x10, 0xce, 0x75, 0x5b, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xa6,
	0x1a, 0xbd, 0xfa, 0x21, 0x00, 0x00,
}
