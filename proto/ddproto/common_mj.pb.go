// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common_mj.proto

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of Heartbeat from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_req_reg_via_input from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of common_req_gameLogin from common_client.proto

// Ignoring public import of common_req_gameLogin_via_input from common_client.proto

// Ignoring public import of common_ack_gameLogin from common_client.proto

// Ignoring public import of common_req_qrLogin from common_client.proto

// Ignoring public import of common_ack_qrLogin from common_client.proto

// Ignoring public import of common_req_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_qrWxInfo from common_client.proto

// Ignoring public import of common_ack_reconnect from common_client.proto

// Ignoring public import of common_req_reconnect from common_client.proto

// Ignoring public import of common_req_gameState from common_client.proto

// Ignoring public import of common_ack_gameState from common_client.proto

// Ignoring public import of common_req_logout from common_client.proto

// Ignoring public import of common_ack_logout from common_client.proto

// Ignoring public import of common_req_feedback from common_client.proto

// Ignoring public import of client_base_poker from common_client.proto

// Ignoring public import of common_req_message from common_client.proto

// Ignoring public import of common_bc_message from common_client.proto

// Ignoring public import of common_req_notice from common_client.proto

// Ignoring public import of common_ack_notice from common_client.proto

// Ignoring public import of common_req_enterAgentMode from common_client.proto

// Ignoring public import of common_ack_enterAgentMode from common_client.proto

// Ignoring public import of common_req_quitAgentMode from common_client.proto

// Ignoring public import of common_ack_quitAgentMode from common_client.proto

// Ignoring public import of common_req_leaveDesk from common_client.proto

// Ignoring public import of common_ack_leaveDesk from common_client.proto

// Ignoring public import of common_req_kickout from common_client.proto

// Ignoring public import of common_bc_kickout from common_client.proto

// Ignoring public import of common_req_allowance from common_client.proto

// Ignoring public import of common_ack_allowance from common_client.proto

// Ignoring public import of common_req_applyDissolve from common_client.proto

// Ignoring public import of common_bc_applyDissolve from common_client.proto

// Ignoring public import of common_req_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_applyDissolveBack from common_client.proto

// Ignoring public import of common_ack_timeout from common_client.proto

// Ignoring public import of common_bc_userBreak from common_client.proto

// Ignoring public import of common_req_clickStatistic from common_client.proto

// Ignoring public import of common_req_offline from common_client.proto

// Ignoring public import of common_req_upload_location from common_client.proto

// Ignoring public import of common_bc_leaveTimeout from common_client.proto

// Ignoring public import of common_desk_by_agent from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of common_enum_pokerColor from common_client.proto

type ErrorCode int32

const (
	ErrorCode_MJ_EC_SUCCESS ErrorCode = 0
	// -101   -200	游戏异常
	ErrorCode_MJ_EC_CREATE_DESK_DIAMOND_NOTENOUGH ErrorCode = -101
	ErrorCode_MJ_EC_CREATE_DESK_USER_NOTFOUND     ErrorCode = -102
	ErrorCode_MJ_EC_INTO_DESK_NOTFOUND            ErrorCode = -103
	ErrorCode_MJ_EC_GAME_READY_REPEAT             ErrorCode = -110
	ErrorCode_MJ_EC_GAME_READY_CHIP_NOT_ENOUGH    ErrorCode = -111
)

var ErrorCode_name = map[int32]string{
	0:    "MJ_EC_SUCCESS",
	-101: "MJ_EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "MJ_EC_CREATE_DESK_USER_NOTFOUND",
	-103: "MJ_EC_INTO_DESK_NOTFOUND",
	-110: "MJ_EC_GAME_READY_REPEAT",
	-111: "MJ_EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var ErrorCode_value = map[string]int32{
	"MJ_EC_SUCCESS":                       0,
	"MJ_EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"MJ_EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"MJ_EC_INTO_DESK_NOTFOUND":            -103,
	"MJ_EC_GAME_READY_REPEAT":             -110,
	"MJ_EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

// 麻将花色
type MahjongColor int32

const (
	MahjongColor_WAN  MahjongColor = 1
	MahjongColor_TIAO MahjongColor = 2
	MahjongColor_TONG MahjongColor = 3
)

var MahjongColor_name = map[int32]string{
	1: "WAN",
	2: "TIAO",
	3: "TONG",
}
var MahjongColor_value = map[string]int32{
	"WAN":  1,
	"TIAO": 2,
	"TONG": 3,
}

func (x MahjongColor) Enum() *MahjongColor {
	p := new(MahjongColor)
	*p = x
	return p
}
func (x MahjongColor) String() string {
	return proto.EnumName(MahjongColor_name, int32(x))
}
func (x *MahjongColor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MahjongColor_value, data, "MahjongColor")
	if err != nil {
		return err
	}
	*x = MahjongColor(value)
	return nil
}
func (MahjongColor) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

// 杠的类型
type GangType int32

const (
	GangType_G_MINGGANG GangType = 1
	GangType_G_BAGANG   GangType = 2
	GangType_G_ANGANG   GangType = 3
)

var GangType_name = map[int32]string{
	1: "G_MINGGANG",
	2: "G_BAGANG",
	3: "G_ANGANG",
}
var GangType_value = map[string]int32{
	"G_MINGGANG": 1,
	"G_BAGANG":   2,
	"G_ANGANG":   3,
}

func (x GangType) Enum() *GangType {
	p := new(GangType)
	*p = x
	return p
}
func (x GangType) String() string {
	return proto.EnumName(GangType_name, int32(x))
}
func (x *GangType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GangType_value, data, "GangType")
	if err != nil {
		return err
	}
	*x = GangType(value)
	return nil
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

// 胡牌的类型
type HuType int32

const (
	HuType_H_NORMAL HuType = 0
	// 附加番数(特定操作)
	HuType_H_TianHu            HuType = 1
	HuType_H_DiHu              HuType = 2
	HuType_H_GangShangHua      HuType = 3
	HuType_H_GangShangPao      HuType = 4
	HuType_H_QiangGang         HuType = 5
	HuType_H_HaiDiLao          HuType = 6
	HuType_H_HaiDiPao          HuType = 7
	HuType_H_HaidiGangShangHua HuType = 8
	HuType_H_HaidiGangShangPao HuType = 9
	//
	HuType_H_JinGouDiao HuType = 10
	// 可选附加玩法
	HuType_H_ZiMoJiaFan        HuType = 11
	HuType_H_ZiMoJiaDi         HuType = 12
	HuType_H_changsha_qishouhu HuType = 13
)

var HuType_name = map[int32]string{
	0:  "H_NORMAL",
	1:  "H_TianHu",
	2:  "H_DiHu",
	3:  "H_GangShangHua",
	4:  "H_GangShangPao",
	5:  "H_QiangGang",
	6:  "H_HaiDiLao",
	7:  "H_HaiDiPao",
	8:  "H_HaidiGangShangHua",
	9:  "H_HaidiGangShangPao",
	10: "H_JinGouDiao",
	11: "H_ZiMoJiaFan",
	12: "H_ZiMoJiaDi",
	13: "H_changsha_qishouhu",
}
var HuType_value = map[string]int32{
	"H_NORMAL":            0,
	"H_TianHu":            1,
	"H_DiHu":              2,
	"H_GangShangHua":      3,
	"H_GangShangPao":      4,
	"H_QiangGang":         5,
	"H_HaiDiLao":          6,
	"H_HaiDiPao":          7,
	"H_HaidiGangShangHua": 8,
	"H_HaidiGangShangPao": 9,
	"H_JinGouDiao":        10,
	"H_ZiMoJiaFan":        11,
	"H_ZiMoJiaDi":         12,
	"H_changsha_qishouhu": 13,
}

func (x HuType) Enum() *HuType {
	p := new(HuType)
	*p = x
	return p
}
func (x HuType) String() string {
	return proto.EnumName(HuType_name, int32(x))
}
func (x *HuType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HuType_value, data, "HuType")
	if err != nil {
		return err
	}
	*x = HuType(value)
	return nil
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

// 碰杠类型(客户端显示用)
type ComposeCardType int32

const (
	ComposeCardType_C_MINGGANG ComposeCardType = 1
	ComposeCardType_C_BAGANG   ComposeCardType = 2
	ComposeCardType_C_ANGANG   ComposeCardType = 3
	ComposeCardType_C_PENG     ComposeCardType = 4
	ComposeCardType_C_CHI      ComposeCardType = 5
)

var ComposeCardType_name = map[int32]string{
	1: "C_MINGGANG",
	2: "C_BAGANG",
	3: "C_ANGANG",
	4: "C_PENG",
	5: "C_CHI",
}
var ComposeCardType_value = map[string]int32{
	"C_MINGGANG": 1,
	"C_BAGANG":   2,
	"C_ANGANG":   3,
	"C_PENG":     4,
	"C_CHI":      5,
}

func (x ComposeCardType) Enum() *ComposeCardType {
	p := new(ComposeCardType)
	*p = x
	return p
}
func (x ComposeCardType) String() string {
	return proto.EnumName(ComposeCardType_name, int32(x))
}
func (x *ComposeCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComposeCardType_value, data, "ComposeCardType")
	if err != nil {
		return err
	}
	*x = ComposeCardType(value)
	return nil
}
func (ComposeCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

type PaiType int32

const (
	PaiType_H_DuiDuiHu   PaiType = 1
	PaiType_H_QingYiSe   PaiType = 2
	PaiType_H_QiDui      PaiType = 3
	PaiType_H_DaiYaoJiu  PaiType = 4
	PaiType_H_LongQiDui  PaiType = 5
	PaiType_H_JiangDui   PaiType = 6
	PaiType_H_MenQing    PaiType = 7
	PaiType_H_ZhongZhang PaiType = 8
	// (内江麻将)
	PaiType_H_KaErTiao PaiType = 9
	// (德阳麻将)
	PaiType_H_JiaXin5       PaiType = 10
	PaiType_H_QingLongQiDui PaiType = 11
	PaiType_H_QingQiDui     PaiType = 12
	PaiType_H_PingHu        PaiType = 13
	// 长沙麻将
	PaiType_H_CHANGSHA_DAXISI                  PaiType = 14
	PaiType_H_CHANGSHA_BANBANHU                PaiType = 15
	PaiType_H_CHANGSHA_QUEYISE                 PaiType = 16
	PaiType_H_CHANGSHA_LIULIUSHUN              PaiType = 17
	PaiType_H_CHANGSHA_PINGHU                  PaiType = 18
	PaiType_H_CHANGSHA_PENGPENGHU              PaiType = 19
	PaiType_H_CHANGSHA_JIANGJIANGHU            PaiType = 20
	PaiType_H_CHANGSHA_QINGYISE                PaiType = 21
	PaiType_H_CHANGSHA_QIXIAODUI               PaiType = 22
	PaiType_H_CHANGSHA_QIXIAODUI_HAOHUA        PaiType = 23
	PaiType_H_CHANGSHA_QIXIAODUI_HAOHUA_DOUBLE PaiType = 24
	PaiType_H_CHANGSHA_QUANQIUREN              PaiType = 25
)

var PaiType_name = map[int32]string{
	1:  "H_DuiDuiHu",
	2:  "H_QingYiSe",
	3:  "H_QiDui",
	4:  "H_DaiYaoJiu",
	5:  "H_LongQiDui",
	6:  "H_JiangDui",
	7:  "H_MenQing",
	8:  "H_ZhongZhang",
	9:  "H_KaErTiao",
	10: "H_JiaXin5",
	11: "H_QingLongQiDui",
	12: "H_QingQiDui",
	13: "H_PingHu",
	14: "H_CHANGSHA_DAXISI",
	15: "H_CHANGSHA_BANBANHU",
	16: "H_CHANGSHA_QUEYISE",
	17: "H_CHANGSHA_LIULIUSHUN",
	18: "H_CHANGSHA_PINGHU",
	19: "H_CHANGSHA_PENGPENGHU",
	20: "H_CHANGSHA_JIANGJIANGHU",
	21: "H_CHANGSHA_QINGYISE",
	22: "H_CHANGSHA_QIXIAODUI",
	23: "H_CHANGSHA_QIXIAODUI_HAOHUA",
	24: "H_CHANGSHA_QIXIAODUI_HAOHUA_DOUBLE",
	25: "H_CHANGSHA_QUANQIUREN",
}
var PaiType_value = map[string]int32{
	"H_DuiDuiHu":                         1,
	"H_QingYiSe":                         2,
	"H_QiDui":                            3,
	"H_DaiYaoJiu":                        4,
	"H_LongQiDui":                        5,
	"H_JiangDui":                         6,
	"H_MenQing":                          7,
	"H_ZhongZhang":                       8,
	"H_KaErTiao":                         9,
	"H_JiaXin5":                          10,
	"H_QingLongQiDui":                    11,
	"H_QingQiDui":                        12,
	"H_PingHu":                           13,
	"H_CHANGSHA_DAXISI":                  14,
	"H_CHANGSHA_BANBANHU":                15,
	"H_CHANGSHA_QUEYISE":                 16,
	"H_CHANGSHA_LIULIUSHUN":              17,
	"H_CHANGSHA_PINGHU":                  18,
	"H_CHANGSHA_PENGPENGHU":              19,
	"H_CHANGSHA_JIANGJIANGHU":            20,
	"H_CHANGSHA_QINGYISE":                21,
	"H_CHANGSHA_QIXIAODUI":               22,
	"H_CHANGSHA_QIXIAODUI_HAOHUA":        23,
	"H_CHANGSHA_QIXIAODUI_HAOHUA_DOUBLE": 24,
	"H_CHANGSHA_QUANQIUREN":              25,
}

func (x PaiType) Enum() *PaiType {
	p := new(PaiType)
	*p = x
	return p
}
func (x PaiType) String() string {
	return proto.EnumName(PaiType_name, int32(x))
}
func (x *PaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaiType_value, data, "PaiType")
	if err != nil {
		return err
	}
	*x = PaiType(value)
	return nil
}
func (PaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

type MJUserGameStatus int32

const (
	MJUserGameStatus_MJ_U_INIT     MJUserGameStatus = 0
	MJUserGameStatus_MJ_U_DINGQUE  MJUserGameStatus = 1
	MJUserGameStatus_MJ_U_EXCHANGE MJUserGameStatus = 2
	MJUserGameStatus_MJ_U_PLAYING  MJUserGameStatus = 3
	MJUserGameStatus_MJ_U_FINISH   MJUserGameStatus = 4
)

var MJUserGameStatus_name = map[int32]string{
	0: "MJ_U_INIT",
	1: "MJ_U_DINGQUE",
	2: "MJ_U_EXCHANGE",
	3: "MJ_U_PLAYING",
	4: "MJ_U_FINISH",
}
var MJUserGameStatus_value = map[string]int32{
	"MJ_U_INIT":     0,
	"MJ_U_DINGQUE":  1,
	"MJ_U_EXCHANGE": 2,
	"MJ_U_PLAYING":  3,
	"MJ_U_FINISH":   4,
}

func (x MJUserGameStatus) Enum() *MJUserGameStatus {
	p := new(MJUserGameStatus)
	*p = x
	return p
}
func (x MJUserGameStatus) String() string {
	return proto.EnumName(MJUserGameStatus_name, int32(x))
}
func (x *MJUserGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJUserGameStatus_value, data, "MJUserGameStatus")
	if err != nil {
		return err
	}
	*x = MJUserGameStatus(value)
	return nil
}
func (MJUserGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

type DeskGameStatus int32

const (
	DeskGameStatus_MJ_D_INIT     DeskGameStatus = 0
	DeskGameStatus_MJ_D_FAPAI    DeskGameStatus = 1
	DeskGameStatus_MJ_D_EXCHANGE DeskGameStatus = 2
	DeskGameStatus_MJ_D_DINGQUE  DeskGameStatus = 3
	DeskGameStatus_MJ_D_PLAYING  DeskGameStatus = 4
	DeskGameStatus_MJ_D_FINISH   DeskGameStatus = 5
	DeskGameStatus_MJ_D_PIAO     DeskGameStatus = 6
)

var DeskGameStatus_name = map[int32]string{
	0: "MJ_D_INIT",
	1: "MJ_D_FAPAI",
	2: "MJ_D_EXCHANGE",
	3: "MJ_D_DINGQUE",
	4: "MJ_D_PLAYING",
	5: "MJ_D_FINISH",
	6: "MJ_D_PIAO",
}
var DeskGameStatus_value = map[string]int32{
	"MJ_D_INIT":     0,
	"MJ_D_FAPAI":    1,
	"MJ_D_EXCHANGE": 2,
	"MJ_D_DINGQUE":  3,
	"MJ_D_PLAYING":  4,
	"MJ_D_FINISH":   5,
	"MJ_D_PIAO":     6,
}

func (x DeskGameStatus) Enum() *DeskGameStatus {
	p := new(DeskGameStatus)
	*p = x
	return p
}
func (x DeskGameStatus) String() string {
	return proto.EnumName(DeskGameStatus_name, int32(x))
}
func (x *DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeskGameStatus_value, data, "DeskGameStatus")
	if err != nil {
		return err
	}
	*x = DeskGameStatus(value)
	return nil
}
func (DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

// 房间类型信息：包含房间类型和对应的局数、封顶、玩法等信息
// 房间类型枚举
type MJRoomType int32

const (
	MJRoomType_roomType_xueZhanDaoDi      MJRoomType = 0
	MJRoomType_roomType_sanRenLiangFang   MJRoomType = 1
	MJRoomType_roomType_siRenLiangFang    MJRoomType = 2
	MJRoomType_roomType_deYangMaJiang     MJRoomType = 3
	MJRoomType_roomType_daoDaoHu          MJRoomType = 4
	MJRoomType_roomType_xueLiuChengHe     MJRoomType = 5
	MJRoomType_roomType_liangRenLiangFang MJRoomType = 6
	MJRoomType_roomType_liangRenSanFang   MJRoomType = 7
	MJRoomType_roomType_sanRenSanFang     MJRoomType = 8
	MJRoomType_roomType_changSha          MJRoomType = 9
	MJRoomType_roomType_zhuoxiazi         MJRoomType = 10
	MJRoomType_roomType_mj_baishan        MJRoomType = 12
	MJRoomType_roomType_mj_songjianghe    MJRoomType = 13
	MJRoomType_roomType_mj_zhuanzhuan     MJRoomType = 14
	MJRoomType_roomType_mj_hongzhong      MJRoomType = 15
)

var MJRoomType_name = map[int32]string{
	0:  "roomType_xueZhanDaoDi",
	1:  "roomType_sanRenLiangFang",
	2:  "roomType_siRenLiangFang",
	3:  "roomType_deYangMaJiang",
	4:  "roomType_daoDaoHu",
	5:  "roomType_xueLiuChengHe",
	6:  "roomType_liangRenLiangFang",
	7:  "roomType_liangRenSanFang",
	8:  "roomType_sanRenSanFang",
	9:  "roomType_changSha",
	10: "roomType_zhuoxiazi",
	12: "roomType_mj_baishan",
	13: "roomType_mj_songjianghe",
	14: "roomType_mj_zhuanzhuan",
	15: "roomType_mj_hongzhong",
}
var MJRoomType_value = map[string]int32{
	"roomType_xueZhanDaoDi":      0,
	"roomType_sanRenLiangFang":   1,
	"roomType_siRenLiangFang":    2,
	"roomType_deYangMaJiang":     3,
	"roomType_daoDaoHu":          4,
	"roomType_xueLiuChengHe":     5,
	"roomType_liangRenLiangFang": 6,
	"roomType_liangRenSanFang":   7,
	"roomType_sanRenSanFang":     8,
	"roomType_changSha":          9,
	"roomType_zhuoxiazi":         10,
	"roomType_mj_baishan":        12,
	"roomType_mj_songjianghe":    13,
	"roomType_mj_zhuanzhuan":     14,
	"roomType_mj_hongzhong":      15,
}

func (x MJRoomType) Enum() *MJRoomType {
	p := new(MJRoomType)
	*p = x
	return p
}
func (x MJRoomType) String() string {
	return proto.EnumName(MJRoomType_name, int32(x))
}
func (x *MJRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJRoomType_value, data, "MJRoomType")
	if err != nil {
		return err
	}
	*x = MJRoomType(value)
	return nil
}
func (MJRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

// 麻将牌
type CardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *CardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type RoomTypeInfo struct {
	MjRoomType            *MJRoomType            `protobuf:"varint,1,opt,name=mjRoomType,enum=ddproto.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout            *int32                 `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	CapMax                *int64                 `protobuf:"varint,3,opt,name=capMax" json:"capMax,omitempty"`
	PlayOptions           *PlayOptions           `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	CardsNum              *int32                 `protobuf:"varint,5,opt,name=cardsNum" json:"cardsNum,omitempty"`
	Settlement            *int32                 `protobuf:"varint,6,opt,name=settlement" json:"settlement,omitempty"`
	BaseValue             *int64                 `protobuf:"varint,7,opt,name=baseValue" json:"baseValue,omitempty"`
	ChangShaPlayOptions   *ChangShaPlayOptions   `protobuf:"bytes,9,opt,name=changShaPlayOptions" json:"changShaPlayOptions,omitempty"`
	BaiShanPlayOptions    *BaiShanPlayOptions    `protobuf:"bytes,10,opt,name=baiShanPlayOptions" json:"baiShanPlayOptions,omitempty"`
	ZhuanzhuanPlayOptions *ZhuanZhuanPlayOptions `protobuf:"bytes,11,opt,name=zhuanzhuanPlayOptions" json:"zhuanzhuanPlayOptions,omitempty"`
	XXX_unrecognized      []byte                 `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_xueZhanDaoDi
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetCapMax() int64 {
	if m != nil && m.CapMax != nil {
		return *m.CapMax
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetCardsNum() int32 {
	if m != nil && m.CardsNum != nil {
		return *m.CardsNum
	}
	return 0
}

func (m *RoomTypeInfo) GetSettlement() int32 {
	if m != nil && m.Settlement != nil {
		return *m.Settlement
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *RoomTypeInfo) GetChangShaPlayOptions() *ChangShaPlayOptions {
	if m != nil {
		return m.ChangShaPlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetBaiShanPlayOptions() *BaiShanPlayOptions {
	if m != nil {
		return m.BaiShanPlayOptions
	}
	return nil
}

func (m *RoomTypeInfo) GetZhuanzhuanPlayOptions() *ZhuanZhuanPlayOptions {
	if m != nil {
		return m.ZhuanzhuanPlayOptions
	}
	return nil
}

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	ZiMoRadio        *int32  `protobuf:"varint,1,opt,name=ziMoRadio" json:"ziMoRadio,omitempty"`
	DianGangHuaRadio *int32  `protobuf:"varint,2,opt,name=dianGangHuaRadio" json:"dianGangHuaRadio,omitempty"`
	OthersCheckBox   []int32 `protobuf:"varint,3,rep,name=othersCheckBox" json:"othersCheckBox,omitempty"`
	HuRadio          *int32  `protobuf:"varint,4,opt,name=huRadio" json:"huRadio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *PlayOptions) GetZiMoRadio() int32 {
	if m != nil && m.ZiMoRadio != nil {
		return *m.ZiMoRadio
	}
	return 0
}

func (m *PlayOptions) GetDianGangHuaRadio() int32 {
	if m != nil && m.DianGangHuaRadio != nil {
		return *m.DianGangHuaRadio
	}
	return 0
}

func (m *PlayOptions) GetOthersCheckBox() []int32 {
	if m != nil {
		return m.OthersCheckBox
	}
	return nil
}

func (m *PlayOptions) GetHuRadio() int32 {
	if m != nil && m.HuRadio != nil {
		return *m.HuRadio
	}
	return 0
}

// 长沙麻将的配置
type ChangShaPlayOptions struct {
	PlayerCount      *int32 `protobuf:"varint,1,opt,name=playerCount" json:"playerCount,omitempty"`
	IgnoreBank       *bool  `protobuf:"varint,2,opt,name=ignoreBank" json:"ignoreBank,omitempty"`
	BirdCount        *int32 `protobuf:"varint,3,opt,name=birdCount" json:"birdCount,omitempty"`
	BirdMultiple     *int32 `protobuf:"varint,4,opt,name=birdMultiple" json:"birdMultiple,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangShaPlayOptions) Reset()                    { *m = ChangShaPlayOptions{} }
func (m *ChangShaPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*ChangShaPlayOptions) ProtoMessage()               {}
func (*ChangShaPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *ChangShaPlayOptions) GetPlayerCount() int32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *ChangShaPlayOptions) GetIgnoreBank() bool {
	if m != nil && m.IgnoreBank != nil {
		return *m.IgnoreBank
	}
	return false
}

func (m *ChangShaPlayOptions) GetBirdCount() int32 {
	if m != nil && m.BirdCount != nil {
		return *m.BirdCount
	}
	return 0
}

func (m *ChangShaPlayOptions) GetBirdMultiple() int32 {
	if m != nil && m.BirdMultiple != nil {
		return *m.BirdMultiple
	}
	return 0
}

// 白山麻将的配置
type BaiShanPlayOptions struct {
	DianPaoBaoFen    *bool  `protobuf:"varint,1,opt,name=dianPaoBaoFen" json:"dianPaoBaoFen,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BaiShanPlayOptions) Reset()                    { *m = BaiShanPlayOptions{} }
func (m *BaiShanPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*BaiShanPlayOptions) ProtoMessage()               {}
func (*BaiShanPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *BaiShanPlayOptions) GetDianPaoBaoFen() bool {
	if m != nil && m.DianPaoBaoFen != nil {
		return *m.DianPaoBaoFen
	}
	return false
}

// 转转麻将的配置
type ZhuanZhuanPlayOptions struct {
	ZhaMa            *int32 `protobuf:"varint,1,opt,name=zhaMa" json:"zhaMa,omitempty"`
	IsZhaMaJiaBei    *bool  `protobuf:"varint,2,opt,name=isZhaMaJiaBei" json:"isZhaMaJiaBei,omitempty"`
	CanJiePaoHu      *bool  `protobuf:"varint,3,opt,name=canJiePaoHu" json:"canJiePaoHu,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ZhuanZhuanPlayOptions) Reset()                    { *m = ZhuanZhuanPlayOptions{} }
func (m *ZhuanZhuanPlayOptions) String() string            { return proto.CompactTextString(m) }
func (*ZhuanZhuanPlayOptions) ProtoMessage()               {}
func (*ZhuanZhuanPlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *ZhuanZhuanPlayOptions) GetZhaMa() int32 {
	if m != nil && m.ZhaMa != nil {
		return *m.ZhaMa
	}
	return 0
}

func (m *ZhuanZhuanPlayOptions) GetIsZhaMaJiaBei() bool {
	if m != nil && m.IsZhaMaJiaBei != nil {
		return *m.IsZhaMaJiaBei
	}
	return false
}

func (m *ZhuanZhuanPlayOptions) GetCanJiePaoHu() bool {
	if m != nil && m.CanJiePaoHu != nil {
		return *m.CanJiePaoHu
	}
	return false
}

type ComposeCard struct {
	Value            *int32  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	ChiValue         []int32 `protobuf:"varint,3,rep,name=chiValue" json:"chiValue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ComposeCard) Reset()                    { *m = ComposeCard{} }
func (m *ComposeCard) String() string            { return proto.CompactTextString(m) }
func (*ComposeCard) ProtoMessage()               {}
func (*ComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *ComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ComposeCard) GetChiValue() []int32 {
	if m != nil {
		return m.ChiValue
	}
	return nil
}

type PlayerCard struct {
	HandCard         []*CardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*ComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []*CardInfo    `protobuf:"bytes,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           []*CardInfo    `protobuf:"bytes,4,rep,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32        `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	HandCardCount    *int32         `protobuf:"varint,6,opt,name=handCardCount" json:"handCardCount,omitempty"`
	IsQianNiu        *bool          `protobuf:"varint,7,opt,name=isQianNiu" json:"isQianNiu,omitempty"`
	GangBeans        []int32        `protobuf:"varint,8,rep,name=gangBeans" json:"gangBeans,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerCard) Reset()                    { *m = PlayerCard{} }
func (m *PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PlayerCard) ProtoMessage()               {}
func (*PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *PlayerCard) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PlayerCard) GetComposeCard() []*ComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *PlayerCard) GetOutCard() []*CardInfo {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *PlayerCard) GetHuCard() []*CardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerCard) GetHandCardCount() int32 {
	if m != nil && m.HandCardCount != nil {
		return *m.HandCardCount
	}
	return 0
}

func (m *PlayerCard) GetIsQianNiu() bool {
	if m != nil && m.IsQianNiu != nil {
		return *m.IsQianNiu
	}
	return false
}

func (m *PlayerCard) GetGangBeans() []int32 {
	if m != nil {
		return m.GangBeans
	}
	return nil
}

// 一组能杠的牌
type GangBean struct {
	Type             *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Cards            []int32 `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GangBean) Reset()                    { *m = GangBean{} }
func (m *GangBean) String() string            { return proto.CompactTextString(m) }
func (*GangBean) ProtoMessage()               {}
func (*GangBean) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *GangBean) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GangBean) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func init() {
	proto.RegisterType((*CardInfo)(nil), "ddproto.CardInfo")
	proto.RegisterType((*RoomTypeInfo)(nil), "ddproto.RoomTypeInfo")
	proto.RegisterType((*PlayOptions)(nil), "ddproto.PlayOptions")
	proto.RegisterType((*ChangShaPlayOptions)(nil), "ddproto.ChangShaPlayOptions")
	proto.RegisterType((*BaiShanPlayOptions)(nil), "ddproto.BaiShanPlayOptions")
	proto.RegisterType((*ZhuanZhuanPlayOptions)(nil), "ddproto.ZhuanZhuanPlayOptions")
	proto.RegisterType((*ComposeCard)(nil), "ddproto.ComposeCard")
	proto.RegisterType((*PlayerCard)(nil), "ddproto.PlayerCard")
	proto.RegisterType((*GangBean)(nil), "ddproto.GangBean")
	proto.RegisterEnum("ddproto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("ddproto.MahjongColor", MahjongColor_name, MahjongColor_value)
	proto.RegisterEnum("ddproto.GangType", GangType_name, GangType_value)
	proto.RegisterEnum("ddproto.HuType", HuType_name, HuType_value)
	proto.RegisterEnum("ddproto.ComposeCardType", ComposeCardType_name, ComposeCardType_value)
	proto.RegisterEnum("ddproto.PaiType", PaiType_name, PaiType_value)
	proto.RegisterEnum("ddproto.MJUserGameStatus", MJUserGameStatus_name, MJUserGameStatus_value)
	proto.RegisterEnum("ddproto.DeskGameStatus", DeskGameStatus_name, DeskGameStatus_value)
	proto.RegisterEnum("ddproto.MJRoomType", MJRoomType_name, MJRoomType_value)
}

func init() { proto.RegisterFile("common_mj.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x56, 0xcd, 0x6f, 0xdb, 0xca,
	0x11, 0xb7, 0xbe, 0xe5, 0x91, 0x2c, 0x6f, 0xd6, 0x71, 0xa2, 0x7c, 0x20, 0xcf, 0x50, 0x5f, 0x1f,
	0x52, 0xbd, 0xbe, 0xa0, 0x48, 0xdb, 0x77, 0xe8, 0x8d, 0x22, 0x69, 0x92, 0x8a, 0x44, 0xc9, 0x94,
	0xd8, 0xc6, 0xbe, 0x10, 0x1b, 0x8b, 0x15, 0xd7, 0xb1, 0x76, 0x5d, 0x49, 0x2c, 0x12, 0x9f, 0x7a,
	0x2a, 0xd0, 0x63, 0x7b, 0x4b, 0x7b, 0x2e, 0xfa, 0x97, 0xf4, 0x9f, 0xea, 0xa5, 0xc5, 0xee, 0xf2,
	0x4b, 0xb6, 0xd3, 0x00, 0x11, 0x38, 0xbf, 0xf9, 0xcd, 0xcc, 0x8f, 0xb3, 0xb3, 0x63, 0xc2, 0xe1,
	0x25, 0x5f, 0xad, 0x38, 0x0b, 0x56, 0x57, 0x6f, 0x6e, 0xd6, 0x7c, 0xcb, 0x71, 0x63, 0xb1, 0x90,
	0x0f, 0xcf, 0x8f, 0x12, 0xcf, 0xe5, 0x35, 0x0d, 0xd9, 0x56, 0x79, 0x7b, 0x06, 0x34, 0x75, 0xb2,
	0x5e, 0x38, 0xec, 0xf7, 0x1c, 0x63, 0xa8, 0x6e, 0x3f, 0xdf, 0x84, 0xdd, 0xd2, 0x49, 0xe9, 0x75,
	0xcd, 0x93, 0xcf, 0xf8, 0x31, 0xd4, 0xfe, 0x48, 0xae, 0xe3, 0xb0, 0x5b, 0x96, 0xa0, 0x32, 0x70,
	0x07, 0xca, 0x74, 0xd1, 0xad, 0x48, 0xa8, 0x4c, 0x17, 0xbd, 0x3f, 0x55, 0xa1, 0xed, 0x71, 0xbe,
	0x9a, 0x7f, 0xbe, 0x09, 0x65, 0xaa, 0x5f, 0x02, 0xac, 0xae, 0x52, 0x44, 0x26, 0xec, 0xbc, 0x3d,
	0x7a, 0x93, 0x28, 0x79, 0x33, 0x1e, 0xa6, 0x2e, 0xaf, 0x40, 0xc3, 0xaf, 0x00, 0x3e, 0x70, 0xb2,
	0x5e, 0x6c, 0x74, 0x1e, 0x6f, 0x93, 0x82, 0x05, 0x04, 0x3f, 0x81, 0xfa, 0x25, 0xb9, 0x19, 0x93,
	0x4f, 0xb2, 0x72, 0xc5, 0x4b, 0x2c, 0xfc, 0x23, 0xb4, 0x6e, 0xae, 0xc9, 0xe7, 0xc9, 0xcd, 0x96,
	0x72, 0xb6, 0xe9, 0x56, 0x4f, 0x4a, 0xaf, 0x5b, 0x6f, 0x1f, 0x67, 0xd5, 0xa6, 0xb9, 0xcf, 0x2b,
	0x12, 0xf1, 0x73, 0x68, 0x5e, 0x8a, 0xe4, 0x6e, 0xbc, 0xea, 0xd6, 0x64, 0xb5, 0xcc, 0x16, 0x5a,
	0x36, 0xe1, 0x76, 0x7b, 0x1d, 0xae, 0x42, 0xb6, 0xed, 0xd6, 0x95, 0x96, 0x1c, 0xc1, 0x2f, 0x61,
	0xff, 0x03, 0xd9, 0x84, 0xbf, 0x95, 0xbd, 0x69, 0x48, 0x39, 0x39, 0x80, 0x5d, 0x38, 0xba, 0x8c,
	0x08, 0x5b, 0xce, 0x22, 0x52, 0xa8, 0xde, 0xdd, 0x97, 0xca, 0x5e, 0x66, 0xca, 0xf4, 0xfb, 0x1c,
	0xef, 0xa1, 0x40, 0xfc, 0x0e, 0xf0, 0x07, 0x42, 0x67, 0x11, 0x61, 0xc5, 0x74, 0x20, 0xd3, 0xbd,
	0xc8, 0xd2, 0x0d, 0xee, 0x51, 0xbc, 0x07, 0xc2, 0xf0, 0x1c, 0x8e, 0x6f, 0xa3, 0x98, 0x30, 0xf9,
	0x53, 0xcc, 0xd7, 0x92, 0xf9, 0x5e, 0x65, 0xf9, 0x2e, 0x04, 0xe1, 0xe2, 0x0e, 0xcb, 0x7b, 0x38,
	0xb8, 0xf7, 0xa5, 0x04, 0xad, 0x62, 0x95, 0x97, 0xb0, 0x7f, 0x4b, 0xc7, 0xdc, 0x23, 0x0b, 0xca,
	0x93, 0x89, 0xca, 0x01, 0xdc, 0x07, 0xb4, 0xa0, 0x84, 0x59, 0x84, 0x2d, 0xed, 0x98, 0x28, 0x92,
	0x3a, 0xf0, 0x7b, 0x38, 0xfe, 0x0e, 0x3a, 0x7c, 0x1b, 0x85, 0xeb, 0x8d, 0x1e, 0x85, 0x97, 0x1f,
	0x07, 0x5c, 0x1c, 0x7f, 0xe5, 0x75, 0xcd, 0xbb, 0x83, 0xe2, 0x2e, 0x34, 0xa2, 0x58, 0xa5, 0xaa,
	0xca, 0x54, 0xa9, 0x29, 0xb4, 0x1d, 0x3d, 0xd0, 0x6b, 0x7c, 0xa2, 0x06, 0x27, 0x5c, 0xeb, 0x3c,
	0x66, 0xdb, 0x44, 0x65, 0x11, 0x12, 0x63, 0x40, 0x97, 0x8c, 0xaf, 0xc3, 0x01, 0x61, 0x1f, 0xa5,
	0xc2, 0xa6, 0x57, 0x40, 0xe4, 0x18, 0xd0, 0xf5, 0x42, 0xc5, 0xab, 0xfb, 0x90, 0x03, 0xb8, 0x07,
	0x6d, 0x61, 0x8c, 0xe3, 0xeb, 0x2d, 0xbd, 0xb9, 0x0e, 0x13, 0x59, 0x3b, 0x58, 0xef, 0x37, 0x80,
	0xef, 0x9f, 0x1b, 0xfe, 0x16, 0x0e, 0x44, 0x1f, 0xa6, 0x84, 0x0f, 0x08, 0x3f, 0x0d, 0x99, 0xd4,
	0xd6, 0xf4, 0x76, 0xc1, 0x5e, 0x0c, 0xc7, 0x0f, 0x9e, 0x91, 0xb8, 0xb5, 0xb7, 0x11, 0x19, 0x93,
	0xe4, 0x95, 0x94, 0x21, 0x92, 0xd2, 0xcd, 0x85, 0x78, 0x1c, 0x52, 0x32, 0x08, 0x69, 0xf2, 0x3e,
	0xbb, 0xa0, 0x68, 0xca, 0x25, 0x61, 0x43, 0x1a, 0x4e, 0x09, 0xb7, 0x63, 0xf9, 0x52, 0x4d, 0xaf,
	0x08, 0xf5, 0x66, 0xd0, 0xd2, 0xf9, 0xea, 0x86, 0x6f, 0x42, 0xb1, 0x3a, 0xf2, 0x15, 0x51, 0x2a,
	0xae, 0x88, 0x74, 0x99, 0x94, 0x0b, 0xcb, 0x44, 0x5c, 0xb8, 0x88, 0xaa, 0x3b, 0xa3, 0xce, 0x30,
	0xb3, 0x7b, 0xff, 0x2e, 0x03, 0x4c, 0x55, 0xe7, 0x45, 0xd2, 0x1f, 0xa0, 0x19, 0x11, 0xb6, 0x10,
	0xcf, 0xdd, 0xd2, 0x49, 0xe5, 0x75, 0xeb, 0xed, 0xa3, 0xfc, 0xda, 0x24, 0x0b, 0xcb, 0xcb, 0x28,
	0x62, 0x05, 0x5c, 0xe6, 0x92, 0xba, 0x65, 0x19, 0x91, 0xaf, 0x80, 0x82, 0x5c, 0xaf, 0x48, 0xc4,
	0xdf, 0x43, 0x83, 0xc7, 0x5b, 0x19, 0x53, 0xf9, 0x5a, 0x95, 0x94, 0x81, 0x7f, 0x06, 0xf5, 0x28,
	0x96, 0xdc, 0xea, 0xd7, 0xb8, 0x09, 0x41, 0xac, 0x2a, 0x7f, 0x13, 0xae, 0x9d, 0x85, 0x5c, 0x2c,
	0x07, 0x5e, 0x62, 0x89, 0x23, 0x48, 0x35, 0xab, 0x99, 0x51, 0x9b, 0x65, 0x17, 0x14, 0x53, 0x45,
	0x37, 0x67, 0x94, 0x30, 0x97, 0xc6, 0x72, 0xb9, 0x34, 0xbd, 0x1c, 0x10, 0xde, 0x25, 0x61, 0xcb,
	0x41, 0x48, 0xd8, 0xa6, 0xdb, 0x94, 0x6d, 0xcc, 0x81, 0xde, 0xaf, 0xa0, 0x69, 0x25, 0xc6, 0xd7,
	0x16, 0xba, 0x5c, 0x72, 0xb2, 0x47, 0x35, 0x4f, 0x19, 0xfd, 0xff, 0x94, 0x60, 0xdf, 0x5c, 0xaf,
	0xf9, 0x5a, 0xe7, 0x8b, 0x10, 0x3f, 0x82, 0x83, 0xf1, 0x30, 0x30, 0xf5, 0x60, 0xe6, 0xeb, 0xba,
	0x39, 0x9b, 0xa1, 0x3d, 0xfc, 0x0b, 0xf8, 0x89, 0x82, 0x74, 0xcf, 0xd4, 0xe6, 0x66, 0x60, 0x98,
	0xb3, 0x77, 0x81, 0xe1, 0x68, 0xe3, 0x89, 0x6b, 0x04, 0xee, 0x64, 0x6e, 0xba, 0x13, 0xdf, 0xb2,
	0xd1, 0x3f, 0xfe, 0x9b, 0xfc, 0x2b, 0xe1, 0x9f, 0xc3, 0x37, 0xf7, 0x23, 0xfc, 0x99, 0xe9, 0x09,
	0xfa, 0xe9, 0xc4, 0x77, 0x0d, 0xf4, 0xf7, 0x9c, 0xfd, 0x53, 0xe8, 0x2a, 0xb6, 0xe3, 0xce, 0x27,
	0x8a, 0x9b, 0xd1, 0xbe, 0xe4, 0xb4, 0x6f, 0xe1, 0xa9, 0xa2, 0x59, 0xda, 0xd8, 0x0c, 0x3c, 0x53,
	0x33, 0xce, 0x03, 0xcf, 0x9c, 0x9a, 0xda, 0x1c, 0xfd, 0x2d, 0x67, 0xfd, 0x00, 0x27, 0xf7, 0x58,
	0xba, 0xed, 0x4c, 0x45, 0xca, 0x20, 0x51, 0xfa, 0xd7, 0x8c, 0xde, 0xff, 0x1e, 0xda, 0x63, 0x12,
	0x5d, 0x71, 0xb6, 0xd4, 0xf9, 0x35, 0x5f, 0xe3, 0x06, 0x54, 0x7e, 0xa7, 0xb9, 0xa8, 0x84, 0x9b,
	0x50, 0x9d, 0x3b, 0xda, 0x04, 0x95, 0xe5, 0xd3, 0xc4, 0xb5, 0x50, 0xa5, 0xff, 0xa3, 0xea, 0xaf,
	0xfc, 0x83, 0xd5, 0x01, 0xb0, 0x82, 0xb1, 0xe3, 0x5a, 0x96, 0xe6, 0x5a, 0xa8, 0x84, 0xdb, 0xd0,
	0xb4, 0x82, 0x81, 0x26, 0xad, 0xb2, 0xb2, 0x34, 0x57, 0x5a, 0x95, 0xfe, 0x5f, 0xca, 0x50, 0xb7,
	0x63, 0x19, 0xd6, 0x86, 0xa6, 0x1d, 0xb8, 0x13, 0x6f, 0xac, 0x8d, 0xd0, 0x9e, 0xb2, 0xe6, 0x94,
	0x30, 0x3b, 0x46, 0x25, 0x0c, 0x50, 0xb7, 0x03, 0x83, 0xda, 0x31, 0x2a, 0x63, 0x0c, 0x1d, 0x3b,
	0xb0, 0xd4, 0xda, 0x92, 0xfb, 0x10, 0x55, 0xee, 0x60, 0x53, 0xc2, 0x51, 0x15, 0x1f, 0x42, 0xcb,
	0x0e, 0xc4, 0x74, 0x2c, 0x85, 0x03, 0xd5, 0x84, 0x2e, 0x3b, 0xb0, 0x09, 0x35, 0xe8, 0x88, 0x70,
	0x54, 0x2f, 0xd8, 0x22, 0xa0, 0x81, 0x9f, 0xc2, 0x91, 0xb4, 0x17, 0x74, 0x27, 0x7b, 0xf3, 0x21,
	0x87, 0x88, 0xd8, 0xc7, 0x08, 0xda, 0x76, 0x30, 0xa4, 0xcc, 0xe2, 0xb1, 0x41, 0x09, 0x47, 0xa0,
	0x90, 0x0b, 0x3a, 0xe6, 0x43, 0x4a, 0x4e, 0x09, 0x43, 0x2d, 0x25, 0x23, 0x41, 0x0c, 0x8a, 0xda,
	0x2a, 0x9b, 0xfc, 0x73, 0xb6, 0x89, 0x48, 0xf0, 0x07, 0xba, 0x89, 0x78, 0x1c, 0xc5, 0xe8, 0xa0,
	0x3f, 0x87, 0xc3, 0xc2, 0x8d, 0x4c, 0x5b, 0xa9, 0xdf, 0x69, 0xa5, 0xbe, 0xd3, 0x4a, 0x3d, 0x6b,
	0xa5, 0xe8, 0x91, 0x1e, 0x4c, 0x4d, 0xd7, 0x42, 0x55, 0xbc, 0x0f, 0x35, 0x5d, 0x9c, 0x2d, 0xaa,
	0xf5, 0xff, 0x59, 0x85, 0xc6, 0x94, 0xd0, 0x34, 0x9d, 0x1d, 0x18, 0x31, 0x35, 0x62, 0x2a, 0xdb,
	0x2a, 0xed, 0x33, 0xca, 0x96, 0xe7, 0x74, 0x16, 0xa2, 0x32, 0x6e, 0x41, 0x43, 0xd8, 0x46, 0x4c,
	0x51, 0x45, 0x09, 0x37, 0x08, 0x3d, 0x27, 0x7c, 0x48, 0xe3, 0xb4, 0xa1, 0x23, 0xce, 0x96, 0x8a,
	0x91, 0x34, 0x74, 0x28, 0x3a, 0x2c, 0xec, 0x3a, 0x3e, 0x80, 0x7d, 0x3b, 0x18, 0x87, 0x4c, 0x64,
	0x44, 0x8d, 0xa4, 0x17, 0x11, 0x67, 0xcb, 0x0b, 0xf1, 0xb6, 0xa8, 0xa9, 0x02, 0xde, 0x11, 0x73,
	0x3d, 0xa7, 0xb2, 0x7f, 0x32, 0x60, 0x48, 0xc9, 0x7b, 0xca, 0x7e, 0x8d, 0x00, 0x1f, 0xc1, 0xa1,
	0x92, 0x93, 0x17, 0x69, 0xa5, 0xc7, 0x98, 0x02, 0x6d, 0x35, 0x19, 0x53, 0x2a, 0x0e, 0x07, 0x1d,
	0xe0, 0x63, 0x78, 0x64, 0x07, 0xba, 0xad, 0xb9, 0xd6, 0xcc, 0xd6, 0x02, 0x43, 0x7b, 0xef, 0xcc,
	0x1c, 0xd4, 0x51, 0x4d, 0xce, 0xe0, 0x81, 0xe6, 0x0e, 0x34, 0xd7, 0xf6, 0xd1, 0x21, 0x7e, 0x02,
	0xb8, 0xe0, 0x38, 0xf3, 0xcd, 0x73, 0x67, 0x66, 0x22, 0x84, 0x9f, 0xc1, 0x71, 0x01, 0x1f, 0x39,
	0xfe, 0xc8, 0xf1, 0x67, 0xb6, 0xef, 0xa2, 0x47, 0x77, 0x4a, 0x4c, 0x1d, 0xd7, 0xb2, 0x7d, 0x84,
	0xef, 0x44, 0x88, 0xc6, 0x8b, 0xff, 0xb6, 0x8f, 0x8e, 0xf0, 0x0b, 0x78, 0x5a, 0x70, 0x0d, 0x1d,
	0xcd, 0xb5, 0xe4, 0x8f, 0xed, 0xa3, 0xc7, 0x77, 0xa4, 0x9d, 0x39, 0xae, 0x25, 0x25, 0x1c, 0xe3,
	0x2e, 0x3c, 0xde, 0x71, 0xbc, 0x77, 0xb4, 0x89, 0xe1, 0x3b, 0xe8, 0x09, 0xfe, 0x06, 0x5e, 0x3c,
	0xe4, 0x09, 0x6c, 0x6d, 0x62, 0xfb, 0x1a, 0x7a, 0x8a, 0xbf, 0x83, 0xde, 0xff, 0x21, 0x04, 0xc6,
	0xc4, 0x1f, 0x8c, 0x4c, 0xd4, 0xbd, 0xa3, 0xf9, 0xcc, 0xd7, 0xdc, 0x33, 0xc7, 0xf7, 0x4c, 0x17,
	0x3d, 0xeb, 0x53, 0x40, 0xe3, 0xa1, 0xd8, 0xc7, 0x16, 0x59, 0x85, 0xb3, 0x2d, 0xd9, 0xc6, 0x1b,
	0x71, 0x3e, 0xe3, 0x61, 0xe0, 0x07, 0x8e, 0xeb, 0xcc, 0xd1, 0x9e, 0x38, 0x50, 0x69, 0x1a, 0x8e,
	0x6b, 0x9d, 0xf9, 0x26, 0x2a, 0x25, 0x2b, 0xd1, 0x0f, 0xcc, 0xf7, 0x32, 0xa9, 0x89, 0xca, 0x19,
	0x69, 0x3a, 0xd2, 0xce, 0x1d, 0x39, 0x98, 0x87, 0xd0, 0x92, 0xc8, 0xa9, 0xe3, 0x3a, 0x33, 0x1b,
	0x55, 0xfb, 0x7f, 0x2e, 0x41, 0xc7, 0x08, 0x37, 0x1f, 0xef, 0x55, 0x32, 0xd2, 0x4a, 0x1d, 0x00,
	0x69, 0x9e, 0x6a, 0x53, 0xcd, 0xc9, 0xea, 0x18, 0xf7, 0xeb, 0x18, 0x99, 0x98, 0x4a, 0x86, 0xa4,
	0x95, 0xab, 0x49, 0x65, 0x23, 0xad, 0x5c, 0xcb, 0xca, 0x4c, 0xc5, 0xfe, 0xaa, 0xf7, 0xff, 0x55,
	0x11, 0x75, 0xb2, 0x2f, 0xed, 0x67, 0x70, 0xbc, 0x4e, 0x9e, 0x83, 0x4f, 0x71, 0x28, 0xa6, 0xd6,
	0x20, 0xdc, 0xa0, 0x68, 0x0f, 0xbf, 0x84, 0x6e, 0xe6, 0xda, 0x10, 0xe6, 0x85, 0x6c, 0x24, 0xe6,
	0xfe, 0x54, 0xcc, 0x75, 0x49, 0x9c, 0x77, 0xee, 0xa5, 0x3b, 0xce, 0x32, 0x7e, 0x0e, 0x4f, 0x32,
	0xe7, 0x22, 0x3c, 0x27, 0x6c, 0x29, 0x3f, 0x2a, 0xd8, 0x12, 0x55, 0xc4, 0x68, 0xe5, 0x3e, 0xc2,
	0x0d, 0xf1, 0x21, 0x81, 0xaa, 0x3b, 0x21, 0x9f, 0xe2, 0x70, 0x44, 0x63, 0x3d, 0x0a, 0xd9, 0xd2,
	0x0e, 0x51, 0x0d, 0xbf, 0x82, 0xe7, 0x99, 0xef, 0x5a, 0xa4, 0xd9, 0x29, 0x57, 0xdf, 0x51, 0x9a,
	0xfa, 0x67, 0x84, 0x49, 0x6f, 0x63, 0x27, 0xb3, 0x7a, 0x8f, 0xd4, 0xd7, 0xdc, 0x11, 0x93, 0x7e,
	0x6e, 0xa3, 0x7d, 0x71, 0x63, 0x32, 0xf8, 0x36, 0x8a, 0xf9, 0x27, 0x4a, 0x6e, 0x29, 0x02, 0x31,
	0xc7, 0x19, 0xbe, 0xba, 0x0a, 0x3e, 0x10, 0xba, 0x89, 0x08, 0x43, 0xed, 0x9d, 0x6e, 0xac, 0xae,
	0x82, 0x0d, 0x67, 0xcb, 0x2b, 0x21, 0x24, 0x0a, 0xd1, 0xc1, 0x8e, 0x80, 0xd5, 0x55, 0x90, 0x7f,
	0x35, 0xa3, 0xce, 0x4e, 0xff, 0x57, 0x57, 0x81, 0xd8, 0x1c, 0xb7, 0xe2, 0x07, 0x1d, 0x4e, 0xf7,
	0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x41, 0x78, 0x4a, 0xf8, 0xc2, 0x0d, 0x00, 0x00,
}
