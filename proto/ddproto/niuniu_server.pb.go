// Code generated by protoc-gen-go.
// source: niuniu_server.proto
// DO NOT EDIT!

package ddproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of common_srv_pokerPai from common_server_poker.proto

// 牛牛牌的类型
type NiuniuEnum_PokerType int32

const (
	NiuniuEnum_PokerType_NO_NIU NiuniuEnum_PokerType = 1
	NiuniuEnum_PokerType_NIU_1  NiuniuEnum_PokerType = 2
	NiuniuEnum_PokerType_NIU_2  NiuniuEnum_PokerType = 3
)

var NiuniuEnum_PokerType_name = map[int32]string{
	1: "NO_NIU",
	2: "NIU_1",
	3: "NIU_2",
}
var NiuniuEnum_PokerType_value = map[string]int32{
	"NO_NIU": 1,
	"NIU_1":  2,
	"NIU_2":  3,
}

func (x NiuniuEnum_PokerType) Enum() *NiuniuEnum_PokerType {
	p := new(NiuniuEnum_PokerType)
	*p = x
	return p
}
func (x NiuniuEnum_PokerType) String() string {
	return proto.EnumName(NiuniuEnum_PokerType_name, int32(x))
}
func (x *NiuniuEnum_PokerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnum_PokerType_value, data, "NiuniuEnum_PokerType")
	if err != nil {
		return err
	}
	*x = NiuniuEnum_PokerType(value)
	return nil
}
func (NiuniuEnum_PokerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor28, []int{0} }

// 用户游戏状态
type NiuniuEnumGameState int32

const (
	NiuniuEnumGameState_NO_READY   NiuniuEnumGameState = 1
	NiuniuEnumGameState_IS_READY   NiuniuEnumGameState = 2
	NiuniuEnumGameState_IS_GAMMING NiuniuEnumGameState = 3
)

var NiuniuEnumGameState_name = map[int32]string{
	1: "NO_READY",
	2: "IS_READY",
	3: "IS_GAMMING",
}
var NiuniuEnumGameState_value = map[string]int32{
	"NO_READY":   1,
	"IS_READY":   2,
	"IS_GAMMING": 3,
}

func (x NiuniuEnumGameState) Enum() *NiuniuEnumGameState {
	p := new(NiuniuEnumGameState)
	*p = x
	return p
}
func (x NiuniuEnumGameState) String() string {
	return proto.EnumName(NiuniuEnumGameState_name, int32(x))
}
func (x *NiuniuEnumGameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NiuniuEnumGameState_value, data, "NiuniuEnumGameState")
	if err != nil {
		return err
	}
	*x = NiuniuEnumGameState(value)
	return nil
}
func (NiuniuEnumGameState) EnumDescriptor() ([]byte, []int) { return fileDescriptor28, []int{1} }

// 打出去的牌
type NiuniuSrvPoker struct {
	Pais             []*CommonSrvPokerPai  `protobuf:"bytes,2,rep,name=pais" json:"pais,omitempty"`
	Type             *NiuniuEnum_PokerType `protobuf:"varint,3,opt,name=type,enum=ddproto.NiuniuEnum_PokerType" json:"type,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *NiuniuSrvPoker) Reset()                    { *m = NiuniuSrvPoker{} }
func (m *NiuniuSrvPoker) String() string            { return proto.CompactTextString(m) }
func (*NiuniuSrvPoker) ProtoMessage()               {}
func (*NiuniuSrvPoker) Descriptor() ([]byte, []int) { return fileDescriptor28, []int{0} }

func (m *NiuniuSrvPoker) GetPais() []*CommonSrvPokerPai {
	if m != nil {
		return m.Pais
	}
	return nil
}

func (m *NiuniuSrvPoker) GetType() NiuniuEnum_PokerType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NiuniuEnum_PokerType_NO_NIU
}

// 对局账单信息
type NiuniuSrvUserBill struct {
	Score            *int32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	CountHasNiu      *int32 `protobuf:"varint,2,opt,name=count_has_niu,json=countHasNiu" json:"count_has_niu,omitempty"`
	CountNoNiu       *int32 `protobuf:"varint,3,opt,name=count_no_niu,json=countNoNiu" json:"count_no_niu,omitempty"`
	CountWin         *int32 `protobuf:"varint,4,opt,name=count_win,json=countWin" json:"count_win,omitempty"`
	CountLost        *int32 `protobuf:"varint,5,opt,name=count_lost,json=countLost" json:"count_lost,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NiuniuSrvUserBill) Reset()                    { *m = NiuniuSrvUserBill{} }
func (m *NiuniuSrvUserBill) String() string            { return proto.CompactTextString(m) }
func (*NiuniuSrvUserBill) ProtoMessage()               {}
func (*NiuniuSrvUserBill) Descriptor() ([]byte, []int) { return fileDescriptor28, []int{1} }

func (m *NiuniuSrvUserBill) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *NiuniuSrvUserBill) GetCountHasNiu() int32 {
	if m != nil && m.CountHasNiu != nil {
		return *m.CountHasNiu
	}
	return 0
}

func (m *NiuniuSrvUserBill) GetCountNoNiu() int32 {
	if m != nil && m.CountNoNiu != nil {
		return *m.CountNoNiu
	}
	return 0
}

func (m *NiuniuSrvUserBill) GetCountWin() int32 {
	if m != nil && m.CountWin != nil {
		return *m.CountWin
	}
	return 0
}

func (m *NiuniuSrvUserBill) GetCountLost() int32 {
	if m != nil && m.CountLost != nil {
		return *m.CountLost
	}
	return 0
}

// 用户属性
type NiuniuSrvUser struct {
	UserId           *uint32              `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	RoomId           *int32               `protobuf:"varint,3,opt,name=roomId" json:"roomId,omitempty"`
	DeskId           *int32               `protobuf:"varint,4,opt,name=deskId" json:"deskId,omitempty"`
	GameNumber       *int32               `protobuf:"varint,5,opt,name=gameNumber" json:"gameNumber,omitempty"`
	Bill             *NiuniuSrvUserBill   `protobuf:"bytes,6,opt,name=bill" json:"bill,omitempty"`
	Status           *NiuniuEnumGameState `protobuf:"varint,7,opt,name=status,enum=ddproto.NiuniuEnumGameState" json:"status,omitempty"`
	IsOnline         *bool                `protobuf:"varint,10,opt,name=isOnline" json:"isOnline,omitempty"`
	Index            *int32               `protobuf:"varint,12,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *NiuniuSrvUser) Reset()                    { *m = NiuniuSrvUser{} }
func (m *NiuniuSrvUser) String() string            { return proto.CompactTextString(m) }
func (*NiuniuSrvUser) ProtoMessage()               {}
func (*NiuniuSrvUser) Descriptor() ([]byte, []int) { return fileDescriptor28, []int{2} }

func (m *NiuniuSrvUser) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *NiuniuSrvUser) GetRoomId() int32 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *NiuniuSrvUser) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *NiuniuSrvUser) GetGameNumber() int32 {
	if m != nil && m.GameNumber != nil {
		return *m.GameNumber
	}
	return 0
}

func (m *NiuniuSrvUser) GetBill() *NiuniuSrvUserBill {
	if m != nil {
		return m.Bill
	}
	return nil
}

func (m *NiuniuSrvUser) GetStatus() NiuniuEnumGameState {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return NiuniuEnumGameState_NO_READY
}

func (m *NiuniuSrvUser) GetIsOnline() bool {
	if m != nil && m.IsOnline != nil {
		return *m.IsOnline
	}
	return false
}

func (m *NiuniuSrvUser) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

// desk 的信息
type NiuniuSrvDesk struct {
	DeskId           *int32               `protobuf:"varint,1,opt,name=deskId" json:"deskId,omitempty"`
	DeskNumber       *string              `protobuf:"bytes,2,opt,name=deskNumber" json:"deskNumber,omitempty"`
	GameNumber       *int32               `protobuf:"varint,3,opt,name=gameNumber" json:"gameNumber,omitempty"`
	RoomId           *int32               `protobuf:"varint,4,opt,name=roomId" json:"roomId,omitempty"`
	LastWiner        *uint32              `protobuf:"varint,5,opt,name=lastWiner" json:"lastWiner,omitempty"`
	Status           *NiuniuEnumGameState `protobuf:"varint,6,opt,name=status,enum=ddproto.NiuniuEnumGameState" json:"status,omitempty"`
	MinUser          *int32               `protobuf:"varint,7,opt,name=minUser" json:"minUser,omitempty"`
	CircleNo         *int32               `protobuf:"varint,8,opt,name=circleNo" json:"circleNo,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *NiuniuSrvDesk) Reset()                    { *m = NiuniuSrvDesk{} }
func (m *NiuniuSrvDesk) String() string            { return proto.CompactTextString(m) }
func (*NiuniuSrvDesk) ProtoMessage()               {}
func (*NiuniuSrvDesk) Descriptor() ([]byte, []int) { return fileDescriptor28, []int{3} }

func (m *NiuniuSrvDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *NiuniuSrvDesk) GetDeskNumber() string {
	if m != nil && m.DeskNumber != nil {
		return *m.DeskNumber
	}
	return ""
}

func (m *NiuniuSrvDesk) GetGameNumber() int32 {
	if m != nil && m.GameNumber != nil {
		return *m.GameNumber
	}
	return 0
}

func (m *NiuniuSrvDesk) GetRoomId() int32 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *NiuniuSrvDesk) GetLastWiner() uint32 {
	if m != nil && m.LastWiner != nil {
		return *m.LastWiner
	}
	return 0
}

func (m *NiuniuSrvDesk) GetStatus() NiuniuEnumGameState {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return NiuniuEnumGameState_NO_READY
}

func (m *NiuniuSrvDesk) GetMinUser() int32 {
	if m != nil && m.MinUser != nil {
		return *m.MinUser
	}
	return 0
}

func (m *NiuniuSrvDesk) GetCircleNo() int32 {
	if m != nil && m.CircleNo != nil {
		return *m.CircleNo
	}
	return 0
}

// room 的信息
type NiuniuSrvRoom struct {
	RoomId           *int32  `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
	RoomType         *int32  `protobuf:"varint,2,opt,name=roomType" json:"roomType,omitempty"`
	RoomLevel        *int32  `protobuf:"varint,3,opt,name=roomLevel" json:"roomLevel,omitempty"`
	RoomTitle        *string `protobuf:"bytes,4,opt,name=roomTitle" json:"roomTitle,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NiuniuSrvRoom) Reset()                    { *m = NiuniuSrvRoom{} }
func (m *NiuniuSrvRoom) String() string            { return proto.CompactTextString(m) }
func (*NiuniuSrvRoom) ProtoMessage()               {}
func (*NiuniuSrvRoom) Descriptor() ([]byte, []int) { return fileDescriptor28, []int{4} }

func (m *NiuniuSrvRoom) GetRoomId() int32 {
	if m != nil && m.RoomId != nil {
		return *m.RoomId
	}
	return 0
}

func (m *NiuniuSrvRoom) GetRoomType() int32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *NiuniuSrvRoom) GetRoomLevel() int32 {
	if m != nil && m.RoomLevel != nil {
		return *m.RoomLevel
	}
	return 0
}

func (m *NiuniuSrvRoom) GetRoomTitle() string {
	if m != nil && m.RoomTitle != nil {
		return *m.RoomTitle
	}
	return ""
}

func init() {
	proto.RegisterType((*NiuniuSrvPoker)(nil), "ddproto.niuniu_srv_poker")
	proto.RegisterType((*NiuniuSrvUserBill)(nil), "ddproto.niuniu_srv_user_bill")
	proto.RegisterType((*NiuniuSrvUser)(nil), "ddproto.niuniu_srv_user")
	proto.RegisterType((*NiuniuSrvDesk)(nil), "ddproto.niuniu_srv_desk")
	proto.RegisterType((*NiuniuSrvRoom)(nil), "ddproto.niuniu_srv_room")
	proto.RegisterEnum("ddproto.NiuniuEnum_PokerType", NiuniuEnum_PokerType_name, NiuniuEnum_PokerType_value)
	proto.RegisterEnum("ddproto.NiuniuEnumGameState", NiuniuEnumGameState_name, NiuniuEnumGameState_value)
}

var fileDescriptor28 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x26, 0x4d, 0xdb, 0xa5, 0x6f, 0x3f, 0x88, 0xcc, 0x98, 0xcc, 0xd8, 0x46, 0x94, 0x53, 0xb5,
	0xc3, 0xc4, 0x7a, 0x41, 0x1c, 0x27, 0x0d, 0x8d, 0x48, 0x5b, 0x56, 0x79, 0xab, 0x10, 0x27, 0x2b,
	0x6b, 0x2c, 0xb0, 0x96, 0xd8, 0x55, 0x9c, 0x94, 0xed, 0xc8, 0x3f, 0xc0, 0x95, 0xff, 0x82, 0xbf,
	0x11, 0xd9, 0x71, 0xda, 0xb4, 0xf4, 0xc2, 0x29, 0xef, 0xfb, 0xde, 0x67, 0xbf, 0xf7, 0xbe, 0x17,
	0xc3, 0x2b, 0xc1, 0x2b, 0xc1, 0x2b, 0xaa, 0x58, 0x31, 0x67, 0xc5, 0xd9, 0xac, 0x90, 0xa5, 0x44,
	0x5b, 0x69, 0x6a, 0x82, 0xc3, 0x37, 0x53, 0x99, 0xe7, 0x52, 0xd8, 0x2c, 0x9d, 0xc9, 0xc7, 0x46,
	0x13, 0x3e, 0x81, 0xdf, 0x1c, 0x2d, 0xe6, 0x75, 0x06, 0xbd, 0x87, 0xee, 0x2c, 0xe1, 0x0a, 0x77,
	0x02, 0x77, 0xb8, 0x3d, 0x3a, 0x3a, 0xb3, 0xd7, 0x9c, 0x35, 0xb7, 0x34, 0xc2, 0x71, 0xc2, 0x89,
	0x51, 0xa2, 0x11, 0x74, 0xcb, 0xe7, 0x19, 0xc3, 0x6e, 0xe0, 0x0c, 0xf7, 0x46, 0x27, 0x8b, 0x13,
	0xf6, 0x6a, 0x26, 0xaa, 0x9c, 0x8e, 0xf5, 0x91, 0xfb, 0xe7, 0x19, 0x23, 0x46, 0x1b, 0xfe, 0x71,
	0x60, 0xbf, 0x55, 0xba, 0x52, 0xac, 0xa0, 0x0f, 0x3c, 0xcb, 0xd0, 0x3e, 0xf4, 0xd4, 0x54, 0x16,
	0x0c, 0x3b, 0x81, 0x33, 0xec, 0x91, 0x1a, 0xa0, 0x10, 0x76, 0xa7, 0xb2, 0x12, 0x25, 0xfd, 0x9e,
	0x28, 0x2a, 0x78, 0x85, 0x3b, 0x26, 0xbb, 0x6d, 0xc8, 0xcf, 0x89, 0x8a, 0x79, 0x85, 0x02, 0xd8,
	0xa9, 0x35, 0x42, 0x1a, 0x89, 0x6b, 0x24, 0x60, 0xb8, 0x58, 0x6a, 0xc5, 0x5b, 0x18, 0xd4, 0x8a,
	0x1f, 0x5c, 0xe0, 0xae, 0x49, 0x7b, 0x86, 0xf8, 0xc2, 0x05, 0x3a, 0x86, 0x5a, 0x4a, 0x33, 0xa9,
	0x4a, 0xdc, 0x33, 0xd9, 0x5a, 0x7e, 0x2d, 0x55, 0x19, 0xfe, 0xee, 0xc0, 0xcb, 0xb5, 0x86, 0xd1,
	0x01, 0xf4, 0xf5, 0x37, 0x4a, 0x4d, 0xb3, 0xbb, 0xc4, 0x22, 0xcd, 0x17, 0x52, 0xe6, 0x51, 0x6a,
	0x7b, 0xb0, 0x48, 0xf3, 0x29, 0x53, 0x8f, 0x51, 0x6a, 0x8b, 0x5b, 0x84, 0x4e, 0x00, 0xbe, 0x25,
	0x39, 0x8b, 0xab, 0xfc, 0x81, 0x15, 0xb6, 0x74, 0x8b, 0x41, 0xe7, 0xd0, 0xd5, 0xde, 0xe0, 0x7e,
	0xe0, 0x0c, 0xb7, 0x47, 0xc7, 0xeb, 0x06, 0xaf, 0x18, 0x48, 0x8c, 0x14, 0x7d, 0x80, 0xbe, 0x2a,
	0x93, 0xb2, 0x52, 0x78, 0xcb, 0x6c, 0xe5, 0xdd, 0xc6, 0xad, 0xe8, 0x1a, 0x54, 0xeb, 0x18, 0xb1,
	0x72, 0x74, 0x08, 0x1e, 0x57, 0xb7, 0x22, 0xe3, 0x82, 0x61, 0x08, 0x9c, 0xa1, 0x47, 0x16, 0x58,
	0xef, 0x86, 0x8b, 0x94, 0x3d, 0xe1, 0x9d, 0x7a, 0x37, 0x06, 0x84, 0xbf, 0x56, 0x9d, 0xd1, 0x33,
	0xb5, 0x26, 0x75, 0xd6, 0x27, 0xd5, 0x91, 0x9d, 0x54, 0x2f, 0x71, 0x40, 0x5a, 0xcc, 0x9a, 0x13,
	0xee, 0x3f, 0x4e, 0x2c, 0x9d, 0xed, 0xae, 0x38, 0x7b, 0x04, 0x83, 0x2c, 0x51, 0x7a, 0x8f, 0xd6,
	0xc0, 0x5d, 0xb2, 0x24, 0x5a, 0x66, 0xf4, 0xff, 0xcf, 0x0c, 0x0c, 0x5b, 0x39, 0x17, 0x13, 0xc5,
	0x0a, 0x63, 0x63, 0x8f, 0x34, 0x50, 0xdb, 0x34, 0xe5, 0xc5, 0x34, 0x63, 0xb1, 0xc4, 0x9e, 0xfd,
	0x93, 0x2c, 0x0e, 0x7f, 0x3a, 0x2b, 0x86, 0xe8, 0x16, 0x5b, 0x8d, 0x3b, 0x2b, 0x8d, 0x1f, 0x82,
	0xa7, 0x23, 0xfd, 0x32, 0xec, 0x3f, 0xbd, 0xc0, 0x7a, 0x28, 0x1d, 0x5f, 0xb3, 0x39, 0xcb, 0xac,
	0x17, 0x4b, 0xa2, 0xc9, 0xde, 0xf3, 0x32, 0x63, 0xc6, 0x8d, 0x01, 0x59, 0x12, 0xa7, 0x1f, 0xe1,
	0xf5, 0xc6, 0xe7, 0x87, 0x00, 0xfa, 0xf1, 0x2d, 0x8d, 0xa3, 0x89, 0xef, 0xa0, 0x01, 0xf4, 0xe2,
	0x68, 0x42, 0xcf, 0xfd, 0x4e, 0x13, 0x8e, 0x7c, 0xf7, 0xf4, 0x12, 0x0e, 0x36, 0xdb, 0x82, 0x76,
	0xc0, 0x8b, 0x6f, 0x29, 0xf9, 0x74, 0x71, 0xf9, 0xd5, 0x77, 0x34, 0x8a, 0xee, 0x2c, 0xea, 0xa0,
	0x3d, 0x80, 0xe8, 0x8e, 0x5e, 0x5d, 0xdc, 0xdc, 0x44, 0xf1, 0x95, 0xef, 0x8e, 0x5f, 0xfc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x8e, 0x9a, 0x7d, 0x6b, 0x96, 0x04, 0x00, 0x00,
}
