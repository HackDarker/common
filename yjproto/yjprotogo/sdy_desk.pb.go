// Code generated by protoc-gen-go.
// source: sdy_desk.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of GAME_ID from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// 准备游戏
type SdyReqReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyReqReady) Reset()                    { *m = SdyReqReady{} }
func (m *SdyReqReady) String() string            { return proto.CompactTextString(m) }
func (*SdyReqReady) ProtoMessage()               {}
func (*SdyReqReady) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SdyReqReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyReqReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 准备游戏的结果
type SdyAckReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msg              *string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyAckReady) Reset()                    { *m = SdyAckReady{} }
func (m *SdyAckReady) String() string            { return proto.CompactTextString(m) }
func (*SdyAckReady) ProtoMessage()               {}
func (*SdyAckReady) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *SdyAckReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyAckReady) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *SdyAckReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 赢牌信息：谁赢了多少
type SdyBaseWinCoinInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	TotalScore       *int32       `protobuf:"varint,2,opt,name=totalScore" json:"totalScore,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseWinCoinInfo) Reset()                    { *m = SdyBaseWinCoinInfo{} }
func (m *SdyBaseWinCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseWinCoinInfo) ProtoMessage()               {}
func (*SdyBaseWinCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *SdyBaseWinCoinInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseWinCoinInfo) GetTotalScore() int32 {
	if m != nil && m.TotalScore != nil {
		return *m.TotalScore
	}
	return 0
}

// 本局结果(广播)
type SdyBcCurrentResult struct {
	WinCoinInfo      []*SdyBaseWinCoinInfo `protobuf:"bytes,1,rep,name=winCoinInfo" json:"winCoinInfo,omitempty"`
	BankerScore      *int32                `protobuf:"varint,2,opt,name=bankerScore" json:"bankerScore,omitempty"`
	CurrentRound     *int32                `protobuf:"varint,3,opt,name=currentRound" json:"currentRound,omitempty"`
	BoardsCout       *int32                `protobuf:"varint,4,opt,name=boardsCout" json:"boardsCout,omitempty"`
	FootPokers       []int32               `protobuf:"varint,5,rep,name=footPokers" json:"footPokers,omitempty"`
	BaseValue        *int32                `protobuf:"varint,6,opt,name=baseValue" json:"baseValue,omitempty"`
	WinCoin          *int32                `protobuf:"varint,7,opt,name=winCoin" json:"winCoin,omitempty"`
	IsWangKou        *bool                 `protobuf:"varint,8,opt,name=isWangKou" json:"isWangKou,omitempty"`
	IsPoPai          *bool                 `protobuf:"varint,9,opt,name=isPoPai" json:"isPoPai,omitempty"`
	IsKouDi          *bool                 `protobuf:"varint,10,opt,name=isKouDi" json:"isKouDi,omitempty"`
	IsGuang          *bool                 `protobuf:"varint,11,opt,name=isGuang" json:"isGuang,omitempty"`
	IsShangChe       *bool                 `protobuf:"varint,12,opt,name=isShangChe" json:"isShangChe,omitempty"`
	IsChengPai       *bool                 `protobuf:"varint,13,opt,name=isChengPai" json:"isChengPai,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SdyBcCurrentResult) Reset()                    { *m = SdyBcCurrentResult{} }
func (m *SdyBcCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*SdyBcCurrentResult) ProtoMessage()               {}
func (*SdyBcCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *SdyBcCurrentResult) GetWinCoinInfo() []*SdyBaseWinCoinInfo {
	if m != nil {
		return m.WinCoinInfo
	}
	return nil
}

func (m *SdyBcCurrentResult) GetBankerScore() int32 {
	if m != nil && m.BankerScore != nil {
		return *m.BankerScore
	}
	return 0
}

func (m *SdyBcCurrentResult) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *SdyBcCurrentResult) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *SdyBcCurrentResult) GetFootPokers() []int32 {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *SdyBcCurrentResult) GetBaseValue() int32 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *SdyBcCurrentResult) GetWinCoin() int32 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBcCurrentResult) GetIsWangKou() bool {
	if m != nil && m.IsWangKou != nil {
		return *m.IsWangKou
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsPoPai() bool {
	if m != nil && m.IsPoPai != nil {
		return *m.IsPoPai
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsKouDi() bool {
	if m != nil && m.IsKouDi != nil {
		return *m.IsKouDi
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsGuang() bool {
	if m != nil && m.IsGuang != nil {
		return *m.IsGuang
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsShangChe() bool {
	if m != nil && m.IsShangChe != nil {
		return *m.IsShangChe
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsChengPai() bool {
	if m != nil && m.IsChengPai != nil {
		return *m.IsChengPai
	}
	return false
}

type SdyBaseBill struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NickName         *string      `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	BigWin           *bool        `protobuf:"varint,4,opt,name=bigWin" json:"bigWin,omitempty"`
	IsOwner          *bool        `protobuf:"varint,5,opt,name=isOwner" json:"isOwner,omitempty"`
	WinCoin          *int32       `protobuf:"varint,6,opt,name=winCoin" json:"winCoin,omitempty"`
	ChengPai         *int32       `protobuf:"varint,7,opt,name=chengPai" json:"chengPai,omitempty"`
	PoPai            *int32       `protobuf:"varint,8,opt,name=poPai" json:"poPai,omitempty"`
	KouDi            *int32       `protobuf:"varint,9,opt,name=kouDi" json:"kouDi,omitempty"`
	GuangPai         *int32       `protobuf:"varint,10,opt,name=guangPai" json:"guangPai,omitempty"`
	ShangChe         *int32       `protobuf:"varint,11,opt,name=shangChe" json:"shangChe,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseBill) Reset()                    { *m = SdyBaseBill{} }
func (m *SdyBaseBill) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseBill) ProtoMessage()               {}
func (*SdyBaseBill) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *SdyBaseBill) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseBill) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBaseBill) GetBigWin() bool {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return false
}

func (m *SdyBaseBill) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *SdyBaseBill) GetWinCoin() int32 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBaseBill) GetChengPai() int32 {
	if m != nil && m.ChengPai != nil {
		return *m.ChengPai
	}
	return 0
}

func (m *SdyBaseBill) GetPoPai() int32 {
	if m != nil && m.PoPai != nil {
		return *m.PoPai
	}
	return 0
}

func (m *SdyBaseBill) GetKouDi() int32 {
	if m != nil && m.KouDi != nil {
		return *m.KouDi
	}
	return 0
}

func (m *SdyBaseBill) GetGuangPai() int32 {
	if m != nil && m.GuangPai != nil {
		return *m.GuangPai
	}
	return 0
}

func (m *SdyBaseBill) GetShangChe() int32 {
	if m != nil && m.ShangChe != nil {
		return *m.ShangChe
	}
	return 0
}

// 全局结果
type SdyBcEndLotteryInfo struct {
	UserBills        []*SdyBaseBill `protobuf:"bytes,1,rep,name=userBills" json:"userBills,omitempty"`
	CurrentRound     *int32         `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	BoardsCout       *int32         `protobuf:"varint,3,opt,name=boardsCout" json:"boardsCout,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SdyBcEndLotteryInfo) Reset()                    { *m = SdyBcEndLotteryInfo{} }
func (m *SdyBcEndLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBcEndLotteryInfo) ProtoMessage()               {}
func (*SdyBcEndLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *SdyBcEndLotteryInfo) GetUserBills() []*SdyBaseBill {
	if m != nil {
		return m.UserBills
	}
	return nil
}

func (m *SdyBcEndLotteryInfo) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func init() {
	proto.RegisterType((*SdyReqReady)(nil), "yjprotogo.sdy_req_ready")
	proto.RegisterType((*SdyAckReady)(nil), "yjprotogo.sdy_ack_ready")
	proto.RegisterType((*SdyBaseWinCoinInfo)(nil), "yjprotogo.sdy_base_winCoinInfo")
	proto.RegisterType((*SdyBcCurrentResult)(nil), "yjprotogo.sdy_bc_currentResult")
	proto.RegisterType((*SdyBaseBill)(nil), "yjprotogo.sdy_base_bill")
	proto.RegisterType((*SdyBcEndLotteryInfo)(nil), "yjprotogo.sdy_bc_endLotteryInfo")
}

var fileDescriptor5 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x25, 0x0d, 0xed, 0x12, 0x67, 0x45, 0x28, 0x8c, 0xc9, 0xaa, 0x10, 0x44, 0x39, 0xf5, 0xd4,
	0xc3, 0x0e, 0xdc, 0x59, 0x91, 0xd8, 0x34, 0x04, 0x55, 0x26, 0xd1, 0x63, 0xe5, 0x26, 0x6e, 0x6a,
	0x92, 0xda, 0xc3, 0x76, 0x34, 0xf5, 0x77, 0xf0, 0x23, 0xf8, 0x21, 0xfc, 0x31, 0xf4, 0xd9, 0x71,
	0x93, 0xc2, 0x24, 0xb4, 0x9d, 0x96, 0xf7, 0x9e, 0xfd, 0x3d, 0x7f, 0x6f, 0xaf, 0xe8, 0x85, 0x2a,
	0xf6, 0xab, 0x82, 0xaa, 0x6a, 0x76, 0x27, 0x85, 0x16, 0x71, 0xb8, 0xff, 0x6e, 0x3e, 0x4a, 0x31,
	0x79, 0x95, 0x8b, 0xdd, 0x4e, 0xf0, 0x55, 0x5e, 0x33, 0xca, 0xb5, 0xd5, 0xd3, 0x25, 0x1a, 0xc3,
	0x0d, 0x49, 0x7f, 0xac, 0x24, 0x25, 0xc5, 0x3e, 0x9e, 0xa1, 0xd1, 0x96, 0x92, 0x82, 0x4a, 0xec,
	0x25, 0xde, 0x34, 0xba, 0x38, 0x9f, 0x1d, 0x26, 0xcc, 0x16, 0xf0, 0xf7, 0xca, 0xa8, 0x59, 0x7b,
	0x2a, 0x3e, 0x47, 0xa3, 0x46, 0x51, 0x79, 0x5d, 0xe0, 0x41, 0xe2, 0x4d, 0xc7, 0x59, 0x8b, 0x52,
	0x66, 0x07, 0x93, 0xbc, 0x7a, 0xe2, 0xe0, 0x97, 0xc8, 0xdf, 0xa9, 0xd2, 0x4c, 0x0d, 0x33, 0xf8,
	0xec, 0x59, 0xf9, 0x47, 0x56, 0x1b, 0x74, 0x06, 0x56, 0x6b, 0xa2, 0xe8, 0xea, 0x9e, 0xf1, 0xb9,
	0x60, 0xfc, 0x9a, 0x6f, 0xc4, 0xa3, 0x1d, 0xdf, 0x22, 0xa4, 0x85, 0x26, 0xf5, 0x6d, 0x2e, 0x24,
	0x35, 0xc6, 0xc3, 0xac, 0xc7, 0xa4, 0xbf, 0xfd, 0xd6, 0x28, 0x5f, 0xe5, 0x8d, 0x94, 0x94, 0xeb,
	0x8c, 0xaa, 0xa6, 0xd6, 0xf1, 0x07, 0x14, 0xf5, 0x7c, 0xb1, 0x97, 0xf8, 0xd3, 0xe8, 0xe2, 0x5d,
	0xcf, 0xed, 0xa1, 0xe7, 0x65, 0xfd, 0x3b, 0x71, 0x82, 0xa2, 0x35, 0xe1, 0x15, 0x95, 0x7d, 0xf3,
	0x3e, 0x15, 0xa7, 0xe8, 0xd4, 0xb9, 0x8a, 0x86, 0xdb, 0x0c, 0x86, 0xd9, 0x11, 0x07, 0x1b, 0xac,
	0x05, 0x91, 0x85, 0x9a, 0x8b, 0x46, 0xe3, 0xe7, 0x76, 0x83, 0x8e, 0x01, 0x7d, 0x23, 0x84, 0x5e,
	0x88, 0x8a, 0x4a, 0x85, 0x87, 0x89, 0x0f, 0x7a, 0xc7, 0xc4, 0x6f, 0x50, 0x08, 0xcf, 0xfc, 0x46,
	0xea, 0x86, 0xe2, 0x91, 0xb9, 0xde, 0x11, 0x31, 0x46, 0x27, 0xed, 0x93, 0xf1, 0x89, 0xd1, 0x1c,
	0x84, 0x7b, 0x4c, 0x2d, 0x09, 0x2f, 0x6f, 0x44, 0x83, 0x83, 0xc4, 0x9b, 0x06, 0x59, 0x47, 0xc0,
	0x3d, 0xa6, 0x16, 0x62, 0x41, 0x18, 0x0e, 0x8d, 0xe6, 0xa0, 0x55, 0x6e, 0x44, 0xf3, 0x91, 0x61,
	0xe4, 0x14, 0x03, 0xad, 0xf2, 0xa9, 0x21, 0xbc, 0xc4, 0x91, 0x53, 0x0c, 0x84, 0x1d, 0x98, 0xba,
	0xdd, 0x12, 0x5e, 0xce, 0xb7, 0x14, 0x9f, 0x1a, 0xb1, 0xc7, 0x58, 0x7d, 0xbe, 0xa5, 0xbc, 0x04,
	0xc3, 0xb1, 0xd3, 0x1d, 0x93, 0xfe, 0x1a, 0xd8, 0x66, 0x9a, 0xff, 0xc7, 0x9a, 0xd5, 0xf5, 0xa3,
	0x7b, 0x32, 0x41, 0x01, 0x67, 0x79, 0xf5, 0x85, 0xec, 0x68, 0x5b, 0xcf, 0x03, 0x86, 0x8e, 0xae,
	0x59, 0xb9, 0x64, 0xdc, 0xa4, 0x1f, 0x64, 0x2d, 0xb2, 0xfb, 0x7c, 0xbd, 0xe7, 0x54, 0xe2, 0xa1,
	0xdb, 0xc7, 0xc0, 0x7e, 0xaa, 0xa3, 0xe3, 0x54, 0x27, 0x28, 0xc8, 0xdd, 0x1e, 0x36, 0xf0, 0x03,
	0x8e, 0xcf, 0xd0, 0xf0, 0xce, 0x24, 0x1a, 0x18, 0xc1, 0x02, 0x60, 0x2b, 0x93, 0x66, 0x68, 0x59,
	0x03, 0x60, 0x4e, 0x09, 0xd1, 0xc1, 0x71, 0x64, 0xe7, 0x38, 0x0c, 0x9a, 0x72, 0x59, 0x46, 0x56,
	0x73, 0x38, 0xfd, 0xe9, 0xa1, 0xd7, 0x6d, 0xdf, 0x29, 0x2f, 0x3e, 0x0b, 0xad, 0xa9, 0xdc, 0x9b,
	0xb6, 0xbe, 0x47, 0x21, 0xfc, 0xf6, 0x2e, 0x59, 0x5d, 0xab, 0xb6, 0xee, 0xf8, 0xa1, 0xba, 0x43,
	0xbc, 0x59, 0x77, 0xf4, 0x9f, 0x0e, 0x0f, 0xfe, 0xdb, 0x61, 0xff, 0xef, 0x0e, 0x5f, 0x0e, 0xae,
	0xfc, 0xc5, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x26, 0x46, 0x12, 0xe5, 0xe8, 0x04, 0x00,
	0x00,
}
