// Code generated by protoc-gen-go.
// source: sdy_desk.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// 房主解散房间(未开局)
type SdyReqDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyReqDissolveDesk) Reset()                    { *m = SdyReqDissolveDesk{} }
func (m *SdyReqDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*SdyReqDissolveDesk) ProtoMessage()               {}
func (*SdyReqDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *SdyReqDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyReqDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 解散房间回复
type SdyAckDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	DeskId           *int32       `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	PassWord         *string      `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyAckDissolveDesk) Reset()                    { *m = SdyAckDissolveDesk{} }
func (m *SdyAckDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*SdyAckDissolveDesk) ProtoMessage()               {}
func (*SdyAckDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *SdyAckDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyAckDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyAckDissolveDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *SdyAckDissolveDesk) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

// 准备游戏
type SdyReqReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyReqReady) Reset()                    { *m = SdyReqReady{} }
func (m *SdyReqReady) String() string            { return proto.CompactTextString(m) }
func (*SdyReqReady) ProtoMessage()               {}
func (*SdyReqReady) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *SdyReqReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyReqReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 准备游戏的结果
type SdyAckReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msg              *string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyAckReady) Reset()                    { *m = SdyAckReady{} }
func (m *SdyAckReady) String() string            { return proto.CompactTextString(m) }
func (*SdyAckReady) ProtoMessage()               {}
func (*SdyAckReady) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *SdyAckReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyAckReady) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *SdyAckReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 赢牌信息：谁赢了多少
type SdyBaseWinCoinInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NickName         *string      `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	BaseValue        *int32       `protobuf:"varint,4,opt,name=baseValue" json:"baseValue,omitempty"`
	WinCoin          *int64       `protobuf:"varint,5,opt,name=winCoin" json:"winCoin,omitempty"`
	Coin             *int64       `protobuf:"varint,6,opt,name=coin" json:"coin,omitempty"`
	IsBanker         *bool        `protobuf:"varint,7,opt,name=isBanker" json:"isBanker,omitempty"`
	Rate             *int32       `protobuf:"varint,8,opt,name=rate" json:"rate,omitempty"`
	Description      *string      `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	HandPokers       []int32      `protobuf:"varint,10,rep,name=handPokers" json:"handPokers,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseWinCoinInfo) Reset()                    { *m = SdyBaseWinCoinInfo{} }
func (m *SdyBaseWinCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseWinCoinInfo) ProtoMessage()               {}
func (*SdyBaseWinCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *SdyBaseWinCoinInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseWinCoinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBaseWinCoinInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetBaseValue() int32 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetWinCoin() int64 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetRate() int32 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *SdyBaseWinCoinInfo) GetHandPokers() []int32 {
	if m != nil {
		return m.HandPokers
	}
	return nil
}

// 本局结果(广播)
type SdyBcCurrentResult struct {
	Header           *ProtoHeader          `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	WinCoinInfo      []*SdyBaseWinCoinInfo `protobuf:"bytes,2,rep,name=winCoinInfo" json:"winCoinInfo,omitempty"`
	RemainPais       []int32               `protobuf:"varint,3,rep,name=RemainPais" json:"RemainPais,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SdyBcCurrentResult) Reset()                    { *m = SdyBcCurrentResult{} }
func (m *SdyBcCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*SdyBcCurrentResult) ProtoMessage()               {}
func (*SdyBcCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *SdyBcCurrentResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBcCurrentResult) GetWinCoinInfo() []*SdyBaseWinCoinInfo {
	if m != nil {
		return m.WinCoinInfo
	}
	return nil
}

func (m *SdyBcCurrentResult) GetRemainPais() []int32 {
	if m != nil {
		return m.RemainPais
	}
	return nil
}

type SdyBcEndLotteryInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	NickName         *string      `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	BigWin           *bool        `protobuf:"varint,4,opt,name=bigWin" json:"bigWin,omitempty"`
	IsOwner          *bool        `protobuf:"varint,5,opt,name=isOwner" json:"isOwner,omitempty"`
	WinCoin          *int64       `protobuf:"varint,6,opt,name=winCoin" json:"winCoin,omitempty"`
	MaxWinCoin       *int32       `protobuf:"varint,7,opt,name=maxWinCoin" json:"maxWinCoin,omitempty"`
	CountBomb        *int32       `protobuf:"varint,8,opt,name=countBomb" json:"countBomb,omitempty"`
	CountWin         *int32       `protobuf:"varint,9,opt,name=countWin" json:"countWin,omitempty"`
	CountLose        *int32       `protobuf:"varint,10,opt,name=countLose" json:"countLose,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBcEndLotteryInfo) Reset()                    { *m = SdyBcEndLotteryInfo{} }
func (m *SdyBcEndLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBcEndLotteryInfo) ProtoMessage()               {}
func (*SdyBcEndLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *SdyBcEndLotteryInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBcEndLotteryInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBcEndLotteryInfo) GetBigWin() bool {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return false
}

func (m *SdyBcEndLotteryInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *SdyBcEndLotteryInfo) GetWinCoin() int64 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetMaxWinCoin() int32 {
	if m != nil && m.MaxWinCoin != nil {
		return *m.MaxWinCoin
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetCountBomb() int32 {
	if m != nil && m.CountBomb != nil {
		return *m.CountBomb
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetCountWin() int32 {
	if m != nil && m.CountWin != nil {
		return *m.CountWin
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetCountLose() int32 {
	if m != nil && m.CountLose != nil {
		return *m.CountLose
	}
	return 0
}

func init() {
	proto.RegisterType((*SdyReqDissolveDesk)(nil), "yjprotogo.sdy_req_dissolveDesk")
	proto.RegisterType((*SdyAckDissolveDesk)(nil), "yjprotogo.sdy_ack_dissolveDesk")
	proto.RegisterType((*SdyReqReady)(nil), "yjprotogo.sdy_req_ready")
	proto.RegisterType((*SdyAckReady)(nil), "yjprotogo.sdy_ack_ready")
	proto.RegisterType((*SdyBaseWinCoinInfo)(nil), "yjprotogo.sdy_base_winCoinInfo")
	proto.RegisterType((*SdyBcCurrentResult)(nil), "yjprotogo.sdy_bc_currentResult")
	proto.RegisterType((*SdyBcEndLotteryInfo)(nil), "yjprotogo.sdy_bc_endLotteryInfo")
}

var fileDescriptor4 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x65, 0xb3, 0x4d, 0xb2, 0x3b, 0x51, 0x11, 0x5a, 0xa0, 0xb2, 0x22, 0x54, 0x56, 0x39, 0xed,
	0x29, 0x87, 0xfe, 0x01, 0x81, 0x43, 0x23, 0x55, 0x10, 0xf9, 0x40, 0x6e, 0x44, 0xce, 0x7a, 0x48,
	0xcd, 0x66, 0xed, 0x60, 0x6f, 0x28, 0xf9, 0x0d, 0xfe, 0x82, 0x3f, 0xe0, 0xc6, 0xaf, 0x21, 0x3b,
	0xce, 0xc6, 0x15, 0xf4, 0xd0, 0x8a, 0x9e, 0x32, 0xef, 0xcd, 0xce, 0xbc, 0x99, 0x79, 0x0e, 0x3c,
	0x35, 0x7c, 0xb7, 0xe0, 0x68, 0xaa, 0xf1, 0x46, 0xab, 0x46, 0x65, 0xe9, 0xee, 0x8b, 0x0b, 0x56,
	0x6a, 0xf8, 0xbc, 0x54, 0x75, 0xad, 0xe4, 0xa2, 0x5c, 0x0b, 0x94, 0xcd, 0x3e, 0x3f, 0xfa, 0x04,
	0x2f, 0x6c, 0x85, 0xc6, 0xaf, 0x0b, 0x2e, 0x8c, 0x51, 0xeb, 0x6f, 0xf8, 0x0e, 0x4d, 0x95, 0x8d,
	0xa1, 0x77, 0x8d, 0x8c, 0xa3, 0x26, 0x51, 0x1e, 0x15, 0x83, 0x8b, 0xb3, 0x71, 0xdb, 0x68, 0x3c,
	0xb3, 0xbf, 0x97, 0x2e, 0x4b, 0xfd, 0x57, 0xd9, 0x19, 0xf4, 0xb6, 0x06, 0xf5, 0x94, 0x93, 0x4e,
	0x1e, 0x15, 0xa7, 0xd4, 0xa3, 0xd1, 0x8f, 0x68, 0x2f, 0xc0, 0xca, 0xea, 0x51, 0x04, 0x2c, 0x6f,
	0xd7, 0x9d, 0x72, 0x12, 0xe7, 0x51, 0xd1, 0xa5, 0x1e, 0x65, 0x43, 0x48, 0x36, 0xcc, 0x98, 0xb9,
	0xd2, 0x9c, 0x9c, 0xe4, 0x51, 0x91, 0xd2, 0x16, 0x8f, 0xe6, 0x70, 0x7a, 0x58, 0x5a, 0x23, 0xe3,
	0xbb, 0xff, 0xb6, 0xad, 0xd8, 0x37, 0xb6, 0xcb, 0x3e, 0xac, 0xf1, 0x33, 0x88, 0x6b, 0xb3, 0x72,
	0x5d, 0x53, 0x6a, 0xc3, 0x40, 0x2a, 0xbe, 0x25, 0xf5, 0xab, 0xb3, 0x3f, 0xec, 0x92, 0x19, 0x5c,
	0xdc, 0x08, 0xf9, 0x56, 0x09, 0x39, 0x95, 0x9f, 0xd5, 0xbd, 0x25, 0x87, 0x90, 0x48, 0x51, 0x56,
	0xef, 0x59, 0x8d, 0x5e, 0xb7, 0xc5, 0x77, 0x89, 0x67, 0xaf, 0x20, 0xb5, 0xba, 0x1f, 0xd9, 0x7a,
	0x8b, 0xee, 0xba, 0x5d, 0x7a, 0x24, 0x32, 0x02, 0x7d, 0x3f, 0x10, 0xe9, 0xe6, 0x51, 0x11, 0xd3,
	0x03, 0xcc, 0x32, 0x38, 0x29, 0x2d, 0xdd, 0x73, 0xb4, 0x8b, 0xad, 0xbe, 0x30, 0x13, 0x26, 0x2b,
	0xd4, 0xa4, 0x9f, 0x47, 0x45, 0x42, 0x5b, 0x6c, 0xbf, 0xd7, 0xac, 0x41, 0x92, 0x38, 0x09, 0x17,
	0x67, 0x39, 0x0c, 0x38, 0x9a, 0x52, 0x8b, 0x4d, 0x23, 0x94, 0x24, 0xa9, 0x1b, 0x39, 0xa4, 0xb2,
	0x73, 0x80, 0x6b, 0x26, 0xf9, 0x4c, 0x55, 0xa8, 0x0d, 0x81, 0x3c, 0x2e, 0xba, 0x34, 0x60, 0x46,
	0x3f, 0xfd, 0x9b, 0x5c, 0x96, 0x8b, 0x72, 0xab, 0x35, 0xca, 0x86, 0xa2, 0xd9, 0xae, 0x9b, 0x7b,
	0x9f, 0xee, 0x0d, 0x0c, 0x82, 0xcb, 0x93, 0x4e, 0x1e, 0x17, 0x83, 0x8b, 0xd7, 0x41, 0xd1, 0xbf,
	0x0c, 0xa2, 0x61, 0x8d, 0x9d, 0x95, 0x62, 0xcd, 0x84, 0x9c, 0x31, 0x61, 0x48, 0xbc, 0x9f, 0xf5,
	0xc8, 0x8c, 0x7e, 0x77, 0xe0, 0xa5, 0x9f, 0x15, 0x25, 0xbf, 0x52, 0x4d, 0x83, 0x7a, 0xf7, 0x20,
	0x9f, 0xef, 0xfa, 0x03, 0x85, 0xfe, 0xc7, 0x7f, 0xfb, 0xbf, 0x14, 0xab, 0xb9, 0x90, 0xce, 0xe4,
	0x84, 0x7a, 0x64, 0x1d, 0x16, 0xe6, 0xc3, 0x8d, 0x44, 0xed, 0x1c, 0x4e, 0xe8, 0x01, 0x86, 0xde,
	0xf7, 0x6e, 0x7b, 0x7f, 0x0e, 0x50, 0xb3, 0xef, 0x73, 0x9f, 0xec, 0x3b, 0x47, 0x03, 0xc6, 0xbe,
	0xa9, 0x52, 0x6d, 0x65, 0x33, 0x51, 0xf5, 0xd2, 0x1b, 0x7e, 0x24, 0xec, 0x94, 0x0e, 0xd8, 0x59,
	0x52, 0x97, 0x6c, 0x71, 0x5b, 0x79, 0xa5, 0x0c, 0x12, 0x08, 0x2a, 0x2d, 0x31, 0xe9, 0x5c, 0xc6,
	0xb3, 0x27, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0x69, 0x44, 0xa5, 0x18, 0x05, 0x00, 0x00,
}
