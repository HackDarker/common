// Code generated by protoc-gen-go.
// source: sdy_desk.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of GAME_ID from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// 房主解散房间(未开局)
type SdyReqDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyReqDissolveDesk) Reset()                    { *m = SdyReqDissolveDesk{} }
func (m *SdyReqDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*SdyReqDissolveDesk) ProtoMessage()               {}
func (*SdyReqDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SdyReqDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyReqDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 解散房间回复
type SdyAckDissolveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	DeskId           *int32       `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	PassWord         *string      `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyAckDissolveDesk) Reset()                    { *m = SdyAckDissolveDesk{} }
func (m *SdyAckDissolveDesk) String() string            { return proto.CompactTextString(m) }
func (*SdyAckDissolveDesk) ProtoMessage()               {}
func (*SdyAckDissolveDesk) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *SdyAckDissolveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyAckDissolveDesk) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyAckDissolveDesk) GetDeskId() int32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *SdyAckDissolveDesk) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

// 准备游戏
type SdyReqReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyReqReady) Reset()                    { *m = SdyReqReady{} }
func (m *SdyReqReady) String() string            { return proto.CompactTextString(m) }
func (*SdyReqReady) ProtoMessage()               {}
func (*SdyReqReady) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *SdyReqReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyReqReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 准备游戏的结果
type SdyAckReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msg              *string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyAckReady) Reset()                    { *m = SdyAckReady{} }
func (m *SdyAckReady) String() string            { return proto.CompactTextString(m) }
func (*SdyAckReady) ProtoMessage()               {}
func (*SdyAckReady) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *SdyAckReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyAckReady) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *SdyAckReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 赢牌信息：谁赢了多少
type SdyBaseWinCoinInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NickName         *string      `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	BaseValue        *int32       `protobuf:"varint,3,opt,name=baseValue" json:"baseValue,omitempty"`
	WinCoin          *int32       `protobuf:"varint,4,opt,name=winCoin" json:"winCoin,omitempty"`
	Coin             *int32       `protobuf:"varint,5,opt,name=coin" json:"coin,omitempty"`
	IsBanker         *bool        `protobuf:"varint,6,opt,name=isBanker" json:"isBanker,omitempty"`
	HandPokers       []int32      `protobuf:"varint,7,rep,name=handPokers" json:"handPokers,omitempty"`
	Score            *int32       `protobuf:"varint,8,opt,name=score" json:"score,omitempty"`
	IsWangKou        *bool        `protobuf:"varint,9,opt,name=isWangKou" json:"isWangKou,omitempty"`
	IsPoPai          *bool        `protobuf:"varint,10,opt,name=isPoPai" json:"isPoPai,omitempty"`
	IsKouDi          *bool        `protobuf:"varint,11,opt,name=isKouDi" json:"isKouDi,omitempty"`
	IsGuang          *bool        `protobuf:"varint,12,opt,name=isGuang" json:"isGuang,omitempty"`
	IsShangChe       *bool        `protobuf:"varint,13,opt,name=isShangChe" json:"isShangChe,omitempty"`
	IsChengPai       *bool        `protobuf:"varint,14,opt,name=isChengPai" json:"isChengPai,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseWinCoinInfo) Reset()                    { *m = SdyBaseWinCoinInfo{} }
func (m *SdyBaseWinCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseWinCoinInfo) ProtoMessage()               {}
func (*SdyBaseWinCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *SdyBaseWinCoinInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseWinCoinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBaseWinCoinInfo) GetBaseValue() int32 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetWinCoin() int32 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetCoin() int32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetHandPokers() []int32 {
	if m != nil {
		return m.HandPokers
	}
	return nil
}

func (m *SdyBaseWinCoinInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetIsWangKou() bool {
	if m != nil && m.IsWangKou != nil {
		return *m.IsWangKou
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetIsPoPai() bool {
	if m != nil && m.IsPoPai != nil {
		return *m.IsPoPai
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetIsKouDi() bool {
	if m != nil && m.IsKouDi != nil {
		return *m.IsKouDi
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetIsGuang() bool {
	if m != nil && m.IsGuang != nil {
		return *m.IsGuang
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetIsShangChe() bool {
	if m != nil && m.IsShangChe != nil {
		return *m.IsShangChe
	}
	return false
}

func (m *SdyBaseWinCoinInfo) GetIsChengPai() bool {
	if m != nil && m.IsChengPai != nil {
		return *m.IsChengPai
	}
	return false
}

// 本局结果(广播)
type SdyBcCurrentResult struct {
	WinCoinInfo      []*SdyBaseWinCoinInfo `protobuf:"bytes,1,rep,name=winCoinInfo" json:"winCoinInfo,omitempty"`
	CurrentRound     *int32                `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	BoardsCout       *int32                `protobuf:"varint,3,opt,name=boardsCout" json:"boardsCout,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SdyBcCurrentResult) Reset()                    { *m = SdyBcCurrentResult{} }
func (m *SdyBcCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*SdyBcCurrentResult) ProtoMessage()               {}
func (*SdyBcCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *SdyBcCurrentResult) GetWinCoinInfo() []*SdyBaseWinCoinInfo {
	if m != nil {
		return m.WinCoinInfo
	}
	return nil
}

func (m *SdyBcCurrentResult) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *SdyBcCurrentResult) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

type SdyBaseBill struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NickName         *string      `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	BigWin           *bool        `protobuf:"varint,4,opt,name=bigWin" json:"bigWin,omitempty"`
	IsOwner          *bool        `protobuf:"varint,5,opt,name=isOwner" json:"isOwner,omitempty"`
	WinCoin          *int32       `protobuf:"varint,6,opt,name=winCoin" json:"winCoin,omitempty"`
	ChengPai         *int32       `protobuf:"varint,7,opt,name=chengPai" json:"chengPai,omitempty"`
	PoPai            *int32       `protobuf:"varint,8,opt,name=poPai" json:"poPai,omitempty"`
	KouDi            *int32       `protobuf:"varint,9,opt,name=kouDi" json:"kouDi,omitempty"`
	GuangPai         *int32       `protobuf:"varint,10,opt,name=guangPai" json:"guangPai,omitempty"`
	ShangChe         *int32       `protobuf:"varint,11,opt,name=shangChe" json:"shangChe,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseBill) Reset()                    { *m = SdyBaseBill{} }
func (m *SdyBaseBill) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseBill) ProtoMessage()               {}
func (*SdyBaseBill) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *SdyBaseBill) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseBill) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBaseBill) GetBigWin() bool {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return false
}

func (m *SdyBaseBill) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *SdyBaseBill) GetWinCoin() int32 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBaseBill) GetChengPai() int32 {
	if m != nil && m.ChengPai != nil {
		return *m.ChengPai
	}
	return 0
}

func (m *SdyBaseBill) GetPoPai() int32 {
	if m != nil && m.PoPai != nil {
		return *m.PoPai
	}
	return 0
}

func (m *SdyBaseBill) GetKouDi() int32 {
	if m != nil && m.KouDi != nil {
		return *m.KouDi
	}
	return 0
}

func (m *SdyBaseBill) GetGuangPai() int32 {
	if m != nil && m.GuangPai != nil {
		return *m.GuangPai
	}
	return 0
}

func (m *SdyBaseBill) GetShangChe() int32 {
	if m != nil && m.ShangChe != nil {
		return *m.ShangChe
	}
	return 0
}

// 全局结果
type SdyBcEndLotteryInfo struct {
	UserBills        []*SdyBaseBill `protobuf:"bytes,1,rep,name=userBills" json:"userBills,omitempty"`
	CurrentRound     *int32         `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	BoardsCout       *int32         `protobuf:"varint,3,opt,name=boardsCout" json:"boardsCout,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SdyBcEndLotteryInfo) Reset()                    { *m = SdyBcEndLotteryInfo{} }
func (m *SdyBcEndLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBcEndLotteryInfo) ProtoMessage()               {}
func (*SdyBcEndLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *SdyBcEndLotteryInfo) GetUserBills() []*SdyBaseBill {
	if m != nil {
		return m.UserBills
	}
	return nil
}

func (m *SdyBcEndLotteryInfo) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func init() {
	proto.RegisterType((*SdyReqDissolveDesk)(nil), "yjprotogo.sdy_req_dissolveDesk")
	proto.RegisterType((*SdyAckDissolveDesk)(nil), "yjprotogo.sdy_ack_dissolveDesk")
	proto.RegisterType((*SdyReqReady)(nil), "yjprotogo.sdy_req_ready")
	proto.RegisterType((*SdyAckReady)(nil), "yjprotogo.sdy_ack_ready")
	proto.RegisterType((*SdyBaseWinCoinInfo)(nil), "yjprotogo.sdy_base_winCoinInfo")
	proto.RegisterType((*SdyBcCurrentResult)(nil), "yjprotogo.sdy_bc_currentResult")
	proto.RegisterType((*SdyBaseBill)(nil), "yjprotogo.sdy_base_bill")
	proto.RegisterType((*SdyBcEndLotteryInfo)(nil), "yjprotogo.sdy_bc_endLotteryInfo")
}

var fileDescriptor5 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcf, 0x6f, 0xd3, 0x3e,
	0x1c, 0xfd, 0x66, 0x59, 0xba, 0xc4, 0xdd, 0xa6, 0xaf, 0xcc, 0x98, 0xac, 0x0a, 0x41, 0x94, 0x53,
	0x4e, 0x3d, 0xec, 0xc0, 0x9d, 0x75, 0x12, 0x9b, 0x86, 0xa0, 0x32, 0x12, 0xbd, 0x51, 0xb9, 0x89,
	0x49, 0x4d, 0x52, 0x7b, 0xd8, 0x09, 0x53, 0xff, 0x0d, 0x38, 0x73, 0xe6, 0xc2, 0x1f, 0x89, 0xfc,
	0x2b, 0x4b, 0xa5, 0x5d, 0x40, 0xe5, 0xd4, 0xbc, 0xf7, 0x9a, 0xcf, 0xb3, 0x3f, 0xef, 0x05, 0x9c,
	0xaa, 0x72, 0xbb, 0x2c, 0xa9, 0xaa, 0xa7, 0x77, 0x52, 0xb4, 0x02, 0x26, 0xdb, 0xcf, 0xe6, 0xa1,
	0x12, 0x93, 0x27, 0x85, 0xd8, 0x6c, 0x04, 0x5f, 0x16, 0x0d, 0xa3, 0xbc, 0xb5, 0x7a, 0xf6, 0x11,
	0x9c, 0xe9, 0x37, 0x24, 0xfd, 0xb2, 0x2c, 0x99, 0x52, 0xa2, 0xf9, 0x4a, 0xaf, 0xa8, 0xaa, 0xe1,
	0x14, 0x8c, 0xd6, 0x94, 0x94, 0x54, 0xa2, 0x20, 0x0d, 0xf2, 0xf1, 0xc5, 0xf9, 0xb4, 0x1f, 0x34,
	0x9d, 0xeb, 0xdf, 0x6b, 0xa3, 0x62, 0xf7, 0x2f, 0x78, 0x0e, 0x46, 0x9d, 0xa2, 0xf2, 0xa6, 0x44,
	0x07, 0x69, 0x90, 0x9f, 0x60, 0x87, 0xb2, 0x6f, 0x81, 0x35, 0x20, 0x45, 0xfd, 0x4f, 0x0c, 0x34,
	0xaf, 0xaf, 0x7b, 0x53, 0xa2, 0x30, 0x0d, 0xf2, 0x08, 0x3b, 0x04, 0x27, 0x20, 0xbe, 0x23, 0x4a,
	0x2d, 0x84, 0x2c, 0xd1, 0x61, 0x1a, 0xe4, 0x09, 0xee, 0x71, 0xb6, 0x00, 0x27, 0xfe, 0xd2, 0x92,
	0x92, 0x72, 0xbb, 0xb7, 0xdb, 0x32, 0x3b, 0x58, 0x5f, 0xf6, 0xef, 0x06, 0xff, 0x0f, 0xc2, 0x8d,
	0xaa, 0xcc, 0xd4, 0x04, 0xeb, 0xc7, 0x81, 0x55, 0xb8, 0x63, 0xf5, 0x2b, 0xb4, 0x8b, 0x5d, 0x11,
	0x45, 0x97, 0xf7, 0x8c, 0xcf, 0x04, 0xe3, 0x37, 0xfc, 0x93, 0xf8, 0x63, 0xcb, 0x09, 0x88, 0x39,
	0x2b, 0xea, 0xb7, 0x64, 0x43, 0x9d, 0x6f, 0x8f, 0xe1, 0x33, 0x90, 0xe8, 0xf9, 0x1f, 0x48, 0xd3,
	0x51, 0xb7, 0xdf, 0x07, 0x02, 0x22, 0x70, 0xe4, 0x8c, 0xcd, 0x86, 0x23, 0xec, 0x21, 0x84, 0xe0,
	0xb0, 0xd0, 0x74, 0x64, 0x68, 0xf3, 0xac, 0x7d, 0x98, 0xba, 0x24, 0xbc, 0xa6, 0x12, 0x8d, 0xd2,
	0x20, 0x8f, 0x71, 0x8f, 0xe1, 0x73, 0x00, 0xd6, 0x84, 0x97, 0x73, 0x51, 0x53, 0xa9, 0xd0, 0x51,
	0x1a, 0xe6, 0x11, 0x1e, 0x30, 0xf0, 0x0c, 0x44, 0xaa, 0x10, 0x92, 0xa2, 0xd8, 0x0c, 0xb4, 0x40,
	0x9f, 0x8e, 0xa9, 0x05, 0xe1, 0xd5, 0xad, 0xe8, 0x50, 0x62, 0x46, 0x3e, 0x10, 0xfa, 0x74, 0x4c,
	0xcd, 0xc5, 0x9c, 0x30, 0x04, 0x8c, 0xe6, 0xa1, 0x55, 0x6e, 0x45, 0x77, 0xc5, 0xd0, 0xd8, 0x2b,
	0x06, 0x5a, 0xe5, 0x75, 0x47, 0x78, 0x85, 0x8e, 0xbd, 0x62, 0xa0, 0x3e, 0x21, 0x53, 0xef, 0xd7,
	0x84, 0x57, 0xb3, 0x35, 0x45, 0x27, 0x46, 0x1c, 0x30, 0x56, 0x9f, 0xad, 0x29, 0xaf, 0xb4, 0xe1,
	0xa9, 0xd7, 0x3d, 0x93, 0xfd, 0x70, 0xdf, 0xc1, 0xaa, 0x58, 0x16, 0x9d, 0x94, 0x94, 0xb7, 0x98,
	0xaa, 0xae, 0x69, 0xe1, 0x2b, 0x30, 0x1e, 0xa4, 0x87, 0x82, 0x34, 0xcc, 0xc7, 0x17, 0x2f, 0x06,
	0x99, 0x3d, 0x16, 0x32, 0x1e, 0xbe, 0x03, 0x33, 0x70, 0xec, 0x67, 0x8a, 0x8e, 0xdb, 0x4e, 0x46,
	0x78, 0x87, 0xd3, 0xe7, 0x5b, 0x09, 0x22, 0x4b, 0x35, 0x13, 0x5d, 0xeb, 0xa2, 0x1c, 0x30, 0xd9,
	0xcf, 0x03, 0x5b, 0x5d, 0xe3, 0xb4, 0x62, 0x4d, 0xb3, 0xd7, 0x1e, 0x9d, 0x83, 0xd1, 0x8a, 0x55,
	0x0b, 0x57, 0x94, 0x18, 0x3b, 0x64, 0xf7, 0xfd, 0xee, 0x9e, 0x53, 0x69, 0xaa, 0x62, 0xf6, 0x6d,
	0xe0, 0xb0, 0x5b, 0xa3, 0xdd, 0x6e, 0x4d, 0x40, 0x5c, 0xf8, 0x3d, 0x1f, 0x19, 0xa9, 0xc7, 0xba,
	0x27, 0x77, 0x26, 0x71, 0xd7, 0x13, 0x03, 0x34, 0x5b, 0x9b, 0xb4, 0x13, 0xcb, 0x1a, 0xa0, 0xe7,
	0x54, 0x3a, 0x5a, 0x5f, 0x90, 0x08, 0xf7, 0x58, 0x6b, 0xca, 0x67, 0x3d, 0xb6, 0x9a, 0xc7, 0xd9,
	0xf7, 0x00, 0x3c, 0x75, 0x49, 0x52, 0x5e, 0xbe, 0x11, 0x6d, 0x4b, 0xe5, 0xd6, 0xe4, 0xf0, 0x12,
	0x24, 0xfa, 0xe3, 0xbc, 0x64, 0x4d, 0xa3, 0x5c, 0x90, 0xe8, 0xb1, 0x20, 0xf5, 0x7a, 0xf1, 0xc3,
	0x5f, 0xf7, 0x91, 0xdf, 0xe5, 0xc1, 0x75, 0x38, 0xff, 0xef, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x98, 0xf7, 0x37, 0xf4, 0xfe, 0x05, 0x00, 0x00,
}
