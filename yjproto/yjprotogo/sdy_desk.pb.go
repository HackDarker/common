// Code generated by protoc-gen-go.
// source: sdy_desk.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

// Ignoring public import of sdy_base_userPaiIds from sdy_base.proto

// Ignoring public import of sdy_base_roomTypeInfo from sdy_base.proto

// Ignoring public import of sdy_base_timerInfo from sdy_base.proto

// Ignoring public import of sdy_base_playerInfo from sdy_base.proto

// Ignoring public import of sdy_base_commonRateInfo from sdy_base.proto

// Ignoring public import of sdy_base_deskInfo from sdy_base.proto

// Ignoring public import of sdy_enum_protoId from sdy_base.proto

// Ignoring public import of sdy_enum_errorCode from sdy_base.proto

// Ignoring public import of sdy_enum_actType from sdy_base.proto

// Ignoring public import of sdy_enum_deskStatus from sdy_base.proto

// Ignoring public import of sdy_enum_userStatus from sdy_base.proto

// Ignoring public import of sdy_enum_enterType from sdy_base.proto

// Ignoring public import of sdy_enum_Option from sdy_base.proto

// Ignoring public import of sdy_enum_coinRoomLevel from sdy_base.proto

// Ignoring public import of sdy_enum_flowers from sdy_base.proto

// 准备游戏
type SdyReqReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyReqReady) Reset()                    { *m = SdyReqReady{} }
func (m *SdyReqReady) String() string            { return proto.CompactTextString(m) }
func (*SdyReqReady) ProtoMessage()               {}
func (*SdyReqReady) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *SdyReqReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyReqReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 准备游戏的结果
type SdyAckReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msg              *string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId           *uint32      `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyAckReady) Reset()                    { *m = SdyAckReady{} }
func (m *SdyAckReady) String() string            { return proto.CompactTextString(m) }
func (*SdyAckReady) ProtoMessage()               {}
func (*SdyAckReady) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *SdyAckReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyAckReady) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *SdyAckReady) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 赢牌信息：谁赢了多少
type SdyBaseWinCoinInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	TotalScore       *int32       `protobuf:"varint,2,opt,name=totalScore" json:"totalScore,omitempty"`
	RoundScore       *int32       `protobuf:"varint,3,opt,name=roundScore" json:"roundScore,omitempty"`
	WinNum           *int32       `protobuf:"varint,4,opt,name=winNum" json:"winNum,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseWinCoinInfo) Reset()                    { *m = SdyBaseWinCoinInfo{} }
func (m *SdyBaseWinCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseWinCoinInfo) ProtoMessage()               {}
func (*SdyBaseWinCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *SdyBaseWinCoinInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseWinCoinInfo) GetTotalScore() int32 {
	if m != nil && m.TotalScore != nil {
		return *m.TotalScore
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetRoundScore() int32 {
	if m != nil && m.RoundScore != nil {
		return *m.RoundScore
	}
	return 0
}

func (m *SdyBaseWinCoinInfo) GetWinNum() int32 {
	if m != nil && m.WinNum != nil {
		return *m.WinNum
	}
	return 0
}

// 本局结果(广播)
type SdyBcCurrentResult struct {
	WinCoinInfo      []*SdyBaseWinCoinInfo `protobuf:"bytes,1,rep,name=winCoinInfo" json:"winCoinInfo,omitempty"`
	CurrentRound     *int32                `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	BoardsCout       *int32                `protobuf:"varint,3,opt,name=boardsCout" json:"boardsCout,omitempty"`
	FootPokers       []int32               `protobuf:"varint,4,rep,name=footPokers" json:"footPokers,omitempty"`
	HuanDiPokers     []int32               `protobuf:"varint,5,rep,name=huanDiPokers" json:"huanDiPokers,omitempty"`
	BaseValue        *int32                `protobuf:"varint,6,opt,name=baseValue" json:"baseValue,omitempty"`
	IsWangKou        *bool                 `protobuf:"varint,7,opt,name=isWangKou" json:"isWangKou,omitempty"`
	IsPoPai          *bool                 `protobuf:"varint,8,opt,name=isPoPai" json:"isPoPai,omitempty"`
	IsKouDi          *bool                 `protobuf:"varint,9,opt,name=isKouDi" json:"isKouDi,omitempty"`
	IsGuang          *bool                 `protobuf:"varint,10,opt,name=isGuang" json:"isGuang,omitempty"`
	IsShangChe       *bool                 `protobuf:"varint,11,opt,name=isShangChe" json:"isShangChe,omitempty"`
	IsChengPai       *bool                 `protobuf:"varint,12,opt,name=isChengPai" json:"isChengPai,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SdyBcCurrentResult) Reset()                    { *m = SdyBcCurrentResult{} }
func (m *SdyBcCurrentResult) String() string            { return proto.CompactTextString(m) }
func (*SdyBcCurrentResult) ProtoMessage()               {}
func (*SdyBcCurrentResult) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

func (m *SdyBcCurrentResult) GetWinCoinInfo() []*SdyBaseWinCoinInfo {
	if m != nil {
		return m.WinCoinInfo
	}
	return nil
}

func (m *SdyBcCurrentResult) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *SdyBcCurrentResult) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *SdyBcCurrentResult) GetFootPokers() []int32 {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *SdyBcCurrentResult) GetHuanDiPokers() []int32 {
	if m != nil {
		return m.HuanDiPokers
	}
	return nil
}

func (m *SdyBcCurrentResult) GetBaseValue() int32 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *SdyBcCurrentResult) GetIsWangKou() bool {
	if m != nil && m.IsWangKou != nil {
		return *m.IsWangKou
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsPoPai() bool {
	if m != nil && m.IsPoPai != nil {
		return *m.IsPoPai
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsKouDi() bool {
	if m != nil && m.IsKouDi != nil {
		return *m.IsKouDi
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsGuang() bool {
	if m != nil && m.IsGuang != nil {
		return *m.IsGuang
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsShangChe() bool {
	if m != nil && m.IsShangChe != nil {
		return *m.IsShangChe
	}
	return false
}

func (m *SdyBcCurrentResult) GetIsChengPai() bool {
	if m != nil && m.IsChengPai != nil {
		return *m.IsChengPai
	}
	return false
}

type SdyBaseBill struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	WXInfo           *WeixinInfo  `protobuf:"bytes,2,opt,name=wXInfo" json:"wXInfo,omitempty"`
	IsBigWin         *bool        `protobuf:"varint,3,opt,name=isBigWin" json:"isBigWin,omitempty"`
	IsOwner          *bool        `protobuf:"varint,4,opt,name=isOwner" json:"isOwner,omitempty"`
	WinCoin          *int32       `protobuf:"varint,5,opt,name=winCoin" json:"winCoin,omitempty"`
	ChengPai         *int32       `protobuf:"varint,6,opt,name=chengPai" json:"chengPai,omitempty"`
	PoPai            *int32       `protobuf:"varint,7,opt,name=poPai" json:"poPai,omitempty"`
	KouDi            *int32       `protobuf:"varint,8,opt,name=kouDi" json:"kouDi,omitempty"`
	GuangPai         *int32       `protobuf:"varint,9,opt,name=guangPai" json:"guangPai,omitempty"`
	ShangChe         *int32       `protobuf:"varint,10,opt,name=shangChe" json:"shangChe,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseBill) Reset()                    { *m = SdyBaseBill{} }
func (m *SdyBaseBill) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseBill) ProtoMessage()               {}
func (*SdyBaseBill) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *SdyBaseBill) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseBill) GetWXInfo() *WeixinInfo {
	if m != nil {
		return m.WXInfo
	}
	return nil
}

func (m *SdyBaseBill) GetIsBigWin() bool {
	if m != nil && m.IsBigWin != nil {
		return *m.IsBigWin
	}
	return false
}

func (m *SdyBaseBill) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *SdyBaseBill) GetWinCoin() int32 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *SdyBaseBill) GetChengPai() int32 {
	if m != nil && m.ChengPai != nil {
		return *m.ChengPai
	}
	return 0
}

func (m *SdyBaseBill) GetPoPai() int32 {
	if m != nil && m.PoPai != nil {
		return *m.PoPai
	}
	return 0
}

func (m *SdyBaseBill) GetKouDi() int32 {
	if m != nil && m.KouDi != nil {
		return *m.KouDi
	}
	return 0
}

func (m *SdyBaseBill) GetGuangPai() int32 {
	if m != nil && m.GuangPai != nil {
		return *m.GuangPai
	}
	return 0
}

func (m *SdyBaseBill) GetShangChe() int32 {
	if m != nil && m.ShangChe != nil {
		return *m.ShangChe
	}
	return 0
}

// 全局结果
type SdyBcEndLotteryInfo struct {
	UserBills        []*SdyBaseBill `protobuf:"bytes,1,rep,name=userBills" json:"userBills,omitempty"`
	CurrentRound     *int32         `protobuf:"varint,2,opt,name=currentRound" json:"currentRound,omitempty"`
	BoardsCout       *int32         `protobuf:"varint,3,opt,name=boardsCout" json:"boardsCout,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SdyBcEndLotteryInfo) Reset()                    { *m = SdyBcEndLotteryInfo{} }
func (m *SdyBcEndLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBcEndLotteryInfo) ProtoMessage()               {}
func (*SdyBcEndLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *SdyBcEndLotteryInfo) GetUserBills() []*SdyBaseBill {
	if m != nil {
		return m.UserBills
	}
	return nil
}

func (m *SdyBcEndLotteryInfo) GetCurrentRound() int32 {
	if m != nil && m.CurrentRound != nil {
		return *m.CurrentRound
	}
	return 0
}

func (m *SdyBcEndLotteryInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

// 出的牌,出牌的玩家id
type SdyReUserOutPai struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	PokerId          *int32  `protobuf:"varint,2,opt,name=pokerId" json:"pokerId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SdyReUserOutPai) Reset()                    { *m = SdyReUserOutPai{} }
func (m *SdyReUserOutPai) String() string            { return proto.CompactTextString(m) }
func (*SdyReUserOutPai) ProtoMessage()               {}
func (*SdyReUserOutPai) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *SdyReUserOutPai) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyReUserOutPai) GetPokerId() int32 {
	if m != nil && m.PokerId != nil {
		return *m.PokerId
	}
	return 0
}

// 准备阶段需要发的消息
type SdyReReady struct {
	HandPokersId     []int32 `protobuf:"varint,1,rep,name=handPokersId" json:"handPokersId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SdyReReady) Reset()                    { *m = SdyReReady{} }
func (m *SdyReReady) String() string            { return proto.CompactTextString(m) }
func (*SdyReReady) ProtoMessage()               {}
func (*SdyReReady) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

func (m *SdyReReady) GetHandPokersId() []int32 {
	if m != nil {
		return m.HandPokersId
	}
	return nil
}

type SdyReHuanDi struct {
	DeskFootPokersId []int32 `protobuf:"varint,1,rep,name=deskFootPokersId" json:"deskFootPokersId,omitempty"`
	HuanDiPokersId   []int32 `protobuf:"varint,2,rep,name=huanDiPokersId" json:"huanDiPokersId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SdyReHuanDi) Reset()                    { *m = SdyReHuanDi{} }
func (m *SdyReHuanDi) String() string            { return proto.CompactTextString(m) }
func (*SdyReHuanDi) ProtoMessage()               {}
func (*SdyReHuanDi) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *SdyReHuanDi) GetDeskFootPokersId() []int32 {
	if m != nil {
		return m.DeskFootPokersId
	}
	return nil
}

func (m *SdyReHuanDi) GetHuanDiPokersId() []int32 {
	if m != nil {
		return m.HuanDiPokersId
	}
	return nil
}

type SdyRePlay struct {
	OutPai           []*SdyReUserOutPai `protobuf:"bytes,1,rep,name=outPai" json:"outPai,omitempty"`
	ScorePai         []int32            `protobuf:"varint,2,rep,name=scorePai" json:"scorePai,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SdyRePlay) Reset()                    { *m = SdyRePlay{} }
func (m *SdyRePlay) String() string            { return proto.CompactTextString(m) }
func (*SdyRePlay) ProtoMessage()               {}
func (*SdyRePlay) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

func (m *SdyRePlay) GetOutPai() []*SdyReUserOutPai {
	if m != nil {
		return m.OutPai
	}
	return nil
}

func (m *SdyRePlay) GetScorePai() []int32 {
	if m != nil {
		return m.ScorePai
	}
	return nil
}

type SdyReJiaoFen struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	JiaoScore        *int32  `protobuf:"varint,2,opt,name=jiaoScore" json:"jiaoScore,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SdyReJiaoFen) Reset()                    { *m = SdyReJiaoFen{} }
func (m *SdyReJiaoFen) String() string            { return proto.CompactTextString(m) }
func (*SdyReJiaoFen) ProtoMessage()               {}
func (*SdyReJiaoFen) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *SdyReJiaoFen) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyReJiaoFen) GetJiaoScore() int32 {
	if m != nil && m.JiaoScore != nil {
		return *m.JiaoScore
	}
	return 0
}

type SdyReLenHandPokers struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	PokersLength     *int32  `protobuf:"varint,2,opt,name=pokersLength" json:"pokersLength,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SdyReLenHandPokers) Reset()                    { *m = SdyReLenHandPokers{} }
func (m *SdyReLenHandPokers) String() string            { return proto.CompactTextString(m) }
func (*SdyReLenHandPokers) ProtoMessage()               {}
func (*SdyReLenHandPokers) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

func (m *SdyReLenHandPokers) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyReLenHandPokers) GetPokersLength() int32 {
	if m != nil && m.PokersLength != nil {
		return *m.PokersLength
	}
	return 0
}

// 用于断线重连回来后发送的消息
type SdyBcReconnectInfo struct {
	Header           *ProtoHeader          `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	PlayerInfo       []*SdyBasePlayerInfo  `protobuf:"bytes,2,rep,name=playerInfo" json:"playerInfo,omitempty"`
	DeskInfo         *SdyBaseDeskInfo      `protobuf:"bytes,3,opt,name=deskInfo" json:"deskInfo,omitempty"`
	ReconnectUser    *uint32               `protobuf:"varint,4,opt,name=reconnectUser" json:"reconnectUser,omitempty"`
	ZhuFlower        *int32                `protobuf:"varint,5,opt,name=zhuFlower" json:"zhuFlower,omitempty"`
	ActiveUser       *uint32               `protobuf:"varint,6,opt,name=activeUser" json:"activeUser,omitempty"`
	DeskStatus       *int32                `protobuf:"varint,7,opt,name=deskStatus" json:"deskStatus,omitempty"`
	BankerFen        *int32                `protobuf:"varint,8,opt,name=bankerFen" json:"bankerFen,omitempty"`
	Ready            *SdyReReady           `protobuf:"bytes,9,opt,name=ready" json:"ready,omitempty"`
	HuanDi           *SdyReHuanDi          `protobuf:"bytes,10,opt,name=huanDi" json:"huanDi,omitempty"`
	OutPai           *SdyRePlay            `protobuf:"bytes,11,opt,name=outPai" json:"outPai,omitempty"`
	CurrentResult    *SdyBcCurrentResult   `protobuf:"bytes,12,opt,name=currentResult" json:"currentResult,omitempty"`
	JiaoFen          []*SdyReJiaoFen       `protobuf:"bytes,13,rep,name=jiaoFen" json:"jiaoFen,omitempty"`
	PaiLen           []*SdyReLenHandPokers `protobuf:"bytes,14,rep,name=paiLen" json:"paiLen,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SdyBcReconnectInfo) Reset()                    { *m = SdyBcReconnectInfo{} }
func (m *SdyBcReconnectInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBcReconnectInfo) ProtoMessage()               {}
func (*SdyBcReconnectInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

func (m *SdyBcReconnectInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetPlayerInfo() []*SdyBasePlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetDeskInfo() *SdyBaseDeskInfo {
	if m != nil {
		return m.DeskInfo
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetReconnectUser() uint32 {
	if m != nil && m.ReconnectUser != nil {
		return *m.ReconnectUser
	}
	return 0
}

func (m *SdyBcReconnectInfo) GetZhuFlower() int32 {
	if m != nil && m.ZhuFlower != nil {
		return *m.ZhuFlower
	}
	return 0
}

func (m *SdyBcReconnectInfo) GetActiveUser() uint32 {
	if m != nil && m.ActiveUser != nil {
		return *m.ActiveUser
	}
	return 0
}

func (m *SdyBcReconnectInfo) GetDeskStatus() int32 {
	if m != nil && m.DeskStatus != nil {
		return *m.DeskStatus
	}
	return 0
}

func (m *SdyBcReconnectInfo) GetBankerFen() int32 {
	if m != nil && m.BankerFen != nil {
		return *m.BankerFen
	}
	return 0
}

func (m *SdyBcReconnectInfo) GetReady() *SdyReReady {
	if m != nil {
		return m.Ready
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetHuanDi() *SdyReHuanDi {
	if m != nil {
		return m.HuanDi
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetOutPai() *SdyRePlay {
	if m != nil {
		return m.OutPai
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetCurrentResult() *SdyBcCurrentResult {
	if m != nil {
		return m.CurrentResult
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetJiaoFen() []*SdyReJiaoFen {
	if m != nil {
		return m.JiaoFen
	}
	return nil
}

func (m *SdyBcReconnectInfo) GetPaiLen() []*SdyReLenHandPokers {
	if m != nil {
		return m.PaiLen
	}
	return nil
}

// 用于玩家断线重连回来后广播给其他玩家，通知该玩家是否在线
type SdyBcIsOnLine struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	IsOnline         *bool        `protobuf:"varint,3,opt,name=isOnline" json:"isOnline,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBcIsOnLine) Reset()                    { *m = SdyBcIsOnLine{} }
func (m *SdyBcIsOnLine) String() string            { return proto.CompactTextString(m) }
func (*SdyBcIsOnLine) ProtoMessage()               {}
func (*SdyBcIsOnLine) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

func (m *SdyBcIsOnLine) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBcIsOnLine) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyBcIsOnLine) GetIsOnline() bool {
	if m != nil && m.IsOnline != nil {
		return *m.IsOnline
	}
	return false
}

func init() {
	proto.RegisterType((*SdyReqReady)(nil), "yjprotogo.sdy_req_ready")
	proto.RegisterType((*SdyAckReady)(nil), "yjprotogo.sdy_ack_ready")
	proto.RegisterType((*SdyBaseWinCoinInfo)(nil), "yjprotogo.sdy_base_winCoinInfo")
	proto.RegisterType((*SdyBcCurrentResult)(nil), "yjprotogo.sdy_bc_currentResult")
	proto.RegisterType((*SdyBaseBill)(nil), "yjprotogo.sdy_base_bill")
	proto.RegisterType((*SdyBcEndLotteryInfo)(nil), "yjprotogo.sdy_bc_endLotteryInfo")
	proto.RegisterType((*SdyReUserOutPai)(nil), "yjprotogo.sdy_re_userOutPai")
	proto.RegisterType((*SdyReReady)(nil), "yjprotogo.sdy_re_ready")
	proto.RegisterType((*SdyReHuanDi)(nil), "yjprotogo.sdy_re_huanDi")
	proto.RegisterType((*SdyRePlay)(nil), "yjprotogo.sdy_re_play")
	proto.RegisterType((*SdyReJiaoFen)(nil), "yjprotogo.sdy_re_jiaoFen")
	proto.RegisterType((*SdyReLenHandPokers)(nil), "yjprotogo.sdy_re_lenHandPokers")
	proto.RegisterType((*SdyBcReconnectInfo)(nil), "yjprotogo.sdy_bc_reconnectInfo")
	proto.RegisterType((*SdyBcIsOnLine)(nil), "yjprotogo.sdy_bc_isOnLine")
}

var fileDescriptor11 = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x4f, 0xdb, 0x58,
	0x10, 0xdd, 0x24, 0xe4, 0x6b, 0x42, 0x02, 0x78, 0x81, 0xf5, 0x22, 0xb4, 0xbb, 0xb2, 0x76, 0x11,
	0xda, 0x5d, 0xa5, 0x12, 0x45, 0x7d, 0xea, 0x4b, 0x01, 0xf1, 0xa1, 0xd2, 0x12, 0x95, 0xb6, 0x54,
	0xea, 0x43, 0x64, 0xec, 0x4b, 0x72, 0x89, 0x73, 0x6f, 0xea, 0x6b, 0x43, 0xd3, 0x1f, 0xd2, 0xf7,
	0xfe, 0xb9, 0xfe, 0x8e, 0xce, 0x9d, 0x7b, 0x9d, 0x18, 0x92, 0x07, 0xe8, 0x43, 0xd5, 0xf8, 0x78,
	0xe6, 0xcc, 0xcc, 0xf1, 0x99, 0x01, 0x5a, 0x2a, 0x1c, 0x77, 0x43, 0xa6, 0x06, 0xed, 0x51, 0x2c,
	0x13, 0xe9, 0xd4, 0xc7, 0xd7, 0xf4, 0xa3, 0x27, 0x37, 0x7e, 0x0d, 0xe4, 0x70, 0x28, 0x45, 0x37,
	0x88, 0x38, 0x13, 0x89, 0x79, 0xbf, 0x41, 0xf1, 0x97, 0xbe, 0x62, 0xe6, 0xd9, 0x3b, 0x82, 0xa6,
	0x46, 0x62, 0xf6, 0x09, 0xff, 0xf9, 0xe1, 0xd8, 0xd9, 0x82, 0x4a, 0x1f, 0x7f, 0xb0, 0xd8, 0x2d,
	0xfc, 0x55, 0xd8, 0x6e, 0xec, 0xac, 0xb7, 0x27, 0x8c, 0xed, 0x8e, 0xfe, 0xff, 0x98, 0xde, 0x3a,
	0x2d, 0xa8, 0xa4, 0x8a, 0xc5, 0x27, 0xa1, 0x5b, 0xc4, 0xb8, 0xa6, 0xf7, 0xd6, 0x10, 0xf9, 0xc1,
	0xe0, 0x91, 0x44, 0x0d, 0x28, 0x0d, 0x55, 0x8f, 0x58, 0xea, 0x39, 0xd6, 0x12, 0xb1, 0xde, 0xc0,
	0x6a, 0xd6, 0x70, 0xf7, 0x96, 0x8b, 0x7d, 0xc9, 0xc5, 0x89, 0xb8, 0x92, 0x0f, 0x26, 0x77, 0x00,
	0x12, 0x99, 0xf8, 0xd1, 0x79, 0x20, 0x63, 0x46, 0x35, 0xca, 0x1a, 0x8b, 0x65, 0x2a, 0x42, 0x83,
	0x95, 0x08, 0xc3, 0xba, 0x48, 0xff, 0x3a, 0x1d, 0xba, 0x0b, 0xfa, 0xd9, 0xfb, 0x56, 0xb4, 0x85,
	0x83, 0x6e, 0x90, 0xc6, 0x31, 0xea, 0xf7, 0x86, 0xa9, 0x34, 0x4a, 0x9c, 0x5d, 0x68, 0xe4, 0xfa,
	0xc0, 0xea, 0x25, 0xac, 0xfe, 0x67, 0xae, 0xfa, 0xdc, 0x76, 0x57, 0x61, 0x31, 0xa3, 0xd1, 0x95,
	0xa7, 0x8d, 0x5c, 0x4a, 0x3f, 0x0e, 0xd5, 0xbe, 0x4c, 0x13, 0xdb, 0x08, 0x62, 0x57, 0x52, 0x26,
	0x1d, 0x39, 0x60, 0xb1, 0xc2, 0x66, 0x4a, 0x88, 0x61, 0x76, 0x3f, 0xf5, 0xc5, 0x01, 0xb7, 0x68,
	0x99, 0xd0, 0x15, 0xa8, 0xeb, 0x3a, 0xef, 0xfd, 0x28, 0x65, 0x6e, 0x85, 0x92, 0x11, 0xe2, 0xea,
	0xc2, 0x17, 0xbd, 0x97, 0x32, 0x75, 0xab, 0x08, 0xd5, 0x9c, 0x25, 0xa8, 0x72, 0xd5, 0x91, 0x1d,
	0x9f, 0xbb, 0xb5, 0x29, 0x80, 0xef, 0x0f, 0xb8, 0x5b, 0x9f, 0x02, 0x47, 0xc8, 0xdf, 0x73, 0x81,
	0x00, 0x6c, 0x81, 0xab, 0xf3, 0x3e, 0x02, 0xfb, 0x7d, 0xe6, 0x36, 0xa6, 0x18, 0x3e, 0x8a, 0x9e,
	0x66, 0x5a, 0xd4, 0x98, 0xf7, 0xbd, 0x60, 0x3e, 0x39, 0x4d, 0x7b, 0xc9, 0xa3, 0xe8, 0xc1, 0x5f,
	0xe5, 0x1f, 0x54, 0xfb, 0x03, 0xe9, 0x57, 0xa4, 0xb8, 0xb5, 0x5c, 0xdc, 0x05, 0xe3, 0x9f, 0xad,
	0x6a, 0xcb, 0x50, 0xe3, 0x6a, 0x8f, 0xf7, 0x2e, 0xb8, 0x20, 0x75, 0x6c, 0xaf, 0x67, 0xb7, 0x02,
	0x2b, 0x2c, 0x64, 0x80, 0xd5, 0x19, 0x55, 0xd1, 0x12, 0x60, 0x4e, 0x90, 0xb5, 0x69, 0x44, 0x69,
	0x42, 0x79, 0x44, 0xf3, 0x57, 0xb3, 0xc7, 0x01, 0x4d, 0x5f, 0xcb, 0xe2, 0x7b, 0x7a, 0x76, 0x1d,
	0x50, 0xcf, 0x10, 0x95, 0x0d, 0x0f, 0x64, 0x06, 0x01, 0x6b, 0xd6, 0x0b, 0x4c, 0x84, 0xa7, 0x32,
	0x49, 0x58, 0x3c, 0xa6, 0x06, 0xff, 0x83, 0xba, 0x76, 0xeb, 0x1e, 0xce, 0xae, 0xac, 0x15, 0xdc,
	0x79, 0x56, 0x20, 0x71, 0x1e, 0xec, 0x01, 0x6f, 0x17, 0x56, 0xcc, 0x4e, 0x76, 0x35, 0xfb, 0x59,
	0x9a, 0x60, 0x73, 0xb9, 0xcd, 0xd0, 0xda, 0x36, 0xf5, 0xe4, 0x23, 0x6d, 0x07, 0xbb, 0x80, 0x65,
	0xef, 0x6f, 0x58, 0xb4, 0x59, 0x66, 0xff, 0xb4, 0x6b, 0x7c, 0x11, 0x1a, 0xcf, 0x50, 0x1a, 0xba,
	0xc6, 0x7b, 0x91, 0xed, 0x7b, 0xd7, 0x58, 0xca, 0x71, 0x61, 0x59, 0x9f, 0x8f, 0xc3, 0x89, 0xe9,
	0xb2, 0x50, 0x67, 0x1d, 0x5a, 0x79, 0xdb, 0x51, 0x21, 0x4d, 0xf1, 0x0a, 0x1a, 0x96, 0x62, 0x14,
	0xf9, 0x63, 0xe7, 0x7f, 0xa8, 0x48, 0x6a, 0xd1, 0x2a, 0xb0, 0x79, 0x4f, 0x81, 0xbb, 0x63, 0x68,
	0x75, 0xf5, 0xde, 0xe9, 0x78, 0x43, 0xf7, 0xd4, 0xdc, 0x30, 0x0c, 0xbb, 0xe6, 0xbe, 0x3c, 0x64,
	0x62, 0x66, 0x54, 0xb4, 0xb5, 0x7e, 0x95, 0xdb, 0x61, 0xef, 0xb9, 0x59, 0x4f, 0x4c, 0x8a, 0x98,
	0x38, 0x9e, 0x8c, 0x39, 0x93, 0x8a, 0x22, 0x90, 0x4a, 0xea, 0x14, 0x3d, 0x91, 0xf4, 0x6d, 0xf6,
	0xd7, 0x85, 0xc9, 0x76, 0xc7, 0x2c, 0x90, 0x42, 0xb0, 0x20, 0x79, 0xd4, 0x59, 0xd9, 0x01, 0xd0,
	0xb3, 0x63, 0x21, 0x63, 0x62, 0x3d, 0xf7, 0x1f, 0xf3, 0xbe, 0xfc, 0x34, 0xca, 0x69, 0x43, 0x4d,
	0x0b, 0x4d, 0x19, 0x25, 0x62, 0xdf, 0x9c, 0x97, 0x91, 0xc5, 0x38, 0x6b, 0xd0, 0x9c, 0x34, 0xf7,
	0x4e, 0x59, 0xc7, 0x93, 0x18, 0x5f, 0xfa, 0xe9, 0x61, 0x24, 0x6f, 0x11, 0x2a, 0x67, 0x1e, 0xf2,
	0x83, 0x84, 0xdf, 0x30, 0x0a, 0xab, 0x50, 0x18, 0x62, 0x9a, 0xe9, 0x3c, 0xf1, 0x93, 0x54, 0x59,
	0xeb, 0xd3, 0xc5, 0x10, 0xa8, 0x06, 0x8a, 0x6c, 0xed, 0xbf, 0x05, 0x65, 0x72, 0x0b, 0x79, 0xbf,
	0xb1, 0xf3, 0xdb, 0xec, 0xb7, 0x33, 0x66, 0xda, 0x46, 0x61, 0xc8, 0x0b, 0xb4, 0x12, 0xb3, 0x36,
	0x9f, 0xfa, 0x69, 0x6b, 0x62, 0x87, 0xc6, 0x8c, 0x84, 0x79, 0xdb, 0x3c, 0x83, 0xe6, 0x9d, 0xcb,
	0x4a, 0x47, 0x65, 0xce, 0x29, 0xbd, 0x7f, 0x80, 0xff, 0x85, 0xaa, 0xf5, 0x89, 0xdb, 0x24, 0xdd,
	0x7f, 0x9f, 0x2d, 0x90, 0x19, 0xe9, 0x09, 0x54, 0x46, 0x3e, 0xc7, 0x4f, 0xef, 0xb6, 0xe6, 0xde,
	0xe9, 0xfb, 0xf6, 0xf1, 0x3e, 0xc2, 0x92, 0x2d, 0x8a, 0x67, 0x46, 0x9c, 0x72, 0xc1, 0x7e, 0xf6,
	0xef, 0xa1, 0x39, 0x5e, 0x67, 0x22, 0x42, 0x0e, 0x73, 0xbc, 0xf6, 0x8a, 0xc7, 0xa5, 0xce, 0x2f,
	0x9d, 0xc2, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x65, 0x0b, 0x4a, 0xb3, 0x07, 0x00, 0x00,
}
