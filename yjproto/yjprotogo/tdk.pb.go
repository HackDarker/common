// Code generated by protoc-gen-go.
// source: tdk.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of TdkDeskUserData from tdk_data.proto

// Ignoring public import of TdkUserPokerData from tdk_data.proto

// Ignoring public import of TdkDisUserData from tdk_data.proto

// Ignoring public import of TdkDeskConfig from tdk_data.proto

// Ignoring public import of TdkZhanJiData from tdk_data.proto

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

type TdkHeartBeat struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkHeartBeat) Reset()                    { *m = TdkHeartBeat{} }
func (m *TdkHeartBeat) String() string            { return proto.CompactTextString(m) }
func (*TdkHeartBeat) ProtoMessage()               {}
func (*TdkHeartBeat) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *TdkHeartBeat) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type TdkJoinRoom struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Roomtype         *int32       `protobuf:"varint,3,opt,name=roomtype" json:"roomtype,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkJoinRoom) Reset()                    { *m = TdkJoinRoom{} }
func (m *TdkJoinRoom) String() string            { return proto.CompactTextString(m) }
func (*TdkJoinRoom) ProtoMessage()               {}
func (*TdkJoinRoom) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *TdkJoinRoom) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkJoinRoom) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkJoinRoom) GetRoomtype() int32 {
	if m != nil && m.Roomtype != nil {
		return *m.Roomtype
	}
	return 0
}

type TdkJoinRoomRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Result           *int32       `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkJoinRoomRsp) Reset()                    { *m = TdkJoinRoomRsp{} }
func (m *TdkJoinRoomRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkJoinRoomRsp) ProtoMessage()               {}
func (*TdkJoinRoomRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *TdkJoinRoomRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkJoinRoomRsp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type TdkLeaveRoom struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkLeaveRoom) Reset()                    { *m = TdkLeaveRoom{} }
func (m *TdkLeaveRoom) String() string            { return proto.CompactTextString(m) }
func (*TdkLeaveRoom) ProtoMessage()               {}
func (*TdkLeaveRoom) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *TdkLeaveRoom) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkLeaveRoom) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkLeaveRoomRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Result           *bool        `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkLeaveRoomRsp) Reset()                    { *m = TdkLeaveRoomRsp{} }
func (m *TdkLeaveRoomRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkLeaveRoomRsp) ProtoMessage()               {}
func (*TdkLeaveRoomRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *TdkLeaveRoomRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkLeaveRoomRsp) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

type TdkJoinDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	DeskId           *uint32      `protobuf:"varint,3,opt,name=deskId" json:"deskId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkJoinDesk) Reset()                    { *m = TdkJoinDesk{} }
func (m *TdkJoinDesk) String() string            { return proto.CompactTextString(m) }
func (*TdkJoinDesk) ProtoMessage()               {}
func (*TdkJoinDesk) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *TdkJoinDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkJoinDesk) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkJoinDesk) GetDeskId() uint32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

type TdkJoinDeskRsp struct {
	Header           *ProtoHeader       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32            `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Deskid           *uint32            `protobuf:"varint,3,opt,name=deskid" json:"deskid,omitempty"`
	Joinresult       *bool              `protobuf:"varint,4,opt,name=joinresult" json:"joinresult,omitempty"`
	Userdata         []*TdkDeskUserData `protobuf:"bytes,5,rep,name=userdata" json:"userdata,omitempty"`
	Deskconfig       *TdkDeskConfig     `protobuf:"bytes,6,opt,name=deskconfig" json:"deskconfig,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TdkJoinDeskRsp) Reset()                    { *m = TdkJoinDeskRsp{} }
func (m *TdkJoinDeskRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkJoinDeskRsp) ProtoMessage()               {}
func (*TdkJoinDeskRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *TdkJoinDeskRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkJoinDeskRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkJoinDeskRsp) GetDeskid() uint32 {
	if m != nil && m.Deskid != nil {
		return *m.Deskid
	}
	return 0
}

func (m *TdkJoinDeskRsp) GetJoinresult() bool {
	if m != nil && m.Joinresult != nil {
		return *m.Joinresult
	}
	return false
}

func (m *TdkJoinDeskRsp) GetUserdata() []*TdkDeskUserData {
	if m != nil {
		return m.Userdata
	}
	return nil
}

func (m *TdkJoinDeskRsp) GetDeskconfig() *TdkDeskConfig {
	if m != nil {
		return m.Deskconfig
	}
	return nil
}

type TdkCreateDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Roundcount       *uint32      `protobuf:"varint,4,opt,name=roundcount" json:"roundcount,omitempty"`
	Playercount      *uint32      `protobuf:"varint,5,opt,name=playercount" json:"playercount,omitempty"`
	Allinrate        *uint32      `protobuf:"varint,6,opt,name=allinrate" json:"allinrate,omitempty"`
	Isproxy          *bool        `protobuf:"varint,7,opt,name=isproxy" json:"isproxy,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkCreateDesk) Reset()                    { *m = TdkCreateDesk{} }
func (m *TdkCreateDesk) String() string            { return proto.CompactTextString(m) }
func (*TdkCreateDesk) ProtoMessage()               {}
func (*TdkCreateDesk) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *TdkCreateDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkCreateDesk) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkCreateDesk) GetRoundcount() uint32 {
	if m != nil && m.Roundcount != nil {
		return *m.Roundcount
	}
	return 0
}

func (m *TdkCreateDesk) GetPlayercount() uint32 {
	if m != nil && m.Playercount != nil {
		return *m.Playercount
	}
	return 0
}

func (m *TdkCreateDesk) GetAllinrate() uint32 {
	if m != nil && m.Allinrate != nil {
		return *m.Allinrate
	}
	return 0
}

func (m *TdkCreateDesk) GetIsproxy() bool {
	if m != nil && m.Isproxy != nil {
		return *m.Isproxy
	}
	return false
}

type TdkCreateDeskRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Deskid           *uint32      `protobuf:"varint,2,opt,name=deskid" json:"deskid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkCreateDeskRsp) Reset()                    { *m = TdkCreateDeskRsp{} }
func (m *TdkCreateDeskRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkCreateDeskRsp) ProtoMessage()               {}
func (*TdkCreateDeskRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *TdkCreateDeskRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkCreateDeskRsp) GetDeskid() uint32 {
	if m != nil && m.Deskid != nil {
		return *m.Deskid
	}
	return 0
}

type TdkLeaveDesk struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkLeaveDesk) Reset()                    { *m = TdkLeaveDesk{} }
func (m *TdkLeaveDesk) String() string            { return proto.CompactTextString(m) }
func (*TdkLeaveDesk) ProtoMessage()               {}
func (*TdkLeaveDesk) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *TdkLeaveDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkLeaveDesk) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkLeaveDeskRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Result           *bool        `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	Userid           *uint32      `protobuf:"varint,3,opt,name=userid" json:"userid,omitempty"`
	Deskstatus       *int32       `protobuf:"varint,4,opt,name=deskstatus" json:"deskstatus,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkLeaveDeskRsp) Reset()                    { *m = TdkLeaveDeskRsp{} }
func (m *TdkLeaveDeskRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkLeaveDeskRsp) ProtoMessage()               {}
func (*TdkLeaveDeskRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *TdkLeaveDeskRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkLeaveDeskRsp) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *TdkLeaveDeskRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkLeaveDeskRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

type TdkUserReady struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkUserReady) Reset()                    { *m = TdkUserReady{} }
func (m *TdkUserReady) String() string            { return proto.CompactTextString(m) }
func (*TdkUserReady) ProtoMessage()               {}
func (*TdkUserReady) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

func (m *TdkUserReady) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkUserReady) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkUserReadyRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Allready         *bool        `protobuf:"varint,4,opt,name=allready" json:"allready,omitempty"`
	Nextuserid       *uint32      `protobuf:"varint,5,opt,name=nextuserid" json:"nextuserid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkUserReadyRsp) Reset()                    { *m = TdkUserReadyRsp{} }
func (m *TdkUserReadyRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkUserReadyRsp) ProtoMessage()               {}
func (*TdkUserReadyRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{12} }

func (m *TdkUserReadyRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkUserReadyRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkUserReadyRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkUserReadyRsp) GetAllready() bool {
	if m != nil && m.Allready != nil {
		return *m.Allready
	}
	return false
}

func (m *TdkUserReadyRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

type TdkReturnDesk struct {
	Header           *ProtoHeader        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32             `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Deskstatus       *int32              `protobuf:"varint,3,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Actuserid        *uint32             `protobuf:"varint,4,opt,name=actuserid" json:"actuserid,omitempty"`
	Genallin         *bool               `protobuf:"varint,5,opt,name=genallin" json:"genallin,omitempty"`
	Canallin         *bool               `protobuf:"varint,6,opt,name=canallin" json:"canallin,omitempty"`
	Userdata         []*TdkDeskUserData  `protobuf:"bytes,7,rep,name=userdata" json:"userdata,omitempty"`
	Disdeciding      *bool               `protobuf:"varint,8,opt,name=disdeciding" json:"disdeciding,omitempty"`
	Disrequserid     *uint32             `protobuf:"varint,9,opt,name=disrequserid" json:"disrequserid,omitempty"`
	Desicion         []int32             `protobuf:"varint,10,rep,name=desicion" json:"desicion,omitempty"`
	Deskid           *uint32             `protobuf:"varint,11,opt,name=deskid" json:"deskid,omitempty"`
	Round            *uint32             `protobuf:"varint,12,opt,name=round" json:"round,omitempty"`
	Deskconfig       *TdkDeskConfig      `protobuf:"bytes,13,opt,name=deskconfig" json:"deskconfig,omitempty"`
	Userpoker        []*TdkUserPokerData `protobuf:"bytes,14,rep,name=userpoker" json:"userpoker,omitempty"`
	Userbet          []uint32            `protobuf:"varint,15,rep,name=userbet" json:"userbet,omitempty"`
	Result           *bool               `protobuf:"varint,16,opt,name=result" json:"result,omitempty"`
	Betnum           *uint32             `protobuf:"varint,17,opt,name=betnum" json:"betnum,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TdkReturnDesk) Reset()                    { *m = TdkReturnDesk{} }
func (m *TdkReturnDesk) String() string            { return proto.CompactTextString(m) }
func (*TdkReturnDesk) ProtoMessage()               {}
func (*TdkReturnDesk) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{13} }

func (m *TdkReturnDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkReturnDesk) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkReturnDesk) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkReturnDesk) GetActuserid() uint32 {
	if m != nil && m.Actuserid != nil {
		return *m.Actuserid
	}
	return 0
}

func (m *TdkReturnDesk) GetGenallin() bool {
	if m != nil && m.Genallin != nil {
		return *m.Genallin
	}
	return false
}

func (m *TdkReturnDesk) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

func (m *TdkReturnDesk) GetUserdata() []*TdkDeskUserData {
	if m != nil {
		return m.Userdata
	}
	return nil
}

func (m *TdkReturnDesk) GetDisdeciding() bool {
	if m != nil && m.Disdeciding != nil {
		return *m.Disdeciding
	}
	return false
}

func (m *TdkReturnDesk) GetDisrequserid() uint32 {
	if m != nil && m.Disrequserid != nil {
		return *m.Disrequserid
	}
	return 0
}

func (m *TdkReturnDesk) GetDesicion() []int32 {
	if m != nil {
		return m.Desicion
	}
	return nil
}

func (m *TdkReturnDesk) GetDeskid() uint32 {
	if m != nil && m.Deskid != nil {
		return *m.Deskid
	}
	return 0
}

func (m *TdkReturnDesk) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *TdkReturnDesk) GetDeskconfig() *TdkDeskConfig {
	if m != nil {
		return m.Deskconfig
	}
	return nil
}

func (m *TdkReturnDesk) GetUserpoker() []*TdkUserPokerData {
	if m != nil {
		return m.Userpoker
	}
	return nil
}

func (m *TdkReturnDesk) GetUserbet() []uint32 {
	if m != nil {
		return m.Userbet
	}
	return nil
}

func (m *TdkReturnDesk) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *TdkReturnDesk) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

// 申请解散牌桌
type TdkDissolveDeskReq struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkDissolveDeskReq) Reset()                    { *m = TdkDissolveDeskReq{} }
func (m *TdkDissolveDeskReq) String() string            { return proto.CompactTextString(m) }
func (*TdkDissolveDeskReq) ProtoMessage()               {}
func (*TdkDissolveDeskReq) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{14} }

func (m *TdkDissolveDeskReq) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkDissolveDeskReq) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

// 通知牌桌其他人有人申请解散，申请解散失败时只回复申请人
type TdkDissolveDeskUser struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Disuser          []uint32     `protobuf:"varint,4,rep,name=disuser" json:"disuser,omitempty"`
	Disnovote        *bool        `protobuf:"varint,5,opt,name=disnovote" json:"disnovote,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkDissolveDeskUser) Reset()                    { *m = TdkDissolveDeskUser{} }
func (m *TdkDissolveDeskUser) String() string            { return proto.CompactTextString(m) }
func (*TdkDissolveDeskUser) ProtoMessage()               {}
func (*TdkDissolveDeskUser) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{15} }

func (m *TdkDissolveDeskUser) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkDissolveDeskUser) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkDissolveDeskUser) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkDissolveDeskUser) GetDisuser() []uint32 {
	if m != nil {
		return m.Disuser
	}
	return nil
}

func (m *TdkDissolveDeskUser) GetDisnovote() bool {
	if m != nil && m.Disnovote != nil {
		return *m.Disnovote
	}
	return false
}

// 解散牌桌的决定
type TdkDisDeskDesicionReq struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Desicion         *bool        `protobuf:"varint,3,opt,name=desicion" json:"desicion,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkDisDeskDesicionReq) Reset()                    { *m = TdkDisDeskDesicionReq{} }
func (m *TdkDisDeskDesicionReq) String() string            { return proto.CompactTextString(m) }
func (*TdkDisDeskDesicionReq) ProtoMessage()               {}
func (*TdkDisDeskDesicionReq) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{16} }

func (m *TdkDisDeskDesicionReq) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkDisDeskDesicionReq) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkDisDeskDesicionReq) GetDesicion() bool {
	if m != nil && m.Desicion != nil {
		return *m.Desicion
	}
	return false
}

// 解散决定广播给其他人
type TdkDisDeskDesicionRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Desicion         *bool        `protobuf:"varint,3,opt,name=desicion" json:"desicion,omitempty"`
	Resultcode       *int32       `protobuf:"varint,4,opt,name=resultcode" json:"resultcode,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkDisDeskDesicionRsp) Reset()                    { *m = TdkDisDeskDesicionRsp{} }
func (m *TdkDisDeskDesicionRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkDisDeskDesicionRsp) ProtoMessage()               {}
func (*TdkDisDeskDesicionRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{17} }

func (m *TdkDisDeskDesicionRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkDisDeskDesicionRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkDisDeskDesicionRsp) GetDesicion() bool {
	if m != nil && m.Desicion != nil {
		return *m.Desicion
	}
	return false
}

func (m *TdkDisDeskDesicionRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

// 解散牌桌的结果
type TdkDisDeskReqResult struct {
	Header           *ProtoHeader        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Disresult        *bool               `protobuf:"varint,2,opt,name=disresult" json:"disresult,omitempty"`
	Userpoker        []*TdkUserPokerData `protobuf:"bytes,3,rep,name=userpoker" json:"userpoker,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TdkDisDeskReqResult) Reset()                    { *m = TdkDisDeskReqResult{} }
func (m *TdkDisDeskReqResult) String() string            { return proto.CompactTextString(m) }
func (*TdkDisDeskReqResult) ProtoMessage()               {}
func (*TdkDisDeskReqResult) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{18} }

func (m *TdkDisDeskReqResult) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkDisDeskReqResult) GetDisresult() bool {
	if m != nil && m.Disresult != nil {
		return *m.Disresult
	}
	return false
}

func (m *TdkDisDeskReqResult) GetUserpoker() []*TdkUserPokerData {
	if m != nil {
		return m.Userpoker
	}
	return nil
}

// 解散牌桌时玩家数据
type TdkDisDesk struct {
	Header           *ProtoHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userdata         []*TdkDisUserData `protobuf:"bytes,2,rep,name=userdata" json:"userdata,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TdkDisDesk) Reset()                    { *m = TdkDisDesk{} }
func (m *TdkDisDesk) String() string            { return proto.CompactTextString(m) }
func (*TdkDisDesk) ProtoMessage()               {}
func (*TdkDisDesk) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{19} }

func (m *TdkDisDesk) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkDisDesk) GetUserdata() []*TdkDisUserData {
	if m != nil {
		return m.Userdata
	}
	return nil
}

// 发牌
type TdkSendPoker struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Pokerid          *uint32      `protobuf:"varint,3,opt,name=pokerid" json:"pokerid,omitempty"`
	Borrow           *bool        `protobuf:"varint,4,opt,name=borrow" json:"borrow,omitempty"`
	Score            *uint32      `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	Maxpscore        *uint32      `protobuf:"varint,6,opt,name=maxpscore" json:"maxpscore,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkSendPoker) Reset()                    { *m = TdkSendPoker{} }
func (m *TdkSendPoker) String() string            { return proto.CompactTextString(m) }
func (*TdkSendPoker) ProtoMessage()               {}
func (*TdkSendPoker) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{20} }

func (m *TdkSendPoker) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkSendPoker) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkSendPoker) GetPokerid() uint32 {
	if m != nil && m.Pokerid != nil {
		return *m.Pokerid
	}
	return 0
}

func (m *TdkSendPoker) GetBorrow() bool {
	if m != nil && m.Borrow != nil {
		return *m.Borrow
	}
	return false
}

func (m *TdkSendPoker) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TdkSendPoker) GetMaxpscore() uint32 {
	if m != nil && m.Maxpscore != nil {
		return *m.Maxpscore
	}
	return 0
}

// 服务器通知客户端可以开始下注
type TdkStartBet struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Canallin         *bool        `protobuf:"varint,3,opt,name=canallin" json:"canallin,omitempty"`
	Betlevel         []uint32     `protobuf:"varint,4,rep,name=betlevel" json:"betlevel,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkStartBet) Reset()                    { *m = TdkStartBet{} }
func (m *TdkStartBet) String() string            { return proto.CompactTextString(m) }
func (*TdkStartBet) ProtoMessage()               {}
func (*TdkStartBet) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{21} }

func (m *TdkStartBet) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkStartBet) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkStartBet) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

func (m *TdkStartBet) GetBetlevel() []uint32 {
	if m != nil {
		return m.Betlevel
	}
	return nil
}

// 下注
type TdkBet struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Betnum           *uint32      `protobuf:"varint,3,opt,name=betnum" json:"betnum,omitempty"`
	Allin            *bool        `protobuf:"varint,4,opt,name=allin" json:"allin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkBet) Reset()                    { *m = TdkBet{} }
func (m *TdkBet) String() string            { return proto.CompactTextString(m) }
func (*TdkBet) ProtoMessage()               {}
func (*TdkBet) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{22} }

func (m *TdkBet) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkBet) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkBet) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

func (m *TdkBet) GetAllin() bool {
	if m != nil && m.Allin != nil {
		return *m.Allin
	}
	return false
}

type TdkBetRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Deskstatus       *int32       `protobuf:"varint,4,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Betnum           *uint32      `protobuf:"varint,5,opt,name=betnum" json:"betnum,omitempty"`
	Nextuserid       *uint32      `protobuf:"varint,6,opt,name=nextuserid" json:"nextuserid,omitempty"`
	Genallin         *bool        `protobuf:"varint,7,opt,name=genallin" json:"genallin,omitempty"`
	Canallin         *bool        `protobuf:"varint,8,opt,name=canallin" json:"canallin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkBetRsp) Reset()                    { *m = TdkBetRsp{} }
func (m *TdkBetRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkBetRsp) ProtoMessage()               {}
func (*TdkBetRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{23} }

func (m *TdkBetRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkBetRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkBetRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkBetRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkBetRsp) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

func (m *TdkBetRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

func (m *TdkBetRsp) GetGenallin() bool {
	if m != nil && m.Genallin != nil {
		return *m.Genallin
	}
	return false
}

func (m *TdkBetRsp) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

// 弃牌
type TdkFold struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkFold) Reset()                    { *m = TdkFold{} }
func (m *TdkFold) String() string            { return proto.CompactTextString(m) }
func (*TdkFold) ProtoMessage()               {}
func (*TdkFold) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{24} }

func (m *TdkFold) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkFold) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkFoldRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Deskstatus       *int32       `protobuf:"varint,4,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Nextuserid       *uint32      `protobuf:"varint,5,opt,name=nextuserid" json:"nextuserid,omitempty"`
	Genallin         *bool        `protobuf:"varint,6,opt,name=genallin" json:"genallin,omitempty"`
	Canallin         *bool        `protobuf:"varint,7,opt,name=canallin" json:"canallin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkFoldRsp) Reset()                    { *m = TdkFoldRsp{} }
func (m *TdkFoldRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkFoldRsp) ProtoMessage()               {}
func (*TdkFoldRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{25} }

func (m *TdkFoldRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkFoldRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkFoldRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkFoldRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkFoldRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

func (m *TdkFoldRsp) GetGenallin() bool {
	if m != nil && m.Genallin != nil {
		return *m.Genallin
	}
	return false
}

func (m *TdkFoldRsp) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

// 起脚
type TdkQiJiao struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Betnum           *uint32      `protobuf:"varint,3,opt,name=betnum" json:"betnum,omitempty"`
	Allin            *bool        `protobuf:"varint,4,opt,name=allin" json:"allin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkQiJiao) Reset()                    { *m = TdkQiJiao{} }
func (m *TdkQiJiao) String() string            { return proto.CompactTextString(m) }
func (*TdkQiJiao) ProtoMessage()               {}
func (*TdkQiJiao) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{26} }

func (m *TdkQiJiao) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkQiJiao) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkQiJiao) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

func (m *TdkQiJiao) GetAllin() bool {
	if m != nil && m.Allin != nil {
		return *m.Allin
	}
	return false
}

type TdkQiJiaoRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Deskstatus       *int32       `protobuf:"varint,4,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Betnum           *uint32      `protobuf:"varint,5,opt,name=betnum" json:"betnum,omitempty"`
	Nextuserid       *uint32      `protobuf:"varint,6,opt,name=nextuserid" json:"nextuserid,omitempty"`
	Genallin         *bool        `protobuf:"varint,7,opt,name=genallin" json:"genallin,omitempty"`
	Canallin         *bool        `protobuf:"varint,8,opt,name=canallin" json:"canallin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkQiJiaoRsp) Reset()                    { *m = TdkQiJiaoRsp{} }
func (m *TdkQiJiaoRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkQiJiaoRsp) ProtoMessage()               {}
func (*TdkQiJiaoRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{27} }

func (m *TdkQiJiaoRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkQiJiaoRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkQiJiaoRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkQiJiaoRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkQiJiaoRsp) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

func (m *TdkQiJiaoRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

func (m *TdkQiJiaoRsp) GetGenallin() bool {
	if m != nil && m.Genallin != nil {
		return *m.Genallin
	}
	return false
}

func (m *TdkQiJiaoRsp) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

// 反踢
type TdkFanTi struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Betnum           *uint32      `protobuf:"varint,3,opt,name=betnum" json:"betnum,omitempty"`
	Allin            *bool        `protobuf:"varint,4,opt,name=allin" json:"allin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkFanTi) Reset()                    { *m = TdkFanTi{} }
func (m *TdkFanTi) String() string            { return proto.CompactTextString(m) }
func (*TdkFanTi) ProtoMessage()               {}
func (*TdkFanTi) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{28} }

func (m *TdkFanTi) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkFanTi) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkFanTi) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

func (m *TdkFanTi) GetAllin() bool {
	if m != nil && m.Allin != nil {
		return *m.Allin
	}
	return false
}

type TdkFanTiRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Deskstatus       *int32       `protobuf:"varint,4,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Betnum           *uint32      `protobuf:"varint,5,opt,name=betnum" json:"betnum,omitempty"`
	Nextuserid       *uint32      `protobuf:"varint,6,opt,name=nextuserid" json:"nextuserid,omitempty"`
	Genallin         *bool        `protobuf:"varint,7,opt,name=genallin" json:"genallin,omitempty"`
	Canallin         *bool        `protobuf:"varint,8,opt,name=canallin" json:"canallin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkFanTiRsp) Reset()                    { *m = TdkFanTiRsp{} }
func (m *TdkFanTiRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkFanTiRsp) ProtoMessage()               {}
func (*TdkFanTiRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{29} }

func (m *TdkFanTiRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkFanTiRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkFanTiRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkFanTiRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkFanTiRsp) GetBetnum() uint32 {
	if m != nil && m.Betnum != nil {
		return *m.Betnum
	}
	return 0
}

func (m *TdkFanTiRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

func (m *TdkFanTiRsp) GetGenallin() bool {
	if m != nil && m.Genallin != nil {
		return *m.Genallin
	}
	return false
}

func (m *TdkFanTiRsp) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

// 不踢
type TdkPass struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkPass) Reset()                    { *m = TdkPass{} }
func (m *TdkPass) String() string            { return proto.CompactTextString(m) }
func (*TdkPass) ProtoMessage()               {}
func (*TdkPass) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{30} }

func (m *TdkPass) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkPass) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkPassRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Nextuserid       *uint32      `protobuf:"varint,4,opt,name=nextuserid" json:"nextuserid,omitempty"`
	Deskstatus       *int32       `protobuf:"varint,5,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Canallin         *bool        `protobuf:"varint,6,opt,name=canallin" json:"canallin,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkPassRsp) Reset()                    { *m = TdkPassRsp{} }
func (m *TdkPassRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkPassRsp) ProtoMessage()               {}
func (*TdkPassRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{31} }

func (m *TdkPassRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkPassRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkPassRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkPassRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

func (m *TdkPassRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkPassRsp) GetCanallin() bool {
	if m != nil && m.Canallin != nil {
		return *m.Canallin
	}
	return false
}

// 开牌
type TdkKaiPai struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkKaiPai) Reset()                    { *m = TdkKaiPai{} }
func (m *TdkKaiPai) String() string            { return proto.CompactTextString(m) }
func (*TdkKaiPai) ProtoMessage()               {}
func (*TdkKaiPai) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{32} }

func (m *TdkKaiPai) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkKaiPai) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkKaiPaiRsp struct {
	Header           *ProtoHeader        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32             `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32              `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	Nextuserid       *uint32             `protobuf:"varint,4,opt,name=nextuserid" json:"nextuserid,omitempty"`
	Userpoker        []*TdkUserPokerData `protobuf:"bytes,5,rep,name=userpoker" json:"userpoker,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TdkKaiPaiRsp) Reset()                    { *m = TdkKaiPaiRsp{} }
func (m *TdkKaiPaiRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkKaiPaiRsp) ProtoMessage()               {}
func (*TdkKaiPaiRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{33} }

func (m *TdkKaiPaiRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkKaiPaiRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkKaiPaiRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func (m *TdkKaiPaiRsp) GetNextuserid() uint32 {
	if m != nil && m.Nextuserid != nil {
		return *m.Nextuserid
	}
	return 0
}

func (m *TdkKaiPaiRsp) GetUserpoker() []*TdkUserPokerData {
	if m != nil {
		return m.Userpoker
	}
	return nil
}

// 单轮游戏结束
type TdkRoundEnd struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Num              []int32      `protobuf:"varint,3,rep,name=num" json:"num,omitempty"`
	Endtype          *int32       `protobuf:"varint,4,opt,name=endtype" json:"endtype,omitempty"`
	Deskend          *bool        `protobuf:"varint,5,opt,name=deskend" json:"deskend,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkRoundEnd) Reset()                    { *m = TdkRoundEnd{} }
func (m *TdkRoundEnd) String() string            { return proto.CompactTextString(m) }
func (*TdkRoundEnd) ProtoMessage()               {}
func (*TdkRoundEnd) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{34} }

func (m *TdkRoundEnd) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkRoundEnd) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkRoundEnd) GetNum() []int32 {
	if m != nil {
		return m.Num
	}
	return nil
}

func (m *TdkRoundEnd) GetEndtype() int32 {
	if m != nil && m.Endtype != nil {
		return *m.Endtype
	}
	return 0
}

func (m *TdkRoundEnd) GetDeskend() bool {
	if m != nil && m.Deskend != nil {
		return *m.Deskend
	}
	return false
}

// 当前牌桌结束后战绩
type TdkZhanJi struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkZhanJi) Reset()                    { *m = TdkZhanJi{} }
func (m *TdkZhanJi) String() string            { return proto.CompactTextString(m) }
func (*TdkZhanJi) ProtoMessage()               {}
func (*TdkZhanJi) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{35} }

func (m *TdkZhanJi) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkZhanJi) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkZhanJiRsp struct {
	Header           *ProtoHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Data             []*TdkZhanJiData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TdkZhanJiRsp) Reset()                    { *m = TdkZhanJiRsp{} }
func (m *TdkZhanJiRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkZhanJiRsp) ProtoMessage()               {}
func (*TdkZhanJiRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{36} }

func (m *TdkZhanJiRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkZhanJiRsp) GetData() []*TdkZhanJiData {
	if m != nil {
		return m.Data
	}
	return nil
}

// 金币场请求开始匹配
type TdkMatchReq struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkMatchReq) Reset()                    { *m = TdkMatchReq{} }
func (m *TdkMatchReq) String() string            { return proto.CompactTextString(m) }
func (*TdkMatchReq) ProtoMessage()               {}
func (*TdkMatchReq) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{37} }

func (m *TdkMatchReq) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkMatchReq) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkMatchRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Deskid           *uint32      `protobuf:"varint,2,opt,name=deskid" json:"deskid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkMatchRsp) Reset()                    { *m = TdkMatchRsp{} }
func (m *TdkMatchRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkMatchRsp) ProtoMessage()               {}
func (*TdkMatchRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{38} }

func (m *TdkMatchRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkMatchRsp) GetDeskid() uint32 {
	if m != nil && m.Deskid != nil {
		return *m.Deskid
	}
	return 0
}

// 通知其他玩家有人进入牌桌
type TdkMatchAddUserRsp struct {
	Header           *ProtoHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userdata         *TdkDeskUserData `protobuf:"bytes,2,opt,name=userdata" json:"userdata,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TdkMatchAddUserRsp) Reset()                    { *m = TdkMatchAddUserRsp{} }
func (m *TdkMatchAddUserRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkMatchAddUserRsp) ProtoMessage()               {}
func (*TdkMatchAddUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{39} }

func (m *TdkMatchAddUserRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkMatchAddUserRsp) GetUserdata() *TdkDeskUserData {
	if m != nil {
		return m.Userdata
	}
	return nil
}

type TdkJoinPlayingDeskRsp struct {
	Header           *ProtoHeader        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32             `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Deskstatus       *int32              `protobuf:"varint,3,opt,name=deskstatus" json:"deskstatus,omitempty"`
	Actuserid        *uint32             `protobuf:"varint,4,opt,name=actuserid" json:"actuserid,omitempty"`
	Userdata         []*TdkDeskUserData  `protobuf:"bytes,5,rep,name=userdata" json:"userdata,omitempty"`
	DeskId           *uint32             `protobuf:"varint,6,opt,name=deskId" json:"deskId,omitempty"`
	Userpoker        []*TdkUserPokerData `protobuf:"bytes,7,rep,name=userpoker" json:"userpoker,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TdkJoinPlayingDeskRsp) Reset()                    { *m = TdkJoinPlayingDeskRsp{} }
func (m *TdkJoinPlayingDeskRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkJoinPlayingDeskRsp) ProtoMessage()               {}
func (*TdkJoinPlayingDeskRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{40} }

func (m *TdkJoinPlayingDeskRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkJoinPlayingDeskRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkJoinPlayingDeskRsp) GetDeskstatus() int32 {
	if m != nil && m.Deskstatus != nil {
		return *m.Deskstatus
	}
	return 0
}

func (m *TdkJoinPlayingDeskRsp) GetActuserid() uint32 {
	if m != nil && m.Actuserid != nil {
		return *m.Actuserid
	}
	return 0
}

func (m *TdkJoinPlayingDeskRsp) GetUserdata() []*TdkDeskUserData {
	if m != nil {
		return m.Userdata
	}
	return nil
}

func (m *TdkJoinPlayingDeskRsp) GetDeskId() uint32 {
	if m != nil && m.DeskId != nil {
		return *m.DeskId
	}
	return 0
}

func (m *TdkJoinPlayingDeskRsp) GetUserpoker() []*TdkUserPokerData {
	if m != nil {
		return m.Userpoker
	}
	return nil
}

type TdkEnterGame struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkEnterGame) Reset()                    { *m = TdkEnterGame{} }
func (m *TdkEnterGame) String() string            { return proto.CompactTextString(m) }
func (*TdkEnterGame) ProtoMessage()               {}
func (*TdkEnterGame) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{41} }

func (m *TdkEnterGame) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkEnterGame) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

type TdkEnterGameRsp struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Resultcode       *int32       `protobuf:"varint,3,opt,name=resultcode" json:"resultcode,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TdkEnterGameRsp) Reset()                    { *m = TdkEnterGameRsp{} }
func (m *TdkEnterGameRsp) String() string            { return proto.CompactTextString(m) }
func (*TdkEnterGameRsp) ProtoMessage()               {}
func (*TdkEnterGameRsp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{42} }

func (m *TdkEnterGameRsp) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TdkEnterGameRsp) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkEnterGameRsp) GetResultcode() int32 {
	if m != nil && m.Resultcode != nil {
		return *m.Resultcode
	}
	return 0
}

func init() {
	proto.RegisterType((*TdkHeartBeat)(nil), "yjprotogo.TdkHeartBeat")
	proto.RegisterType((*TdkJoinRoom)(nil), "yjprotogo.TdkJoinRoom")
	proto.RegisterType((*TdkJoinRoomRsp)(nil), "yjprotogo.TdkJoinRoomRsp")
	proto.RegisterType((*TdkLeaveRoom)(nil), "yjprotogo.TdkLeaveRoom")
	proto.RegisterType((*TdkLeaveRoomRsp)(nil), "yjprotogo.TdkLeaveRoomRsp")
	proto.RegisterType((*TdkJoinDesk)(nil), "yjprotogo.TdkJoinDesk")
	proto.RegisterType((*TdkJoinDeskRsp)(nil), "yjprotogo.TdkJoinDeskRsp")
	proto.RegisterType((*TdkCreateDesk)(nil), "yjprotogo.TdkCreateDesk")
	proto.RegisterType((*TdkCreateDeskRsp)(nil), "yjprotogo.TdkCreateDeskRsp")
	proto.RegisterType((*TdkLeaveDesk)(nil), "yjprotogo.TdkLeaveDesk")
	proto.RegisterType((*TdkLeaveDeskRsp)(nil), "yjprotogo.TdkLeaveDeskRsp")
	proto.RegisterType((*TdkUserReady)(nil), "yjprotogo.TdkUserReady")
	proto.RegisterType((*TdkUserReadyRsp)(nil), "yjprotogo.TdkUserReadyRsp")
	proto.RegisterType((*TdkReturnDesk)(nil), "yjprotogo.TdkReturnDesk")
	proto.RegisterType((*TdkDissolveDeskReq)(nil), "yjprotogo.TdkDissolveDeskReq")
	proto.RegisterType((*TdkDissolveDeskUser)(nil), "yjprotogo.TdkDissolveDeskUser")
	proto.RegisterType((*TdkDisDeskDesicionReq)(nil), "yjprotogo.TdkDisDeskDesicionReq")
	proto.RegisterType((*TdkDisDeskDesicionRsp)(nil), "yjprotogo.TdkDisDeskDesicionRsp")
	proto.RegisterType((*TdkDisDeskReqResult)(nil), "yjprotogo.TdkDisDeskReqResult")
	proto.RegisterType((*TdkDisDesk)(nil), "yjprotogo.TdkDisDesk")
	proto.RegisterType((*TdkSendPoker)(nil), "yjprotogo.TdkSendPoker")
	proto.RegisterType((*TdkStartBet)(nil), "yjprotogo.TdkStartBet")
	proto.RegisterType((*TdkBet)(nil), "yjprotogo.TdkBet")
	proto.RegisterType((*TdkBetRsp)(nil), "yjprotogo.TdkBetRsp")
	proto.RegisterType((*TdkFold)(nil), "yjprotogo.TdkFold")
	proto.RegisterType((*TdkFoldRsp)(nil), "yjprotogo.TdkFoldRsp")
	proto.RegisterType((*TdkQiJiao)(nil), "yjprotogo.TdkQiJiao")
	proto.RegisterType((*TdkQiJiaoRsp)(nil), "yjprotogo.TdkQiJiaoRsp")
	proto.RegisterType((*TdkFanTi)(nil), "yjprotogo.TdkFanTi")
	proto.RegisterType((*TdkFanTiRsp)(nil), "yjprotogo.TdkFanTiRsp")
	proto.RegisterType((*TdkPass)(nil), "yjprotogo.TdkPass")
	proto.RegisterType((*TdkPassRsp)(nil), "yjprotogo.TdkPassRsp")
	proto.RegisterType((*TdkKaiPai)(nil), "yjprotogo.TdkKaiPai")
	proto.RegisterType((*TdkKaiPaiRsp)(nil), "yjprotogo.TdkKaiPaiRsp")
	proto.RegisterType((*TdkRoundEnd)(nil), "yjprotogo.TdkRoundEnd")
	proto.RegisterType((*TdkZhanJi)(nil), "yjprotogo.TdkZhanJi")
	proto.RegisterType((*TdkZhanJiRsp)(nil), "yjprotogo.TdkZhanJiRsp")
	proto.RegisterType((*TdkMatchReq)(nil), "yjprotogo.TdkMatchReq")
	proto.RegisterType((*TdkMatchRsp)(nil), "yjprotogo.TdkMatchRsp")
	proto.RegisterType((*TdkMatchAddUserRsp)(nil), "yjprotogo.TdkMatchAddUserRsp")
	proto.RegisterType((*TdkJoinPlayingDeskRsp)(nil), "yjprotogo.TdkJoinPlayingDeskRsp")
	proto.RegisterType((*TdkEnterGame)(nil), "yjprotogo.TdkEnterGame")
	proto.RegisterType((*TdkEnterGameRsp)(nil), "yjprotogo.TdkEnterGameRsp")
}

var fileDescriptor12 = []byte{
	// 1110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xf5, 0x7a, 0xff, 0xcc, 0x66, 0x93, 0xd4, 0x01, 0x64, 0xc2, 0xa5, 0x9a, 0x43, 0x85,
	0x44, 0x95, 0x03, 0x07, 0xee, 0x25, 0x49, 0x49, 0x43, 0x91, 0x96, 0x6d, 0x2b, 0x24, 0x24, 0x88,
	0xa6, 0xf6, 0x90, 0x4c, 0xe2, 0x9d, 0xd9, 0xda, 0xb3, 0x21, 0x7b, 0x43, 0x42, 0x1c, 0xb8, 0x22,
	0xce, 0x9c, 0xb8, 0x71, 0x44, 0xf0, 0x19, 0xf8, 0x20, 0x7c, 0x10, 0xde, 0xbc, 0xb1, 0xbd, 0x76,
	0x76, 0xd5, 0x64, 0xed, 0xa4, 0x52, 0x2e, 0x6d, 0x76, 0x3c, 0xfe, 0xbd, 0xdf, 0x7b, 0xef, 0xf7,
	0xde, 0xbc, 0x31, 0xe9, 0xe9, 0xe8, 0x6c, 0x67, 0x92, 0x28, 0xad, 0xfc, 0xde, 0xec, 0x14, 0xff,
	0x38, 0x56, 0xdb, 0xeb, 0xb0, 0x7a, 0x14, 0x31, 0xcd, 0xec, 0xa3, 0xed, 0xad, 0x50, 0x8d, 0xc7,
	0x4a, 0x1e, 0x85, 0xb1, 0xe0, 0x52, 0xdb, 0x45, 0xfa, 0x29, 0x59, 0x7b, 0x11, 0x9d, 0x1d, 0x70,
	0x96, 0xe8, 0xcf, 0x38, 0xd3, 0xfe, 0x43, 0xd2, 0x3e, 0xe1, 0x2c, 0xe2, 0x49, 0xe0, 0x3c, 0x70,
	0x3e, 0xea, 0x7f, 0xf2, 0xfe, 0x4e, 0x01, 0xb8, 0x33, 0x34, 0xff, 0x1f, 0xe0, 0x53, 0xfa, 0x35,
	0xe9, 0xc3, 0x7b, 0x87, 0x4a, 0xc8, 0x91, 0x52, 0xe3, 0xeb, 0xbe, 0xe6, 0xaf, 0x93, 0xf6, 0x34,
	0xe5, 0x89, 0x88, 0x82, 0x7b, 0xb0, 0x6f, 0xe0, 0x6f, 0x92, 0x6e, 0x02, 0xef, 0xeb, 0xd9, 0x84,
	0x07, 0x2e, 0xac, 0x78, 0xf4, 0x80, 0xac, 0x97, 0x80, 0x47, 0xe9, 0x64, 0x15, 0xec, 0x84, 0xa7,
	0xd3, 0x58, 0x23, 0xb6, 0x47, 0x9f, 0xa0, 0x6b, 0xcf, 0x38, 0x3b, 0xe7, 0x4d, 0x38, 0xd2, 0xa7,
	0x64, 0xa3, 0x8c, 0x53, 0x9f, 0x52, 0x97, 0xbe, 0x2c, 0xa2, 0xb6, 0xc7, 0xd3, 0xb3, 0xda, 0x51,
	0x83, 0xdf, 0x11, 0xbc, 0xff, 0x34, 0xc2, 0x98, 0x0d, 0xe8, 0xbf, 0x4e, 0x11, 0x34, 0x83, 0xbb,
	0x22, 0xc3, 0x65, 0xd0, 0x22, 0x83, 0xf6, 0x7d, 0x42, 0x4e, 0x01, 0x36, 0xf3, 0xa2, 0x65, 0xbc,
	0xf0, 0x1f, 0x91, 0xae, 0x79, 0xc7, 0x48, 0x2b, 0xf0, 0x1e, 0xb8, 0x80, 0xbe, 0x5d, 0x42, 0x07,
	0x22, 0x86, 0xc4, 0x4b, 0xd8, 0xb1, 0x07, 0x3b, 0x60, 0x37, 0x31, 0x88, 0xa1, 0x92, 0xdf, 0x8b,
	0xe3, 0xa0, 0x8d, 0x6c, 0x82, 0xc5, 0xfd, 0xbb, 0xf8, 0x9c, 0xfe, 0xe6, 0x90, 0x01, 0xac, 0xec,
	0x26, 0x20, 0x46, 0xde, 0x28, 0x48, 0xc0, 0x3c, 0x51, 0x53, 0x19, 0x85, 0xf0, 0x8f, 0x65, 0x3e,
	0xf0, 0xb7, 0x48, 0x7f, 0x12, 0xb3, 0x19, 0x4f, 0xec, 0xa2, 0x87, 0x8b, 0xf7, 0x49, 0x8f, 0xc5,
	0x31, 0xf8, 0x08, 0x16, 0x91, 0xdf, 0xc0, 0xdf, 0x20, 0x1d, 0x91, 0x82, 0x91, 0x8b, 0x59, 0xd0,
	0xc1, 0xc4, 0x1d, 0x92, 0xcd, 0x0a, 0xab, 0x15, 0x43, 0x9c, 0x85, 0xd4, 0xea, 0xa9, 0xa4, 0xcb,
	0x26, 0x0e, 0xd2, 0xf1, 0x5c, 0x97, 0x35, 0x28, 0x95, 0x75, 0x59, 0x82, 0x2e, 0xb2, 0x6e, 0x28,
	0xa7, 0x9a, 0xe9, 0x69, 0x8a, 0xb1, 0xcb, 0xcb, 0xc9, 0xa4, 0x75, 0x04, 0x20, 0xb3, 0xda, 0xb4,
	0x7f, 0x72, 0x90, 0x77, 0x01, 0xd4, 0x44, 0xad, 0x26, 0xc7, 0xe8, 0x47, 0xa8, 0xa2, 0xac, 0x81,
	0x98, 0x96, 0x02, 0xe9, 0x4c, 0x0c, 0x74, 0xa6, 0x57, 0xd8, 0x25, 0xf9, 0x85, 0xce, 0xde, 0xc4,
	0xa4, 0xd3, 0x3f, 0x5d, 0xd4, 0xd9, 0x88, 0xeb, 0x69, 0x22, 0x9b, 0xea, 0xac, 0x14, 0x2b, 0xcb,
	0xc1, 0x48, 0x2a, 0xcc, 0x0d, 0xb6, 0xf2, 0x4e, 0x77, 0xcc, 0x25, 0x0a, 0x0d, 0x29, 0x74, 0xcd,
	0x4a, 0xc8, 0xb2, 0x95, 0xf6, 0x42, 0x61, 0x75, 0xae, 0x2c, 0x2c, 0x10, 0x73, 0x24, 0xd2, 0x88,
	0x87, 0x22, 0x12, 0xf2, 0x38, 0xe8, 0x22, 0xc4, 0xbb, 0x64, 0x0d, 0x16, 0x13, 0xfe, 0x3a, 0x33,
	0xde, 0xcb, 0x8d, 0x03, 0x47, 0x11, 0x0a, 0x25, 0x03, 0x02, 0xc0, 0x5e, 0x49, 0x94, 0x7d, 0xdc,
	0x31, 0x20, 0x1e, 0x56, 0x4b, 0xb0, 0x86, 0x3f, 0xab, 0x45, 0x3b, 0x78, 0x73, 0xd1, 0xfa, 0x3b,
	0xa4, 0x67, 0xcc, 0x4d, 0xd4, 0x19, 0x44, 0x6f, 0x1d, 0x89, 0x7f, 0x58, 0xdd, 0x6c, 0x48, 0x0f,
	0xcd, 0x63, 0x64, 0x0e, 0xe5, 0x65, 0xf6, 0xbf, 0xe2, 0x3a, 0xd8, 0x80, 0xdd, 0x83, 0x92, 0x1e,
	0x37, 0x73, 0x3d, 0xc2, 0x43, 0x39, 0x1d, 0x07, 0xf7, 0x31, 0x5b, 0xcf, 0x88, 0x6f, 0x2c, 0x8a,
	0x34, 0x55, 0x71, 0xa6, 0x76, 0xfe, 0xba, 0xb6, 0x02, 0x7f, 0x76, 0xc8, 0xd6, 0x25, 0x38, 0xc3,
	0xef, 0x46, 0x55, 0x08, 0x2e, 0x42, 0x1e, 0xcc, 0x36, 0xc8, 0xbf, 0x6b, 0xbb, 0x0c, 0x2c, 0x48,
	0x75, 0xae, 0xa0, 0xcb, 0xa0, 0x00, 0x28, 0x23, 0xef, 0x59, 0x1a, 0x86, 0xc1, 0x5e, 0x96, 0x9f,
	0x06, 0x8e, 0x55, 0xd2, 0xec, 0xa2, 0x89, 0xe9, 0x52, 0x13, 0x0d, 0x2a, 0x6e, 0xc1, 0xc4, 0x25,
	0xef, 0x6d, 0xaf, 0xf8, 0xb1, 0x88, 0x70, 0x96, 0xab, 0x11, 0xee, 0xb8, 0xb6, 0x55, 0x1b, 0xac,
	0x4a, 0x8b, 0xaa, 0x68, 0xcc, 0xbd, 0x52, 0x63, 0x10, 0x5c, 0x32, 0x67, 0x70, 0x6d, 0xc3, 0x1f,
	0x97, 0x2a, 0xf0, 0x1e, 0x1a, 0xf9, 0xe0, 0x92, 0xea, 0x45, 0x9a, 0x17, 0x20, 0xfd, 0xc5, 0xc1,
	0x96, 0xf8, 0x9c, 0xcb, 0x08, 0xed, 0xd6, 0x0e, 0x2a, 0x88, 0x05, 0xfd, 0x2a, 0xfa, 0xaf, 0xd1,
	0xbf, 0x4a, 0x12, 0xf5, 0x43, 0xd6, 0xc1, 0xa0, 0x3a, 0xd3, 0x50, 0x25, 0x7c, 0x7e, 0x62, 0x8d,
	0xd9, 0xc5, 0xc4, 0x2e, 0xe1, 0x89, 0x45, 0x05, 0x4e, 0x16, 0xcf, 0x35, 0xce, 0x71, 0xba, 0x49,
	0x7a, 0x8b, 0x9e, 0xe4, 0xe6, 0x5d, 0x0a, 0x4a, 0x31, 0xe6, 0xe7, 0x3c, 0xb6, 0x4a, 0xa6, 0x47,
	0xa4, 0x0d, 0xa6, 0x9a, 0x58, 0x99, 0x97, 0xb7, 0x9b, 0x37, 0x1f, 0x6b, 0x12, 0xbd, 0xa5, 0x7f,
	0x39, 0xa4, 0x67, 0x2d, 0xdc, 0xf4, 0xd9, 0xb0, 0xe4, 0x5c, 0x2b, 0x91, 0xf1, 0xf2, 0xf7, 0x4a,
	0xa7, 0x45, 0x7b, 0xa1, 0x79, 0x77, 0x16, 0x9a, 0x37, 0x76, 0x5e, 0xfa, 0x98, 0x74, 0x80, 0xf4,
	0x13, 0x15, 0x47, 0xb5, 0x1b, 0xd3, 0x1f, 0x0e, 0x8a, 0xd6, 0x60, 0xbc, 0x0d, 0xcf, 0x97, 0x9c,
	0x8b, 0x15, 0x4f, 0xdb, 0x0b, 0x9e, 0xda, 0x61, 0xe8, 0x15, 0xa6, 0xe7, 0x2b, 0x71, 0x28, 0x98,
	0xba, 0x2d, 0x0d, 0xfc, 0x63, 0x6b, 0xcb, 0x1a, 0xb9, 0x4b, 0x32, 0x60, 0xa4, 0x6b, 0x52, 0xc8,
	0xe4, 0x0b, 0x71, 0x5b, 0xb1, 0xf9, 0xdb, 0xc1, 0x62, 0x47, 0x1b, 0x77, 0xaf, 0x42, 0x86, 0x2c,
	0x4d, 0x6b, 0x57, 0xc8, 0xaf, 0xb6, 0x42, 0x0c, 0xc6, 0x2d, 0x78, 0x5e, 0xf2, 0xaa, 0xb5, 0x64,
	0xb6, 0xf3, 0xf2, 0xf9, 0xb2, 0x3a, 0xb6, 0xd1, 0x5d, 0xac, 0x87, 0x2f, 0x98, 0x18, 0xb2, 0xda,
	0x39, 0xa7, 0xbf, 0x5b, 0xc1, 0x5b, 0x94, 0xb7, 0xe1, 0x5b, 0xe5, 0x40, 0xf5, 0xae, 0x3e, 0x50,
	0x35, 0x8a, 0x6e, 0x64, 0x86, 0xc4, 0x7d, 0x59, 0xbb, 0xc7, 0xf9, 0x7d, 0xe2, 0x5a, 0x61, 0xbb,
	0x76, 0x4a, 0x82, 0xc3, 0x13, 0x6f, 0xff, 0xad, 0x62, 0x6c, 0x82, 0x80, 0xc3, 0x62, 0x36, 0x23,
	0xd9, 0xd8, 0x7e, 0x73, 0xc2, 0xe4, 0x61, 0xfd, 0xd8, 0x7e, 0x87, 0xa1, 0xb5, 0x20, 0xab, 0x84,
	0xf6, 0x21, 0x69, 0x95, 0x26, 0x81, 0x4b, 0xf3, 0xaf, 0x85, 0xc3, 0xd0, 0xec, 0x63, 0x68, 0xbe,
	0x64, 0x3a, 0x3c, 0x69, 0x32, 0x97, 0x96, 0x61, 0x1a, 0xdc, 0x2f, 0x4f, 0x71, 0x58, 0x46, 0x98,
	0xc7, 0x51, 0x84, 0xf7, 0xac, 0x15, 0xd0, 0x1e, 0x55, 0x26, 0x20, 0xe7, 0xcd, 0x77, 0x10, 0xfa,
	0x9f, 0x83, 0x03, 0xa6, 0xf9, 0xf2, 0x30, 0x84, 0x8b, 0x35, 0xdc, 0x43, 0x9a, 0x7e, 0x80, 0xb8,
	0xe6, 0x75, 0x6a, 0xb5, 0x6f, 0x10, 0xf3, 0x0f, 0x26, 0xed, 0x45, 0xed, 0x77, 0xae, 0xd6, 0xbe,
	0xbd, 0xfb, 0xee, 0x4b, 0xcd, 0x93, 0xcf, 0xd9, 0x98, 0xd7, 0xce, 0xf0, 0xb7, 0x78, 0xf5, 0x2d,
	0x70, 0x6e, 0xb8, 0xcc, 0x87, 0xef, 0x0c, 0x9d, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x32,
	0x9a, 0xb1, 0x0c, 0x14, 0x00, 0x00,
}
