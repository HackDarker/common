// Code generated by protoc-gen-go.
// source: sdy_base.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

type SdyEnumProtoId int32

const (
	// //////////////////////////////////
	SdyEnumProtoId_SDY_PID_HEARTBEAT          SdyEnumProtoId = 0
	SdyEnumProtoId_SDY_PID_CREATEROOM         SdyEnumProtoId = 1
	SdyEnumProtoId_SDY_PID_CREATEROOM_ACK     SdyEnumProtoId = 2
	SdyEnumProtoId_SDY_PID_ENTER_ROOM         SdyEnumProtoId = 3
	SdyEnumProtoId_SDY_PID_ENTER_ROOM_ACK     SdyEnumProtoId = 4
	SdyEnumProtoId_SDY_PID_SEND_GAMEINFO      SdyEnumProtoId = 5
	SdyEnumProtoId_SDY_PID_READY              SdyEnumProtoId = 6
	SdyEnumProtoId_SDY_PID_READY_ACK          SdyEnumProtoId = 7
	SdyEnumProtoId_SDY_PID_OPENING            SdyEnumProtoId = 8
	SdyEnumProtoId_SDY_PID_DEAL_CARDS         SdyEnumProtoId = 9
	SdyEnumProtoId_SDY_PID_BC_JIAOFEN         SdyEnumProtoId = 10
	SdyEnumProtoId_SDY_PID_JIAO_FEN           SdyEnumProtoId = 11
	SdyEnumProtoId_SDY_PID_JIAO_FEN_ACK       SdyEnumProtoId = 12
	SdyEnumProtoId_SDY_PID_BC_JIAO_FEN_RESULT SdyEnumProtoId = 13
	SdyEnumProtoId_SDY_PID_DINGZHU_BC         SdyEnumProtoId = 14
	SdyEnumProtoId_SDY_PID_REQDINGZHU         SdyEnumProtoId = 15
	SdyEnumProtoId_SDY_PID_DINGZHU_ACK        SdyEnumProtoId = 16
	SdyEnumProtoId_SDY_PID_HUANDI             SdyEnumProtoId = 17
	SdyEnumProtoId_SDY_PID_REQHUANDI          SdyEnumProtoId = 18
	SdyEnumProtoId_SDY_PID_HUANDI_ACK         SdyEnumProtoId = 19
	// //////////////////////////////////////////
	SdyEnumProtoId_SDY_PID_START_PLAY SdyEnumProtoId = 20
	// //////////////////////////////////////////
	SdyEnumProtoId_SDY_PID_OUT_CARDS      SdyEnumProtoId = 21
	SdyEnumProtoId_SDY_PID_OUT_CARDS_ACK  SdyEnumProtoId = 22
	SdyEnumProtoId_SDY_PID_OVERTURN       SdyEnumProtoId = 23
	SdyEnumProtoId_SDY_PID_CURRENTRESULT  SdyEnumProtoId = 24
	SdyEnumProtoId_SDY_PID_SENDENDLOTTERY SdyEnumProtoId = 25
	// //////////////////////////////////////////
	SdyEnumProtoId_SDY_PID_DISSOLVE_DESK     SdyEnumProtoId = 26
	SdyEnumProtoId_SDY_PID_DISSOLVE_DESK_ACK SdyEnumProtoId = 27
)

var SdyEnumProtoId_name = map[int32]string{
	0:  "SDY_PID_HEARTBEAT",
	1:  "SDY_PID_CREATEROOM",
	2:  "SDY_PID_CREATEROOM_ACK",
	3:  "SDY_PID_ENTER_ROOM",
	4:  "SDY_PID_ENTER_ROOM_ACK",
	5:  "SDY_PID_SEND_GAMEINFO",
	6:  "SDY_PID_READY",
	7:  "SDY_PID_READY_ACK",
	8:  "SDY_PID_OPENING",
	9:  "SDY_PID_DEAL_CARDS",
	10: "SDY_PID_BC_JIAOFEN",
	11: "SDY_PID_JIAO_FEN",
	12: "SDY_PID_JIAO_FEN_ACK",
	13: "SDY_PID_BC_JIAO_FEN_RESULT",
	14: "SDY_PID_DINGZHU_BC",
	15: "SDY_PID_REQDINGZHU",
	16: "SDY_PID_DINGZHU_ACK",
	17: "SDY_PID_HUANDI",
	18: "SDY_PID_REQHUANDI",
	19: "SDY_PID_HUANDI_ACK",
	20: "SDY_PID_START_PLAY",
	21: "SDY_PID_OUT_CARDS",
	22: "SDY_PID_OUT_CARDS_ACK",
	23: "SDY_PID_OVERTURN",
	24: "SDY_PID_CURRENTRESULT",
	25: "SDY_PID_SENDENDLOTTERY",
	26: "SDY_PID_DISSOLVE_DESK",
	27: "SDY_PID_DISSOLVE_DESK_ACK",
}
var SdyEnumProtoId_value = map[string]int32{
	"SDY_PID_HEARTBEAT":          0,
	"SDY_PID_CREATEROOM":         1,
	"SDY_PID_CREATEROOM_ACK":     2,
	"SDY_PID_ENTER_ROOM":         3,
	"SDY_PID_ENTER_ROOM_ACK":     4,
	"SDY_PID_SEND_GAMEINFO":      5,
	"SDY_PID_READY":              6,
	"SDY_PID_READY_ACK":          7,
	"SDY_PID_OPENING":            8,
	"SDY_PID_DEAL_CARDS":         9,
	"SDY_PID_BC_JIAOFEN":         10,
	"SDY_PID_JIAO_FEN":           11,
	"SDY_PID_JIAO_FEN_ACK":       12,
	"SDY_PID_BC_JIAO_FEN_RESULT": 13,
	"SDY_PID_DINGZHU_BC":         14,
	"SDY_PID_REQDINGZHU":         15,
	"SDY_PID_DINGZHU_ACK":        16,
	"SDY_PID_HUANDI":             17,
	"SDY_PID_REQHUANDI":          18,
	"SDY_PID_HUANDI_ACK":         19,
	"SDY_PID_START_PLAY":         20,
	"SDY_PID_OUT_CARDS":          21,
	"SDY_PID_OUT_CARDS_ACK":      22,
	"SDY_PID_OVERTURN":           23,
	"SDY_PID_CURRENTRESULT":      24,
	"SDY_PID_SENDENDLOTTERY":     25,
	"SDY_PID_DISSOLVE_DESK":      26,
	"SDY_PID_DISSOLVE_DESK_ACK":  27,
}

func (x SdyEnumProtoId) Enum() *SdyEnumProtoId {
	p := new(SdyEnumProtoId)
	*p = x
	return p
}
func (x SdyEnumProtoId) String() string {
	return proto.EnumName(SdyEnumProtoId_name, int32(x))
}
func (x *SdyEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumProtoId_value, data, "SdyEnumProtoId")
	if err != nil {
		return err
	}
	*x = SdyEnumProtoId(value)
	return nil
}
func (SdyEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type SdyEnumErrorCode int32

const (
	SdyEnumErrorCode_SDY_EC_SUCCESS SdyEnumErrorCode = 0
	// -101   -200	游戏异常
	SdyEnumErrorCode_SDY_EC_CREATE_DESK_DIAMOND_NOTENOUGH SdyEnumErrorCode = -101
	SdyEnumErrorCode_SDY_EC_CREATE_DESK_USER_NOTFOUND     SdyEnumErrorCode = -102
	SdyEnumErrorCode_SDY_EC_INTO_DESK_NOTFOUND            SdyEnumErrorCode = -103
	SdyEnumErrorCode_SDY_EC_INTO_DESK_ISFULL              SdyEnumErrorCode = -104
	SdyEnumErrorCode_SDY_EC_GAME_READY_REPEAT             SdyEnumErrorCode = -110
	SdyEnumErrorCode_SDY_EC_GAME_READY_CHIP_NOT_ENOUGH    SdyEnumErrorCode = -111
)

var SdyEnumErrorCode_name = map[int32]string{
	0:    "SDY_EC_SUCCESS",
	-101: "SDY_EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "SDY_EC_CREATE_DESK_USER_NOTFOUND",
	-103: "SDY_EC_INTO_DESK_NOTFOUND",
	-104: "SDY_EC_INTO_DESK_ISFULL",
	-110: "SDY_EC_GAME_READY_REPEAT",
	-111: "SDY_EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var SdyEnumErrorCode_value = map[string]int32{
	"SDY_EC_SUCCESS":                       0,
	"SDY_EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"SDY_EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"SDY_EC_INTO_DESK_NOTFOUND":            -103,
	"SDY_EC_INTO_DESK_ISFULL":              -104,
	"SDY_EC_GAME_READY_REPEAT":             -110,
	"SDY_EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x SdyEnumErrorCode) Enum() *SdyEnumErrorCode {
	p := new(SdyEnumErrorCode)
	*p = x
	return p
}
func (x SdyEnumErrorCode) String() string {
	return proto.EnumName(SdyEnumErrorCode_name, int32(x))
}
func (x *SdyEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumErrorCode_value, data, "SdyEnumErrorCode")
	if err != nil {
		return err
	}
	*x = SdyEnumErrorCode(value)
	return nil
}
func (SdyEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// 轮到玩家操作时：可执行何种操作
type SdyEnumActType int32

const (
	SdyEnumActType_SDY_T_NORMAL_ACT SdyEnumActType = 1
	SdyEnumActType_SDY_T_JIAO_FEN   SdyEnumActType = 2
	SdyEnumActType_SDY_T_HUAN_DI    SdyEnumActType = 3
)

var SdyEnumActType_name = map[int32]string{
	1: "SDY_T_NORMAL_ACT",
	2: "SDY_T_JIAO_FEN",
	3: "SDY_T_HUAN_DI",
}
var SdyEnumActType_value = map[string]int32{
	"SDY_T_NORMAL_ACT": 1,
	"SDY_T_JIAO_FEN":   2,
	"SDY_T_HUAN_DI":    3,
}

func (x SdyEnumActType) Enum() *SdyEnumActType {
	p := new(SdyEnumActType)
	*p = x
	return p
}
func (x SdyEnumActType) String() string {
	return proto.EnumName(SdyEnumActType_name, int32(x))
}
func (x *SdyEnumActType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumActType_value, data, "SdyEnumActType")
	if err != nil {
		return err
	}
	*x = SdyEnumActType(value)
	return nil
}
func (SdyEnumActType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type SdyEnumDeskStatus int32

const (
	SdyEnumDeskStatus_SDY_D_INIT       SdyEnumDeskStatus = 0
	SdyEnumDeskStatus_SDY_D_READY      SdyEnumDeskStatus = 1
	SdyEnumDeskStatus_SDY_D_DEAL_CARDS SdyEnumDeskStatus = 2
	SdyEnumDeskStatus_SDY_D_JIAO_FEN   SdyEnumDeskStatus = 3
	SdyEnumDeskStatus_SDY_D_HUAN_DI    SdyEnumDeskStatus = 4
	SdyEnumDeskStatus_SDY_D_PLAYING    SdyEnumDeskStatus = 5
	SdyEnumDeskStatus_SDY_D_DO_BILL    SdyEnumDeskStatus = 6
	SdyEnumDeskStatus_SDY_D_FINISH     SdyEnumDeskStatus = 7
)

var SdyEnumDeskStatus_name = map[int32]string{
	0: "SDY_D_INIT",
	1: "SDY_D_READY",
	2: "SDY_D_DEAL_CARDS",
	3: "SDY_D_JIAO_FEN",
	4: "SDY_D_HUAN_DI",
	5: "SDY_D_PLAYING",
	6: "SDY_D_DO_BILL",
	7: "SDY_D_FINISH",
}
var SdyEnumDeskStatus_value = map[string]int32{
	"SDY_D_INIT":       0,
	"SDY_D_READY":      1,
	"SDY_D_DEAL_CARDS": 2,
	"SDY_D_JIAO_FEN":   3,
	"SDY_D_HUAN_DI":    4,
	"SDY_D_PLAYING":    5,
	"SDY_D_DO_BILL":    6,
	"SDY_D_FINISH":     7,
}

func (x SdyEnumDeskStatus) Enum() *SdyEnumDeskStatus {
	p := new(SdyEnumDeskStatus)
	*p = x
	return p
}
func (x SdyEnumDeskStatus) String() string {
	return proto.EnumName(SdyEnumDeskStatus_name, int32(x))
}
func (x *SdyEnumDeskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumDeskStatus_value, data, "SdyEnumDeskStatus")
	if err != nil {
		return err
	}
	*x = SdyEnumDeskStatus(value)
	return nil
}
func (SdyEnumDeskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

type SdyEnumUserStatus int32

const (
	SdyEnumUserStatus_SDY_U_READY  SdyEnumUserStatus = 1
	SdyEnumUserStatus_SDY_U_JIAO   SdyEnumUserStatus = 2
	SdyEnumUserStatus_SDY_U_HUAN   SdyEnumUserStatus = 3
	SdyEnumUserStatus_SDY_U_GAMING SdyEnumUserStatus = 4
	SdyEnumUserStatus_SDY_U_FINISH SdyEnumUserStatus = 5
)

var SdyEnumUserStatus_name = map[int32]string{
	1: "SDY_U_READY",
	2: "SDY_U_JIAO",
	3: "SDY_U_HUAN",
	4: "SDY_U_GAMING",
	5: "SDY_U_FINISH",
}
var SdyEnumUserStatus_value = map[string]int32{
	"SDY_U_READY":  1,
	"SDY_U_JIAO":   2,
	"SDY_U_HUAN":   3,
	"SDY_U_GAMING": 4,
	"SDY_U_FINISH": 5,
}

func (x SdyEnumUserStatus) Enum() *SdyEnumUserStatus {
	p := new(SdyEnumUserStatus)
	*p = x
	return p
}
func (x SdyEnumUserStatus) String() string {
	return proto.EnumName(SdyEnumUserStatus_name, int32(x))
}
func (x *SdyEnumUserStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumUserStatus_value, data, "SdyEnumUserStatus")
	if err != nil {
		return err
	}
	*x = SdyEnumUserStatus(value)
	return nil
}
func (SdyEnumUserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

type SdyEnumEnterType int32

const (
	SdyEnumEnterType_SDY_FRIEND SdyEnumEnterType = 1
	SdyEnumEnterType_SDY_COIN   SdyEnumEnterType = 2
)

var SdyEnumEnterType_name = map[int32]string{
	1: "SDY_FRIEND",
	2: "SDY_COIN",
}
var SdyEnumEnterType_value = map[string]int32{
	"SDY_FRIEND": 1,
	"SDY_COIN":   2,
}

func (x SdyEnumEnterType) Enum() *SdyEnumEnterType {
	p := new(SdyEnumEnterType)
	*p = x
	return p
}
func (x SdyEnumEnterType) String() string {
	return proto.EnumName(SdyEnumEnterType_name, int32(x))
}
func (x *SdyEnumEnterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumEnterType_value, data, "SdyEnumEnterType")
	if err != nil {
		return err
	}
	*x = SdyEnumEnterType(value)
	return nil
}
func (SdyEnumEnterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

type SdyEnum_Option int32

const (
	SdyEnum_Option_HAVEZHU     SdyEnum_Option = 1
	SdyEnum_Option_WANGKOU     SdyEnum_Option = 2
	SdyEnum_Option_SEVENTYFIVE SdyEnum_Option = 3
)

var SdyEnum_Option_name = map[int32]string{
	1: "HAVEZHU",
	2: "WANGKOU",
	3: "SEVENTYFIVE",
}
var SdyEnum_Option_value = map[string]int32{
	"HAVEZHU":     1,
	"WANGKOU":     2,
	"SEVENTYFIVE": 3,
}

func (x SdyEnum_Option) Enum() *SdyEnum_Option {
	p := new(SdyEnum_Option)
	*p = x
	return p
}
func (x SdyEnum_Option) String() string {
	return proto.EnumName(SdyEnum_Option_name, int32(x))
}
func (x *SdyEnum_Option) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnum_Option_value, data, "SdyEnum_Option")
	if err != nil {
		return err
	}
	*x = SdyEnum_Option(value)
	return nil
}
func (SdyEnum_Option) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

type SdyEnumCoinRoomLevel int32

const (
	SdyEnumCoinRoomLevel_LEVEL_1000 SdyEnumCoinRoomLevel = 1
)

var SdyEnumCoinRoomLevel_name = map[int32]string{
	1: "LEVEL_1000",
}
var SdyEnumCoinRoomLevel_value = map[string]int32{
	"LEVEL_1000": 1,
}

func (x SdyEnumCoinRoomLevel) Enum() *SdyEnumCoinRoomLevel {
	p := new(SdyEnumCoinRoomLevel)
	*p = x
	return p
}
func (x SdyEnumCoinRoomLevel) String() string {
	return proto.EnumName(SdyEnumCoinRoomLevel_name, int32(x))
}
func (x *SdyEnumCoinRoomLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumCoinRoomLevel_value, data, "SdyEnumCoinRoomLevel")
	if err != nil {
		return err
	}
	*x = SdyEnumCoinRoomLevel(value)
	return nil
}
func (SdyEnumCoinRoomLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

type SdyBaseRoomTypeInfo struct {
	OwnerID          *uint32          `protobuf:"varint,1,opt,name=ownerID" json:"ownerID,omitempty"`
	BoardsCout       *int32           `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	PlayOption       []SdyEnum_Option `protobuf:"varint,3,rep,name=playOption,enum=yjprotogo.SdyEnum_Option" json:"playOption,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SdyBaseRoomTypeInfo) Reset()                    { *m = SdyBaseRoomTypeInfo{} }
func (m *SdyBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseRoomTypeInfo) ProtoMessage()               {}
func (*SdyBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *SdyBaseRoomTypeInfo) GetOwnerID() uint32 {
	if m != nil && m.OwnerID != nil {
		return *m.OwnerID
	}
	return 0
}

func (m *SdyBaseRoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *SdyBaseRoomTypeInfo) GetPlayOption() []SdyEnum_Option {
	if m != nil {
		return m.PlayOption
	}
	return nil
}

type SdyBaseTimerInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	RemainSec        *int32       `protobuf:"varint,3,opt,name=remainSec" json:"remainSec,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseTimerInfo) Reset()                    { *m = SdyBaseTimerInfo{} }
func (m *SdyBaseTimerInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseTimerInfo) ProtoMessage()               {}
func (*SdyBaseTimerInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *SdyBaseTimerInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseTimerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyBaseTimerInfo) GetRemainSec() int32 {
	if m != nil && m.RemainSec != nil {
		return *m.RemainSec
	}
	return 0
}

type SdyBasePlayerInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	IsBanker         *bool        `protobuf:"varint,2,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerPokers     []int32      `protobuf:"varint,3,rep,name=playerPokers" json:"playerPokers,omitempty"`
	Coin             *int64       `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	NickName         *string      `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32       `protobuf:"varint,6,opt,name=sex" json:"sex,omitempty"`
	IsOwner          *bool        `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	IsReady          *bool        `protobuf:"varint,8,opt,name=isReady" json:"isReady,omitempty"`
	UserStatus       *int32       `protobuf:"varint,9,opt,name=userStatus" json:"userStatus,omitempty"`
	WxInfo           *WeixinInfo  `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	OnlineStatus     *int32       `protobuf:"varint,11,opt,name=onlineStatus" json:"onlineStatus,omitempty"`
	RemainPaiCount   *int32       `protobuf:"varint,13,opt,name=remainPaiCount" json:"remainPaiCount,omitempty"`
	OutPais          []int32      `protobuf:"varint,14,rep,name=outPais" json:"outPais,omitempty"`
	JiaoScore        *int32       `protobuf:"varint,15,opt,name=jiaoScore" json:"jiaoScore,omitempty"`
	Num2Win4OpenRB   *int32       `protobuf:"varint,16,opt,name=num2Win4OpenRB" json:"num2Win4OpenRB,omitempty"`
	RoomCard         *int64       `protobuf:"varint,17,opt,name=roomCard" json:"roomCard,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBasePlayerInfo) Reset()                    { *m = SdyBasePlayerInfo{} }
func (m *SdyBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBasePlayerInfo) ProtoMessage()               {}
func (*SdyBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *SdyBasePlayerInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *SdyBasePlayerInfo) GetPlayerPokers() []int32 {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *SdyBasePlayerInfo) GetIsReady() bool {
	if m != nil && m.IsReady != nil {
		return *m.IsReady
	}
	return false
}

func (m *SdyBasePlayerInfo) GetUserStatus() int32 {
	if m != nil && m.UserStatus != nil {
		return *m.UserStatus
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetRemainPaiCount() int32 {
	if m != nil && m.RemainPaiCount != nil {
		return *m.RemainPaiCount
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetOutPais() []int32 {
	if m != nil {
		return m.OutPais
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetJiaoScore() int32 {
	if m != nil && m.JiaoScore != nil {
		return *m.JiaoScore
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetNum2Win4OpenRB() int32 {
	if m != nil && m.Num2Win4OpenRB != nil {
		return *m.Num2Win4OpenRB
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetRoomCard() int64 {
	if m != nil && m.RoomCard != nil {
		return *m.RoomCard
	}
	return 0
}

type SdyBaseCommonRateInfo struct {
	InitPlayRate     *int32 `protobuf:"varint,1,opt,name=initPlayRate" json:"initPlayRate,omitempty"`
	SeeCardsRate     *int32 `protobuf:"varint,2,opt,name=seeCardsRate" json:"seeCardsRate,omitempty"`
	JrDizhuRate      *int32 `protobuf:"varint,3,opt,name=jrDizhuRate" json:"jrDizhuRate,omitempty"`
	FootRate         *int32 `protobuf:"varint,4,opt,name=footRate" json:"footRate,omitempty"`
	BoomRate         *int32 `protobuf:"varint,5,opt,name=boomRate" json:"boomRate,omitempty"`
	SpringRate       *int32 `protobuf:"varint,6,opt,name=springRate" json:"springRate,omitempty"`
	TotalRate        *int32 `protobuf:"varint,7,opt,name=totalRate" json:"totalRate,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SdyBaseCommonRateInfo) Reset()                    { *m = SdyBaseCommonRateInfo{} }
func (m *SdyBaseCommonRateInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseCommonRateInfo) ProtoMessage()               {}
func (*SdyBaseCommonRateInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *SdyBaseCommonRateInfo) GetInitPlayRate() int32 {
	if m != nil && m.InitPlayRate != nil {
		return *m.InitPlayRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetSeeCardsRate() int32 {
	if m != nil && m.SeeCardsRate != nil {
		return *m.SeeCardsRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetJrDizhuRate() int32 {
	if m != nil && m.JrDizhuRate != nil {
		return *m.JrDizhuRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetBoomRate() int32 {
	if m != nil && m.BoomRate != nil {
		return *m.BoomRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetSpringRate() int32 {
	if m != nil && m.SpringRate != nil {
		return *m.SpringRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetTotalRate() int32 {
	if m != nil && m.TotalRate != nil {
		return *m.TotalRate
	}
	return 0
}

type SdyBaseDeskInfo struct {
	GameStatus       *int32               `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *SdyBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32               `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32              `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32               `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	NInitActionTime  *int32               `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	InitRoomCoin     *int64               `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32               `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32               `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string              `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	BankerId         *uint32              `protobuf:"varint,14,opt,name=bankerId" json:"bankerId,omitempty"`
	OwnerId          *uint32              `protobuf:"varint,15,opt,name=ownerId" json:"ownerId,omitempty"`
	FootPokers       []int32              `protobuf:"varint,16,rep,name=footPokers" json:"footPokers,omitempty"`
	EnterType        *SdyEnumEnterType    `protobuf:"varint,17,opt,name=enterType,enum=yjprotogo.SdyEnumEnterType" json:"enterType,omitempty"`
	CoinTicket       *int64               `protobuf:"varint,19,opt,name=coinTicket" json:"coinTicket,omitempty"`
	TimerInfo        *SdyBaseTimerInfo    `protobuf:"bytes,20,opt,name=timerInfo" json:"timerInfo,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *SdyBaseDeskInfo) Reset()                    { *m = SdyBaseDeskInfo{} }
func (m *SdyBaseDeskInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseDeskInfo) ProtoMessage()               {}
func (*SdyBaseDeskInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *SdyBaseDeskInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetRoomTypeInfo() *SdyBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *SdyBaseDeskInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *SdyBaseDeskInfo) GetBankerId() uint32 {
	if m != nil && m.BankerId != nil {
		return *m.BankerId
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetOwnerId() uint32 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetFootPokers() []int32 {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *SdyBaseDeskInfo) GetEnterType() SdyEnumEnterType {
	if m != nil && m.EnterType != nil {
		return *m.EnterType
	}
	return SdyEnumEnterType_SDY_FRIEND
}

func (m *SdyBaseDeskInfo) GetCoinTicket() int64 {
	if m != nil && m.CoinTicket != nil {
		return *m.CoinTicket
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetTimerInfo() *SdyBaseTimerInfo {
	if m != nil {
		return m.TimerInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*SdyBaseRoomTypeInfo)(nil), "yjprotogo.sdy_base_roomTypeInfo")
	proto.RegisterType((*SdyBaseTimerInfo)(nil), "yjprotogo.sdy_base_timerInfo")
	proto.RegisterType((*SdyBasePlayerInfo)(nil), "yjprotogo.sdy_base_playerInfo")
	proto.RegisterType((*SdyBaseCommonRateInfo)(nil), "yjprotogo.sdy_base_commonRateInfo")
	proto.RegisterType((*SdyBaseDeskInfo)(nil), "yjprotogo.sdy_base_deskInfo")
	proto.RegisterEnum("yjprotogo.SdyEnumProtoId", SdyEnumProtoId_name, SdyEnumProtoId_value)
	proto.RegisterEnum("yjprotogo.SdyEnumErrorCode", SdyEnumErrorCode_name, SdyEnumErrorCode_value)
	proto.RegisterEnum("yjprotogo.SdyEnumActType", SdyEnumActType_name, SdyEnumActType_value)
	proto.RegisterEnum("yjprotogo.SdyEnumDeskStatus", SdyEnumDeskStatus_name, SdyEnumDeskStatus_value)
	proto.RegisterEnum("yjprotogo.SdyEnumUserStatus", SdyEnumUserStatus_name, SdyEnumUserStatus_value)
	proto.RegisterEnum("yjprotogo.SdyEnumEnterType", SdyEnumEnterType_name, SdyEnumEnterType_value)
	proto.RegisterEnum("yjprotogo.SdyEnum_Option", SdyEnum_Option_name, SdyEnum_Option_value)
	proto.RegisterEnum("yjprotogo.SdyEnumCoinRoomLevel", SdyEnumCoinRoomLevel_name, SdyEnumCoinRoomLevel_value)
}

var fileDescriptor4 = []byte{
	// 1472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4b, 0x53, 0xdc, 0x46,
	0x10, 0xf6, 0xbe, 0x78, 0x0c, 0xb0, 0x0c, 0xc3, 0x4b, 0x26, 0xb1, 0x6b, 0x43, 0x39, 0x2e, 0x6a,
	0xab, 0x4c, 0xd9, 0x54, 0x4e, 0x49, 0x2e, 0x42, 0x1a, 0x40, 0xf1, 0x22, 0xad, 0x47, 0x12, 0x2e,
	0x72, 0x51, 0x89, 0xdd, 0xb1, 0x2d, 0x60, 0x25, 0x4a, 0xab, 0xb5, 0x8d, 0xff, 0x40, 0x4e, 0x39,
	0xc4, 0xa7, 0x3c, 0x7e, 0x42, 0x0e, 0xf9, 0x1b, 0xf9, 0x4b, 0x39, 0x25, 0xd5, 0x33, 0x7a, 0xcc,
	0x2e, 0x9c, 0xb2, 0x97, 0x55, 0x7f, 0xfd, 0x4d, 0x77, 0x4f, 0xbf, 0x24, 0xd4, 0x1e, 0x0f, 0x6f,
	0x83, 0x8b, 0x70, 0xcc, 0xf7, 0x6f, 0xd2, 0x24, 0x4b, 0xc8, 0xe2, 0xed, 0xa5, 0x78, 0x78, 0x9b,
	0xec, 0xac, 0x0f, 0x92, 0xd1, 0x28, 0x89, 0x83, 0xc1, 0x75, 0xc4, 0xe3, 0x4c, 0xea, 0x77, 0x7f,
	0xae, 0xa1, 0xcd, 0xe2, 0x48, 0x90, 0x26, 0xc9, 0xc8, 0xbb, 0xbd, 0xe1, 0x56, 0xfc, 0x26, 0x21,
	0x1a, 0x9a, 0x4f, 0x3e, 0xc4, 0x3c, 0xb5, 0x4c, 0xad, 0xd6, 0xa9, 0xed, 0xad, 0xb0, 0x42, 0x24,
	0x8f, 0x11, 0xba, 0x48, 0xc2, 0x74, 0x38, 0x36, 0x92, 0x49, 0xa6, 0xd5, 0x3b, 0xb5, 0xbd, 0x16,
	0x53, 0x10, 0xf2, 0x2d, 0x42, 0x37, 0xd7, 0xe1, 0xad, 0x73, 0x93, 0x45, 0x49, 0xac, 0x35, 0x3a,
	0x8d, 0xbd, 0xf6, 0xc1, 0xce, 0x7e, 0x19, 0xc8, 0x3e, 0xf8, 0xe3, 0xf1, 0x64, 0x14, 0x48, 0x06,
	0x53, 0xd8, 0xbb, 0x9f, 0x10, 0x29, 0xc3, 0xc9, 0xa2, 0x11, 0x4f, 0x45, 0x2c, 0xfb, 0x68, 0xee,
	0x1d, 0x0f, 0x87, 0x3c, 0x15, 0xa1, 0x2c, 0x1d, 0x6c, 0x29, 0xd6, 0xfa, 0xf0, 0x7f, 0x22, 0xb4,
	0x2c, 0x67, 0x91, 0x2d, 0x34, 0x37, 0x19, 0xf3, 0xd4, 0x1a, 0x8a, 0xe8, 0x56, 0x58, 0x2e, 0x91,
	0x2f, 0xd1, 0x62, 0xca, 0x47, 0x61, 0x14, 0xbb, 0x7c, 0xa0, 0x35, 0x44, 0xe0, 0x15, 0xb0, 0xfb,
	0xb9, 0x89, 0xd6, 0x4b, 0xe7, 0x10, 0xd3, 0xff, 0xf4, 0xbe, 0x83, 0x16, 0xa2, 0xf1, 0x61, 0x18,
	0x5f, 0xf1, 0x54, 0xf8, 0x5f, 0x60, 0xa5, 0x4c, 0x76, 0xd1, 0xb2, 0xb4, 0xdc, 0x4f, 0xae, 0x78,
	0x3a, 0x16, 0xd9, 0x69, 0xb1, 0x29, 0x8c, 0x10, 0xd4, 0x1c, 0x24, 0x51, 0xac, 0x35, 0x3b, 0xb5,
	0xbd, 0x06, 0x13, 0xcf, 0x60, 0x33, 0x8e, 0x06, 0x57, 0x76, 0x38, 0xe2, 0x5a, 0xab, 0x53, 0xdb,
	0x5b, 0x64, 0xa5, 0x4c, 0x30, 0x6a, 0x8c, 0xf9, 0x47, 0x6d, 0x4e, 0xdc, 0x07, 0x1e, 0xa1, 0x76,
	0xd1, 0xd8, 0x81, 0x72, 0x69, 0xf3, 0x22, 0x80, 0x42, 0x94, 0x1a, 0xc6, 0xc3, 0xe1, 0xad, 0xb6,
	0x50, 0x68, 0x84, 0x08, 0x55, 0x85, 0x2c, 0xb9, 0x59, 0x98, 0x4d, 0xc6, 0xda, 0xa2, 0xac, 0x6a,
	0x85, 0x90, 0x67, 0x68, 0xee, 0xc3, 0x47, 0xc8, 0x87, 0x86, 0x44, 0x16, 0x36, 0x95, 0x2c, 0xbc,
	0xe6, 0xd1, 0xc7, 0x28, 0x06, 0x25, 0xcb, 0x49, 0x70, 0xd1, 0x24, 0xbe, 0x8e, 0x62, 0x9e, 0x1b,
	0x5c, 0x12, 0x06, 0xa7, 0x30, 0xf2, 0x14, 0xb5, 0x65, 0xf6, 0xfb, 0x61, 0x64, 0x24, 0x93, 0x38,
	0xd3, 0x56, 0x04, 0x6b, 0x06, 0x15, 0xad, 0x38, 0xc9, 0xfa, 0x61, 0x34, 0xd6, 0xda, 0x22, 0x5f,
	0x85, 0x08, 0x05, 0xbd, 0x8c, 0xc2, 0xc4, 0x1d, 0x24, 0x29, 0xd7, 0x56, 0x65, 0x41, 0x4b, 0x00,
	0xec, 0xc7, 0x93, 0xd1, 0xc1, 0xeb, 0x28, 0xfe, 0xc6, 0xb9, 0xe1, 0x31, 0x3b, 0xd4, 0xb0, 0xb4,
	0x3f, 0x8d, 0x42, 0x72, 0xa1, 0xf5, 0x8d, 0x30, 0x1d, 0x6a, 0x6b, 0x22, 0xe9, 0xa5, 0xbc, 0xfb,
	0x4f, 0x0d, 0x6d, 0x97, 0x4d, 0x21, 0x27, 0x88, 0x85, 0x19, 0x2f, 0xee, 0x18, 0xc5, 0x51, 0xd6,
	0xbf, 0x0e, 0x6f, 0x01, 0x13, 0xed, 0xd1, 0x62, 0x53, 0x18, 0x70, 0xc6, 0x9c, 0x83, 0xa9, 0xb1,
	0xe0, 0xc8, 0x71, 0x99, 0xc2, 0x48, 0x07, 0x2d, 0x5d, 0xa6, 0x66, 0xf4, 0xe9, 0xdd, 0x44, 0x50,
	0x64, 0x63, 0xaa, 0x10, 0x44, 0xf8, 0x26, 0x49, 0x32, 0xa1, 0x6e, 0x0a, 0x75, 0x29, 0x83, 0xee,
	0x22, 0x49, 0x46, 0x42, 0xd7, 0x92, 0xba, 0x42, 0x86, 0xa2, 0x8e, 0x6f, 0xd2, 0x28, 0x7e, 0x2b,
	0xb4, 0xb2, 0x43, 0x14, 0x04, 0xf2, 0x97, 0x25, 0x59, 0x78, 0x2d, 0xd4, 0xf3, 0x32, 0x7f, 0x25,
	0xb0, 0xfb, 0x53, 0x0b, 0xad, 0x95, 0x77, 0x1f, 0xf2, 0xf1, 0x95, 0xb8, 0xf5, 0x63, 0x84, 0x8e,
	0xc3, 0x51, 0x51, 0x57, 0x79, 0x67, 0x05, 0x21, 0x26, 0x5a, 0x56, 0x17, 0x89, 0xb8, 0xf1, 0xd2,
	0x41, 0x67, 0x66, 0x01, 0xdc, 0x59, 0x38, 0x6c, 0xea, 0x14, 0x44, 0x26, 0x87, 0xc2, 0x9e, 0x8c,
	0x8a, 0x51, 0x2d, 0x01, 0xc8, 0x6a, 0x38, 0xc8, 0xa2, 0xf7, 0xdc, 0x97, 0x63, 0xde, 0x14, 0x63,
	0x3e, 0x85, 0x41, 0x9c, 0x20, 0x27, 0xb1, 0x17, 0x8d, 0x8a, 0xcc, 0x28, 0x08, 0xd9, 0x43, 0xab,
	0xb1, 0x15, 0x47, 0x99, 0x5e, 0x91, 0x64, 0x06, 0x66, 0xe1, 0xa2, 0xce, 0x0c, 0x7a, 0x02, 0x06,
	0x73, 0x51, 0xf4, 0xc8, 0x14, 0x46, 0x9e, 0xa0, 0x95, 0xc1, 0x24, 0x4d, 0xa1, 0xee, 0xb2, 0x95,
	0x91, 0xb0, 0x35, 0x0d, 0x42, 0x47, 0x8a, 0xf4, 0x56, 0x34, 0x39, 0x17, 0x33, 0x28, 0xc4, 0x0e,
	0xd9, 0xb0, 0x27, 0xa3, 0x0b, 0x9e, 0x6a, 0xcb, 0x62, 0xe0, 0x15, 0x44, 0xd4, 0x5c, 0x2c, 0x14,
	0x6b, 0xa8, 0xb5, 0xc5, 0xdd, 0x4b, 0xb9, 0x5a, 0xdc, 0x43, 0x31, 0x11, 0xe5, 0xe2, 0x16, 0x19,
	0x81, 0xae, 0xc9, 0x57, 0x0f, 0x16, 0xa3, 0xa4, 0x20, 0xe4, 0x3b, 0xb4, 0xc8, 0xe3, 0x8c, 0xa7,
	0x50, 0x04, 0x31, 0x08, 0xed, 0x83, 0x47, 0xf7, 0xed, 0xed, 0x92, 0xc4, 0x2a, 0x3e, 0x18, 0x87,
	0x4d, 0xe5, 0x45, 0x83, 0x2b, 0x9e, 0x69, 0xeb, 0x22, 0x45, 0x0a, 0x02, 0xc6, 0xcb, 0x85, 0xae,
	0x6d, 0x88, 0x9e, 0x78, 0x74, 0x5f, 0x4f, 0x94, 0x24, 0x56, 0xf1, 0xbb, 0x7f, 0xb7, 0x10, 0x2e,
	0xdd, 0x8b, 0x23, 0xd6, 0x90, 0x6c, 0xa2, 0x35, 0xd7, 0x3c, 0x0f, 0xfa, 0x96, 0x19, 0x9c, 0x50,
	0x9d, 0x79, 0x87, 0x54, 0xf7, 0xf0, 0x03, 0xb2, 0x85, 0x48, 0x01, 0x1b, 0x8c, 0xea, 0x1e, 0x65,
	0x8e, 0x73, 0x8a, 0x6b, 0x64, 0x07, 0x6d, 0xdd, 0xc5, 0x03, 0xdd, 0x78, 0x89, 0xeb, 0xea, 0x19,
	0x6a, 0x7b, 0x94, 0x05, 0xe2, 0x4c, 0x43, 0x3d, 0x53, 0xe1, 0xe2, 0x4c, 0x93, 0x3c, 0x44, 0x9b,
	0x85, 0xce, 0xa5, 0xb6, 0x19, 0x1c, 0xeb, 0xa7, 0xd4, 0xb2, 0x8f, 0x1c, 0xdc, 0x22, 0x6b, 0x68,
	0xa5, 0x50, 0x31, 0xaa, 0x9b, 0xe7, 0x78, 0x4e, 0x0d, 0x56, 0x40, 0xc2, 0xc8, 0x3c, 0x59, 0x47,
	0xab, 0x05, 0xec, 0xf4, 0xa9, 0x6d, 0xd9, 0xc7, 0x78, 0x41, 0x8d, 0xc6, 0xa4, 0x7a, 0x2f, 0x30,
	0x74, 0x66, 0xba, 0x78, 0x51, 0xc5, 0x0f, 0x8d, 0xe0, 0x07, 0x4b, 0x77, 0x8e, 0xa8, 0x8d, 0x11,
	0xd9, 0x40, 0xb8, 0xc0, 0x01, 0x0c, 0x00, 0x5d, 0x22, 0x1a, 0xda, 0x98, 0x45, 0x85, 0xd3, 0x65,
	0xf2, 0x18, 0xed, 0xcc, 0xd8, 0x11, 0x4a, 0x46, 0x5d, 0xbf, 0xe7, 0xe1, 0x95, 0x29, 0xff, 0x96,
	0x7d, 0xfc, 0xe3, 0x89, 0x1f, 0x1c, 0x1a, 0xb8, 0xad, 0xe2, 0x8c, 0xbe, 0xca, 0x55, 0x78, 0x95,
	0x6c, 0xa3, 0xf5, 0x59, 0x3e, 0x38, 0xc2, 0x84, 0xa0, 0x76, 0x59, 0x21, 0x5f, 0xb7, 0x4d, 0x0b,
	0xaf, 0x4d, 0x27, 0xe2, 0x55, 0x0e, 0x13, 0xd5, 0xb6, 0xc4, 0x84, 0x89, 0x75, 0x15, 0x77, 0x3d,
	0x9d, 0x79, 0x41, 0xbf, 0xa7, 0x9f, 0xe3, 0x0d, 0xd5, 0x8c, 0xe3, 0x7b, 0x79, 0x8a, 0x36, 0xd5,
	0xa2, 0x94, 0xb0, 0xb0, 0xb4, 0xa5, 0x66, 0xc9, 0x39, 0xa3, 0xcc, 0xf3, 0x99, 0x8d, 0xb7, 0xd5,
	0x03, 0x86, 0xcf, 0x18, 0xb5, 0xbd, 0x3c, 0x0d, 0x9a, 0x5a, 0x7c, 0x28, 0x30, 0xb5, 0xcd, 0x9e,
	0xe3, 0x79, 0x94, 0x9d, 0xe3, 0x87, 0xea, 0x31, 0xd3, 0x72, 0x5d, 0xa7, 0x77, 0x46, 0x03, 0x93,
	0xba, 0x2f, 0xf1, 0x0e, 0x79, 0x84, 0x1e, 0xde, 0xab, 0x12, 0x61, 0x7c, 0xd1, 0xfd, 0xab, 0x2e,
	0x3f, 0x71, 0xe4, 0x24, 0xa5, 0x69, 0x92, 0x1a, 0xc9, 0x90, 0x17, 0xa9, 0xa2, 0x46, 0xe0, 0xfa,
	0x86, 0x41, 0x5d, 0x17, 0x3f, 0x20, 0x2f, 0xd0, 0x93, 0x1c, 0x93, 0x0d, 0x2b, 0xcd, 0x98, 0x96,
	0x7e, 0xea, 0xd8, 0x66, 0x60, 0x3b, 0x1e, 0xb5, 0x1d, 0xff, 0xf8, 0x04, 0xff, 0xf1, 0x6f, 0xfe,
	0xab, 0x91, 0x67, 0xa8, 0x73, 0xcf, 0x11, 0xdf, 0xa5, 0x0c, 0xf8, 0x47, 0x8e, 0x6f, 0x9b, 0xf8,
	0xf7, 0x8a, 0xfe, 0x54, 0xc6, 0x4a, 0x8d, 0xc0, 0xb2, 0x3d, 0x47, 0x92, 0x4b, 0xde, 0x6f, 0x15,
	0xef, 0x09, 0xda, 0xbe, 0xc3, 0xb3, 0xdc, 0x23, 0xbf, 0xd7, 0xc3, 0xbf, 0x56, 0xac, 0xaf, 0x91,
	0x96, 0xb3, 0x60, 0x16, 0xf2, 0x3e, 0x67, 0xb4, 0x0f, 0x73, 0xf9, 0xb9, 0xa2, 0xed, 0xa3, 0xaf,
	0xee, 0xd2, 0x8c, 0x13, 0xab, 0x0f, 0xae, 0x83, 0xfc, 0x4e, 0xbf, 0x94, 0xfc, 0xae, 0xa3, 0xcc,
	0x7e, 0x38, 0xc8, 0xc4, 0xb6, 0xc9, 0x8b, 0xe9, 0x05, 0xb6, 0xc3, 0x4e, 0xf5, 0x5e, 0xa0, 0x1b,
	0x1e, 0xae, 0x15, 0x49, 0xf4, 0xaa, 0x31, 0xa8, 0x17, 0xb3, 0xe8, 0x89, 0xb6, 0x0a, 0x4c, 0x0b,
	0x37, 0xba, 0x7f, 0xd6, 0xe4, 0x87, 0x9e, 0xb0, 0x08, 0xef, 0xb5, 0xfc, 0xcd, 0xd5, 0x46, 0x08,
	0xa8, 0x66, 0x60, 0xd9, 0x16, 0x6c, 0x92, 0x55, 0xb4, 0x24, 0x65, 0x39, 0xc4, 0xb5, 0xc2, 0xeb,
	0xd4, 0x58, 0xd6, 0x0b, 0xaf, 0xca, 0xf0, 0x35, 0x0a, 0xaf, 0x66, 0xe9, 0xb5, 0x59, 0x41, 0xd0,
	0xc1, 0x30, 0xe8, 0xad, 0x0a, 0x32, 0x9d, 0xe0, 0xd0, 0xea, 0xf5, 0xf0, 0x1c, 0xc1, 0x68, 0x59,
	0x42, 0x47, 0x96, 0x6d, 0xb9, 0x27, 0x78, 0xbe, 0x7b, 0xa9, 0x04, 0xab, 0x7c, 0x8f, 0xe5, 0xc1,
	0xf9, 0x65, 0x70, 0x79, 0xf4, 0xbe, 0x08, 0x03, 0xd7, 0x2b, 0x19, 0x42, 0xc0, 0x8d, 0xc2, 0xb2,
	0x0f, 0x59, 0x07, 0xf7, 0xcd, 0x0a, 0xc9, 0x7d, 0xb5, 0xba, 0x07, 0x6a, 0x6f, 0x96, 0xab, 0x3d,
	0xb7, 0x74, 0xc4, 0x2c, 0x6a, 0x9b, 0xb8, 0x46, 0x96, 0xd1, 0x02, 0xc8, 0x86, 0x63, 0xd9, 0xb8,
	0xde, 0xfd, 0x1e, 0xad, 0xce, 0x7c, 0xd1, 0x93, 0x25, 0x34, 0x7f, 0xa2, 0x9f, 0x51, 0xd8, 0x0e,
	0x35, 0x10, 0x5e, 0xeb, 0xf6, 0xf1, 0x4b, 0xc7, 0xc7, 0x75, 0x11, 0x35, 0x3d, 0xa3, 0xb6, 0x77,
	0x7e, 0x64, 0x9d, 0x51, 0xdc, 0xe8, 0xee, 0xa1, 0xad, 0xf2, 0x34, 0xbc, 0x2d, 0xe0, 0x85, 0xda,
	0xe3, 0xef, 0xf9, 0x35, 0x78, 0xed, 0xd1, 0x33, 0xda, 0x0b, 0x5e, 0x3c, 0x7f, 0xfe, 0x1c, 0xd7,
	0xfa, 0x0f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xa1, 0xb9, 0xd0, 0xdd, 0x0c, 0x00, 0x00,
}
