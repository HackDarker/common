// Code generated by protoc-gen-go.
// source: sdy_base.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

type SdyEnumProtoId int32

const (
	// //////////////////////////////////
	SdyEnumProtoId_SDY_PID_HEARTBEAT          SdyEnumProtoId = 0
	SdyEnumProtoId_SDY_PID_CREATEROOM         SdyEnumProtoId = 1
	SdyEnumProtoId_SDY_PID_CREATEROOM_ACK     SdyEnumProtoId = 2
	SdyEnumProtoId_SDY_PID_ENTER_ROOM         SdyEnumProtoId = 3
	SdyEnumProtoId_SDY_PID_ENTER_ROOM_ACK     SdyEnumProtoId = 4
	SdyEnumProtoId_SDY_PID_SEND_GAMEINFO      SdyEnumProtoId = 5
	SdyEnumProtoId_SDY_PID_READY              SdyEnumProtoId = 6
	SdyEnumProtoId_SDY_PID_READY_ACK          SdyEnumProtoId = 7
	SdyEnumProtoId_SDY_PID_OPENING            SdyEnumProtoId = 8
	SdyEnumProtoId_SDY_PID_DEAL_CARDS         SdyEnumProtoId = 9
	SdyEnumProtoId_SDY_PID_BC_JIAOFEN         SdyEnumProtoId = 10
	SdyEnumProtoId_SDY_PID_JIAO_FEN           SdyEnumProtoId = 11
	SdyEnumProtoId_SDY_PID_JIAO_FEN_ACK       SdyEnumProtoId = 12
	SdyEnumProtoId_SDY_PID_BC_JIAO_FEN_RESULT SdyEnumProtoId = 13
	SdyEnumProtoId_SDY_PID_BC_LIUJU           SdyEnumProtoId = 14
	SdyEnumProtoId_SDY_PID_DINGZHU_BC         SdyEnumProtoId = 15
	SdyEnumProtoId_SDY_PID_REQDINGZHU         SdyEnumProtoId = 16
	SdyEnumProtoId_SDY_PID_DINGZHU_ACK        SdyEnumProtoId = 17
	SdyEnumProtoId_SDY_PID_DINGZHURESULT_BC   SdyEnumProtoId = 18
	SdyEnumProtoId_SDY_PID_HUANDI             SdyEnumProtoId = 19
	SdyEnumProtoId_SDY_PID_REQHUANDI          SdyEnumProtoId = 20
	SdyEnumProtoId_SDY_PID_HUANDI_ACK         SdyEnumProtoId = 21
	// //////////////////////////////////////////
	SdyEnumProtoId_SDY_PID_START_PLAY SdyEnumProtoId = 22
	// //////////////////////////////////////////
	SdyEnumProtoId_SDY_PID_OUT_CARDS      SdyEnumProtoId = 23
	SdyEnumProtoId_SDY_PID_OUT_CARDS_ACK  SdyEnumProtoId = 24
	SdyEnumProtoId_SDY_PID_OVERTURN       SdyEnumProtoId = 25
	SdyEnumProtoId_SDY_PID_WHATPAI_BC     SdyEnumProtoId = 26
	SdyEnumProtoId_SDY_PID_SCOREPAI_BC    SdyEnumProtoId = 27
	SdyEnumProtoId_SDY_PID_CURRENTRESULT  SdyEnumProtoId = 28
	SdyEnumProtoId_SDY_PID_SENDENDLOTTERY SdyEnumProtoId = 29
	// //////////////////////////////////////////
	SdyEnumProtoId_SDY_PID_DISSOLVE_DESK          SdyEnumProtoId = 30
	SdyEnumProtoId_SDY_PID_DISSOLVE_DESK_BC       SdyEnumProtoId = 31
	SdyEnumProtoId_SDY_PID_APPLYDISSOVLE_REQ      SdyEnumProtoId = 32
	SdyEnumProtoId_SDY_PID_APPLYDISSOVLE_BC       SdyEnumProtoId = 33
	SdyEnumProtoId_SDY_PID_APPLYDISSOVLE_BACK_REQ SdyEnumProtoId = 34
	SdyEnumProtoId_SDY_PID_APPLYDISSOVLE_BACK_ACK SdyEnumProtoId = 35
	SdyEnumProtoId_SDY_PID_LEAVE_DESK             SdyEnumProtoId = 36
	SdyEnumProtoId_SDY_PID_LEAVE_DESK_ACK         SdyEnumProtoId = 37
	SdyEnumProtoId_SDY_PID_MESSAGE                SdyEnumProtoId = 38
	SdyEnumProtoId_SDY_PID_SEND_MESSAGE           SdyEnumProtoId = 39
	SdyEnumProtoId_SDY_PID_RECON_MESSAGE          SdyEnumProtoId = 40
	SdyEnumProtoId_SDY_PID_ISONLINE               SdyEnumProtoId = 41
	SdyEnumProtoId_SDY_PID_CHANGEDESK             SdyEnumProtoId = 42
	SdyEnumProtoId_SDY_PID_CHANGEDESK_ACK         SdyEnumProtoId = 43
)

var SdyEnumProtoId_name = map[int32]string{
	0:  "SDY_PID_HEARTBEAT",
	1:  "SDY_PID_CREATEROOM",
	2:  "SDY_PID_CREATEROOM_ACK",
	3:  "SDY_PID_ENTER_ROOM",
	4:  "SDY_PID_ENTER_ROOM_ACK",
	5:  "SDY_PID_SEND_GAMEINFO",
	6:  "SDY_PID_READY",
	7:  "SDY_PID_READY_ACK",
	8:  "SDY_PID_OPENING",
	9:  "SDY_PID_DEAL_CARDS",
	10: "SDY_PID_BC_JIAOFEN",
	11: "SDY_PID_JIAO_FEN",
	12: "SDY_PID_JIAO_FEN_ACK",
	13: "SDY_PID_BC_JIAO_FEN_RESULT",
	14: "SDY_PID_BC_LIUJU",
	15: "SDY_PID_DINGZHU_BC",
	16: "SDY_PID_REQDINGZHU",
	17: "SDY_PID_DINGZHU_ACK",
	18: "SDY_PID_DINGZHURESULT_BC",
	19: "SDY_PID_HUANDI",
	20: "SDY_PID_REQHUANDI",
	21: "SDY_PID_HUANDI_ACK",
	22: "SDY_PID_START_PLAY",
	23: "SDY_PID_OUT_CARDS",
	24: "SDY_PID_OUT_CARDS_ACK",
	25: "SDY_PID_OVERTURN",
	26: "SDY_PID_WHATPAI_BC",
	27: "SDY_PID_SCOREPAI_BC",
	28: "SDY_PID_CURRENTRESULT",
	29: "SDY_PID_SENDENDLOTTERY",
	30: "SDY_PID_DISSOLVE_DESK",
	31: "SDY_PID_DISSOLVE_DESK_BC",
	32: "SDY_PID_APPLYDISSOVLE_REQ",
	33: "SDY_PID_APPLYDISSOVLE_BC",
	34: "SDY_PID_APPLYDISSOVLE_BACK_REQ",
	35: "SDY_PID_APPLYDISSOVLE_BACK_ACK",
	36: "SDY_PID_LEAVE_DESK",
	37: "SDY_PID_LEAVE_DESK_ACK",
	38: "SDY_PID_MESSAGE",
	39: "SDY_PID_SEND_MESSAGE",
	40: "SDY_PID_RECON_MESSAGE",
	41: "SDY_PID_ISONLINE",
	42: "SDY_PID_CHANGEDESK",
	43: "SDY_PID_CHANGEDESK_ACK",
}
var SdyEnumProtoId_value = map[string]int32{
	"SDY_PID_HEARTBEAT":              0,
	"SDY_PID_CREATEROOM":             1,
	"SDY_PID_CREATEROOM_ACK":         2,
	"SDY_PID_ENTER_ROOM":             3,
	"SDY_PID_ENTER_ROOM_ACK":         4,
	"SDY_PID_SEND_GAMEINFO":          5,
	"SDY_PID_READY":                  6,
	"SDY_PID_READY_ACK":              7,
	"SDY_PID_OPENING":                8,
	"SDY_PID_DEAL_CARDS":             9,
	"SDY_PID_BC_JIAOFEN":             10,
	"SDY_PID_JIAO_FEN":               11,
	"SDY_PID_JIAO_FEN_ACK":           12,
	"SDY_PID_BC_JIAO_FEN_RESULT":     13,
	"SDY_PID_BC_LIUJU":               14,
	"SDY_PID_DINGZHU_BC":             15,
	"SDY_PID_REQDINGZHU":             16,
	"SDY_PID_DINGZHU_ACK":            17,
	"SDY_PID_DINGZHURESULT_BC":       18,
	"SDY_PID_HUANDI":                 19,
	"SDY_PID_REQHUANDI":              20,
	"SDY_PID_HUANDI_ACK":             21,
	"SDY_PID_START_PLAY":             22,
	"SDY_PID_OUT_CARDS":              23,
	"SDY_PID_OUT_CARDS_ACK":          24,
	"SDY_PID_OVERTURN":               25,
	"SDY_PID_WHATPAI_BC":             26,
	"SDY_PID_SCOREPAI_BC":            27,
	"SDY_PID_CURRENTRESULT":          28,
	"SDY_PID_SENDENDLOTTERY":         29,
	"SDY_PID_DISSOLVE_DESK":          30,
	"SDY_PID_DISSOLVE_DESK_BC":       31,
	"SDY_PID_APPLYDISSOVLE_REQ":      32,
	"SDY_PID_APPLYDISSOVLE_BC":       33,
	"SDY_PID_APPLYDISSOVLE_BACK_REQ": 34,
	"SDY_PID_APPLYDISSOVLE_BACK_ACK": 35,
	"SDY_PID_LEAVE_DESK":             36,
	"SDY_PID_LEAVE_DESK_ACK":         37,
	"SDY_PID_MESSAGE":                38,
	"SDY_PID_SEND_MESSAGE":           39,
	"SDY_PID_RECON_MESSAGE":          40,
	"SDY_PID_ISONLINE":               41,
	"SDY_PID_CHANGEDESK":             42,
	"SDY_PID_CHANGEDESK_ACK":         43,
}

func (x SdyEnumProtoId) Enum() *SdyEnumProtoId {
	p := new(SdyEnumProtoId)
	*p = x
	return p
}
func (x SdyEnumProtoId) String() string {
	return proto.EnumName(SdyEnumProtoId_name, int32(x))
}
func (x *SdyEnumProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumProtoId_value, data, "SdyEnumProtoId")
	if err != nil {
		return err
	}
	*x = SdyEnumProtoId(value)
	return nil
}
func (SdyEnumProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type SdyEnumErrorCode int32

const (
	SdyEnumErrorCode_SDY_EC_SUCCESS SdyEnumErrorCode = 0
	// -101   -200	游戏异常
	SdyEnumErrorCode_SDY_EC_CREATE_DESK_DIAMOND_NOTENOUGH SdyEnumErrorCode = -101
	SdyEnumErrorCode_SDY_EC_CREATE_DESK_USER_NOTFOUND     SdyEnumErrorCode = -102
	SdyEnumErrorCode_SDY_EC_INTO_DESK_NOTFOUND            SdyEnumErrorCode = -103
	SdyEnumErrorCode_SDY_EC_INTO_DESK_ISFULL              SdyEnumErrorCode = -104
	SdyEnumErrorCode_SDY_EC_GAME_READY_REPEAT             SdyEnumErrorCode = -110
	SdyEnumErrorCode_SDY_EC_GAME_READY_CHIP_NOT_ENOUGH    SdyEnumErrorCode = -111
)

var SdyEnumErrorCode_name = map[int32]string{
	0:    "SDY_EC_SUCCESS",
	-101: "SDY_EC_CREATE_DESK_DIAMOND_NOTENOUGH",
	-102: "SDY_EC_CREATE_DESK_USER_NOTFOUND",
	-103: "SDY_EC_INTO_DESK_NOTFOUND",
	-104: "SDY_EC_INTO_DESK_ISFULL",
	-110: "SDY_EC_GAME_READY_REPEAT",
	-111: "SDY_EC_GAME_READY_CHIP_NOT_ENOUGH",
}
var SdyEnumErrorCode_value = map[string]int32{
	"SDY_EC_SUCCESS":                       0,
	"SDY_EC_CREATE_DESK_DIAMOND_NOTENOUGH": -101,
	"SDY_EC_CREATE_DESK_USER_NOTFOUND":     -102,
	"SDY_EC_INTO_DESK_NOTFOUND":            -103,
	"SDY_EC_INTO_DESK_ISFULL":              -104,
	"SDY_EC_GAME_READY_REPEAT":             -110,
	"SDY_EC_GAME_READY_CHIP_NOT_ENOUGH":    -111,
}

func (x SdyEnumErrorCode) Enum() *SdyEnumErrorCode {
	p := new(SdyEnumErrorCode)
	*p = x
	return p
}
func (x SdyEnumErrorCode) String() string {
	return proto.EnumName(SdyEnumErrorCode_name, int32(x))
}
func (x *SdyEnumErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumErrorCode_value, data, "SdyEnumErrorCode")
	if err != nil {
		return err
	}
	*x = SdyEnumErrorCode(value)
	return nil
}
func (SdyEnumErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

// 轮到玩家操作时：可执行何种操作
type SdyEnumActType int32

const (
	SdyEnumActType_SDY_T_NORMAL_ACT SdyEnumActType = 1
	SdyEnumActType_SDY_T_JIAO_FEN   SdyEnumActType = 2
	SdyEnumActType_SDY_T_HUAN_DI    SdyEnumActType = 3
)

var SdyEnumActType_name = map[int32]string{
	1: "SDY_T_NORMAL_ACT",
	2: "SDY_T_JIAO_FEN",
	3: "SDY_T_HUAN_DI",
}
var SdyEnumActType_value = map[string]int32{
	"SDY_T_NORMAL_ACT": 1,
	"SDY_T_JIAO_FEN":   2,
	"SDY_T_HUAN_DI":    3,
}

func (x SdyEnumActType) Enum() *SdyEnumActType {
	p := new(SdyEnumActType)
	*p = x
	return p
}
func (x SdyEnumActType) String() string {
	return proto.EnumName(SdyEnumActType_name, int32(x))
}
func (x *SdyEnumActType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumActType_value, data, "SdyEnumActType")
	if err != nil {
		return err
	}
	*x = SdyEnumActType(value)
	return nil
}
func (SdyEnumActType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

type SdyEnumDeskStatus int32

const (
	SdyEnumDeskStatus_SDY_D_READY   SdyEnumDeskStatus = 1
	SdyEnumDeskStatus_SDY_D_JIAOFEN SdyEnumDeskStatus = 2
	SdyEnumDeskStatus_SDY_D_DINGZHU SdyEnumDeskStatus = 3
	SdyEnumDeskStatus_SDY_D_HUANDI  SdyEnumDeskStatus = 4
	SdyEnumDeskStatus_SDY_D_PLAY    SdyEnumDeskStatus = 5
	SdyEnumDeskStatus_SDY_D_DOBILL  SdyEnumDeskStatus = 6
	SdyEnumDeskStatus_SDY_D_FINISH  SdyEnumDeskStatus = 7
)

var SdyEnumDeskStatus_name = map[int32]string{
	1: "SDY_D_READY",
	2: "SDY_D_JIAOFEN",
	3: "SDY_D_DINGZHU",
	4: "SDY_D_HUANDI",
	5: "SDY_D_PLAY",
	6: "SDY_D_DOBILL",
	7: "SDY_D_FINISH",
}
var SdyEnumDeskStatus_value = map[string]int32{
	"SDY_D_READY":   1,
	"SDY_D_JIAOFEN": 2,
	"SDY_D_DINGZHU": 3,
	"SDY_D_HUANDI":  4,
	"SDY_D_PLAY":    5,
	"SDY_D_DOBILL":  6,
	"SDY_D_FINISH":  7,
}

func (x SdyEnumDeskStatus) Enum() *SdyEnumDeskStatus {
	p := new(SdyEnumDeskStatus)
	*p = x
	return p
}
func (x SdyEnumDeskStatus) String() string {
	return proto.EnumName(SdyEnumDeskStatus_name, int32(x))
}
func (x *SdyEnumDeskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumDeskStatus_value, data, "SdyEnumDeskStatus")
	if err != nil {
		return err
	}
	*x = SdyEnumDeskStatus(value)
	return nil
}
func (SdyEnumDeskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

type SdyEnumUserStatus int32

const (
	SdyEnumUserStatus_SDY_U_NORMAL   SdyEnumUserStatus = 1
	SdyEnumUserStatus_SDY_U_BREAK    SdyEnumUserStatus = 2
	SdyEnumUserStatus_SDY_U_AGENTMOD SdyEnumUserStatus = 3
	SdyEnumUserStatus_SDY_U_QUIT     SdyEnumUserStatus = 4
)

var SdyEnumUserStatus_name = map[int32]string{
	1: "SDY_U_NORMAL",
	2: "SDY_U_BREAK",
	3: "SDY_U_AGENTMOD",
	4: "SDY_U_QUIT",
}
var SdyEnumUserStatus_value = map[string]int32{
	"SDY_U_NORMAL":   1,
	"SDY_U_BREAK":    2,
	"SDY_U_AGENTMOD": 3,
	"SDY_U_QUIT":     4,
}

func (x SdyEnumUserStatus) Enum() *SdyEnumUserStatus {
	p := new(SdyEnumUserStatus)
	*p = x
	return p
}
func (x SdyEnumUserStatus) String() string {
	return proto.EnumName(SdyEnumUserStatus_name, int32(x))
}
func (x *SdyEnumUserStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumUserStatus_value, data, "SdyEnumUserStatus")
	if err != nil {
		return err
	}
	*x = SdyEnumUserStatus(value)
	return nil
}
func (SdyEnumUserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

type SdyEnum_Option int32

const (
	SdyEnum_Option_HAVEZHU     SdyEnum_Option = 1
	SdyEnum_Option_WANGKOU     SdyEnum_Option = 2
	SdyEnum_Option_SEVENTYFIVE SdyEnum_Option = 3
)

var SdyEnum_Option_name = map[int32]string{
	1: "HAVEZHU",
	2: "WANGKOU",
	3: "SEVENTYFIVE",
}
var SdyEnum_Option_value = map[string]int32{
	"HAVEZHU":     1,
	"WANGKOU":     2,
	"SEVENTYFIVE": 3,
}

func (x SdyEnum_Option) Enum() *SdyEnum_Option {
	p := new(SdyEnum_Option)
	*p = x
	return p
}
func (x SdyEnum_Option) String() string {
	return proto.EnumName(SdyEnum_Option_name, int32(x))
}
func (x *SdyEnum_Option) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnum_Option_value, data, "SdyEnum_Option")
	if err != nil {
		return err
	}
	*x = SdyEnum_Option(value)
	return nil
}
func (SdyEnum_Option) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

type SdyEnumRoomLevel int32

const (
	SdyEnumRoomLevel_LEVEL_FRIEND SdyEnumRoomLevel = 1
	SdyEnumRoomLevel_LEVEL_ROOKIE SdyEnumRoomLevel = 2
	SdyEnumRoomLevel_LEVEL_NORMAL SdyEnumRoomLevel = 3
	SdyEnumRoomLevel_LEVEL_MASTER SdyEnumRoomLevel = 4
	SdyEnumRoomLevel_LEVEL_RICH   SdyEnumRoomLevel = 5
)

var SdyEnumRoomLevel_name = map[int32]string{
	1: "LEVEL_FRIEND",
	2: "LEVEL_ROOKIE",
	3: "LEVEL_NORMAL",
	4: "LEVEL_MASTER",
	5: "LEVEL_RICH",
}
var SdyEnumRoomLevel_value = map[string]int32{
	"LEVEL_FRIEND": 1,
	"LEVEL_ROOKIE": 2,
	"LEVEL_NORMAL": 3,
	"LEVEL_MASTER": 4,
	"LEVEL_RICH":   5,
}

func (x SdyEnumRoomLevel) Enum() *SdyEnumRoomLevel {
	p := new(SdyEnumRoomLevel)
	*p = x
	return p
}
func (x SdyEnumRoomLevel) String() string {
	return proto.EnumName(SdyEnumRoomLevel_name, int32(x))
}
func (x *SdyEnumRoomLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumRoomLevel_value, data, "SdyEnumRoomLevel")
	if err != nil {
		return err
	}
	*x = SdyEnumRoomLevel(value)
	return nil
}
func (SdyEnumRoomLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

// poker花色
type SdyEnumFlowers int32

const (
	SdyEnumFlowers_FLOWERS_CLUB       SdyEnumFlowers = 1
	SdyEnumFlowers_FLOWERS_DIAMOND    SdyEnumFlowers = 2
	SdyEnumFlowers_FLOWERS_HEART      SdyEnumFlowers = 3
	SdyEnumFlowers_FLOWERS_SPADE      SdyEnumFlowers = 4
	SdyEnumFlowers_FLOWERS_BLACKJOKER SdyEnumFlowers = 5
	SdyEnumFlowers_FLOWERS_REDJOKER   SdyEnumFlowers = 6
)

var SdyEnumFlowers_name = map[int32]string{
	1: "FLOWERS_CLUB",
	2: "FLOWERS_DIAMOND",
	3: "FLOWERS_HEART",
	4: "FLOWERS_SPADE",
	5: "FLOWERS_BLACKJOKER",
	6: "FLOWERS_REDJOKER",
}
var SdyEnumFlowers_value = map[string]int32{
	"FLOWERS_CLUB":       1,
	"FLOWERS_DIAMOND":    2,
	"FLOWERS_HEART":      3,
	"FLOWERS_SPADE":      4,
	"FLOWERS_BLACKJOKER": 5,
	"FLOWERS_REDJOKER":   6,
}

func (x SdyEnumFlowers) Enum() *SdyEnumFlowers {
	p := new(SdyEnumFlowers)
	*p = x
	return p
}
func (x SdyEnumFlowers) String() string {
	return proto.EnumName(SdyEnumFlowers_name, int32(x))
}
func (x *SdyEnumFlowers) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SdyEnumFlowers_value, data, "SdyEnumFlowers")
	if err != nil {
		return err
	}
	*x = SdyEnumFlowers(value)
	return nil
}
func (SdyEnumFlowers) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

// 用于流局时每个玩家的ID和手牌ID数组
type SdyBaseUserPaiIds struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Userid           *uint32      `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	PlayerPokersId   []int32      `protobuf:"varint,3,rep,name=playerPokersId" json:"playerPokersId,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseUserPaiIds) Reset()                    { *m = SdyBaseUserPaiIds{} }
func (m *SdyBaseUserPaiIds) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseUserPaiIds) ProtoMessage()               {}
func (*SdyBaseUserPaiIds) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *SdyBaseUserPaiIds) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseUserPaiIds) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *SdyBaseUserPaiIds) GetPlayerPokersId() []int32 {
	if m != nil {
		return m.PlayerPokersId
	}
	return nil
}

type SdyBaseRoomTypeInfo struct {
	OwnerID          *uint32           `protobuf:"varint,1,opt,name=ownerID" json:"ownerID,omitempty"`
	BoardsCout       *int32            `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	PlayOption       []SdyEnum_Option  `protobuf:"varint,3,rep,name=playOption,enum=yjprotogo.SdyEnum_Option" json:"playOption,omitempty"`
	RoomLevel        *SdyEnumRoomLevel `protobuf:"varint,4,opt,name=roomLevel,enum=yjprotogo.SdyEnumRoomLevel" json:"roomLevel,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SdyBaseRoomTypeInfo) Reset()                    { *m = SdyBaseRoomTypeInfo{} }
func (m *SdyBaseRoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseRoomTypeInfo) ProtoMessage()               {}
func (*SdyBaseRoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *SdyBaseRoomTypeInfo) GetOwnerID() uint32 {
	if m != nil && m.OwnerID != nil {
		return *m.OwnerID
	}
	return 0
}

func (m *SdyBaseRoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *SdyBaseRoomTypeInfo) GetPlayOption() []SdyEnum_Option {
	if m != nil {
		return m.PlayOption
	}
	return nil
}

func (m *SdyBaseRoomTypeInfo) GetRoomLevel() SdyEnumRoomLevel {
	if m != nil && m.RoomLevel != nil {
		return *m.RoomLevel
	}
	return SdyEnumRoomLevel_LEVEL_FRIEND
}

type SdyBaseTimerInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserId           *uint32      `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	RemainSec        *int32       `protobuf:"varint,3,opt,name=remainSec" json:"remainSec,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBaseTimerInfo) Reset()                    { *m = SdyBaseTimerInfo{} }
func (m *SdyBaseTimerInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseTimerInfo) ProtoMessage()               {}
func (*SdyBaseTimerInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *SdyBaseTimerInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBaseTimerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SdyBaseTimerInfo) GetRemainSec() int32 {
	if m != nil && m.RemainSec != nil {
		return *m.RemainSec
	}
	return 0
}

type SdyBasePlayerInfo struct {
	Header           *ProtoHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	IsBanker         *bool        `protobuf:"varint,2,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerPokers     []int32      `protobuf:"varint,3,rep,name=playerPokers" json:"playerPokers,omitempty"`
	Coin             *int64       `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	NickName         *string      `protobuf:"bytes,5,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32       `protobuf:"varint,6,opt,name=sex" json:"sex,omitempty"`
	IsOwner          *bool        `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	IsReady          *bool        `protobuf:"varint,8,opt,name=isReady" json:"isReady,omitempty"`
	UserStatus       *int32       `protobuf:"varint,9,opt,name=userStatus" json:"userStatus,omitempty"`
	WxInfo           *WeixinInfo  `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	OnlineStatus     *int32       `protobuf:"varint,11,opt,name=onlineStatus" json:"onlineStatus,omitempty"`
	RemainPaiCount   *int32       `protobuf:"varint,13,opt,name=remainPaiCount" json:"remainPaiCount,omitempty"`
	OutPais          []int32      `protobuf:"varint,14,rep,name=outPais" json:"outPais,omitempty"`
	JiaoScore        *int32       `protobuf:"varint,15,opt,name=jiaoScore" json:"jiaoScore,omitempty"`
	Num2Win4OpenRB   *int32       `protobuf:"varint,16,opt,name=num2Win4OpenRB" json:"num2Win4OpenRB,omitempty"`
	RoomCard         *int64       `protobuf:"varint,17,opt,name=roomCard" json:"roomCard,omitempty"`
	WinNum           *int32       `protobuf:"varint,18,opt,name=winNum" json:"winNum,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SdyBasePlayerInfo) Reset()                    { *m = SdyBasePlayerInfo{} }
func (m *SdyBasePlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBasePlayerInfo) ProtoMessage()               {}
func (*SdyBasePlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *SdyBasePlayerInfo) GetHeader() *ProtoHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *SdyBasePlayerInfo) GetPlayerPokers() []int32 {
	if m != nil {
		return m.PlayerPokers
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SdyBasePlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *SdyBasePlayerInfo) GetIsReady() bool {
	if m != nil && m.IsReady != nil {
		return *m.IsReady
	}
	return false
}

func (m *SdyBasePlayerInfo) GetUserStatus() int32 {
	if m != nil && m.UserStatus != nil {
		return *m.UserStatus
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetRemainPaiCount() int32 {
	if m != nil && m.RemainPaiCount != nil {
		return *m.RemainPaiCount
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetOutPais() []int32 {
	if m != nil {
		return m.OutPais
	}
	return nil
}

func (m *SdyBasePlayerInfo) GetJiaoScore() int32 {
	if m != nil && m.JiaoScore != nil {
		return *m.JiaoScore
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetNum2Win4OpenRB() int32 {
	if m != nil && m.Num2Win4OpenRB != nil {
		return *m.Num2Win4OpenRB
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetRoomCard() int64 {
	if m != nil && m.RoomCard != nil {
		return *m.RoomCard
	}
	return 0
}

func (m *SdyBasePlayerInfo) GetWinNum() int32 {
	if m != nil && m.WinNum != nil {
		return *m.WinNum
	}
	return 0
}

type SdyBaseCommonRateInfo struct {
	InitPlayRate     *int32 `protobuf:"varint,1,opt,name=initPlayRate" json:"initPlayRate,omitempty"`
	SeeCardsRate     *int32 `protobuf:"varint,2,opt,name=seeCardsRate" json:"seeCardsRate,omitempty"`
	JrDizhuRate      *int32 `protobuf:"varint,3,opt,name=jrDizhuRate" json:"jrDizhuRate,omitempty"`
	FootRate         *int32 `protobuf:"varint,4,opt,name=footRate" json:"footRate,omitempty"`
	BoomRate         *int32 `protobuf:"varint,5,opt,name=boomRate" json:"boomRate,omitempty"`
	SpringRate       *int32 `protobuf:"varint,6,opt,name=springRate" json:"springRate,omitempty"`
	TotalRate        *int32 `protobuf:"varint,7,opt,name=totalRate" json:"totalRate,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SdyBaseCommonRateInfo) Reset()                    { *m = SdyBaseCommonRateInfo{} }
func (m *SdyBaseCommonRateInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseCommonRateInfo) ProtoMessage()               {}
func (*SdyBaseCommonRateInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *SdyBaseCommonRateInfo) GetInitPlayRate() int32 {
	if m != nil && m.InitPlayRate != nil {
		return *m.InitPlayRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetSeeCardsRate() int32 {
	if m != nil && m.SeeCardsRate != nil {
		return *m.SeeCardsRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetJrDizhuRate() int32 {
	if m != nil && m.JrDizhuRate != nil {
		return *m.JrDizhuRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetFootRate() int32 {
	if m != nil && m.FootRate != nil {
		return *m.FootRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetBoomRate() int32 {
	if m != nil && m.BoomRate != nil {
		return *m.BoomRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetSpringRate() int32 {
	if m != nil && m.SpringRate != nil {
		return *m.SpringRate
	}
	return 0
}

func (m *SdyBaseCommonRateInfo) GetTotalRate() int32 {
	if m != nil && m.TotalRate != nil {
		return *m.TotalRate
	}
	return 0
}

type SdyBaseDeskInfo struct {
	GameStatus       *int32               `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *SdyBaseRoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32               `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32              `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32               `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	NInitActionTime  *int32               `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	InitRoomCoin     *int64               `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32               `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32               `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string              `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	BankerId         *uint32              `protobuf:"varint,13,opt,name=bankerId" json:"bankerId,omitempty"`
	OwnerId          *uint32              `protobuf:"varint,14,opt,name=ownerId" json:"ownerId,omitempty"`
	FootPokers       []int32              `protobuf:"varint,15,rep,name=footPokers" json:"footPokers,omitempty"`
	CoinTicket       *int64               `protobuf:"varint,16,opt,name=coinTicket" json:"coinTicket,omitempty"`
	TimerInfo        *SdyBaseTimerInfo    `protobuf:"bytes,17,opt,name=timerInfo" json:"timerInfo,omitempty"`
	BaseNum          *int64               `protobuf:"varint,18,opt,name=baseNum" json:"baseNum,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *SdyBaseDeskInfo) Reset()                    { *m = SdyBaseDeskInfo{} }
func (m *SdyBaseDeskInfo) String() string            { return proto.CompactTextString(m) }
func (*SdyBaseDeskInfo) ProtoMessage()               {}
func (*SdyBaseDeskInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *SdyBaseDeskInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetRoomTypeInfo() *SdyBaseRoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *SdyBaseDeskInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *SdyBaseDeskInfo) GetBankerId() uint32 {
	if m != nil && m.BankerId != nil {
		return *m.BankerId
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetOwnerId() uint32 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetFootPokers() []int32 {
	if m != nil {
		return m.FootPokers
	}
	return nil
}

func (m *SdyBaseDeskInfo) GetCoinTicket() int64 {
	if m != nil && m.CoinTicket != nil {
		return *m.CoinTicket
	}
	return 0
}

func (m *SdyBaseDeskInfo) GetTimerInfo() *SdyBaseTimerInfo {
	if m != nil {
		return m.TimerInfo
	}
	return nil
}

func (m *SdyBaseDeskInfo) GetBaseNum() int64 {
	if m != nil && m.BaseNum != nil {
		return *m.BaseNum
	}
	return 0
}

func init() {
	proto.RegisterType((*SdyBaseUserPaiIds)(nil), "yjprotogo.sdy_base_userPaiIds")
	proto.RegisterType((*SdyBaseRoomTypeInfo)(nil), "yjprotogo.sdy_base_roomTypeInfo")
	proto.RegisterType((*SdyBaseTimerInfo)(nil), "yjprotogo.sdy_base_timerInfo")
	proto.RegisterType((*SdyBasePlayerInfo)(nil), "yjprotogo.sdy_base_playerInfo")
	proto.RegisterType((*SdyBaseCommonRateInfo)(nil), "yjprotogo.sdy_base_commonRateInfo")
	proto.RegisterType((*SdyBaseDeskInfo)(nil), "yjprotogo.sdy_base_deskInfo")
	proto.RegisterEnum("yjprotogo.SdyEnumProtoId", SdyEnumProtoId_name, SdyEnumProtoId_value)
	proto.RegisterEnum("yjprotogo.SdyEnumErrorCode", SdyEnumErrorCode_name, SdyEnumErrorCode_value)
	proto.RegisterEnum("yjprotogo.SdyEnumActType", SdyEnumActType_name, SdyEnumActType_value)
	proto.RegisterEnum("yjprotogo.SdyEnumDeskStatus", SdyEnumDeskStatus_name, SdyEnumDeskStatus_value)
	proto.RegisterEnum("yjprotogo.SdyEnumUserStatus", SdyEnumUserStatus_name, SdyEnumUserStatus_value)
	proto.RegisterEnum("yjprotogo.SdyEnum_Option", SdyEnum_Option_name, SdyEnum_Option_value)
	proto.RegisterEnum("yjprotogo.SdyEnumRoomLevel", SdyEnumRoomLevel_name, SdyEnumRoomLevel_value)
	proto.RegisterEnum("yjprotogo.SdyEnumFlowers", SdyEnumFlowers_name, SdyEnumFlowers_value)
}

var fileDescriptor8 = []byte{
	// 1738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcb, 0x72, 0xdb, 0xc8,
	0x15, 0x35, 0x44, 0xea, 0xd5, 0x92, 0xa8, 0x56, 0xcb, 0x92, 0x61, 0xc5, 0x56, 0x38, 0x8c, 0xc7,
	0x51, 0x98, 0x1a, 0x55, 0x45, 0x95, 0x55, 0x92, 0x0d, 0x08, 0xb4, 0x48, 0x58, 0x10, 0x40, 0x37,
	0x00, 0xa9, 0x94, 0x4a, 0x15, 0x0a, 0x26, 0xe1, 0x19, 0x58, 0x22, 0xa0, 0x02, 0xc1, 0xb1, 0x35,
	0xfb, 0x2c, 0xb3, 0xc8, 0xac, 0xf2, 0xf8, 0x83, 0x6c, 0xf2, 0x1f, 0xf9, 0x8e, 0xfc, 0xc4, 0xac,
	0x92, 0xba, 0x0d, 0x34, 0xd0, 0xa0, 0x26, 0x95, 0x2a, 0x6b, 0x23, 0xf6, 0xb9, 0xb7, 0xef, 0xe3,
	0xdc, 0x07, 0x00, 0xd4, 0x99, 0x4f, 0x1f, 0x82, 0x77, 0xe1, 0x3c, 0x3a, 0xbd, 0xcf, 0xd2, 0x3c,
	0x25, 0x9b, 0x0f, 0x1f, 0xf8, 0x8f, 0xaf, 0xd3, 0xa3, 0xfd, 0x49, 0x3a, 0x9b, 0xa5, 0x49, 0x30,
	0xb9, 0x8b, 0xa3, 0x24, 0x2f, 0xe4, 0xbd, 0x3f, 0x2a, 0x68, 0x5f, 0x5c, 0x09, 0x16, 0xf3, 0x28,
	0x1b, 0x87, 0xb1, 0x39, 0x9d, 0x93, 0x53, 0xb4, 0xf6, 0x4d, 0x14, 0x4e, 0xa3, 0x4c, 0x55, 0xba,
	0xca, 0xc9, 0xd6, 0xd9, 0xe1, 0x69, 0x65, 0xe8, 0x74, 0x0c, 0xff, 0x47, 0x5c, 0xca, 0x4a, 0x2d,
	0x72, 0x88, 0xd6, 0xe0, 0x76, 0x3c, 0x55, 0x57, 0xba, 0xca, 0xc9, 0x0e, 0x2b, 0x4f, 0xe4, 0x35,
	0xea, 0xdc, 0xdf, 0x85, 0x0f, 0x51, 0x36, 0x4e, 0x6f, 0xa3, 0x6c, 0x6e, 0x4e, 0xd5, 0x56, 0xb7,
	0x75, 0xb2, 0xca, 0x96, 0xd0, 0xde, 0xbf, 0x14, 0x74, 0x50, 0xc5, 0x91, 0xa5, 0xe9, 0xcc, 0x7b,
	0xb8, 0x8f, 0xcc, 0xe4, 0x7d, 0x4a, 0x54, 0xb4, 0x9e, 0x7e, 0x4c, 0xa2, 0xcc, 0x34, 0x78, 0x28,
	0x3b, 0x4c, 0x1c, 0xc9, 0x31, 0x42, 0xef, 0xd2, 0x30, 0x9b, 0xce, 0xf5, 0x74, 0x91, 0x73, 0xbf,
	0xab, 0x4c, 0x42, 0xc8, 0x6f, 0x10, 0x02, 0x2f, 0xce, 0x7d, 0x1e, 0xa7, 0x09, 0xf7, 0xdb, 0x39,
	0x3b, 0x92, 0xf2, 0x00, 0x7f, 0x51, 0xb2, 0x98, 0x05, 0x85, 0x06, 0x93, 0xb4, 0xc9, 0x6f, 0xd1,
	0x26, 0x44, 0x61, 0x45, 0xdf, 0x46, 0x77, 0x6a, 0xbb, 0xab, 0x9c, 0x74, 0xce, 0x5e, 0xfe, 0xd8,
	0xd5, 0x4a, 0x89, 0xd5, 0xfa, 0xbd, 0xef, 0x10, 0xa9, 0x72, 0xc9, 0xe3, 0x59, 0x94, 0xf1, 0x44,
	0x3e, 0x93, 0x52, 0xb3, 0x41, 0xa9, 0x39, 0x25, 0x2f, 0xd0, 0x66, 0x16, 0xcd, 0xc2, 0x38, 0x71,
	0xa3, 0x89, 0xda, 0xe2, 0x59, 0xd7, 0x40, 0xef, 0x1f, 0x6d, 0xa9, 0xa0, 0x05, 0xc9, 0x9f, 0xe5,
	0xfd, 0x08, 0x6d, 0xc4, 0xf3, 0x41, 0x98, 0xdc, 0x46, 0x19, 0xf7, 0xbf, 0xc1, 0xaa, 0x33, 0xe9,
	0xa1, 0x6d, 0xb9, 0x7c, 0x65, 0x49, 0x1b, 0x18, 0x21, 0xa8, 0x3d, 0x49, 0xe3, 0x84, 0x73, 0xd7,
	0x62, 0xfc, 0x37, 0xd8, 0x4c, 0xe2, 0xc9, 0xad, 0x1d, 0xce, 0x22, 0x75, 0xb5, 0xab, 0x9c, 0x6c,
	0xb2, 0xea, 0x4c, 0x30, 0x6a, 0xcd, 0xa3, 0x4f, 0xea, 0x1a, 0xcf, 0x07, 0x7e, 0x42, 0xe1, 0xe3,
	0xb9, 0x03, 0xb5, 0x56, 0xd7, 0x79, 0x00, 0xe2, 0x58, 0x48, 0x58, 0x14, 0x4e, 0x1f, 0xd4, 0x0d,
	0x21, 0xe1, 0x47, 0x68, 0x09, 0x60, 0xc9, 0xcd, 0xc3, 0x7c, 0x31, 0x57, 0x37, 0x8b, 0x96, 0xa8,
	0x11, 0xf2, 0x15, 0x5a, 0xfb, 0xf8, 0x09, 0xf8, 0x50, 0x11, 0x67, 0xe1, 0x40, 0x62, 0xe1, 0x3a,
	0x8a, 0x3f, 0xc5, 0x09, 0x08, 0x59, 0xa9, 0x04, 0x89, 0xa6, 0xc9, 0x5d, 0x9c, 0x44, 0xa5, 0xc1,
	0x2d, 0x6e, 0xb0, 0x81, 0x41, 0x87, 0x17, 0xec, 0x8f, 0xc3, 0x58, 0x4f, 0x17, 0x49, 0xae, 0xee,
	0x70, 0xad, 0x25, 0x94, 0xf7, 0xf1, 0x22, 0x1f, 0x87, 0xf1, 0x5c, 0xed, 0x70, 0xbe, 0xc4, 0x11,
	0x0a, 0xfa, 0x21, 0x0e, 0x53, 0x77, 0x92, 0x66, 0x91, 0xba, 0x5b, 0x14, 0xb4, 0x02, 0xc0, 0x7e,
	0xb2, 0x98, 0x9d, 0x5d, 0xc7, 0xc9, 0xaf, 0x9d, 0xfb, 0x28, 0x61, 0x03, 0x15, 0x17, 0xf6, 0x9b,
	0x28, 0x90, 0x0b, 0x1d, 0xa8, 0x87, 0xd9, 0x54, 0xdd, 0xe3, 0xa4, 0x57, 0x67, 0x68, 0xa5, 0x8f,
	0x71, 0x62, 0x2f, 0x66, 0x2a, 0xe1, 0x77, 0xcb, 0x53, 0xef, 0x07, 0x05, 0x3d, 0xab, 0x9a, 0xa5,
	0x58, 0x0f, 0x2c, 0xcc, 0x23, 0x91, 0x7b, 0x9c, 0xc4, 0xf9, 0xf8, 0x2e, 0x7c, 0x00, 0x8c, 0xb7,
	0xcd, 0x2a, 0x6b, 0x60, 0xa0, 0x33, 0x8f, 0x22, 0x70, 0x31, 0xe7, 0x3a, 0xc5, 0x0c, 0x36, 0x30,
	0xd2, 0x45, 0x5b, 0x1f, 0x32, 0x23, 0xfe, 0xee, 0x9b, 0x05, 0x57, 0x29, 0x1a, 0x56, 0x86, 0x20,
	0xf2, 0xf7, 0x69, 0x9a, 0x73, 0x71, 0x9b, 0x8b, 0xab, 0x33, 0xc8, 0xde, 0xa5, 0xe9, 0x8c, 0xcb,
	0x56, 0x0b, 0x99, 0x38, 0x43, 0xb1, 0xe7, 0xf7, 0x59, 0x9c, 0x7c, 0xcd, 0xa5, 0x45, 0xe7, 0x48,
	0x08, 0xf0, 0x9a, 0xa7, 0x79, 0x78, 0xc7, 0xc5, 0xeb, 0x05, 0xaf, 0x15, 0xd0, 0xfb, 0x77, 0x1b,
	0xed, 0x55, 0xb9, 0x4f, 0xa3, 0xf9, 0x2d, 0xcf, 0xfa, 0x18, 0xa1, 0x61, 0x38, 0x13, 0xf5, 0x2e,
	0x72, 0x96, 0x10, 0x62, 0xa0, 0x6d, 0x79, 0x3b, 0xf1, 0x8c, 0xb7, 0xce, 0xba, 0x4b, 0xab, 0xe1,
	0xd1, 0x16, 0x63, 0x8d, 0x5b, 0x10, 0x59, 0x31, 0x2c, 0x50, 0x92, 0x72, 0x84, 0x2b, 0x00, 0x58,
	0x0d, 0x27, 0x79, 0xfc, 0x6d, 0xe4, 0x17, 0xe3, 0xdf, 0xe6, 0xe3, 0xdf, 0xc0, 0x20, 0x4e, 0x38,
	0xa7, 0x89, 0x17, 0xcf, 0x04, 0x33, 0x12, 0x42, 0x4e, 0xd0, 0x6e, 0x62, 0x26, 0x71, 0xae, 0xd5,
	0x4a, 0x05, 0x03, 0xcb, 0xb0, 0xa8, 0x33, 0x83, 0x5e, 0x81, 0x81, 0xdd, 0xe4, 0xbd, 0xd3, 0xc0,
	0xc8, 0x2b, 0xb4, 0x33, 0x59, 0x64, 0x19, 0xd4, 0xbd, 0x68, 0x71, 0xc4, 0x6d, 0x35, 0x41, 0xe8,
	0x54, 0x4e, 0x6f, 0xad, 0x56, 0xcc, 0xcb, 0x12, 0x0a, 0xb1, 0x03, 0x1b, 0xf6, 0x62, 0xf6, 0x2e,
	0xca, 0xd4, 0x6d, 0xbe, 0x08, 0x24, 0x84, 0xd7, 0x9c, 0x2f, 0x1a, 0x73, 0xca, 0x67, 0x69, 0x87,
	0x55, 0xe7, 0xfa, 0x69, 0x30, 0x55, 0x3b, 0xf2, 0xd3, 0x80, 0x33, 0x02, 0x5d, 0x53, 0xae, 0xa4,
	0x5d, 0x3e, 0x62, 0x12, 0x02, 0x72, 0x58, 0x42, 0x5e, 0x3c, 0xb9, 0x8d, 0x72, 0x3e, 0x43, 0x2d,
	0x26, 0x21, 0xb0, 0xf1, 0xab, 0x5d, 0xcd, 0x07, 0x68, 0xeb, 0xd1, 0xc6, 0x6f, 0x2e, 0x74, 0x56,
	0xeb, 0x43, 0x58, 0x20, 0x14, 0x13, 0xd6, 0x62, 0xe2, 0xd8, 0xff, 0x61, 0x03, 0xe1, 0xea, 0x69,
	0xc1, 0x8d, 0x99, 0x53, 0x72, 0x80, 0xf6, 0x5c, 0xe3, 0x26, 0x18, 0x9b, 0x46, 0x30, 0xa2, 0x1a,
	0xf3, 0x06, 0x54, 0xf3, 0xf0, 0x13, 0x72, 0x88, 0x88, 0x80, 0x75, 0x46, 0x35, 0x8f, 0x32, 0xc7,
	0xb9, 0xc4, 0x0a, 0x39, 0x42, 0x87, 0x8f, 0xf1, 0x40, 0xd3, 0x2f, 0xf0, 0x8a, 0x7c, 0x87, 0xda,
	0x1e, 0x65, 0x01, 0xbf, 0xd3, 0x92, 0xef, 0xd4, 0x38, 0xbf, 0xd3, 0x26, 0xcf, 0xd1, 0x81, 0x90,
	0xb9, 0xd4, 0x36, 0x82, 0xa1, 0x76, 0x49, 0x4d, 0xfb, 0xdc, 0xc1, 0xab, 0x64, 0x0f, 0xed, 0x08,
	0x11, 0xa3, 0x9a, 0x71, 0x83, 0xd7, 0xe4, 0x60, 0x39, 0xc4, 0x8d, 0xac, 0x93, 0x7d, 0xb4, 0x2b,
	0x60, 0x67, 0x4c, 0x6d, 0xd3, 0x1e, 0xe2, 0x0d, 0x39, 0x1a, 0x83, 0x6a, 0x56, 0xa0, 0x6b, 0xcc,
	0x70, 0xf1, 0xa6, 0x8c, 0x0f, 0xf4, 0xe0, 0x8d, 0xa9, 0x39, 0xe7, 0xd4, 0xc6, 0x88, 0x3c, 0x45,
	0x58, 0xe0, 0x00, 0x06, 0x80, 0x6e, 0x11, 0x15, 0x3d, 0x5d, 0x46, 0xb9, 0xd3, 0x6d, 0x72, 0x8c,
	0x8e, 0x96, 0xec, 0x70, 0x21, 0xa3, 0xae, 0x6f, 0x79, 0x78, 0x47, 0xb6, 0x37, 0xd0, 0x03, 0xcb,
	0xf4, 0xdf, 0xf8, 0xb8, 0xd3, 0x88, 0xca, 0xb4, 0x87, 0xbf, 0x1f, 0xf9, 0xc1, 0x40, 0xc7, 0xbb,
	0x32, 0xce, 0xe8, 0xdb, 0x52, 0x84, 0x31, 0x79, 0x86, 0xf6, 0x97, 0xf5, 0xc1, 0xfd, 0x1e, 0x79,
	0x81, 0xd4, 0x25, 0x41, 0xe1, 0x19, 0xcc, 0x11, 0x42, 0x50, 0xa7, 0xaa, 0xaa, 0xaf, 0xd9, 0x86,
	0x89, 0xf7, 0x9b, 0xe4, 0xbd, 0x2d, 0xe1, 0xa7, 0xb2, 0xe7, 0x02, 0xe3, 0x0e, 0x0e, 0x64, 0xdc,
	0xf5, 0x34, 0xe6, 0x05, 0x63, 0x4b, 0xbb, 0xc1, 0x87, 0xb2, 0x19, 0xc7, 0xf7, 0x4a, 0x5a, 0x9f,
	0xc9, 0x85, 0xac, 0x60, 0x6e, 0x49, 0x95, 0x99, 0x70, 0xae, 0x28, 0xf3, 0x7c, 0x66, 0xe3, 0xe7,
	0xb2, 0xfd, 0xeb, 0x91, 0xe6, 0x8d, 0x35, 0x13, 0x42, 0x3f, 0x92, 0x33, 0x76, 0x75, 0x87, 0xd1,
	0x52, 0xf0, 0x13, 0xd9, 0x83, 0xee, 0x33, 0x46, 0x6d, 0xaf, 0xe4, 0xfa, 0x85, 0xdc, 0x61, 0xd0,
	0x45, 0xd4, 0x36, 0x2c, 0xc7, 0xf3, 0x28, 0xbb, 0xc1, 0x2f, 0xe5, 0x6b, 0x86, 0xe9, 0xba, 0x8e,
	0x75, 0x45, 0x03, 0x83, 0xba, 0x17, 0xf8, 0xb8, 0xc9, 0xa1, 0x24, 0x02, 0x7f, 0x3f, 0x25, 0x2f,
	0xd1, 0x73, 0x21, 0xd5, 0xc6, 0x63, 0xeb, 0x86, 0xab, 0x5c, 0x59, 0x14, 0xd8, 0xc3, 0x5d, 0xf9,
	0x72, 0x53, 0x3c, 0xd0, 0xf1, 0x17, 0xa4, 0x87, 0x8e, 0xff, 0x87, 0x54, 0xd3, 0x2f, 0xb8, 0x85,
	0xde, 0xff, 0xd1, 0x01, 0xee, 0x7e, 0x26, 0xb3, 0x64, 0x51, 0x4d, 0x84, 0xfe, 0x4a, 0xce, 0xb8,
	0xc6, 0xf9, 0x9d, 0x2f, 0xe5, 0x71, 0xb8, 0xa4, 0xae, 0xab, 0x0d, 0x29, 0x7e, 0x2d, 0x37, 0x32,
	0x1f, 0x34, 0x21, 0xf9, 0xb9, 0x4c, 0x10, 0xa3, 0xba, 0x63, 0x57, 0xa2, 0x13, 0xb9, 0x72, 0xa6,
	0xeb, 0xd8, 0x96, 0x69, 0x53, 0xfc, 0x8b, 0xc6, 0x6e, 0x18, 0x69, 0xf6, 0x90, 0xf2, 0x98, 0xfa,
	0x8d, 0xdd, 0x50, 0xe1, 0x3c, 0xa6, 0x5f, 0xf6, 0xff, 0xb9, 0x52, 0xbc, 0x88, 0xf2, 0xdd, 0x13,
	0x65, 0x59, 0x9a, 0xe9, 0xe9, 0x34, 0x12, 0x7d, 0x4a, 0xf5, 0xc0, 0xf5, 0x75, 0x9d, 0xba, 0x2e,
	0x7e, 0x42, 0x7e, 0x85, 0x5e, 0x95, 0x58, 0xb1, 0x61, 0x8a, 0xd4, 0x0c, 0x53, 0xbb, 0x74, 0x6c,
	0x23, 0xb0, 0x1d, 0x8f, 0xda, 0x8e, 0x3f, 0x1c, 0xe1, 0xbf, 0xff, 0xa7, 0xfc, 0x53, 0xc8, 0x57,
	0xa8, 0xfb, 0x23, 0x57, 0x7c, 0x97, 0x32, 0xd0, 0x3f, 0x77, 0x7c, 0xdb, 0xc0, 0x7f, 0xab, 0xd5,
	0x5f, 0x17, 0x95, 0xa5, 0x7a, 0x60, 0xda, 0x9e, 0x53, 0x28, 0x57, 0x7a, 0x7f, 0xad, 0xf5, 0x5e,
	0xa1, 0x67, 0x8f, 0xf4, 0x4c, 0xf7, 0xdc, 0xb7, 0x2c, 0xfc, 0x97, 0x5a, 0xeb, 0xcb, 0xa2, 0x11,
	0xa8, 0xce, 0x97, 0x57, 0xb9, 0x98, 0x18, 0x1d, 0xc3, 0x22, 0xfd, 0xbe, 0x56, 0x3b, 0x45, 0x5f,
	0x3c, 0x56, 0xd3, 0x47, 0xe6, 0x18, 0x5c, 0x07, 0x65, 0x4e, 0x7f, 0xae, 0xf4, 0xfb, 0x8e, 0xb4,
	0xac, 0xc3, 0x49, 0x0e, 0x0f, 0x6c, 0x51, 0x0f, 0x2f, 0xb0, 0x1d, 0x76, 0xa9, 0x59, 0x81, 0xa6,
	0x7b, 0x58, 0x11, 0x24, 0x7a, 0xf5, 0xde, 0x5a, 0x11, 0xcb, 0xd3, 0xe3, 0x33, 0x1d, 0x18, 0x26,
	0x6e, 0xf5, 0xbf, 0x2f, 0xbf, 0xaf, 0xb8, 0x45, 0x78, 0xcb, 0x28, 0xdf, 0x23, 0x76, 0xd1, 0x16,
	0xa8, 0x8a, 0x2d, 0xab, 0x88, 0xbb, 0x46, 0xb5, 0x1c, 0x57, 0x6a, 0x48, 0x6c, 0xa6, 0x16, 0xc1,
	0x68, 0xbb, 0x80, 0xca, 0x4d, 0xd2, 0x26, 0x1d, 0x84, 0x0a, 0x84, 0x6f, 0x8a, 0xd5, 0x5a, 0xc3,
	0x70, 0x06, 0xa6, 0x65, 0xe1, 0xb5, 0x1a, 0x39, 0x37, 0x6d, 0xd3, 0x1d, 0xe1, 0xf5, 0xfe, 0x1f,
	0xa4, 0x98, 0xa4, 0x97, 0xe3, 0x52, 0xd1, 0x2f, 0x13, 0xc5, 0x8a, 0x88, 0xd2, 0x0f, 0x06, 0x8c,
	0x6a, 0xf0, 0xb4, 0x29, 0xb3, 0xf6, 0x03, 0x6d, 0x48, 0x6d, 0xef, 0xd2, 0x31, 0x70, 0x4b, 0x44,
	0xe0, 0x07, 0x6f, 0x7d, 0xd3, 0xc3, 0xed, 0xfe, 0xef, 0xd0, 0xee, 0xd2, 0x97, 0x15, 0xd9, 0x42,
	0xeb, 0x23, 0xed, 0x8a, 0x42, 0x0e, 0x0a, 0x1c, 0xae, 0x35, 0x7b, 0x78, 0xe1, 0xf8, 0x78, 0x85,
	0x7b, 0xa0, 0x57, 0xd4, 0xf6, 0x6e, 0xce, 0xcd, 0x2b, 0x8a, 0x5b, 0xfd, 0x3b, 0xa9, 0x65, 0xab,
	0x2f, 0x2a, 0x08, 0xcd, 0xa2, 0x57, 0xd4, 0x0a, 0xce, 0x99, 0x49, 0x6d, 0x03, 0x2b, 0x35, 0xc2,
	0x1c, 0xe7, 0xc2, 0xa4, 0x78, 0xa5, 0x46, 0xca, 0xf0, 0x5b, 0x35, 0x72, 0xa9, 0xb9, 0x1e, 0x65,
	0x05, 0x5b, 0xe5, 0x2d, 0x53, 0x1f, 0xe1, 0xd5, 0xfe, 0x9f, 0x14, 0xa9, 0xe0, 0xef, 0xef, 0xd2,
	0x8f, 0xf0, 0xa6, 0x80, 0xd1, 0xf6, 0xb9, 0xe5, 0x5c, 0x53, 0xe6, 0x06, 0xba, 0xe5, 0x0f, 0xb0,
	0x02, 0xc3, 0x2d, 0x90, 0x72, 0x24, 0x8a, 0xf2, 0x08, 0x90, 0x3f, 0xc4, 0x71, 0x4b, 0x86, 0xdc,
	0xb1, 0x66, 0x50, 0xdc, 0x86, 0xb9, 0x15, 0xd0, 0xc0, 0xd2, 0xf4, 0x8b, 0x37, 0xce, 0x05, 0x65,
	0x78, 0x15, 0xba, 0x4a, 0xe0, 0x8c, 0x1a, 0x05, 0xba, 0x36, 0x7e, 0xf2, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd3, 0xe7, 0x71, 0x09, 0xc1, 0x0f, 0x00, 0x00,
}
