// Code generated by protoc-gen-go.
// source: mj_changchun_base.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ProtoHeader from common_client.proto

// Ignoring public import of ServerInfo from common_client.proto

// Ignoring public import of QuickConn from common_client.proto

// Ignoring public import of AckQuickConn from common_client.proto

// Ignoring public import of WeixinInfo from common_client.proto

// Ignoring public import of common_req_reg from common_client.proto

// Ignoring public import of common_ack_reg from common_client.proto

// Ignoring public import of cm_offline from common_client.proto

// Ignoring public import of cm_hearbeat from common_client.proto

// Ignoring public import of common_enum_reg from common_client.proto

// Ignoring public import of common_enum_os_type from common_client.proto

type CcmjProtoId int32

const (
	CcmjProtoId_id_p16_heartbeat              CcmjProtoId = 0
	CcmjProtoId_id_p16_req_createDesk         CcmjProtoId = 1
	CcmjProtoId_id_p16_ack_createDesk         CcmjProtoId = 2
	CcmjProtoId_id_p16_req_enterDesk          CcmjProtoId = 3
	CcmjProtoId_id_p16_ack_enterDesk          CcmjProtoId = 4
	CcmjProtoId_id_p16_req_dissolve_beginGame CcmjProtoId = 5
	CcmjProtoId_id_p16_ack_dissolve_beginGame CcmjProtoId = 6
	CcmjProtoId_id_p16_dissolve_beginGame     CcmjProtoId = 7
	CcmjProtoId_id_p16_ack_roomInit           CcmjProtoId = 8
	CcmjProtoId_id_p16_req_ready              CcmjProtoId = 9
	CcmjProtoId_id_p16_ack_ready              CcmjProtoId = 10
	CcmjProtoId_id_p16_ack_playerEnter        CcmjProtoId = 11
	CcmjProtoId_id_p16_ack_playerExit         CcmjProtoId = 12
	CcmjProtoId_id_p16_ack_game_deal_cards    CcmjProtoId = 13
	CcmjProtoId_id_p16_ack_game_opening       CcmjProtoId = 14
	CcmjProtoId_id_p16_ack_game_overturn      CcmjProtoId = 15
	CcmjProtoId_id_p16_req_game_send_out_card CcmjProtoId = 16
	CcmjProtoId_id_p16_ack_game_send_out_card CcmjProtoId = 17
	CcmjProtoId_id_p16_req_chi                CcmjProtoId = 18
	CcmjProtoId_id_p16_ack_chi                CcmjProtoId = 19
	CcmjProtoId_id_p16_req_game_act_peng      CcmjProtoId = 20
	CcmjProtoId_id_p16_ack_game_act_peng      CcmjProtoId = 21
	CcmjProtoId_id_p16_req_game_act_gang      CcmjProtoId = 22
	CcmjProtoId_id_p16_ack_game_act_gang      CcmjProtoId = 23
	CcmjProtoId_id_p16_req_game_act_guo       CcmjProtoId = 24
	CcmjProtoId_id_p16_ack_game_act_guo       CcmjProtoId = 25
	CcmjProtoId_id_p16_req_game_act_bugang    CcmjProtoId = 26
	CcmjProtoId_id_p16_ack_game_act_bugang    CcmjProtoId = 27
	CcmjProtoId_id_p16_req_game_ting          CcmjProtoId = 28
	CcmjProtoId_id_p16_ack_game_ting          CcmjProtoId = 29
	CcmjProtoId_id_p16_ack_game_dabao         CcmjProtoId = 30
	CcmjProtoId_id_p16_ack_game_changbao      CcmjProtoId = 31
	CcmjProtoId_id_p16_req_game_act_hu        CcmjProtoId = 32
)

var CcmjProtoId_name = map[int32]string{
	0:  "id_p16_heartbeat",
	1:  "id_p16_req_createDesk",
	2:  "id_p16_ack_createDesk",
	3:  "id_p16_req_enterDesk",
	4:  "id_p16_ack_enterDesk",
	5:  "id_p16_req_dissolve_beginGame",
	6:  "id_p16_ack_dissolve_beginGame",
	7:  "id_p16_dissolve_beginGame",
	8:  "id_p16_ack_roomInit",
	9:  "id_p16_req_ready",
	10: "id_p16_ack_ready",
	11: "id_p16_ack_playerEnter",
	12: "id_p16_ack_playerExit",
	13: "id_p16_ack_game_deal_cards",
	14: "id_p16_ack_game_opening",
	15: "id_p16_ack_game_overturn",
	16: "id_p16_req_game_send_out_card",
	17: "id_p16_ack_game_send_out_card",
	18: "id_p16_req_chi",
	19: "id_p16_ack_chi",
	20: "id_p16_req_game_act_peng",
	21: "id_p16_ack_game_act_peng",
	22: "id_p16_req_game_act_gang",
	23: "id_p16_ack_game_act_gang",
	24: "id_p16_req_game_act_guo",
	25: "id_p16_ack_game_act_guo",
	26: "id_p16_req_game_act_bugang",
	27: "id_p16_ack_game_act_bugang",
	28: "id_p16_req_game_ting",
	29: "id_p16_ack_game_ting",
	30: "id_p16_ack_game_dabao",
	31: "id_p16_ack_game_changbao",
	32: "id_p16_req_game_act_hu",
}
var CcmjProtoId_value = map[string]int32{
	"id_p16_heartbeat":              0,
	"id_p16_req_createDesk":         1,
	"id_p16_ack_createDesk":         2,
	"id_p16_req_enterDesk":          3,
	"id_p16_ack_enterDesk":          4,
	"id_p16_req_dissolve_beginGame": 5,
	"id_p16_ack_dissolve_beginGame": 6,
	"id_p16_dissolve_beginGame":     7,
	"id_p16_ack_roomInit":           8,
	"id_p16_req_ready":              9,
	"id_p16_ack_ready":              10,
	"id_p16_ack_playerEnter":        11,
	"id_p16_ack_playerExit":         12,
	"id_p16_ack_game_deal_cards":    13,
	"id_p16_ack_game_opening":       14,
	"id_p16_ack_game_overturn":      15,
	"id_p16_req_game_send_out_card": 16,
	"id_p16_ack_game_send_out_card": 17,
	"id_p16_req_chi":                18,
	"id_p16_ack_chi":                19,
	"id_p16_req_game_act_peng":      20,
	"id_p16_ack_game_act_peng":      21,
	"id_p16_req_game_act_gang":      22,
	"id_p16_ack_game_act_gang":      23,
	"id_p16_req_game_act_guo":       24,
	"id_p16_ack_game_act_guo":       25,
	"id_p16_req_game_act_bugang":    26,
	"id_p16_ack_game_act_bugang":    27,
	"id_p16_req_game_ting":          28,
	"id_p16_ack_game_ting":          29,
	"id_p16_ack_game_dabao":         30,
	"id_p16_ack_game_changbao":      31,
	"id_p16_req_game_act_hu":        32,
}

func (x CcmjProtoId) Enum() *CcmjProtoId {
	p := new(CcmjProtoId)
	*p = x
	return p
}
func (x CcmjProtoId) String() string {
	return proto.EnumName(CcmjProtoId_name, int32(x))
}
func (x *CcmjProtoId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CcmjProtoId_value, data, "CcmjProtoId")
	if err != nil {
		return err
	}
	*x = CcmjProtoId(value)
	return nil
}
func (CcmjProtoId) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type RECONNECT_TYPE int32

const (
	RECONNECT_TYPE_NORMAL    RECONNECT_TYPE = 1
	RECONNECT_TYPE_RECONNECT RECONNECT_TYPE = 2
)

var RECONNECT_TYPE_name = map[int32]string{
	1: "NORMAL",
	2: "RECONNECT",
}
var RECONNECT_TYPE_value = map[string]int32{
	"NORMAL":    1,
	"RECONNECT": 2,
}

func (x RECONNECT_TYPE) Enum() *RECONNECT_TYPE {
	p := new(RECONNECT_TYPE)
	*p = x
	return p
}
func (x RECONNECT_TYPE) String() string {
	return proto.EnumName(RECONNECT_TYPE_name, int32(x))
}
func (x *RECONNECT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RECONNECT_TYPE_value, data, "RECONNECT_TYPE")
	if err != nil {
		return err
	}
	*x = RECONNECT_TYPE(value)
	return nil
}
func (RECONNECT_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

// 碰杠类型(客户端显示用)
type ComposeCardType int32

const (
	ComposeCardType_C_MINGGANG ComposeCardType = 1
	ComposeCardType_C_BAGANG   ComposeCardType = 2
	ComposeCardType_C_ANGANG   ComposeCardType = 3
	ComposeCardType_C_PENG     ComposeCardType = 4
	ComposeCardType_C_CHI      ComposeCardType = 5
	ComposeCardType_C_FENG     ComposeCardType = 6
)

var ComposeCardType_name = map[int32]string{
	1: "C_MINGGANG",
	2: "C_BAGANG",
	3: "C_ANGANG",
	4: "C_PENG",
	5: "C_CHI",
	6: "C_FENG",
}
var ComposeCardType_value = map[string]int32{
	"C_MINGGANG": 1,
	"C_BAGANG":   2,
	"C_ANGANG":   3,
	"C_PENG":     4,
	"C_CHI":      5,
	"C_FENG":     6,
}

func (x ComposeCardType) Enum() *ComposeCardType {
	p := new(ComposeCardType)
	*p = x
	return p
}
func (x ComposeCardType) String() string {
	return proto.EnumName(ComposeCardType_name, int32(x))
}
func (x *ComposeCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComposeCardType_value, data, "ComposeCardType")
	if err != nil {
		return err
	}
	*x = ComposeCardType(value)
	return nil
}
func (ComposeCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type DeskGameStatus int32

const (
	DeskGameStatus_INIT    DeskGameStatus = 0
	DeskGameStatus_FAPAI   DeskGameStatus = 1
	DeskGameStatus_PLAYING DeskGameStatus = 2
	DeskGameStatus_DINGQUE DeskGameStatus = 3
	DeskGameStatus_FINISH  DeskGameStatus = 4
	DeskGameStatus_PIAO    DeskGameStatus = 5
)

var DeskGameStatus_name = map[int32]string{
	0: "INIT",
	1: "FAPAI",
	2: "PLAYING",
	3: "DINGQUE",
	4: "FINISH",
	5: "PIAO",
}
var DeskGameStatus_value = map[string]int32{
	"INIT":    0,
	"FAPAI":   1,
	"PLAYING": 2,
	"DINGQUE": 3,
	"FINISH":  4,
	"PIAO":    5,
}

func (x DeskGameStatus) Enum() *DeskGameStatus {
	p := new(DeskGameStatus)
	*p = x
	return p
}
func (x DeskGameStatus) String() string {
	return proto.EnumName(DeskGameStatus_name, int32(x))
}
func (x *DeskGameStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeskGameStatus_value, data, "DeskGameStatus")
	if err != nil {
		return err
	}
	*x = DeskGameStatus(value)
	return nil
}
func (DeskGameStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

type PaiType int32

const (
	PaiType_H_DuiDuiHu      PaiType = 1
	PaiType_H_QingYiSe      PaiType = 2
	PaiType_H_QiDui         PaiType = 3
	PaiType_H_DaiYaoJiu     PaiType = 4
	PaiType_H_LongQiDui     PaiType = 5
	PaiType_H_JiangDui      PaiType = 6
	PaiType_H_MenQing       PaiType = 7
	PaiType_H_ZhongZhang    PaiType = 8
	PaiType_H_QingLongQiDui PaiType = 9
	PaiType_H_QingQiDui     PaiType = 10
	PaiType_H_PingHu        PaiType = 11
)

var PaiType_name = map[int32]string{
	1:  "H_DuiDuiHu",
	2:  "H_QingYiSe",
	3:  "H_QiDui",
	4:  "H_DaiYaoJiu",
	5:  "H_LongQiDui",
	6:  "H_JiangDui",
	7:  "H_MenQing",
	8:  "H_ZhongZhang",
	9:  "H_QingLongQiDui",
	10: "H_QingQiDui",
	11: "H_PingHu",
}
var PaiType_value = map[string]int32{
	"H_DuiDuiHu":      1,
	"H_QingYiSe":      2,
	"H_QiDui":         3,
	"H_DaiYaoJiu":     4,
	"H_LongQiDui":     5,
	"H_JiangDui":      6,
	"H_MenQing":       7,
	"H_ZhongZhang":    8,
	"H_QingLongQiDui": 9,
	"H_QingQiDui":     10,
	"H_PingHu":        11,
}

func (x PaiType) Enum() *PaiType {
	p := new(PaiType)
	*p = x
	return p
}
func (x PaiType) String() string {
	return proto.EnumName(PaiType_name, int32(x))
}
func (x *PaiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaiType_value, data, "PaiType")
	if err != nil {
		return err
	}
	*x = PaiType(value)
	return nil
}
func (PaiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

// 房间类型枚举
type MJRoomType int32

const (
	MJRoomType_roomType_mj_changchun MJRoomType = 16
)

var MJRoomType_name = map[int32]string{
	16: "roomType_mj_changchun",
}
var MJRoomType_value = map[string]int32{
	"roomType_mj_changchun": 16,
}

func (x MJRoomType) Enum() *MJRoomType {
	p := new(MJRoomType)
	*p = x
	return p
}
func (x MJRoomType) String() string {
	return proto.EnumName(MJRoomType_name, int32(x))
}
func (x *MJRoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MJRoomType_value, data, "MJRoomType")
	if err != nil {
		return err
	}
	*x = MJRoomType(value)
	return nil
}
func (MJRoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

type UserCoinBean struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Coin             *int64  `protobuf:"varint,2,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserCoinBean) Reset()                    { *m = UserCoinBean{} }
func (m *UserCoinBean) String() string            { return proto.CompactTextString(m) }
func (*UserCoinBean) ProtoMessage()               {}
func (*UserCoinBean) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *UserCoinBean) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserCoinBean) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// 房间信息
type RoomTypeInfo struct {
	MjRoomType       *MJRoomType  `protobuf:"varint,1,opt,name=mjRoomType,enum=yjprotogo.MJRoomType" json:"mjRoomType,omitempty"`
	BoardsCout       *int32       `protobuf:"varint,2,opt,name=boardsCout" json:"boardsCout,omitempty"`
	BaseValue        *int64       `protobuf:"varint,3,opt,name=baseValue" json:"baseValue,omitempty"`
	PlayOptions      *PlayOptions `protobuf:"bytes,4,opt,name=playOptions" json:"playOptions,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RoomTypeInfo) Reset()                    { *m = RoomTypeInfo{} }
func (m *RoomTypeInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomTypeInfo) ProtoMessage()               {}
func (*RoomTypeInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *RoomTypeInfo) GetMjRoomType() MJRoomType {
	if m != nil && m.MjRoomType != nil {
		return *m.MjRoomType
	}
	return MJRoomType_roomType_mj_changchun
}

func (m *RoomTypeInfo) GetBoardsCout() int32 {
	if m != nil && m.BoardsCout != nil {
		return *m.BoardsCout
	}
	return 0
}

func (m *RoomTypeInfo) GetBaseValue() int64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *RoomTypeInfo) GetPlayOptions() *PlayOptions {
	if m != nil {
		return m.PlayOptions
	}
	return nil
}

type EndLotteryInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	NickName         *string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	BigWin           *bool   `protobuf:"varint,3,opt,name=bigWin" json:"bigWin,omitempty"`
	IsOwner          *bool   `protobuf:"varint,4,opt,name=isOwner" json:"isOwner,omitempty"`
	WinCoin          *int64  `protobuf:"varint,5,opt,name=winCoin" json:"winCoin,omitempty"`
	CountHu          *int32  `protobuf:"varint,6,opt,name=countHu" json:"countHu,omitempty"`
	CountZiMo        *int32  `protobuf:"varint,7,opt,name=countZiMo" json:"countZiMo,omitempty"`
	CountDianPao     *int32  `protobuf:"varint,8,opt,name=countDianPao" json:"countDianPao,omitempty"`
	CountAnGang      *int32  `protobuf:"varint,9,opt,name=countAnGang" json:"countAnGang,omitempty"`
	CountMingGang    *int32  `protobuf:"varint,10,opt,name=countMingGang" json:"countMingGang,omitempty"`
	CountDianGang    *int32  `protobuf:"varint,11,opt,name=countDianGang" json:"countDianGang,omitempty"`
	CountChaJiao     *int32  `protobuf:"varint,12,opt,name=countChaJiao" json:"countChaJiao,omitempty"`
	BestGunner       *bool   `protobuf:"varint,13,opt,name=bestGunner" json:"bestGunner,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EndLotteryInfo) Reset()                    { *m = EndLotteryInfo{} }
func (m *EndLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*EndLotteryInfo) ProtoMessage()               {}
func (*EndLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *EndLotteryInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *EndLotteryInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *EndLotteryInfo) GetBigWin() bool {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return false
}

func (m *EndLotteryInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *EndLotteryInfo) GetWinCoin() int64 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *EndLotteryInfo) GetCountHu() int32 {
	if m != nil && m.CountHu != nil {
		return *m.CountHu
	}
	return 0
}

func (m *EndLotteryInfo) GetCountZiMo() int32 {
	if m != nil && m.CountZiMo != nil {
		return *m.CountZiMo
	}
	return 0
}

func (m *EndLotteryInfo) GetCountDianPao() int32 {
	if m != nil && m.CountDianPao != nil {
		return *m.CountDianPao
	}
	return 0
}

func (m *EndLotteryInfo) GetCountAnGang() int32 {
	if m != nil && m.CountAnGang != nil {
		return *m.CountAnGang
	}
	return 0
}

func (m *EndLotteryInfo) GetCountMingGang() int32 {
	if m != nil && m.CountMingGang != nil {
		return *m.CountMingGang
	}
	return 0
}

func (m *EndLotteryInfo) GetCountDianGang() int32 {
	if m != nil && m.CountDianGang != nil {
		return *m.CountDianGang
	}
	return 0
}

func (m *EndLotteryInfo) GetCountChaJiao() int32 {
	if m != nil && m.CountChaJiao != nil {
		return *m.CountChaJiao
	}
	return 0
}

func (m *EndLotteryInfo) GetBestGunner() bool {
	if m != nil && m.BestGunner != nil {
		return *m.BestGunner
	}
	return false
}

// 玩法：包括自摸、点炮、以及可多选的玩法
type PlayOptions struct {
	DianPaoBaoSanJia *bool  `protobuf:"varint,1,opt,name=dianPaoBaoSanJia" json:"dianPaoBaoSanJia,omitempty"`
	XiaoJiFeiDan     *bool  `protobuf:"varint,2,opt,name=xiaoJiFeiDan" json:"xiaoJiFeiDan,omitempty"`
	SanFengDan       *bool  `protobuf:"varint,3,opt,name=sanFengDan" json:"sanFengDan,omitempty"`
	XiaDanSuanZhanLi *bool  `protobuf:"varint,4,opt,name=xiaDanSuanZhanLi" json:"xiaDanSuanZhanLi,omitempty"`
	DaiQueMen        *bool  `protobuf:"varint,5,opt,name=daiQueMen" json:"daiQueMen,omitempty"`
	UserCountLimit   *int32 `protobuf:"varint,6,opt,name=userCountLimit" json:"userCountLimit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayOptions) Reset()                    { *m = PlayOptions{} }
func (m *PlayOptions) String() string            { return proto.CompactTextString(m) }
func (*PlayOptions) ProtoMessage()               {}
func (*PlayOptions) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *PlayOptions) GetDianPaoBaoSanJia() bool {
	if m != nil && m.DianPaoBaoSanJia != nil {
		return *m.DianPaoBaoSanJia
	}
	return false
}

func (m *PlayOptions) GetXiaoJiFeiDan() bool {
	if m != nil && m.XiaoJiFeiDan != nil {
		return *m.XiaoJiFeiDan
	}
	return false
}

func (m *PlayOptions) GetSanFengDan() bool {
	if m != nil && m.SanFengDan != nil {
		return *m.SanFengDan
	}
	return false
}

func (m *PlayOptions) GetXiaDanSuanZhanLi() bool {
	if m != nil && m.XiaDanSuanZhanLi != nil {
		return *m.XiaDanSuanZhanLi
	}
	return false
}

func (m *PlayOptions) GetDaiQueMen() bool {
	if m != nil && m.DaiQueMen != nil {
		return *m.DaiQueMen
	}
	return false
}

func (m *PlayOptions) GetUserCountLimit() int32 {
	if m != nil && m.UserCountLimit != nil {
		return *m.UserCountLimit
	}
	return 0
}

type DeskGameInfo struct {
	GameStatus       *int32        `protobuf:"varint,1,opt,name=GameStatus" json:"GameStatus,omitempty"`
	RoomTypeInfo     *RoomTypeInfo `protobuf:"bytes,2,opt,name=roomTypeInfo" json:"roomTypeInfo,omitempty"`
	PlayerNum        *int32        `protobuf:"varint,3,opt,name=playerNum" json:"playerNum,omitempty"`
	ActiveUserId     *uint32       `protobuf:"varint,4,opt,name=activeUserId" json:"activeUserId,omitempty"`
	ActionTime       *int32        `protobuf:"varint,5,opt,name=actionTime" json:"actionTime,omitempty"`
	DelayTime        *int32        `protobuf:"varint,6,opt,name=delayTime" json:"delayTime,omitempty"`
	NInitActionTime  *int32        `protobuf:"varint,7,opt,name=nInitActionTime" json:"nInitActionTime,omitempty"`
	NInitDelayTime   *int32        `protobuf:"varint,8,opt,name=nInitDelayTime" json:"nInitDelayTime,omitempty"`
	InitRoomCoin     *int64        `protobuf:"varint,9,opt,name=initRoomCoin" json:"initRoomCoin,omitempty"`
	CurrPlayCount    *int32        `protobuf:"varint,10,opt,name=currPlayCount" json:"currPlayCount,omitempty"`
	TotalPlayCount   *int32        `protobuf:"varint,11,opt,name=totalPlayCount" json:"totalPlayCount,omitempty"`
	RoomNumber       *string       `protobuf:"bytes,12,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RemainCards      *int32        `protobuf:"varint,13,opt,name=remainCards" json:"remainCards,omitempty"`
	Banker           *uint32       `protobuf:"varint,14,opt,name=Banker" json:"Banker,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeskGameInfo) Reset()                    { *m = DeskGameInfo{} }
func (m *DeskGameInfo) String() string            { return proto.CompactTextString(m) }
func (*DeskGameInfo) ProtoMessage()               {}
func (*DeskGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *DeskGameInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *DeskGameInfo) GetRoomTypeInfo() *RoomTypeInfo {
	if m != nil {
		return m.RoomTypeInfo
	}
	return nil
}

func (m *DeskGameInfo) GetPlayerNum() int32 {
	if m != nil && m.PlayerNum != nil {
		return *m.PlayerNum
	}
	return 0
}

func (m *DeskGameInfo) GetActiveUserId() uint32 {
	if m != nil && m.ActiveUserId != nil {
		return *m.ActiveUserId
	}
	return 0
}

func (m *DeskGameInfo) GetActionTime() int32 {
	if m != nil && m.ActionTime != nil {
		return *m.ActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetDelayTime() int32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitActionTime() int32 {
	if m != nil && m.NInitActionTime != nil {
		return *m.NInitActionTime
	}
	return 0
}

func (m *DeskGameInfo) GetNInitDelayTime() int32 {
	if m != nil && m.NInitDelayTime != nil {
		return *m.NInitDelayTime
	}
	return 0
}

func (m *DeskGameInfo) GetInitRoomCoin() int64 {
	if m != nil && m.InitRoomCoin != nil {
		return *m.InitRoomCoin
	}
	return 0
}

func (m *DeskGameInfo) GetCurrPlayCount() int32 {
	if m != nil && m.CurrPlayCount != nil {
		return *m.CurrPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetTotalPlayCount() int32 {
	if m != nil && m.TotalPlayCount != nil {
		return *m.TotalPlayCount
	}
	return 0
}

func (m *DeskGameInfo) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *DeskGameInfo) GetRemainCards() int32 {
	if m != nil && m.RemainCards != nil {
		return *m.RemainCards
	}
	return 0
}

func (m *DeskGameInfo) GetBanker() uint32 {
	if m != nil && m.Banker != nil {
		return *m.Banker
	}
	return 0
}

type PlayerInfo struct {
	IsBanker         *bool       `protobuf:"varint,1,opt,name=isBanker" json:"isBanker,omitempty"`
	PlayerCard       *PlayerCard `protobuf:"bytes,2,opt,name=playerCard" json:"playerCard,omitempty"`
	Coin             *int64      `protobuf:"varint,3,opt,name=coin" json:"coin,omitempty"`
	NickName         *string     `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
	Sex              *int32      `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	UserId           *uint32     `protobuf:"varint,6,opt,name=userId" json:"userId,omitempty"`
	IsOwner          *bool       `protobuf:"varint,7,opt,name=isOwner" json:"isOwner,omitempty"`
	BReady           *int32      `protobuf:"varint,8,opt,name=bReady" json:"bReady,omitempty"`
	NHuPai           *int32      `protobuf:"varint,9,opt,name=nHuPai" json:"nHuPai,omitempty"`
	WxInfo           *WeixinInfo `protobuf:"bytes,10,opt,name=wxInfo" json:"wxInfo,omitempty"`
	GameStatus       *int32      `protobuf:"varint,11,opt,name=GameStatus" json:"GameStatus,omitempty"`
	AgentMode        *bool       `protobuf:"varint,12,opt,name=agentMode" json:"agentMode,omitempty"`
	Ip               *string     `protobuf:"bytes,13,opt,name=ip" json:"ip,omitempty"`
	IsBaoTing        *bool       `protobuf:"varint,14,opt,name=isBaoTing" json:"isBaoTing,omitempty"`
	Address          *string     `protobuf:"bytes,15,opt,name=address" json:"address,omitempty"`
	Site             *int32      `protobuf:"varint,16,opt,name=site" json:"site,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *PlayerInfo) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *PlayerInfo) GetPlayerCard() *PlayerCard {
	if m != nil {
		return m.PlayerCard
	}
	return nil
}

func (m *PlayerInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetIsOwner() bool {
	if m != nil && m.IsOwner != nil {
		return *m.IsOwner
	}
	return false
}

func (m *PlayerInfo) GetBReady() int32 {
	if m != nil && m.BReady != nil {
		return *m.BReady
	}
	return 0
}

func (m *PlayerInfo) GetNHuPai() int32 {
	if m != nil && m.NHuPai != nil {
		return *m.NHuPai
	}
	return 0
}

func (m *PlayerInfo) GetWxInfo() *WeixinInfo {
	if m != nil {
		return m.WxInfo
	}
	return nil
}

func (m *PlayerInfo) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *PlayerInfo) GetAgentMode() bool {
	if m != nil && m.AgentMode != nil {
		return *m.AgentMode
	}
	return false
}

func (m *PlayerInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *PlayerInfo) GetIsBaoTing() bool {
	if m != nil && m.IsBaoTing != nil {
		return *m.IsBaoTing
	}
	return false
}

func (m *PlayerInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *PlayerInfo) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

// 麻将牌
type CardInfo struct {
	Type             *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value            *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id               *int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *CardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CardInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CardInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type ComposeCard struct {
	Value            *int32      `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type             *int32      `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Cards            []*CardInfo `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ComposeCard) Reset()                    { *m = ComposeCard{} }
func (m *ComposeCard) String() string            { return proto.CompactTextString(m) }
func (*ComposeCard) ProtoMessage()               {}
func (*ComposeCard) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *ComposeCard) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ComposeCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ComposeCard) GetCards() []*CardInfo {
	if m != nil {
		return m.Cards
	}
	return nil
}

type PlayerCard struct {
	HandCard         []*CardInfo    `protobuf:"bytes,1,rep,name=handCard" json:"handCard,omitempty"`
	ComposeCard      []*ComposeCard `protobuf:"bytes,2,rep,name=composeCard" json:"composeCard,omitempty"`
	OutCard          []*CardInfo    `protobuf:"bytes,3,rep,name=outCard" json:"outCard,omitempty"`
	HuCard           []*CardInfo    `protobuf:"bytes,4,rep,name=huCard" json:"huCard,omitempty"`
	UserId           *uint32        `protobuf:"varint,5,opt,name=UserId" json:"UserId,omitempty"`
	HandCardCount    *int32         `protobuf:"varint,6,opt,name=handCardCount" json:"handCardCount,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerCard) Reset()                    { *m = PlayerCard{} }
func (m *PlayerCard) String() string            { return proto.CompactTextString(m) }
func (*PlayerCard) ProtoMessage()               {}
func (*PlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *PlayerCard) GetHandCard() []*CardInfo {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *PlayerCard) GetComposeCard() []*ComposeCard {
	if m != nil {
		return m.ComposeCard
	}
	return nil
}

func (m *PlayerCard) GetOutCard() []*CardInfo {
	if m != nil {
		return m.OutCard
	}
	return nil
}

func (m *PlayerCard) GetHuCard() []*CardInfo {
	if m != nil {
		return m.HuCard
	}
	return nil
}

func (m *PlayerCard) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerCard) GetHandCardCount() int32 {
	if m != nil && m.HandCardCount != nil {
		return *m.HandCardCount
	}
	return 0
}

// 赢牌信息：谁赢了多少
type WinCoinInfo struct {
	NickName         *string     `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	UserId           *uint32     `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	WinCoin          *int64      `protobuf:"varint,3,opt,name=winCoin" json:"winCoin,omitempty"`
	Coin             *int64      `protobuf:"varint,4,opt,name=coin" json:"coin,omitempty"`
	CardTitle        *string     `protobuf:"bytes,5,opt,name=cardTitle" json:"cardTitle,omitempty"`
	Cards            *PlayerCard `protobuf:"bytes,6,opt,name=cards" json:"cards,omitempty"`
	IsDealer         *bool       `protobuf:"varint,7,opt,name=isDealer" json:"isDealer,omitempty"`
	HuCount          *int32      `protobuf:"varint,8,opt,name=huCount" json:"huCount,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *WinCoinInfo) Reset()                    { *m = WinCoinInfo{} }
func (m *WinCoinInfo) String() string            { return proto.CompactTextString(m) }
func (*WinCoinInfo) ProtoMessage()               {}
func (*WinCoinInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *WinCoinInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WinCoinInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WinCoinInfo) GetWinCoin() int64 {
	if m != nil && m.WinCoin != nil {
		return *m.WinCoin
	}
	return 0
}

func (m *WinCoinInfo) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *WinCoinInfo) GetCardTitle() string {
	if m != nil && m.CardTitle != nil {
		return *m.CardTitle
	}
	return ""
}

func (m *WinCoinInfo) GetCards() *PlayerCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *WinCoinInfo) GetIsDealer() bool {
	if m != nil && m.IsDealer != nil {
		return *m.IsDealer
	}
	return false
}

func (m *WinCoinInfo) GetHuCount() int32 {
	if m != nil && m.HuCount != nil {
		return *m.HuCount
	}
	return 0
}

func init() {
	proto.RegisterType((*UserCoinBean)(nil), "yjprotogo.user_coin_bean")
	proto.RegisterType((*RoomTypeInfo)(nil), "yjprotogo.RoomTypeInfo")
	proto.RegisterType((*EndLotteryInfo)(nil), "yjprotogo.EndLotteryInfo")
	proto.RegisterType((*PlayOptions)(nil), "yjprotogo.PlayOptions")
	proto.RegisterType((*DeskGameInfo)(nil), "yjprotogo.DeskGameInfo")
	proto.RegisterType((*PlayerInfo)(nil), "yjprotogo.PlayerInfo")
	proto.RegisterType((*CardInfo)(nil), "yjprotogo.CardInfo")
	proto.RegisterType((*ComposeCard)(nil), "yjprotogo.ComposeCard")
	proto.RegisterType((*PlayerCard)(nil), "yjprotogo.PlayerCard")
	proto.RegisterType((*WinCoinInfo)(nil), "yjprotogo.WinCoinInfo")
	proto.RegisterEnum("yjprotogo.CcmjProtoId", CcmjProtoId_name, CcmjProtoId_value)
	proto.RegisterEnum("yjprotogo.RECONNECT_TYPE", RECONNECT_TYPE_name, RECONNECT_TYPE_value)
	proto.RegisterEnum("yjprotogo.ComposeCardType", ComposeCardType_name, ComposeCardType_value)
	proto.RegisterEnum("yjprotogo.DeskGameStatus", DeskGameStatus_name, DeskGameStatus_value)
	proto.RegisterEnum("yjprotogo.PaiType", PaiType_name, PaiType_value)
	proto.RegisterEnum("yjprotogo.MJRoomType", MJRoomType_name, MJRoomType_value)
}

var fileDescriptor6 = []byte{
	// 1697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0x5d, 0x72, 0x1b, 0x4b,
	0x15, 0x8e, 0xfe, 0xa5, 0x23, 0x5b, 0x6e, 0xda, 0x49, 0xac, 0xf8, 0x26, 0xc1, 0xa8, 0x6e, 0x81,
	0x71, 0xea, 0x86, 0x22, 0x55, 0x50, 0x54, 0xc1, 0x8b, 0x22, 0xd9, 0x96, 0x5c, 0xb6, 0xac, 0x8c,
	0x1d, 0x52, 0xc9, 0xcb, 0xd0, 0xd2, 0x34, 0xa3, 0x4e, 0xa4, 0x1e, 0x31, 0x3f, 0x89, 0xbd, 0x04,
	0x1e, 0xd9, 0x00, 0x9b, 0xe0, 0xf9, 0xee, 0x80, 0xbd, 0xc0, 0x12, 0x6e, 0x9d, 0xd3, 0x33, 0x9a,
	0x96, 0x6c, 0xdf, 0xb7, 0x3e, 0xdf, 0xf9, 0xe9, 0xf3, 0xdf, 0x33, 0xb0, 0xb7, 0xf8, 0xec, 0x4e,
	0x67, 0x42, 0xfb, 0xd3, 0x59, 0xa2, 0xdd, 0x89, 0x88, 0xe4, 0xeb, 0x65, 0x18, 0xc4, 0x01, 0x6f,
	0xdc, 0x7e, 0xa6, 0x83, 0x1f, 0xec, 0xef, 0x4e, 0x83, 0xc5, 0x22, 0xd0, 0xee, 0x74, 0xae, 0xa4,
	0x8e, 0x0d, 0xbf, 0xf3, 0x17, 0x68, 0x25, 0x91, 0x0c, 0xdd, 0x69, 0xa0, 0xb4, 0x3b, 0x91, 0x42,
	0xf3, 0xa7, 0x50, 0x45, 0x64, 0xe8, 0xb5, 0x0b, 0x07, 0x85, 0xc3, 0x6d, 0x27, 0xa5, 0x38, 0x87,
	0x32, 0x0a, 0xb5, 0x8b, 0x07, 0x85, 0xc3, 0x92, 0x43, 0xe7, 0xce, 0x8f, 0x05, 0xd8, 0x72, 0x82,
	0x60, 0x71, 0x7d, 0xbb, 0x94, 0x43, 0xfd, 0xf7, 0x80, 0xff, 0x01, 0x60, 0xf1, 0x39, 0x43, 0xc8,
	0x40, 0xeb, 0xcd, 0x93, 0xd7, 0x2b, 0x1f, 0x5e, 0x5f, 0x9c, 0x65, 0x4c, 0xc7, 0x12, 0xe4, 0x2f,
	0x01, 0x26, 0x81, 0x08, 0xbd, 0xa8, 0x17, 0x24, 0x31, 0xdd, 0x50, 0x71, 0x2c, 0x84, 0x3f, 0x87,
	0x06, 0xc6, 0xf4, 0x57, 0x31, 0x4f, 0x64, 0xbb, 0x44, 0x0e, 0xe4, 0x00, 0xff, 0x13, 0x34, 0x97,
	0x73, 0x71, 0x7b, 0xb9, 0x8c, 0x55, 0xa0, 0xa3, 0x76, 0xf9, 0xa0, 0x70, 0xd8, 0x7c, 0xf3, 0xd4,
	0xba, 0x75, 0x9c, 0x73, 0x1d, 0x5b, 0xb4, 0xf3, 0xef, 0x12, 0xb4, 0x8e, 0xb5, 0x77, 0x1e, 0xc4,
	0xb1, 0x0c, 0x6f, 0x29, 0x82, 0x87, 0xc2, 0xdf, 0x87, 0xba, 0x56, 0xd3, 0x2f, 0x23, 0xb1, 0x90,
	0xe4, 0x60, 0xc3, 0x59, 0xd1, 0xa8, 0x33, 0x51, 0xfe, 0x07, 0xa5, 0xc9, 0xb7, 0xba, 0x93, 0x52,
	0xbc, 0x0d, 0x35, 0x15, 0x5d, 0x7e, 0xd3, 0x32, 0x24, 0xa7, 0xea, 0x4e, 0x46, 0x22, 0xe7, 0x9b,
	0xd2, 0x3d, 0xcc, 0x67, 0x85, 0xc2, 0xc9, 0x48, 0xe4, 0x4c, 0x83, 0x44, 0xc7, 0x83, 0xa4, 0x5d,
	0xa5, 0x3c, 0x64, 0x24, 0x26, 0x81, 0x8e, 0x9f, 0xd4, 0x45, 0xd0, 0xae, 0x11, 0x2f, 0x07, 0x78,
	0x07, 0xb6, 0x88, 0xe8, 0x2b, 0xa1, 0xc7, 0x22, 0x68, 0xd7, 0x49, 0x60, 0x0d, 0xe3, 0x07, 0xd0,
	0x24, 0xba, 0xab, 0x4f, 0x85, 0xf6, 0xdb, 0x0d, 0x12, 0xb1, 0x21, 0xfe, 0x3d, 0x6c, 0x13, 0x79,
	0xa1, 0xb4, 0x4f, 0x32, 0x40, 0x32, 0xeb, 0xe0, 0x4a, 0x0a, 0xed, 0x92, 0x54, 0xd3, 0x92, 0xca,
	0xc0, 0x95, 0x47, 0xbd, 0x99, 0x38, 0x53, 0x22, 0x68, 0x6f, 0x59, 0x1e, 0xa5, 0x18, 0x15, 0x5e,
	0x46, 0xf1, 0x69, 0xa2, 0x31, 0x49, 0xdb, 0x94, 0x24, 0x0b, 0xe9, 0xfc, 0xaf, 0x00, 0x4d, 0xab,
	0x7a, 0xfc, 0x08, 0x98, 0x67, 0x82, 0x79, 0x2b, 0x82, 0x2b, 0xa1, 0xcf, 0x94, 0xa0, 0x3a, 0xd5,
	0x9d, 0x3b, 0x38, 0xde, 0x7f, 0xa3, 0x44, 0x70, 0xa6, 0x4e, 0xa4, 0xea, 0x0b, 0xd3, 0xb8, 0x75,
	0x67, 0x0d, 0xc3, 0xfb, 0x23, 0xa1, 0x4f, 0xa4, 0xf6, 0x51, 0xc2, 0x54, 0xcf, 0x42, 0xf0, 0xbe,
	0x1b, 0x25, 0xfa, 0x42, 0x5f, 0x25, 0x42, 0x7f, 0x9a, 0x09, 0x7d, 0xae, 0xd2, 0x52, 0xde, 0xc1,
	0xb1, 0x3e, 0x9e, 0x50, 0xef, 0x12, 0x79, 0x21, 0x4d, 0x55, 0xeb, 0x4e, 0x0e, 0xf0, 0x5f, 0x9b,
	0x41, 0xeb, 0x61, 0xf4, 0xe7, 0x6a, 0xa1, 0xe2, 0xb4, 0xbc, 0x1b, 0x68, 0xe7, 0x9f, 0x65, 0xd8,
	0xea, 0xcb, 0xe8, 0xcb, 0xa9, 0x58, 0x98, 0x91, 0x7a, 0x09, 0x80, 0xe7, 0xab, 0x58, 0xc4, 0x49,
	0x44, 0xc1, 0x56, 0x1c, 0x0b, 0xe1, 0x7f, 0x86, 0xad, 0xd0, 0x1a, 0x41, 0x0a, 0xb3, 0xf9, 0x66,
	0xcf, 0x6a, 0x7f, 0x7b, 0x42, 0x9d, 0x35, 0x61, 0xf4, 0x19, 0xe7, 0x41, 0x86, 0xa3, 0x64, 0x41,
	0xe1, 0x57, 0x9c, 0x1c, 0xc0, 0x0c, 0x8a, 0x69, 0xac, 0xbe, 0xca, 0xf7, 0x66, 0x22, 0xca, 0x34,
	0x11, 0x6b, 0x18, 0xba, 0x87, 0x74, 0xa0, 0xaf, 0xd5, 0x42, 0x52, 0xd8, 0x15, 0xc7, 0x42, 0x28,
	0x2b, 0x72, 0x2e, 0x6e, 0x89, 0x6d, 0x42, 0xce, 0x01, 0x7e, 0x08, 0x3b, 0x7a, 0xa8, 0x55, 0xdc,
	0xcd, 0x4d, 0x98, 0xce, 0xde, 0x84, 0x31, 0x7f, 0x04, 0xf5, 0x57, 0xc6, 0x4c, 0x87, 0x6f, 0xa0,
	0xe8, 0xb3, 0xd2, 0x2a, 0xc6, 0x98, 0x69, 0xbc, 0x1a, 0x34, 0x5e, 0x6b, 0x18, 0xf5, 0x6f, 0x12,
	0x86, 0xd8, 0x58, 0x94, 0xf9, 0x55, 0x97, 0xdb, 0x20, 0xde, 0x18, 0x07, 0xb1, 0x98, 0xe7, 0x62,
	0xa6, 0xcd, 0x37, 0x50, 0xcc, 0x00, 0xe6, 0x74, 0x94, 0x2c, 0x26, 0x32, 0xa4, 0x2e, 0x6f, 0x38,
	0x16, 0x82, 0x53, 0x17, 0xca, 0x85, 0x50, 0xba, 0x87, 0xfb, 0x8c, 0x9a, 0xbc, 0xe2, 0xd8, 0x10,
	0xee, 0x8f, 0xb7, 0x42, 0x7f, 0x91, 0x61, 0xbb, 0x65, 0x76, 0x8e, 0xa1, 0x3a, 0xff, 0x2d, 0x01,
	0x8c, 0xa9, 0x1a, 0x54, 0xac, 0x7d, 0xa8, 0xab, 0x28, 0x15, 0x34, 0x4d, 0xbf, 0xa2, 0x71, 0xf1,
	0x9a, 0xba, 0xa1, 0xc5, 0xb4, 0x07, 0x9e, 0x6c, 0xac, 0x40, 0xc3, 0x74, 0x2c, 0xc1, 0xd5, 0x52,
	0x2f, 0xe5, 0x4b, 0x7d, 0x6d, 0xd3, 0x95, 0x37, 0x36, 0x1d, 0x83, 0x52, 0x24, 0x6f, 0xd2, 0x32,
	0xe3, 0xd1, 0xda, 0x97, 0xd5, 0xb5, 0x7d, 0x69, 0xed, 0xbe, 0xda, 0xfa, 0xee, 0xc3, 0x6d, 0xe9,
	0x48, 0xe1, 0xdd, 0xa6, 0x15, 0x4c, 0x29, 0xc4, 0xf5, 0x20, 0x19, 0x0b, 0x95, 0x2e, 0xa6, 0x94,
	0xe2, 0x3f, 0x40, 0xf5, 0xdb, 0x0d, 0xb5, 0x36, 0xdc, 0x09, 0xeb, 0x83, 0x54, 0x37, 0x4a, 0x53,
	0x63, 0xa7, 0x42, 0x1b, 0xf3, 0xd2, 0xbc, 0x33, 0x2f, 0xcf, 0xa1, 0x21, 0x7c, 0xa9, 0xe3, 0x8b,
	0xc0, 0x93, 0x54, 0xad, 0xba, 0x93, 0x03, 0xbc, 0x05, 0x45, 0xb5, 0xa4, 0x1a, 0x35, 0x9c, 0xa2,
	0x5a, 0xa2, 0x34, 0xe6, 0x38, 0xb8, 0x56, 0xda, 0xa7, 0xea, 0xd4, 0x9d, 0x1c, 0xc0, 0x20, 0x85,
	0xe7, 0x85, 0x32, 0x8a, 0xda, 0x3b, 0xa4, 0x92, 0x91, 0x98, 0xd8, 0x48, 0xc5, 0xb2, 0xcd, 0xe8,
	0x7e, 0x3a, 0x77, 0xfa, 0x50, 0xc7, 0xa4, 0x93, 0x97, 0x1c, 0xca, 0x71, 0xf6, 0x44, 0x56, 0x1c,
	0x3a, 0xf3, 0xc7, 0x50, 0xf9, 0x4a, 0x2f, 0x9c, 0x79, 0x00, 0x0d, 0x41, 0x1e, 0x79, 0xe9, 0x6c,
	0x16, 0x95, 0xd7, 0x99, 0x40, 0xb3, 0x17, 0x2c, 0x96, 0x41, 0x24, 0xa9, 0x82, 0x2b, 0xa5, 0x82,
	0xad, 0x94, 0x99, 0x2f, 0x5a, 0xe6, 0x7f, 0x0b, 0x95, 0x29, 0x75, 0x60, 0xe9, 0xa0, 0x74, 0xd8,
	0x7c, 0xb3, 0x6b, 0xa5, 0x31, 0x73, 0xcb, 0x31, 0x12, 0x9d, 0x7f, 0x15, 0xb3, 0xc6, 0xa3, 0x3b,
	0x7e, 0x07, 0xf5, 0x99, 0xd0, 0x1e, 0xb5, 0x56, 0xe1, 0x61, 0xe5, 0x95, 0x10, 0xbe, 0xc8, 0xd3,
	0xdc, 0xc7, 0x76, 0x91, 0x74, 0xec, 0x17, 0xd9, 0x8a, 0xc0, 0xb1, 0x45, 0xf9, 0x0f, 0x50, 0x0b,
	0x92, 0x98, 0xb4, 0x7e, 0xc6, 0xcd, 0x4c, 0x86, 0xbf, 0x82, 0xea, 0x2c, 0x21, 0xe9, 0xf2, 0xc3,
	0xd2, 0xa9, 0x08, 0x36, 0x58, 0xba, 0xc8, 0x2a, 0xa6, 0x55, 0xd3, 0x15, 0xf6, 0x3d, 0x6c, 0x67,
	0x9e, 0x9b, 0x39, 0x37, 0x6b, 0x6a, 0x1d, 0xec, 0xfc, 0xbf, 0x00, 0xcd, 0x0f, 0xe6, 0x91, 0xce,
	0xa6, 0x71, 0x35, 0x26, 0x85, 0xbb, 0x1f, 0x04, 0xe9, 0x50, 0x14, 0x37, 0x87, 0x22, 0x7b, 0xf6,
	0x4b, 0xeb, 0xcf, 0x7e, 0x36, 0x88, 0x65, 0x6b, 0x10, 0xf1, 0xc1, 0x17, 0xa1, 0x77, 0xad, 0xe2,
	0xb9, 0xd9, 0xac, 0x0d, 0x27, 0x07, 0xf8, 0xab, 0xac, 0x9c, 0xd5, 0x9f, 0x1b, 0x76, 0x23, 0x63,
	0x56, 0x47, 0x5f, 0x8a, 0xf9, 0x6a, 0x1c, 0x57, 0x34, 0x3a, 0x35, 0x4b, 0x4c, 0xe0, 0x66, 0x20,
	0x33, 0xf2, 0xe8, 0x3f, 0x35, 0xd8, 0x9a, 0x4e, 0x17, 0x9f, 0x5d, 0x32, 0x3c, 0xc4, 0x66, 0x63,
	0xca, 0x73, 0x97, 0xbf, 0xff, 0xa3, 0x3b, 0x93, 0x22, 0x8c, 0x27, 0x52, 0xc4, 0xec, 0x11, 0x7f,
	0x06, 0x4f, 0x52, 0x34, 0x94, 0xff, 0x70, 0xa7, 0xa1, 0x14, 0xb1, 0xc4, 0x27, 0x8c, 0x15, 0x2c,
	0x96, 0x98, 0x7e, 0xb1, 0x59, 0x45, 0xde, 0x86, 0xc7, 0x96, 0x96, 0xd4, 0xb1, 0x0c, 0x89, 0x53,
	0xb2, 0x38, 0xa8, 0x94, 0x73, 0xca, 0xfc, 0x57, 0xf0, 0xc2, 0xd2, 0xf1, 0x54, 0x14, 0x05, 0xf3,
	0xaf, 0xd2, 0x9d, 0x48, 0x5f, 0x69, 0x1c, 0x71, 0x56, 0xb1, 0x44, 0x50, 0xf9, 0x1e, 0x91, 0x2a,
	0x7f, 0x01, 0xcf, 0x52, 0x91, 0x7b, 0xd8, 0x35, 0xbe, 0x07, 0xbb, 0x96, 0x05, 0x5c, 0xe4, 0xf8,
	0xc2, 0xb0, 0xba, 0x15, 0x3d, 0xde, 0x1e, 0xe2, 0xd2, 0x62, 0x0d, 0x0b, 0x25, 0x71, 0x42, 0x81,
	0xef, 0xc3, 0x53, 0x0b, 0x35, 0x1b, 0xf7, 0x18, 0x23, 0x61, 0xcd, 0x8d, 0xa4, 0xa4, 0xbc, 0x1b,
	0x15, 0xb3, 0x2d, 0xfe, 0x12, 0xf6, 0x2d, 0x96, 0x2f, 0x16, 0xd2, 0xf5, 0xa4, 0x98, 0xbb, 0x54,
	0x45, 0xb6, 0xcd, 0xbf, 0x83, 0xbd, 0x4d, 0x7e, 0xb0, 0x94, 0x5a, 0x69, 0x9f, 0xb5, 0xf8, 0x73,
	0x68, 0xdf, 0x61, 0x7e, 0x95, 0x61, 0x9c, 0x84, 0x9a, 0xed, 0x6c, 0xe4, 0x8e, 0xb8, 0x91, 0xd4,
	0x9e, 0x1b, 0x24, 0x31, 0x99, 0x67, 0x6c, 0x23, 0x77, 0xf7, 0x88, 0xfc, 0x82, 0x73, 0x68, 0xd9,
	0xb5, 0x9e, 0x29, 0xc6, 0x2d, 0x8c, 0x8a, 0x3c, 0x53, 0x6c, 0xd7, 0xf2, 0x65, 0x75, 0x9b, 0x98,
	0xc6, 0xee, 0x52, 0x6a, 0x9f, 0x3d, 0xbe, 0xcf, 0xd3, 0x15, 0xf7, 0xc9, 0x43, 0xba, 0xbe, 0xd0,
	0x3e, 0x7b, 0xfa, 0x90, 0x2e, 0x71, 0xf7, 0xac, 0x04, 0xad, 0xeb, 0x26, 0x01, 0x6b, 0xdf, 0x97,
	0xbd, 0x8c, 0xf9, 0xcc, 0x4a, 0xfd, 0x9a, 0xe6, 0x24, 0x21, 0xcb, 0xfb, 0xf7, 0x95, 0xc6, 0xe2,
	0x7f, 0xb7, 0xd1, 0xcf, 0xc4, 0x8f, 0xb1, 0x2e, 0xcf, 0x37, 0xfa, 0x39, 0xe7, 0xbc, 0xd8, 0xe8,
	0x04, 0x53, 0x6e, 0x31, 0x11, 0x01, 0x7b, 0x79, 0x5f, 0x98, 0xf4, 0x83, 0x87, 0xdc, 0x5f, 0x5a,
	0xed, 0xb5, 0xe6, 0xec, 0x2c, 0x61, 0x07, 0x47, 0xaf, 0xa0, 0xe5, 0x1c, 0xf7, 0x2e, 0x47, 0xa3,
	0xe3, 0xde, 0xb5, 0x7b, 0xfd, 0x71, 0x7c, 0xcc, 0x01, 0xaa, 0xa3, 0x4b, 0xe7, 0xa2, 0x7b, 0xce,
	0x0a, 0x7c, 0x1b, 0x1a, 0x2b, 0x2e, 0x2b, 0x1e, 0xfd, 0x0d, 0x76, 0xac, 0x5d, 0x4c, 0x3f, 0x63,
	0x2d, 0x80, 0x9e, 0x7b, 0x31, 0x1c, 0x9d, 0x9e, 0x76, 0x47, 0xa7, 0xac, 0xc0, 0xb7, 0xa0, 0xde,
	0x73, 0xdf, 0x76, 0x89, 0x2a, 0x1a, 0xaa, 0x3b, 0x22, 0xaa, 0x84, 0x96, 0x7b, 0xee, 0xf8, 0x78,
	0x74, 0xca, 0xca, 0xbc, 0x01, 0x95, 0x9e, 0xdb, 0x1b, 0x0c, 0x59, 0xc5, 0xc0, 0x27, 0x08, 0x57,
	0x8f, 0xde, 0x43, 0x2b, 0xfb, 0x9e, 0x4d, 0x5f, 0xe0, 0x3a, 0x94, 0x87, 0xa3, 0xe1, 0x35, 0x7b,
	0x84, 0x2a, 0x27, 0xdd, 0x71, 0x77, 0xc8, 0x0a, 0xbc, 0x09, 0xb5, 0xf1, 0x79, 0xf7, 0xe3, 0x90,
	0x2e, 0x69, 0x42, 0xad, 0x3f, 0x1c, 0x9d, 0xbe, 0x7b, 0x7f, 0x6c, 0xee, 0x38, 0x19, 0x8e, 0x86,
	0x57, 0x03, 0x56, 0x46, 0xd5, 0xf1, 0xb0, 0x7b, 0xc9, 0x2a, 0x47, 0x3f, 0x16, 0xa0, 0x36, 0x16,
	0x2a, 0xf3, 0x78, 0xe0, 0xf6, 0x13, 0xd5, 0x4f, 0xd4, 0x20, 0x61, 0x05, 0x43, 0xbf, 0x53, 0xda,
	0xff, 0xa8, 0xae, 0xa4, 0x31, 0x87, 0x74, 0x3f, 0x51, 0xac, 0xc4, 0x77, 0xa0, 0x39, 0x70, 0xfb,
	0x42, 0x7d, 0xc4, 0xdf, 0x80, 0x84, 0x95, 0x0d, 0x70, 0x1e, 0x68, 0xdf, 0x48, 0x54, 0x8c, 0xfa,
	0x99, 0x12, 0xda, 0x47, 0xba, 0x8a, 0x29, 0x1b, 0xb8, 0x17, 0x52, 0xa3, 0x45, 0x56, 0xe3, 0x0c,
	0xb6, 0x06, 0xee, 0xa7, 0x59, 0xa0, 0x7d, 0xfc, 0xf0, 0xf7, 0x59, 0x9d, 0xef, 0xc2, 0x8e, 0xb9,
	0x2f, 0xb7, 0xd2, 0x30, 0x66, 0x11, 0x34, 0x00, 0x60, 0xe6, 0x06, 0xee, 0x58, 0x69, 0x7f, 0x90,
	0xb0, 0xe6, 0xd1, 0x6f, 0x00, 0xf2, 0x9f, 0x61, 0x6c, 0x84, 0xec, 0xbb, 0xdc, 0xb5, 0x7f, 0xe5,
	0x19, 0x1b, 0x3f, 0xfa, 0x29, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x94, 0xa7, 0x48, 0xdd, 0x0f, 0x00,
	0x00,
}
