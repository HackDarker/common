// Code generated by protoc-gen-go.
// source: tdk_data.proto
// DO NOT EDIT!

package yjprotogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TdkDeskUserData struct {
	Userid           *uint32 `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Headurl          *string `protobuf:"bytes,3,opt,name=headurl" json:"headurl,omitempty"`
	Score            *int32  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	Already          *bool   `protobuf:"varint,5,opt,name=already" json:"already,omitempty"`
	Fold             *bool   `protobuf:"varint,6,opt,name=fold" json:"fold,omitempty"`
	Isowner          *bool   `protobuf:"varint,7,opt,name=isowner" json:"isowner,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TdkDeskUserData) Reset()                    { *m = TdkDeskUserData{} }
func (m *TdkDeskUserData) String() string            { return proto.CompactTextString(m) }
func (*TdkDeskUserData) ProtoMessage()               {}
func (*TdkDeskUserData) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *TdkDeskUserData) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkDeskUserData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TdkDeskUserData) GetHeadurl() string {
	if m != nil && m.Headurl != nil {
		return *m.Headurl
	}
	return ""
}

func (m *TdkDeskUserData) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TdkDeskUserData) GetAlready() bool {
	if m != nil && m.Already != nil {
		return *m.Already
	}
	return false
}

func (m *TdkDeskUserData) GetFold() bool {
	if m != nil && m.Fold != nil {
		return *m.Fold
	}
	return false
}

func (m *TdkDeskUserData) GetIsowner() bool {
	if m != nil && m.Isowner != nil {
		return *m.Isowner
	}
	return false
}

type TdkUserPokerData struct {
	Userid           *uint32  `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Pokerlist        []uint32 `protobuf:"varint,2,rep,name=pokerlist" json:"pokerlist,omitempty"`
	Score            *uint32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Borrow           *bool    `protobuf:"varint,4,opt,name=borrow" json:"borrow,omitempty"`
	Pubscore         *uint32  `protobuf:"varint,5,opt,name=pubscore" json:"pubscore,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TdkUserPokerData) Reset()                    { *m = TdkUserPokerData{} }
func (m *TdkUserPokerData) String() string            { return proto.CompactTextString(m) }
func (*TdkUserPokerData) ProtoMessage()               {}
func (*TdkUserPokerData) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *TdkUserPokerData) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkUserPokerData) GetPokerlist() []uint32 {
	if m != nil {
		return m.Pokerlist
	}
	return nil
}

func (m *TdkUserPokerData) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TdkUserPokerData) GetBorrow() bool {
	if m != nil && m.Borrow != nil {
		return *m.Borrow
	}
	return false
}

func (m *TdkUserPokerData) GetPubscore() uint32 {
	if m != nil && m.Pubscore != nil {
		return *m.Pubscore
	}
	return 0
}

type TdkDisUserData struct {
	Userid           *uint32 `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Winnum           *uint32 `protobuf:"varint,2,opt,name=winnum" json:"winnum,omitempty"`
	Languonum        *uint32 `protobuf:"varint,3,opt,name=languonum" json:"languonum,omitempty"`
	Baozinum         *uint32 `protobuf:"varint,4,opt,name=baozinum" json:"baozinum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TdkDisUserData) Reset()                    { *m = TdkDisUserData{} }
func (m *TdkDisUserData) String() string            { return proto.CompactTextString(m) }
func (*TdkDisUserData) ProtoMessage()               {}
func (*TdkDisUserData) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *TdkDisUserData) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkDisUserData) GetWinnum() uint32 {
	if m != nil && m.Winnum != nil {
		return *m.Winnum
	}
	return 0
}

func (m *TdkDisUserData) GetLanguonum() uint32 {
	if m != nil && m.Languonum != nil {
		return *m.Languonum
	}
	return 0
}

func (m *TdkDisUserData) GetBaozinum() uint32 {
	if m != nil && m.Baozinum != nil {
		return *m.Baozinum
	}
	return 0
}

type TdkDeskConfig struct {
	Roundcount       *uint32 `protobuf:"varint,1,opt,name=roundcount" json:"roundcount,omitempty"`
	Playercount      *uint32 `protobuf:"varint,2,opt,name=playercount" json:"playercount,omitempty"`
	Allinrate        *uint32 `protobuf:"varint,3,opt,name=allinrate" json:"allinrate,omitempty"`
	Basecoin         *uint32 `protobuf:"varint,4,opt,name=basecoin" json:"basecoin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TdkDeskConfig) Reset()                    { *m = TdkDeskConfig{} }
func (m *TdkDeskConfig) String() string            { return proto.CompactTextString(m) }
func (*TdkDeskConfig) ProtoMessage()               {}
func (*TdkDeskConfig) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *TdkDeskConfig) GetRoundcount() uint32 {
	if m != nil && m.Roundcount != nil {
		return *m.Roundcount
	}
	return 0
}

func (m *TdkDeskConfig) GetPlayercount() uint32 {
	if m != nil && m.Playercount != nil {
		return *m.Playercount
	}
	return 0
}

func (m *TdkDeskConfig) GetAllinrate() uint32 {
	if m != nil && m.Allinrate != nil {
		return *m.Allinrate
	}
	return 0
}

func (m *TdkDeskConfig) GetBasecoin() uint32 {
	if m != nil && m.Basecoin != nil {
		return *m.Basecoin
	}
	return 0
}

type TdkZhanJiData struct {
	Userid           *uint32 `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Winnum           *uint32 `protobuf:"varint,2,opt,name=winnum" json:"winnum,omitempty"`
	Languonum        *uint32 `protobuf:"varint,3,opt,name=languonum" json:"languonum,omitempty"`
	Baozinum         *uint32 `protobuf:"varint,4,opt,name=baozinum" json:"baozinum,omitempty"`
	Score            *int32  `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	Isowner          *bool   `protobuf:"varint,6,opt,name=isowner" json:"isowner,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TdkZhanJiData) Reset()                    { *m = TdkZhanJiData{} }
func (m *TdkZhanJiData) String() string            { return proto.CompactTextString(m) }
func (*TdkZhanJiData) ProtoMessage()               {}
func (*TdkZhanJiData) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *TdkZhanJiData) GetUserid() uint32 {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return 0
}

func (m *TdkZhanJiData) GetWinnum() uint32 {
	if m != nil && m.Winnum != nil {
		return *m.Winnum
	}
	return 0
}

func (m *TdkZhanJiData) GetLanguonum() uint32 {
	if m != nil && m.Languonum != nil {
		return *m.Languonum
	}
	return 0
}

func (m *TdkZhanJiData) GetBaozinum() uint32 {
	if m != nil && m.Baozinum != nil {
		return *m.Baozinum
	}
	return 0
}

func (m *TdkZhanJiData) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TdkZhanJiData) GetIsowner() bool {
	if m != nil && m.Isowner != nil {
		return *m.Isowner
	}
	return false
}

func init() {
	proto.RegisterType((*TdkDeskUserData)(nil), "yjprotogo.TdkDeskUserData")
	proto.RegisterType((*TdkUserPokerData)(nil), "yjprotogo.TdkUserPokerData")
	proto.RegisterType((*TdkDisUserData)(nil), "yjprotogo.TdkDisUserData")
	proto.RegisterType((*TdkDeskConfig)(nil), "yjprotogo.TdkDeskConfig")
	proto.RegisterType((*TdkZhanJiData)(nil), "yjprotogo.TdkZhanJiData")
}

var fileDescriptor14 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0x41, 0x6e, 0xea, 0x30,
	0x10, 0x86, 0x65, 0x20, 0x01, 0xe6, 0x29, 0xbc, 0x27, 0xeb, 0x09, 0x59, 0x55, 0x55, 0x45, 0x59,
	0x65, 0xd5, 0x4b, 0x94, 0x55, 0x57, 0x55, 0x44, 0x37, 0xdd, 0x54, 0x06, 0x1b, 0x70, 0x63, 0xec,
	0xc8, 0x4e, 0x84, 0xe0, 0x0a, 0xdd, 0xf5, 0x16, 0x3d, 0x40, 0xef, 0x57, 0xd9, 0x4e, 0x1a, 0xda,
	0x0d, 0xbb, 0xee, 0xe6, 0xff, 0x33, 0x93, 0xf9, 0xf4, 0x7b, 0x60, 0x56, 0xb3, 0xf2, 0x99, 0xd1,
	0x9a, 0xde, 0x56, 0x46, 0xd7, 0x1a, 0x4f, 0x8f, 0x2f, 0xbe, 0xd8, 0xea, 0xec, 0x03, 0xc1, 0xdf,
	0x25, 0x2b, 0x17, 0xdc, 0x96, 0x8f, 0x96, 0x9b, 0x05, 0xad, 0x29, 0x9e, 0x43, 0xdc, 0x58, 0x6e,
	0x04, 0x23, 0x28, 0x45, 0x79, 0x52, 0xb4, 0x0a, 0x63, 0x18, 0x29, 0xba, 0xe7, 0x64, 0x90, 0xa2,
	0x7c, 0x5a, 0xf8, 0x1a, 0x13, 0x18, 0xef, 0x38, 0x65, 0x8d, 0x91, 0x64, 0xe8, 0xed, 0x4e, 0xe2,
	0xff, 0x10, 0xd9, 0xb5, 0x36, 0x9c, 0x8c, 0x52, 0x94, 0x47, 0x45, 0x10, 0xae, 0x9f, 0x4a, 0xc3,
	0x29, 0x3b, 0x92, 0x28, 0x45, 0xf9, 0xa4, 0xe8, 0xa4, 0xfb, 0xfb, 0x46, 0x4b, 0x46, 0x62, 0x6f,
	0xfb, 0xda, 0x75, 0x0b, 0xab, 0x0f, 0x8a, 0x1b, 0x32, 0x0e, 0xdd, 0xad, 0xcc, 0xde, 0x10, 0xfc,
	0x5b, 0x32, 0xcf, 0xfc, 0xa0, 0xcb, 0x0b, 0xe0, 0xd7, 0x30, 0xad, 0x5c, 0x93, 0x14, 0xb6, 0x26,
	0x83, 0x74, 0x98, 0x27, 0x45, 0x6f, 0xf4, 0xa0, 0x43, 0x3f, 0xd4, 0x82, 0xce, 0x21, 0x5e, 0x69,
	0x63, 0xf4, 0xc1, 0xf3, 0x4f, 0x8a, 0x56, 0xe1, 0x2b, 0x98, 0x54, 0xcd, 0x2a, 0x0c, 0x44, 0x7e,
	0xe0, 0x4b, 0x67, 0x27, 0x98, 0xb9, 0x2c, 0x85, 0xbd, 0x18, 0xe5, 0x1c, 0xe2, 0x83, 0x50, 0xaa,
	0xd9, 0xfb, 0x30, 0x93, 0xa2, 0x55, 0x8e, 0x54, 0x52, 0xb5, 0x6d, 0xb4, 0xfb, 0x14, 0x78, 0x7a,
	0xc3, 0xed, 0x5e, 0x51, 0x7d, 0x12, 0xee, 0xe3, 0x28, 0xec, 0xee, 0x74, 0xf6, 0x8a, 0x20, 0x69,
	0x1f, 0xf2, 0x4e, 0xab, 0x8d, 0xd8, 0xe2, 0x1b, 0x00, 0xa3, 0x1b, 0xc5, 0xd6, 0xba, 0x51, 0x75,
	0xbb, 0xff, 0xcc, 0xc1, 0x29, 0xfc, 0xa9, 0x24, 0x3d, 0x72, 0x13, 0x1a, 0x02, 0xc8, 0xb9, 0xe5,
	0x68, 0xa8, 0x94, 0x42, 0x19, 0x5a, 0x77, 0xe9, 0xf4, 0x46, 0xa0, 0xb1, 0x7c, 0xad, 0x85, 0xea,
	0x69, 0x82, 0xce, 0xde, 0x03, 0xcd, 0xd3, 0x8e, 0xaa, 0x7b, 0xf1, 0xbb, 0x49, 0xf4, 0xef, 0x19,
	0xfd, 0x38, 0xbc, 0xee, 0x94, 0xe2, 0x6f, 0xa7, 0xf4, 0x19, 0x00, 0x00, 0xff, 0xff, 0x27, 0xda,
	0xd1, 0x20, 0x1e, 0x03, 0x00, 0x00,
}
